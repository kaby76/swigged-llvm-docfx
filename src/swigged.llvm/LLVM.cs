//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Swigged.LLVM {

public class LLVM {
  public unsafe static void InitializeCore(PassRegistryRef R) {
    LLVMPINVOKE.InitializeCore(R.Value);
  }

  public unsafe static void Shutdown() {
    LLVMPINVOKE.Shutdown();
  }

  public unsafe static string CreateMessage(string Message) {
    string ret = LLVMPINVOKE.CreateMessage(Message);
    return ret;
  }

  public unsafe static void DisposeMessage(string Message) {
    LLVMPINVOKE.DisposeMessage(Message);
  }

  public unsafe static ContextRef ContextCreate() {
        ContextRef ret = new ContextRef(LLVMPINVOKE.ContextCreate());
        return ret;
    }

  public unsafe static ContextRef GetGlobalContext() {
        ContextRef ret = new ContextRef(LLVMPINVOKE.GetGlobalContext());
        return ret;
    }

  public unsafe static System.IntPtr ContextGetDiagnosticContext(ContextRef C) { return LLVMPINVOKE.ContextGetDiagnosticContext(C.Value); }

  public unsafe static void ContextDispose(ContextRef C) {
    LLVMPINVOKE.ContextDispose(C.Value);
  }

  public unsafe static string GetDiagInfoDescription(DiagnosticInfoRef DI) {
    string ret = LLVMPINVOKE.GetDiagInfoDescription(DI.Value);
    return ret;
  }

  public unsafe static DiagnosticSeverity GetDiagInfoSeverity(DiagnosticInfoRef DI) {
    DiagnosticSeverity ret = (DiagnosticSeverity)LLVMPINVOKE.GetDiagInfoSeverity(DI.Value);
    return ret;
  }

  public unsafe static uint GetMDKindIDInContext(ContextRef C, string Name, uint SLen) {
    uint ret = LLVMPINVOKE.GetMDKindIDInContext(C.Value, Name, SLen);
    return ret;
  }

  public unsafe static uint GetMDKindID(string Name, uint SLen) {
    uint ret = LLVMPINVOKE.GetMDKindID(Name, SLen);
    return ret;
  }

  public unsafe static uint GetEnumAttributeKindForName(string Name, uint SLen) {
    uint ret = LLVMPINVOKE.GetEnumAttributeKindForName(Name, SLen);
    return ret;
  }

  public unsafe static uint GetLastEnumAttributeKind() {
    uint ret = LLVMPINVOKE.GetLastEnumAttributeKind();
    return ret;
  }

  public unsafe static AttributeRef CreateEnumAttribute(ContextRef C, uint KindID, ulong Val) {
        AttributeRef ret = new AttributeRef(LLVMPINVOKE.CreateEnumAttribute(C.Value, KindID, Val));
        return ret;
    }

  public unsafe static uint GetEnumAttributeKind(AttributeRef A) {
    uint ret = LLVMPINVOKE.GetEnumAttributeKind(A.Value);
    return ret;
  }

  public unsafe static ulong GetEnumAttributeValue(AttributeRef A) {
    ulong ret = LLVMPINVOKE.GetEnumAttributeValue(A.Value);
    return ret;
  }

  public unsafe static AttributeRef CreateStringAttribute(ContextRef C, string K, uint KLength, string V, uint VLength) {
        AttributeRef ret = new AttributeRef(LLVMPINVOKE.CreateStringAttribute(C.Value, K, KLength, V, VLength));
        return ret;
    }

  public unsafe static string GetStringAttributeKind(AttributeRef A, out uint Length) {
    string ret = LLVMPINVOKE.GetStringAttributeKind(A.Value, out Length);
    return ret;
  }

  public unsafe static string GetStringAttributeValue(AttributeRef A, out uint Length) {
    string ret = LLVMPINVOKE.GetStringAttributeValue(A.Value, out Length);
    return ret;
  }

  public unsafe static bool IsEnumAttribute(AttributeRef A) {
    bool ret = LLVMPINVOKE.IsEnumAttribute(A.Value);
    return ret;
  }

  public unsafe static bool IsStringAttribute(AttributeRef A) {
    bool ret = LLVMPINVOKE.IsStringAttribute(A.Value);
    return ret;
  }

  public unsafe static ModuleRef ModuleCreateWithName(string ModuleID) {
        ModuleRef ret = new ModuleRef(LLVMPINVOKE.ModuleCreateWithName(ModuleID));
        return ret;
    }

  public unsafe static ModuleRef ModuleCreateWithNameInContext(string ModuleID, ContextRef C) {
        ModuleRef ret = new ModuleRef(LLVMPINVOKE.ModuleCreateWithNameInContext(ModuleID, C.Value));
        return ret;
    }

  public unsafe static ModuleRef CloneModule(ModuleRef M) {
        ModuleRef ret = new ModuleRef(LLVMPINVOKE.CloneModule(M.Value));
        return ret;
    }

  public unsafe static void DisposeModule(ModuleRef M) {
    LLVMPINVOKE.DisposeModule(M.Value);
  }

  public unsafe static string GetModuleIdentifier(ModuleRef M, out System.IntPtr Len) {
    string ret = LLVMPINVOKE.GetModuleIdentifier(M.Value, out Len);
    return ret;
  }

  public unsafe static void SetModuleIdentifier(ModuleRef M, string Ident, uint Len) {
    LLVMPINVOKE.SetModuleIdentifier(M.Value, Ident, Len);
  }

  public unsafe static string GetDataLayoutStr(ModuleRef M) {
    string ret = LLVMPINVOKE.GetDataLayoutStr(M.Value);
    return ret;
  }

  public unsafe static string GetDataLayout(ModuleRef M) {
    string ret = LLVMPINVOKE.GetDataLayout(M.Value);
    return ret;
  }

  public unsafe static void SetDataLayout(ModuleRef M, string DataLayoutStr) {
    LLVMPINVOKE.SetDataLayout(M.Value, DataLayoutStr);
  }

  public unsafe static string GetTarget(ModuleRef M) {
    string ret = LLVMPINVOKE.GetTarget(M.Value);
    return ret;
  }

  public unsafe static void SetTarget(ModuleRef M, string Triple) {
    LLVMPINVOKE.SetTarget(M.Value, Triple);
  }

  public unsafe static void DumpModule(ModuleRef M) {
    LLVMPINVOKE.DumpModule(M.Value);
  }

  public unsafe static bool PrintModuleToFile(ModuleRef M, string Filename, out string ErrorMessage) {
    bool ret = LLVMPINVOKE.PrintModuleToFile(M.Value, Filename, out ErrorMessage);
    return ret;
  }

  public unsafe static string PrintModuleToString(ModuleRef M) {
    string ret = LLVMPINVOKE.PrintModuleToString(M.Value);
    return ret;
  }

  public unsafe static void SetModuleInlineAsm(ModuleRef M, string Asm) {
    LLVMPINVOKE.SetModuleInlineAsm(M.Value, Asm);
  }

  public unsafe static ContextRef GetModuleContext(ModuleRef M) {
        ContextRef ret = new ContextRef(LLVMPINVOKE.GetModuleContext(M.Value));
        return ret;
    }

  public unsafe static TypeRef GetTypeByName(ModuleRef M, string Name) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.GetTypeByName(M.Value, Name));
        return ret;
    }

  public unsafe static uint GetNamedMetadataNumOperands(ModuleRef M, string Name) {
    uint ret = LLVMPINVOKE.GetNamedMetadataNumOperands(M.Value, Name);
    return ret;
  }

  public unsafe static void GetNamedMetadataOperands(ModuleRef M, string Name, out ValueRef Dest) {
    LLVMPINVOKE.GetNamedMetadataOperands(M.Value, Name, out Dest.Value);
  }

  public unsafe static void AddNamedMetadataOperand(ModuleRef M, string Name, ValueRef Val) {
    LLVMPINVOKE.AddNamedMetadataOperand(M.Value, Name, Val.Value);
  }

  public unsafe static ValueRef AddFunction(ModuleRef M, string Name, TypeRef FunctionTy) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.AddFunction(M.Value, Name, FunctionTy.Value));
        return ret;
    }

  public unsafe static ValueRef GetNamedFunction(ModuleRef M, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetNamedFunction(M.Value, Name));
        return ret;
    }

  public unsafe static ValueRef GetFirstFunction(ModuleRef M) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetFirstFunction(M.Value));
        return ret;
    }

  public unsafe static ValueRef GetLastFunction(ModuleRef M) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetLastFunction(M.Value));
        return ret;
    }

  public unsafe static ValueRef GetNextFunction(ValueRef Fn) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetNextFunction(Fn.Value));
        return ret;
    }

  public unsafe static ValueRef GetPreviousFunction(ValueRef Fn) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetPreviousFunction(Fn.Value));
        return ret;
    }

  public unsafe static TypeKind GetTypeKind(TypeRef Ty) {
    TypeKind ret = (TypeKind)LLVMPINVOKE.GetTypeKind(Ty.Value);
    return ret;
  }

  public unsafe static bool TypeIsSized(TypeRef Ty) {
    bool ret = LLVMPINVOKE.TypeIsSized(Ty.Value);
    return ret;
  }

  public unsafe static ContextRef GetTypeContext(TypeRef Ty) {
        ContextRef ret = new ContextRef(LLVMPINVOKE.GetTypeContext(Ty.Value));
        return ret;
    }

  public unsafe static void DumpType(TypeRef Val) {
    LLVMPINVOKE.DumpType(Val.Value);
  }

  public unsafe static string PrintTypeToString(TypeRef Val) {
    string ret = LLVMPINVOKE.PrintTypeToString(Val.Value);
    return ret;
  }

  public unsafe static TypeRef Int1TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int1TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef Int8TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int8TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef Int16TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int16TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef Int32TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int32TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef Int64TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int64TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef Int128TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int128TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef IntTypeInContext(ContextRef C, uint NumBits) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.IntTypeInContext(C.Value, NumBits));
        return ret;
    }

  public unsafe static TypeRef Int1Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int1Type());
        return ret;
    }

  public unsafe static TypeRef Int8Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int8Type());
        return ret;
    }

  public unsafe static TypeRef Int16Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int16Type());
        return ret;
    }

  public unsafe static TypeRef Int32Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int32Type());
        return ret;
    }

  public unsafe static TypeRef Int64Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int64Type());
        return ret;
    }

  public unsafe static TypeRef Int128Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.Int128Type());
        return ret;
    }

  public unsafe static TypeRef IntType(uint NumBits) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.IntType(NumBits));
        return ret;
    }

  public unsafe static uint GetIntTypeWidth(TypeRef IntegerTy) {
    uint ret = LLVMPINVOKE.GetIntTypeWidth(IntegerTy.Value);
    return ret;
  }

  public unsafe static TypeRef HalfTypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.HalfTypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef FloatTypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.FloatTypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef DoubleTypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.DoubleTypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef X86FP80TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.X86FP80TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef FP128TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.FP128TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef PPCFP128TypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.PPCFP128TypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef HalfType() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.HalfType());
        return ret;
    }

  public unsafe static TypeRef FloatType() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.FloatType());
        return ret;
    }

  public unsafe static TypeRef DoubleType() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.DoubleType());
        return ret;
    }

  public unsafe static TypeRef X86FP80Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.X86FP80Type());
        return ret;
    }

  public unsafe static TypeRef FP128Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.FP128Type());
        return ret;
    }

  public unsafe static TypeRef PPCFP128Type() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.PPCFP128Type());
        return ret;
    }

  public unsafe static TypeRef FunctionType(TypeRef ReturnType, TypeRef[] ParamTypes, bool IsVarArg) {
    fixed (TypeRef* swig_ptrTo_ParamTypes = ParamTypes)
    {
          TypeRef ret = new TypeRef(LLVMPINVOKE.FunctionType(ReturnType.Value, (System.IntPtr)swig_ptrTo_ParamTypes, (uint)ParamTypes.Length, IsVarArg));
          return ret;
      }
  }

  public unsafe static bool IsFunctionVarArg(TypeRef FunctionTy) {
    bool ret = LLVMPINVOKE.IsFunctionVarArg(FunctionTy.Value);
    return ret;
  }

  public unsafe static TypeRef GetReturnType(TypeRef FunctionTy) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.GetReturnType(FunctionTy.Value));
        return ret;
    }

  public unsafe static uint CountParamTypes(TypeRef FunctionTy) {
    uint ret = LLVMPINVOKE.CountParamTypes(FunctionTy.Value);
    return ret;
  }

  public unsafe static void GetParamTypes(TypeRef FunctionTy, TypeRef[] Dest) {
    fixed (TypeRef* swig_ptrTo_Dest = Dest)
    {
      LLVMPINVOKE.GetParamTypes(FunctionTy.Value, (System.IntPtr)swig_ptrTo_Dest);
    }
  }

  public unsafe static TypeRef StructTypeInContext(ContextRef C, TypeRef[] ElementTypes, bool Packed) {
    fixed (TypeRef* swig_ptrTo_ElementTypes = ElementTypes)
    {
          TypeRef ret = new TypeRef(LLVMPINVOKE.StructTypeInContext(C.Value, (System.IntPtr)swig_ptrTo_ElementTypes, (uint)ElementTypes.Length, Packed));
          return ret;
      }
  }

  public unsafe static TypeRef StructType(TypeRef[] ElementTypes, bool Packed) {
    fixed (TypeRef* swig_ptrTo_ElementTypes = ElementTypes)
    {
          TypeRef ret = new TypeRef(LLVMPINVOKE.StructType((System.IntPtr)swig_ptrTo_ElementTypes, (uint)ElementTypes.Length, Packed));
          return ret;
      }
  }

  public unsafe static TypeRef StructCreateNamed(ContextRef C, string Name) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.StructCreateNamed(C.Value, Name));
        return ret;
    }

  public unsafe static string GetStructName(TypeRef Ty) {
    string ret = LLVMPINVOKE.GetStructName(Ty.Value);
    return ret;
  }

  public unsafe static void StructSetBody(TypeRef StructTy, TypeRef[] ElementTypes, bool Packed) {
    fixed (TypeRef* swig_ptrTo_ElementTypes = ElementTypes)
    {
      LLVMPINVOKE.StructSetBody(StructTy.Value, (System.IntPtr)swig_ptrTo_ElementTypes, (uint)ElementTypes.Length, Packed);
    }
  }

  public unsafe static uint CountStructElementTypes(TypeRef StructTy) {
    uint ret = LLVMPINVOKE.CountStructElementTypes(StructTy.Value);
    return ret;
  }

  public unsafe static void GetStructElementTypes(TypeRef StructTy, TypeRef[] Dest) {
    fixed (TypeRef* swig_ptrTo_Dest = Dest)
    {
      LLVMPINVOKE.GetStructElementTypes(StructTy.Value, (System.IntPtr)swig_ptrTo_Dest);
    }
  }

  public unsafe static TypeRef StructGetTypeAtIndex(TypeRef StructTy, uint i) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.StructGetTypeAtIndex(StructTy.Value, i));
        return ret;
    }

  public unsafe static bool IsPackedStruct(TypeRef StructTy) {
    bool ret = LLVMPINVOKE.IsPackedStruct(StructTy.Value);
    return ret;
  }

  public unsafe static bool IsOpaqueStruct(TypeRef StructTy) {
    bool ret = LLVMPINVOKE.IsOpaqueStruct(StructTy.Value);
    return ret;
  }

  public unsafe static TypeRef GetElementType(TypeRef Ty) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.GetElementType(Ty.Value));
        return ret;
    }

  public unsafe static TypeRef ArrayType(TypeRef ElementType, uint ElementCount) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.ArrayType(ElementType.Value, ElementCount));
        return ret;
    }

  public unsafe static uint GetArrayLength(TypeRef ArrayTy) {
    uint ret = LLVMPINVOKE.GetArrayLength(ArrayTy.Value);
    return ret;
  }

  public unsafe static TypeRef PointerType(TypeRef ElementType, uint AddressSpace) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.PointerType(ElementType.Value, AddressSpace));
        return ret;
    }

  public unsafe static uint GetPointerAddressSpace(TypeRef PointerTy) {
    uint ret = LLVMPINVOKE.GetPointerAddressSpace(PointerTy.Value);
    return ret;
  }

  public unsafe static TypeRef VectorType(TypeRef ElementType, uint ElementCount) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.VectorType(ElementType.Value, ElementCount));
        return ret;
    }

  public unsafe static uint GetVectorSize(TypeRef VectorTy) {
    uint ret = LLVMPINVOKE.GetVectorSize(VectorTy.Value);
    return ret;
  }

  public unsafe static TypeRef VoidTypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.VoidTypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef LabelTypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.LabelTypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef X86MMXTypeInContext(ContextRef C) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.X86MMXTypeInContext(C.Value));
        return ret;
    }

  public unsafe static TypeRef VoidType() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.VoidType());
        return ret;
    }

  public unsafe static TypeRef LabelType() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.LabelType());
        return ret;
    }

  public unsafe static TypeRef X86MMXType() {
        TypeRef ret = new TypeRef(LLVMPINVOKE.X86MMXType());
        return ret;
    }

  public unsafe static TypeRef TypeOf(ValueRef Val) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.TypeOf(Val.Value));
        return ret;
    }

  public unsafe static ValueKind GetValueKind(ValueRef Val) {
    ValueKind ret = (ValueKind)LLVMPINVOKE.GetValueKind(Val.Value);
    return ret;
  }

  public unsafe static string GetValueName(ValueRef Val) {
    string ret = LLVMPINVOKE.GetValueName(Val.Value);
    return ret;
  }

  public unsafe static void SetValueName(ValueRef Val, string Name) {
    LLVMPINVOKE.SetValueName(Val.Value, Name);
  }

  public unsafe static void DumpValue(ValueRef Val) {
    LLVMPINVOKE.DumpValue(Val.Value);
  }

  public unsafe static string PrintValueToString(ValueRef Val) {
    string ret = LLVMPINVOKE.PrintValueToString(Val.Value);
    return ret;
  }

  public unsafe static void ReplaceAllUsesWith(ValueRef OldVal, ValueRef NewVal) {
    LLVMPINVOKE.ReplaceAllUsesWith(OldVal.Value, NewVal.Value);
  }

  public unsafe static bool IsConstant(ValueRef Val) {
    bool ret = LLVMPINVOKE.IsConstant(Val.Value);
    return ret;
  }

  public unsafe static bool IsUndef(ValueRef Val) {
    bool ret = LLVMPINVOKE.IsUndef(Val.Value);
    return ret;
  }

  public unsafe static ValueRef IsAArgument(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAArgument(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsABasicBlock(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsABasicBlock(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAInlineAsm(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAInlineAsm(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAUser(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAUser(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstant(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstant(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsABlockAddress(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsABlockAddress(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantAggregateZero(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantAggregateZero(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantArray(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantArray(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantDataSequential(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantDataSequential(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantDataArray(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantDataArray(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantDataVector(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantDataVector(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantExpr(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantExpr(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantFP(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantFP(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantInt(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantInt(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantPointerNull(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantPointerNull(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantStruct(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantStruct(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantTokenNone(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantTokenNone(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAConstantVector(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAConstantVector(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAGlobalValue(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAGlobalValue(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAGlobalAlias(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAGlobalAlias(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAGlobalObject(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAGlobalObject(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAFunction(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAFunction(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAGlobalVariable(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAGlobalVariable(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAUndefValue(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAUndefValue(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAInstruction(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAInstruction(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsABinaryOperator(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsABinaryOperator(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsACallInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsACallInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAIntrinsicInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAIntrinsicInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsADbgInfoIntrinsic(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsADbgInfoIntrinsic(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsADbgDeclareInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsADbgDeclareInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAMemIntrinsic(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAMemIntrinsic(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAMemCpyInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAMemCpyInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAMemMoveInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAMemMoveInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAMemSetInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAMemSetInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsACmpInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsACmpInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAFCmpInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAFCmpInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAICmpInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAICmpInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAExtractElementInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAExtractElementInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAGetElementPtrInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAGetElementPtrInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAInsertElementInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAInsertElementInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAInsertValueInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAInsertValueInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsALandingPadInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsALandingPadInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAPHINode(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAPHINode(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsASelectInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsASelectInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAShuffleVectorInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAShuffleVectorInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAStoreInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAStoreInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsATerminatorInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsATerminatorInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsABranchInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsABranchInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAIndirectBrInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAIndirectBrInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAInvokeInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAInvokeInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAReturnInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAReturnInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsASwitchInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsASwitchInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAUnreachableInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAUnreachableInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAResumeInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAResumeInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsACleanupReturnInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsACleanupReturnInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsACatchReturnInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsACatchReturnInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAFuncletPadInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAFuncletPadInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsACatchPadInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsACatchPadInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsACleanupPadInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsACleanupPadInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAUnaryInstruction(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAUnaryInstruction(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAAllocaInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAAllocaInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsACastInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsACastInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAAddrSpaceCastInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAAddrSpaceCastInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsABitCastInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsABitCastInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAFPExtInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAFPExtInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAFPToSIInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAFPToSIInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAFPToUIInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAFPToUIInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAFPTruncInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAFPTruncInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAIntToPtrInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAIntToPtrInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAPtrToIntInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAPtrToIntInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsASExtInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsASExtInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsASIToFPInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsASIToFPInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsATruncInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsATruncInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAUIToFPInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAUIToFPInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAZExtInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAZExtInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAExtractValueInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAExtractValueInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsALoadInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsALoadInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAVAArgInst(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAVAArgInst(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAMDNode(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAMDNode(Val.Value));
        return ret;
    }

  public unsafe static ValueRef IsAMDString(ValueRef Val) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.IsAMDString(Val.Value));
        return ret;
    }

  public unsafe static UseRef GetFirstUse(ValueRef Val) {
        UseRef ret = new UseRef(LLVMPINVOKE.GetFirstUse(Val.Value));
        return ret;
    }

  public unsafe static UseRef GetNextUse(UseRef U) {
        UseRef ret = new UseRef(LLVMPINVOKE.GetNextUse(U.Value));
        return ret;
    }

  public unsafe static ValueRef GetUser(UseRef U) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetUser(U.Value));
        return ret;
    }

  public unsafe static ValueRef GetUsedValue(UseRef U) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetUsedValue(U.Value));
        return ret;
    }

  public unsafe static ValueRef GetOperand(ValueRef Val, uint Index) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetOperand(Val.Value, Index));
        return ret;
    }

  public unsafe static UseRef GetOperandUse(ValueRef Val, uint Index) {
        UseRef ret = new UseRef(LLVMPINVOKE.GetOperandUse(Val.Value, Index));
        return ret;
    }

  public unsafe static void SetOperand(ValueRef User, uint Index, ValueRef Val) {
    LLVMPINVOKE.SetOperand(User.Value, Index, Val.Value);
  }

  public unsafe static int GetNumOperands(ValueRef Val) {
    int ret = LLVMPINVOKE.GetNumOperands(Val.Value);
    return ret;
  }

  public unsafe static ValueRef ConstNull(TypeRef Ty) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNull(Ty.Value));
        return ret;
    }

  public unsafe static ValueRef ConstAllOnes(TypeRef Ty) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstAllOnes(Ty.Value));
        return ret;
    }

  public unsafe static ValueRef GetUndef(TypeRef Ty) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetUndef(Ty.Value));
        return ret;
    }

  public unsafe static bool IsNull(ValueRef Val) {
    bool ret = LLVMPINVOKE.IsNull(Val.Value);
    return ret;
  }

  public unsafe static ValueRef ConstPointerNull(TypeRef Ty) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstPointerNull(Ty.Value));
        return ret;
    }

  public unsafe static ValueRef ConstInt(TypeRef IntTy, ulong N, bool SignExtend) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstInt(IntTy.Value, N, SignExtend));
        return ret;
    }

  public unsafe static ValueRef ConstIntOfString(TypeRef IntTy, string Text, byte Radix) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstIntOfString(IntTy.Value, Text, Radix));
        return ret;
    }

  public unsafe static ValueRef ConstIntOfStringAndSize(TypeRef IntTy, string Text, uint SLen, byte Radix) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstIntOfStringAndSize(IntTy.Value, Text, SLen, Radix));
        return ret;
    }

  public unsafe static ValueRef ConstReal(TypeRef RealTy, double N) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstReal(RealTy.Value, N));
        return ret;
    }

  public unsafe static ValueRef ConstRealOfString(TypeRef RealTy, string Text) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstRealOfString(RealTy.Value, Text));
        return ret;
    }

  public unsafe static ValueRef ConstRealOfStringAndSize(TypeRef RealTy, string Text, uint SLen) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstRealOfStringAndSize(RealTy.Value, Text, SLen));
        return ret;
    }

  public unsafe static ulong ConstIntGetZExtValue(ValueRef ConstantVal) {
    ulong ret = LLVMPINVOKE.ConstIntGetZExtValue(ConstantVal.Value);
    return ret;
  }

  public unsafe static long ConstIntGetSExtValue(ValueRef ConstantVal) {
    long ret = LLVMPINVOKE.ConstIntGetSExtValue(ConstantVal.Value);
    return ret;
  }

  public unsafe static double ConstRealGetDouble(ValueRef ConstantVal, out bool losesInfo) {
    double ret = LLVMPINVOKE.ConstRealGetDouble(ConstantVal.Value, out losesInfo);
    return ret;
  }

  public unsafe static ValueRef ConstStringInContext(ContextRef C, string Str, uint Length, bool DontNullTerminate) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstStringInContext(C.Value, Str, Length, DontNullTerminate));
        return ret;
    }

  public unsafe static ValueRef ConstString(string Str, uint Length, bool DontNullTerminate) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstString(Str, Length, DontNullTerminate));
        return ret;
    }

  public unsafe static bool IsConstantString(ValueRef c) {
    bool ret = LLVMPINVOKE.IsConstantString(c.Value);
    return ret;
  }

  public unsafe static string GetAsString(ValueRef c, out System.IntPtr Length) {
    string ret = LLVMPINVOKE.GetAsString(c.Value, out Length);
    return ret;
  }

  public unsafe static ValueRef ConstStructInContext(ContextRef C, ValueRef[] ConstantVals, bool Packed) {
    fixed (ValueRef* swig_ptrTo_ConstantVals = ConstantVals)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstStructInContext(C.Value, (System.IntPtr)swig_ptrTo_ConstantVals, (uint)ConstantVals.Length, Packed));
          return ret;
      }
  }

  public unsafe static ValueRef ConstStruct(ValueRef[] ConstantVals, bool Packed) {
    fixed (ValueRef* swig_ptrTo_ConstantVals = ConstantVals)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstStruct((System.IntPtr)swig_ptrTo_ConstantVals, (uint)ConstantVals.Length, Packed));
          return ret;
      }
  }

  public unsafe static ValueRef ConstArray(TypeRef ElementTy, ValueRef[] ConstantVals) {
    fixed (ValueRef* swig_ptrTo_ConstantVals = ConstantVals)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstArray(ElementTy.Value, (System.IntPtr)swig_ptrTo_ConstantVals, (uint)ConstantVals.Length));
          return ret;
      }
  }

  public unsafe static ValueRef ConstNamedStruct(TypeRef StructTy, ValueRef[] ConstantVals) {
    fixed (ValueRef* swig_ptrTo_ConstantVals = ConstantVals)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNamedStruct(StructTy.Value, (System.IntPtr)swig_ptrTo_ConstantVals, (uint)ConstantVals.Length));
          return ret;
      }
  }

  public unsafe static ValueRef GetElementAsConstant(ValueRef C, uint idx) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetElementAsConstant(C.Value, idx));
        return ret;
    }

  public unsafe static ValueRef ConstVector(ValueRef[] ScalarConstantVals) {
    fixed (ValueRef* swig_ptrTo_ScalarConstantVals = ScalarConstantVals)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstVector((System.IntPtr)swig_ptrTo_ScalarConstantVals, (uint)ScalarConstantVals.Length));
          return ret;
      }
  }

  public unsafe static Opcode GetConstOpcode(ValueRef ConstantVal) {
    Opcode ret = (Opcode)LLVMPINVOKE.GetConstOpcode(ConstantVal.Value);
    return ret;
  }

  public unsafe static ValueRef AlignOf(TypeRef Ty) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.AlignOf(Ty.Value));
        return ret;
    }

  public unsafe static ValueRef SizeOf(TypeRef Ty) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.SizeOf(Ty.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNeg(ValueRef ConstantVal) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNeg(ConstantVal.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNSWNeg(ValueRef ConstantVal) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNSWNeg(ConstantVal.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNUWNeg(ValueRef ConstantVal) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNUWNeg(ConstantVal.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFNeg(ValueRef ConstantVal) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFNeg(ConstantVal.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNot(ValueRef ConstantVal) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNot(ConstantVal.Value));
        return ret;
    }

  public unsafe static ValueRef ConstAdd(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstAdd(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNSWAdd(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNSWAdd(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNUWAdd(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNUWAdd(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFAdd(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFAdd(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstSub(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstSub(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNSWSub(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNSWSub(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNUWSub(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNUWSub(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFSub(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFSub(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstMul(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstMul(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNSWMul(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNSWMul(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstNUWMul(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstNUWMul(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFMul(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFMul(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstUDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstUDiv(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstExactUDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstExactUDiv(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstSDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstSDiv(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstExactSDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstExactSDiv(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFDiv(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFDiv(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstURem(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstURem(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstSRem(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstSRem(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFRem(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFRem(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstAnd(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstAnd(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstOr(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstOr(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstXor(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstXor(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstICmp(IntPredicate Predicate, ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstICmp((int)Predicate, LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFCmp(RealPredicate Predicate, ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFCmp((int)Predicate, LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstShl(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstShl(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstLShr(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstLShr(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstAShr(ValueRef LHSConstant, ValueRef RHSConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstAShr(LHSConstant.Value, RHSConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstGEP(ValueRef ConstantVal, ValueRef[] ConstantIndices) {
    fixed (ValueRef* swig_ptrTo_ConstantIndices = ConstantIndices)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstGEP(ConstantVal.Value, (System.IntPtr)swig_ptrTo_ConstantIndices, (uint)ConstantIndices.Length));
          return ret;
      }
  }

  public unsafe static ValueRef ConstInBoundsGEP(ValueRef ConstantVal, ValueRef[] ConstantIndices) {
    fixed (ValueRef* swig_ptrTo_ConstantIndices = ConstantIndices)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstInBoundsGEP(ConstantVal.Value, (System.IntPtr)swig_ptrTo_ConstantIndices, (uint)ConstantIndices.Length));
          return ret;
      }
  }

  public unsafe static ValueRef ConstTrunc(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstTrunc(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstSExt(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstSExt(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstZExt(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstZExt(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFPTrunc(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFPTrunc(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFPExt(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFPExt(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstUIToFP(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstUIToFP(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstSIToFP(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstSIToFP(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFPToUI(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFPToUI(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstFPToSI(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFPToSI(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstPtrToInt(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstPtrToInt(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstIntToPtr(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstIntToPtr(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstBitCast(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstBitCast(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstAddrSpaceCast(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstAddrSpaceCast(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstZExtOrBitCast(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstZExtOrBitCast(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstSExtOrBitCast(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstSExtOrBitCast(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstTruncOrBitCast(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstTruncOrBitCast(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstPointerCast(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstPointerCast(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstIntCast(ValueRef ConstantVal, TypeRef ToType, bool isSigned) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstIntCast(ConstantVal.Value, ToType.Value, isSigned));
        return ret;
    }

  public unsafe static ValueRef ConstFPCast(ValueRef ConstantVal, TypeRef ToType) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstFPCast(ConstantVal.Value, ToType.Value));
        return ret;
    }

  public unsafe static ValueRef ConstSelect(ValueRef ConstantCondition, ValueRef ConstantIfTrue, ValueRef ConstantIfFalse) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstSelect(ConstantCondition.Value, ConstantIfTrue.Value, ConstantIfFalse.Value));
        return ret;
    }

  public unsafe static ValueRef ConstExtractElement(ValueRef VectorConstant, ValueRef IndexConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstExtractElement(VectorConstant.Value, IndexConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstInsertElement(ValueRef VectorConstant, ValueRef ElementValueConstant, ValueRef IndexConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstInsertElement(VectorConstant.Value, ElementValueConstant.Value, IndexConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstShuffleVector(ValueRef VectorAConstant, ValueRef VectorBConstant, ValueRef MaskConstant) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstShuffleVector(VectorAConstant.Value, VectorBConstant.Value, MaskConstant.Value));
        return ret;
    }

  public unsafe static ValueRef ConstExtractValue(ValueRef AggConstant, uint[] IdxList) {
    fixed (uint* swig_ptrTo_IdxList = IdxList)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstExtractValue(AggConstant.Value, (System.IntPtr)swig_ptrTo_IdxList, (uint)IdxList.Length));
          return ret;
      }
  }

  public unsafe static ValueRef ConstInsertValue(ValueRef AggConstant, ValueRef ElementValueConstant, uint[] IdxList) {
    fixed (uint* swig_ptrTo_IdxList = IdxList)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.ConstInsertValue(AggConstant.Value, ElementValueConstant.Value, (System.IntPtr)swig_ptrTo_IdxList, (uint)IdxList.Length));
          return ret;
      }
  }

  public unsafe static ValueRef ConstInlineAsm(TypeRef Ty, string AsmString, string Constraints, bool HasSideEffects, bool IsAlignStack) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.ConstInlineAsm(Ty.Value, AsmString, Constraints, HasSideEffects, IsAlignStack));
        return ret;
    }

  public unsafe static ValueRef BlockAddress(ValueRef F, BasicBlockRef BB) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BlockAddress(F.Value, BB.Value));
        return ret;
    }

  public unsafe static ModuleRef GetGlobalParent(ValueRef Global) {
        ModuleRef ret = new ModuleRef(LLVMPINVOKE.GetGlobalParent(Global.Value));
        return ret;
    }

  public unsafe static bool IsDeclaration(ValueRef Global) {
    bool ret = LLVMPINVOKE.IsDeclaration(Global.Value);
    return ret;
  }

  public unsafe static Linkage GetLinkage(ValueRef Global) {
    Linkage ret = (Linkage)LLVMPINVOKE.GetLinkage(Global.Value);
    return ret;
  }

  public unsafe static void SetLinkage(ValueRef Global, Linkage Linkage) {
    LLVMPINVOKE.SetLinkage(Global.Value, (int)Linkage);
  }

  public unsafe static string GetSection(ValueRef Global) {
    string ret = LLVMPINVOKE.GetSection(Global.Value);
    return ret;
  }

  public unsafe static void SetSection(ValueRef Global, string Section) {
    LLVMPINVOKE.SetSection(Global.Value, Section);
  }

  public unsafe static Visibility GetVisibility(ValueRef Global) {
    Visibility ret = (Visibility)LLVMPINVOKE.GetVisibility(Global.Value);
    return ret;
  }

  public unsafe static void SetVisibility(ValueRef Global, Visibility Viz) {
    LLVMPINVOKE.SetVisibility(Global.Value, (int)Viz);
  }

  public unsafe static DLLStorageClass GetDLLStorageClass(ValueRef Global) {
    DLLStorageClass ret = (DLLStorageClass)LLVMPINVOKE.GetDLLStorageClass(Global.Value);
    return ret;
  }

  public unsafe static void SetDLLStorageClass(ValueRef Global, DLLStorageClass Class) {
    LLVMPINVOKE.SetDLLStorageClass(Global.Value, (int)Class);
  }

  public unsafe static bool HasUnnamedAddr(ValueRef Global) {
    bool ret = LLVMPINVOKE.HasUnnamedAddr(Global.Value);
    return ret;
  }

  public unsafe static void SetUnnamedAddr(ValueRef Global, bool HasUnnamedAddr) {
    LLVMPINVOKE.SetUnnamedAddr(Global.Value, HasUnnamedAddr);
  }

  public unsafe static uint GetAlignment(ValueRef V) {
    uint ret = LLVMPINVOKE.GetAlignment(V.Value);
    return ret;
  }

  public unsafe static void SetAlignment(ValueRef V, uint Bytes) {
    LLVMPINVOKE.SetAlignment(V.Value, Bytes);
  }

  public unsafe static ValueRef AddGlobal(ModuleRef M, TypeRef Ty, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.AddGlobal(M.Value, Ty.Value, Name));
        return ret;
    }

  public unsafe static ValueRef AddGlobalInAddressSpace(ModuleRef M, TypeRef Ty, string Name, uint AddressSpace) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.AddGlobalInAddressSpace(M.Value, Ty.Value, Name, AddressSpace));
        return ret;
    }

  public unsafe static ValueRef GetNamedGlobal(ModuleRef M, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetNamedGlobal(M.Value, Name));
        return ret;
    }

  public unsafe static ValueRef GetFirstGlobal(ModuleRef M) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetFirstGlobal(M.Value));
        return ret;
    }

  public unsafe static ValueRef GetLastGlobal(ModuleRef M) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetLastGlobal(M.Value));
        return ret;
    }

  public unsafe static ValueRef GetNextGlobal(ValueRef GlobalVar) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetNextGlobal(GlobalVar.Value));
        return ret;
    }

  public unsafe static ValueRef GetPreviousGlobal(ValueRef GlobalVar) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetPreviousGlobal(GlobalVar.Value));
        return ret;
    }

  public unsafe static void DeleteGlobal(ValueRef GlobalVar) {
    LLVMPINVOKE.DeleteGlobal(GlobalVar.Value);
  }

  public unsafe static ValueRef GetInitializer(ValueRef GlobalVar) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetInitializer(GlobalVar.Value));
        return ret;
    }

  public unsafe static void SetInitializer(ValueRef GlobalVar, ValueRef ConstantVal) {
    LLVMPINVOKE.SetInitializer(GlobalVar.Value, ConstantVal.Value);
  }

  public unsafe static bool IsThreadLocal(ValueRef GlobalVar) {
    bool ret = LLVMPINVOKE.IsThreadLocal(GlobalVar.Value);
    return ret;
  }

  public unsafe static void SetThreadLocal(ValueRef GlobalVar, bool IsThreadLocal) {
    LLVMPINVOKE.SetThreadLocal(GlobalVar.Value, IsThreadLocal);
  }

  public unsafe static bool IsGlobalConstant(ValueRef GlobalVar) {
    bool ret = LLVMPINVOKE.IsGlobalConstant(GlobalVar.Value);
    return ret;
  }

  public unsafe static void SetGlobalConstant(ValueRef GlobalVar, bool IsConstant) {
    LLVMPINVOKE.SetGlobalConstant(GlobalVar.Value, IsConstant);
  }

  public unsafe static ThreadLocalMode GetThreadLocalMode(ValueRef GlobalVar) {
    ThreadLocalMode ret = (ThreadLocalMode)LLVMPINVOKE.GetThreadLocalMode(GlobalVar.Value);
    return ret;
  }

  public unsafe static void SetThreadLocalMode(ValueRef GlobalVar, ThreadLocalMode Mode) {
    LLVMPINVOKE.SetThreadLocalMode(GlobalVar.Value, (int)Mode);
  }

  public unsafe static bool IsExternallyInitialized(ValueRef GlobalVar) {
    bool ret = LLVMPINVOKE.IsExternallyInitialized(GlobalVar.Value);
    return ret;
  }

  public unsafe static void SetExternallyInitialized(ValueRef GlobalVar, bool IsExtInit) {
    LLVMPINVOKE.SetExternallyInitialized(GlobalVar.Value, IsExtInit);
  }

  public unsafe static ValueRef AddAlias(ModuleRef M, TypeRef Ty, ValueRef Aliasee, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.AddAlias(M.Value, Ty.Value, Aliasee.Value, Name));
        return ret;
    }

  public unsafe static void DeleteFunction(ValueRef Fn) {
    LLVMPINVOKE.DeleteFunction(Fn.Value);
  }

  public unsafe static bool HasPersonalityFn(ValueRef Fn) {
    bool ret = LLVMPINVOKE.HasPersonalityFn(Fn.Value);
    return ret;
  }

  public unsafe static ValueRef GetPersonalityFn(ValueRef Fn) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetPersonalityFn(Fn.Value));
        return ret;
    }

  public unsafe static void SetPersonalityFn(ValueRef Fn, ValueRef PersonalityFn) {
    LLVMPINVOKE.SetPersonalityFn(Fn.Value, PersonalityFn.Value);
  }

  public unsafe static uint GetIntrinsicID(ValueRef Fn) {
    uint ret = LLVMPINVOKE.GetIntrinsicID(Fn.Value);
    return ret;
  }

  public unsafe static uint GetFunctionCallConv(ValueRef Fn) {
    uint ret = LLVMPINVOKE.GetFunctionCallConv(Fn.Value);
    return ret;
  }

  public unsafe static void SetFunctionCallConv(ValueRef Fn, uint CC) {
    LLVMPINVOKE.SetFunctionCallConv(Fn.Value, CC);
  }

  public unsafe static string GetGC(ValueRef Fn) {
    string ret = LLVMPINVOKE.GetGC(Fn.Value);
    return ret;
  }

  public unsafe static void SetGC(ValueRef Fn, string Name) {
    LLVMPINVOKE.SetGC(Fn.Value, Name);
  }

  public unsafe static void AddAttributeAtIndex(ValueRef F, uint Idx, AttributeRef A) {
    LLVMPINVOKE.AddAttributeAtIndex(F.Value, Idx, A.Value);
  }

  public unsafe static uint GetAttributeCountAtIndex(ValueRef F, uint Idx) {
    uint ret = LLVMPINVOKE.GetAttributeCountAtIndex(F.Value, Idx);
    return ret;
  }

  public unsafe static void GetAttributesAtIndex(ValueRef F, uint Idx, out AttributeRef Attrs) {
    LLVMPINVOKE.GetAttributesAtIndex(F.Value, Idx, out Attrs.Value);
  }

  public unsafe static AttributeRef GetEnumAttributeAtIndex(ValueRef F, uint Idx, uint KindID) {
        AttributeRef ret = new AttributeRef(LLVMPINVOKE.GetEnumAttributeAtIndex(F.Value, Idx, KindID));
        return ret;
    }

  public unsafe static AttributeRef GetStringAttributeAtIndex(ValueRef F, uint Idx, string K, uint KLen) {
        AttributeRef ret = new AttributeRef(LLVMPINVOKE.GetStringAttributeAtIndex(F.Value, Idx, K, KLen));
        return ret;
    }

  public unsafe static void RemoveEnumAttributeAtIndex(ValueRef F, uint Idx, uint KindID) {
    LLVMPINVOKE.RemoveEnumAttributeAtIndex(F.Value, Idx, KindID);
  }

  public unsafe static void RemoveStringAttributeAtIndex(ValueRef F, uint Idx, string K, uint KLen) {
    LLVMPINVOKE.RemoveStringAttributeAtIndex(F.Value, Idx, K, KLen);
  }

  public unsafe static void AddTargetDependentFunctionAttr(ValueRef Fn, string A, string V) {
    LLVMPINVOKE.AddTargetDependentFunctionAttr(Fn.Value, A, V);
  }

  public unsafe static uint CountParams(ValueRef Fn) {
    uint ret = LLVMPINVOKE.CountParams(Fn.Value);
    return ret;
  }

  public unsafe static void GetParams(ValueRef Fn, out ValueRef Params) {
    LLVMPINVOKE.GetParams(Fn.Value, out Params.Value);
  }

  public unsafe static ValueRef GetParam(ValueRef Fn, uint Index) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetParam(Fn.Value, Index));
        return ret;
    }

  public unsafe static ValueRef GetParamParent(ValueRef Inst) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetParamParent(Inst.Value));
        return ret;
    }

  public unsafe static ValueRef GetFirstParam(ValueRef Fn) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetFirstParam(Fn.Value));
        return ret;
    }

  public unsafe static ValueRef GetLastParam(ValueRef Fn) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetLastParam(Fn.Value));
        return ret;
    }

  public unsafe static ValueRef GetNextParam(ValueRef Arg) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetNextParam(Arg.Value));
        return ret;
    }

  public unsafe static ValueRef GetPreviousParam(ValueRef Arg) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetPreviousParam(Arg.Value));
        return ret;
    }

  public unsafe static void SetParamAlignment(ValueRef Arg, uint Align) {
    LLVMPINVOKE.SetParamAlignment(Arg.Value, Align);
  }

  public unsafe static ValueRef MDStringInContext(ContextRef C, string Str, uint SLen) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.MDStringInContext(C.Value, Str, SLen));
        return ret;
    }

  public unsafe static ValueRef MDString(string Str, uint SLen) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.MDString(Str, SLen));
        return ret;
    }

  public unsafe static ValueRef MDNodeInContext(ContextRef C, ValueRef[] Vals) {
    fixed (ValueRef* swig_ptrTo_Vals = Vals)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.MDNodeInContext(C.Value, (System.IntPtr)swig_ptrTo_Vals, (uint)Vals.Length));
          return ret;
      }
  }

  public unsafe static ValueRef MDNode(ValueRef[] Vals) {
    fixed (ValueRef* swig_ptrTo_Vals = Vals)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.MDNode((System.IntPtr)swig_ptrTo_Vals, (uint)Vals.Length));
          return ret;
      }
  }

  public unsafe static string GetMDString(ValueRef V, out uint Length) {
    string ret = LLVMPINVOKE.GetMDString(V.Value, out Length);
    return ret;
  }

  public unsafe static uint GetMDNodeNumOperands(ValueRef V) {
    uint ret = LLVMPINVOKE.GetMDNodeNumOperands(V.Value);
    return ret;
  }

  public unsafe static void GetMDNodeOperands(ValueRef V, out ValueRef Dest) {
    LLVMPINVOKE.GetMDNodeOperands(V.Value, out Dest.Value);
  }

  public unsafe static ValueRef BasicBlockAsValue(BasicBlockRef BB) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BasicBlockAsValue(BB.Value));
        return ret;
    }

  public unsafe static bool ValueIsBasicBlock(ValueRef Val) {
    bool ret = LLVMPINVOKE.ValueIsBasicBlock(Val.Value);
    return ret;
  }

  public unsafe static BasicBlockRef ValueAsBasicBlock(ValueRef Val) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.ValueAsBasicBlock(Val.Value));
        return ret;
    }

  public unsafe static string GetBasicBlockName(BasicBlockRef BB) {
    string ret = LLVMPINVOKE.GetBasicBlockName(BB.Value);
    return ret;
  }

  public unsafe static ValueRef GetBasicBlockParent(BasicBlockRef BB) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetBasicBlockParent(BB.Value));
        return ret;
    }

  public unsafe static ValueRef GetBasicBlockTerminator(BasicBlockRef BB) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetBasicBlockTerminator(BB.Value));
        return ret;
    }

  public unsafe static uint CountBasicBlocks(ValueRef Fn) {
    uint ret = LLVMPINVOKE.CountBasicBlocks(Fn.Value);
    return ret;
  }

  public unsafe static void GetBasicBlocks(ValueRef Fn, out BasicBlockRef BasicBlocks) {
    LLVMPINVOKE.GetBasicBlocks(Fn.Value, out BasicBlocks.Value);
  }

  public unsafe static BasicBlockRef GetFirstBasicBlock(ValueRef Fn) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetFirstBasicBlock(Fn.Value));
        return ret;
    }

  public unsafe static BasicBlockRef GetLastBasicBlock(ValueRef Fn) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetLastBasicBlock(Fn.Value));
        return ret;
    }

  public unsafe static BasicBlockRef GetNextBasicBlock(BasicBlockRef BB) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetNextBasicBlock(BB.Value));
        return ret;
    }

  public unsafe static BasicBlockRef GetPreviousBasicBlock(BasicBlockRef BB) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetPreviousBasicBlock(BB.Value));
        return ret;
    }

  public unsafe static BasicBlockRef GetEntryBasicBlock(ValueRef Fn) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetEntryBasicBlock(Fn.Value));
        return ret;
    }

  public unsafe static BasicBlockRef AppendBasicBlockInContext(ContextRef C, ValueRef Fn, string Name) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.AppendBasicBlockInContext(C.Value, Fn.Value, Name));
        return ret;
    }

  public unsafe static BasicBlockRef AppendBasicBlock(ValueRef Fn, string Name) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.AppendBasicBlock(Fn.Value, Name));
        return ret;
    }

  public unsafe static BasicBlockRef InsertBasicBlockInContext(ContextRef C, BasicBlockRef BB, string Name) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.InsertBasicBlockInContext(C.Value, BB.Value, Name));
        return ret;
    }

  public unsafe static BasicBlockRef InsertBasicBlock(BasicBlockRef InsertBeforeBB, string Name) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.InsertBasicBlock(InsertBeforeBB.Value, Name));
        return ret;
    }

  public unsafe static void DeleteBasicBlock(BasicBlockRef BB) {
    LLVMPINVOKE.DeleteBasicBlock(BB.Value);
  }

  public unsafe static void RemoveBasicBlockFromParent(BasicBlockRef BB) {
    LLVMPINVOKE.RemoveBasicBlockFromParent(BB.Value);
  }

  public unsafe static void MoveBasicBlockBefore(BasicBlockRef BB, BasicBlockRef MovePos) {
    LLVMPINVOKE.MoveBasicBlockBefore(BB.Value, MovePos.Value);
  }

  public unsafe static void MoveBasicBlockAfter(BasicBlockRef BB, BasicBlockRef MovePos) {
    LLVMPINVOKE.MoveBasicBlockAfter(BB.Value, MovePos.Value);
  }

  public unsafe static ValueRef GetFirstInstruction(BasicBlockRef BB) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetFirstInstruction(BB.Value));
        return ret;
    }

  public unsafe static ValueRef GetLastInstruction(BasicBlockRef BB) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetLastInstruction(BB.Value));
        return ret;
    }

  public unsafe static int HasMetadata(ValueRef Val) {
    int ret = LLVMPINVOKE.HasMetadata(Val.Value);
    return ret;
  }

  public unsafe static ValueRef GetMetadata(ValueRef Val, uint KindID) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetMetadata(Val.Value, KindID));
        return ret;
    }

  public unsafe static void SetMetadata(ValueRef Val, uint KindID, ValueRef Node) {
    LLVMPINVOKE.SetMetadata(Val.Value, KindID, Node.Value);
  }

  public unsafe static BasicBlockRef GetInstructionParent(ValueRef Inst) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetInstructionParent(Inst.Value));
        return ret;
    }

  public unsafe static ValueRef GetNextInstruction(ValueRef Inst) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetNextInstruction(Inst.Value));
        return ret;
    }

  public unsafe static ValueRef GetPreviousInstruction(ValueRef Inst) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetPreviousInstruction(Inst.Value));
        return ret;
    }

  public unsafe static void InstructionRemoveFromParent(ValueRef Inst) {
    LLVMPINVOKE.InstructionRemoveFromParent(Inst.Value);
  }

  public unsafe static void InstructionEraseFromParent(ValueRef Inst) {
    LLVMPINVOKE.InstructionEraseFromParent(Inst.Value);
  }

  public unsafe static Opcode GetInstructionOpcode(ValueRef Inst) {
    Opcode ret = (Opcode)LLVMPINVOKE.GetInstructionOpcode(Inst.Value);
    return ret;
  }

  public unsafe static IntPredicate GetICmpPredicate(ValueRef Inst) {
    IntPredicate ret = (IntPredicate)LLVMPINVOKE.GetICmpPredicate(Inst.Value);
    return ret;
  }

  public unsafe static RealPredicate GetFCmpPredicate(ValueRef Inst) {
    RealPredicate ret = (RealPredicate)LLVMPINVOKE.GetFCmpPredicate(Inst.Value);
    return ret;
  }

  public unsafe static ValueRef InstructionClone(ValueRef Inst) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.InstructionClone(Inst.Value));
        return ret;
    }

  public unsafe static uint GetNumArgOperands(ValueRef Instr) {
    uint ret = LLVMPINVOKE.GetNumArgOperands(Instr.Value);
    return ret;
  }

  public unsafe static void SetInstructionCallConv(ValueRef Instr, uint CC) {
    LLVMPINVOKE.SetInstructionCallConv(Instr.Value, CC);
  }

  public unsafe static uint GetInstructionCallConv(ValueRef Instr) {
    uint ret = LLVMPINVOKE.GetInstructionCallConv(Instr.Value);
    return ret;
  }

  public unsafe static void SetInstrParamAlignment(ValueRef Instr, uint index, uint Align) {
    LLVMPINVOKE.SetInstrParamAlignment(Instr.Value, index, Align);
  }

  public unsafe static void AddCallSiteAttribute(ValueRef C, uint Idx, AttributeRef A) {
    LLVMPINVOKE.AddCallSiteAttribute(C.Value, Idx, A.Value);
  }

  public unsafe static uint GetCallSiteAttributeCount(ValueRef C, uint Idx) {
    uint ret = LLVMPINVOKE.GetCallSiteAttributeCount(C.Value, Idx);
    return ret;
  }

  public unsafe static void GetCallSiteAttributes(ValueRef C, uint Idx, out AttributeRef Attrs) {
    LLVMPINVOKE.GetCallSiteAttributes(C.Value, Idx, out Attrs.Value);
  }

  public unsafe static AttributeRef GetCallSiteEnumAttribute(ValueRef C, uint Idx, uint KindID) {
        AttributeRef ret = new AttributeRef(LLVMPINVOKE.GetCallSiteEnumAttribute(C.Value, Idx, KindID));
        return ret;
    }

  public unsafe static AttributeRef GetCallSiteStringAttribute(ValueRef C, uint Idx, string K, uint KLen) {
        AttributeRef ret = new AttributeRef(LLVMPINVOKE.GetCallSiteStringAttribute(C.Value, Idx, K, KLen));
        return ret;
    }

  public unsafe static void RemoveCallSiteEnumAttribute(ValueRef C, uint Idx, uint KindID) {
    LLVMPINVOKE.RemoveCallSiteEnumAttribute(C.Value, Idx, KindID);
  }

  public unsafe static void RemoveCallSiteStringAttribute(ValueRef C, uint Idx, string K, uint KLen) {
    LLVMPINVOKE.RemoveCallSiteStringAttribute(C.Value, Idx, K, KLen);
  }

  public unsafe static ValueRef GetCalledValue(ValueRef Instr) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetCalledValue(Instr.Value));
        return ret;
    }

  public unsafe static bool IsTailCall(ValueRef CallInst) {
    bool ret = LLVMPINVOKE.IsTailCall(CallInst.Value);
    return ret;
  }

  public unsafe static void SetTailCall(ValueRef CallInst, bool IsTailCall) {
    LLVMPINVOKE.SetTailCall(CallInst.Value, IsTailCall);
  }

  public unsafe static BasicBlockRef GetNormalDest(ValueRef InvokeInst) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetNormalDest(InvokeInst.Value));
        return ret;
    }

  public unsafe static BasicBlockRef GetUnwindDest(ValueRef InvokeInst) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetUnwindDest(InvokeInst.Value));
        return ret;
    }

  public unsafe static void SetNormalDest(ValueRef InvokeInst, BasicBlockRef B) {
    LLVMPINVOKE.SetNormalDest(InvokeInst.Value, B.Value);
  }

  public unsafe static void SetUnwindDest(ValueRef InvokeInst, BasicBlockRef B) {
    LLVMPINVOKE.SetUnwindDest(InvokeInst.Value, B.Value);
  }

  public unsafe static uint GetNumSuccessors(ValueRef Term) {
    uint ret = LLVMPINVOKE.GetNumSuccessors(Term.Value);
    return ret;
  }

  public unsafe static BasicBlockRef GetSuccessor(ValueRef Term, uint i) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetSuccessor(Term.Value, i));
        return ret;
    }

  public unsafe static void SetSuccessor(ValueRef Term, uint i, BasicBlockRef block) {
    LLVMPINVOKE.SetSuccessor(Term.Value, i, block.Value);
  }

  public unsafe static bool IsConditional(ValueRef Branch) {
    bool ret = LLVMPINVOKE.IsConditional(Branch.Value);
    return ret;
  }

  public unsafe static ValueRef GetCondition(ValueRef Branch) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetCondition(Branch.Value));
        return ret;
    }

  public unsafe static void SetCondition(ValueRef Branch, ValueRef Cond) {
    LLVMPINVOKE.SetCondition(Branch.Value, Cond.Value);
  }

  public unsafe static BasicBlockRef GetSwitchDefaultDest(ValueRef SwitchInstr) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetSwitchDefaultDest(SwitchInstr.Value));
        return ret;
    }

  public unsafe static TypeRef GetAllocatedType(ValueRef Alloca) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.GetAllocatedType(Alloca.Value));
        return ret;
    }

  public unsafe static bool IsInBounds(ValueRef GEP) {
    bool ret = LLVMPINVOKE.IsInBounds(GEP.Value);
    return ret;
  }

  public unsafe static void SetIsInBounds(ValueRef GEP, bool InBounds) {
    LLVMPINVOKE.SetIsInBounds(GEP.Value, InBounds);
  }

  public unsafe static void AddIncoming(ValueRef PhiNode, ValueRef[] IncomingValues, BasicBlockRef[] IncomingBlocks) {
    fixed (ValueRef* swig_ptrTo_IncomingValues = IncomingValues)
    fixed (BasicBlockRef* swig_ptrTo_IncomingBlocks = IncomingBlocks)
    {
      LLVMPINVOKE.AddIncoming(PhiNode.Value, (System.IntPtr)swig_ptrTo_IncomingValues, (System.IntPtr)swig_ptrTo_IncomingBlocks, (uint)IncomingBlocks.Length);
    }
  }

  public unsafe static uint CountIncoming(ValueRef PhiNode) {
    uint ret = LLVMPINVOKE.CountIncoming(PhiNode.Value);
    return ret;
  }

  public unsafe static ValueRef GetIncomingValue(ValueRef PhiNode, uint Index) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetIncomingValue(PhiNode.Value, Index));
        return ret;
    }

  public unsafe static BasicBlockRef GetIncomingBlock(ValueRef PhiNode, uint Index) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetIncomingBlock(PhiNode.Value, Index));
        return ret;
    }

  public unsafe static uint GetNumIndices(ValueRef Inst) {
    uint ret = LLVMPINVOKE.GetNumIndices(Inst.Value);
    return ret;
  }

  public unsafe static BuilderRef CreateBuilderInContext(ContextRef C) {
        BuilderRef ret = new BuilderRef(LLVMPINVOKE.CreateBuilderInContext(C.Value));
        return ret;
    }

  public unsafe static BuilderRef CreateBuilder() {
        BuilderRef ret = new BuilderRef(LLVMPINVOKE.CreateBuilder());
        return ret;
    }

  public unsafe static void PositionBuilder(BuilderRef Builder, BasicBlockRef Block, ValueRef Instr) {
    LLVMPINVOKE.PositionBuilder(Builder.Value, Block.Value, Instr.Value);
  }

  public unsafe static void PositionBuilderBefore(BuilderRef Builder, ValueRef Instr) {
    LLVMPINVOKE.PositionBuilderBefore(Builder.Value, Instr.Value);
  }

  public unsafe static void PositionBuilderAtEnd(BuilderRef Builder, BasicBlockRef Block) {
    LLVMPINVOKE.PositionBuilderAtEnd(Builder.Value, Block.Value);
  }

  public unsafe static BasicBlockRef GetInsertBlock(BuilderRef Builder) {
        BasicBlockRef ret = new BasicBlockRef(LLVMPINVOKE.GetInsertBlock(Builder.Value));
        return ret;
    }

  public unsafe static void ClearInsertionPosition(BuilderRef Builder) {
    LLVMPINVOKE.ClearInsertionPosition(Builder.Value);
  }

  public unsafe static void InsertIntoBuilder(BuilderRef Builder, ValueRef Instr) {
    LLVMPINVOKE.InsertIntoBuilder(Builder.Value, Instr.Value);
  }

  public unsafe static void InsertIntoBuilderWithName(BuilderRef Builder, ValueRef Instr, string Name) {
    LLVMPINVOKE.InsertIntoBuilderWithName(Builder.Value, Instr.Value, Name);
  }

  public unsafe static void DisposeBuilder(BuilderRef Builder) {
    LLVMPINVOKE.DisposeBuilder(Builder.Value);
  }

  public unsafe static void SetCurrentDebugLocation(BuilderRef Builder, ValueRef L) {
    LLVMPINVOKE.SetCurrentDebugLocation(Builder.Value, L.Value);
  }

  public unsafe static ValueRef GetCurrentDebugLocation(BuilderRef Builder) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetCurrentDebugLocation(Builder.Value));
        return ret;
    }

  public unsafe static void SetInstDebugLocation(BuilderRef Builder, ValueRef Inst) {
    LLVMPINVOKE.SetInstDebugLocation(Builder.Value, Inst.Value);
  }

  public unsafe static ValueRef BuildRetVoid(BuilderRef arg0) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildRetVoid(arg0.Value));
        return ret;
    }

  public unsafe static ValueRef BuildRet(BuilderRef arg0, ValueRef V) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildRet(arg0.Value, V.Value));
        return ret;
    }

  public unsafe static ValueRef BuildAggregateRet(BuilderRef arg0, ValueRef[] RetVals) {
    fixed (ValueRef* swig_ptrTo_RetVals = RetVals)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.BuildAggregateRet(arg0.Value, (System.IntPtr)swig_ptrTo_RetVals, (uint)RetVals.Length));
          return ret;
      }
  }

  public unsafe static ValueRef BuildBr(BuilderRef arg0, BasicBlockRef Dest) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildBr(arg0.Value, Dest.Value));
        return ret;
    }

  public unsafe static ValueRef BuildCondBr(BuilderRef arg0, ValueRef If, BasicBlockRef Then, BasicBlockRef Else) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildCondBr(arg0.Value, If.Value, Then.Value, Else.Value));
        return ret;
    }

  public unsafe static ValueRef BuildSwitch(BuilderRef arg0, ValueRef V, BasicBlockRef Else, uint NumCases) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildSwitch(arg0.Value, V.Value, Else.Value, NumCases));
        return ret;
    }

  public unsafe static ValueRef BuildIndirectBr(BuilderRef B, ValueRef Addr, uint NumDests) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildIndirectBr(B.Value, Addr.Value, NumDests));
        return ret;
    }

  public unsafe static ValueRef BuildInvoke(BuilderRef arg0, ValueRef Fn, ValueRef[] Args, BasicBlockRef Then, BasicBlockRef Catch, string Name) {
    fixed (ValueRef* swig_ptrTo_Args = Args)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.BuildInvoke(arg0.Value, Fn.Value, (System.IntPtr)swig_ptrTo_Args, (uint)Args.Length, Then.Value, Catch.Value, Name));
          return ret;
      }
  }

  public unsafe static ValueRef BuildLandingPad(BuilderRef B, TypeRef Ty, ValueRef PersFn, uint NumClauses, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildLandingPad(B.Value, Ty.Value, PersFn.Value, NumClauses, Name));
        return ret;
    }

  public unsafe static ValueRef BuildResume(BuilderRef B, ValueRef Exn) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildResume(B.Value, Exn.Value));
        return ret;
    }

  public unsafe static ValueRef BuildUnreachable(BuilderRef arg0) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildUnreachable(arg0.Value));
        return ret;
    }

  public unsafe static void AddCase(ValueRef Switch, ValueRef OnVal, BasicBlockRef Dest) {
    LLVMPINVOKE.AddCase(Switch.Value, OnVal.Value, Dest.Value);
  }

  public unsafe static void AddDestination(ValueRef IndirectBr, BasicBlockRef Dest) {
    LLVMPINVOKE.AddDestination(IndirectBr.Value, Dest.Value);
  }

  public unsafe static uint GetNumClauses(ValueRef LandingPad) {
    uint ret = LLVMPINVOKE.GetNumClauses(LandingPad.Value);
    return ret;
  }

  public unsafe static ValueRef GetClause(ValueRef LandingPad, uint Idx) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.GetClause(LandingPad.Value, Idx));
        return ret;
    }

  public unsafe static void AddClause(ValueRef LandingPad, ValueRef ClauseVal) {
    LLVMPINVOKE.AddClause(LandingPad.Value, ClauseVal.Value);
  }

  public unsafe static bool IsCleanup(ValueRef LandingPad) {
    bool ret = LLVMPINVOKE.IsCleanup(LandingPad.Value);
    return ret;
  }

  public unsafe static void SetCleanup(ValueRef LandingPad, bool Val) {
    LLVMPINVOKE.SetCleanup(LandingPad.Value, Val);
  }

  public unsafe static ValueRef BuildAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildAdd(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNSWAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNSWAdd(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNUWAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNUWAdd(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFAdd(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildSub(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNSWSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNSWSub(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNUWSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNUWSub(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFSub(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildMul(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNSWMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNSWMul(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNUWMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNUWMul(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFMul(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildUDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildUDiv(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildExactUDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildExactUDiv(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildSDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildSDiv(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildExactSDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildExactSDiv(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFDiv(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildURem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildURem(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildSRem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildSRem(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFRem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFRem(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildShl(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildShl(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildLShr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildLShr(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildAShr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildAShr(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildAnd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildAnd(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildOr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildOr(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildXor(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildXor(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildBinOp(BuilderRef B, Opcode Op, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildBinOp(B.Value, (int)Op, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNeg(BuilderRef arg0, ValueRef V, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNeg(arg0.Value, V.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNSWNeg(BuilderRef B, ValueRef V, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNSWNeg(B.Value, V.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNUWNeg(BuilderRef B, ValueRef V, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNUWNeg(B.Value, V.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFNeg(BuilderRef arg0, ValueRef V, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFNeg(arg0.Value, V.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildNot(BuilderRef arg0, ValueRef V, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildNot(arg0.Value, V.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildMalloc(BuilderRef arg0, TypeRef Ty, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildMalloc(arg0.Value, Ty.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildArrayMalloc(BuilderRef arg0, TypeRef Ty, ValueRef Val, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildArrayMalloc(arg0.Value, Ty.Value, Val.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildAlloca(BuilderRef arg0, TypeRef Ty, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildAlloca(arg0.Value, Ty.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildArrayAlloca(BuilderRef arg0, TypeRef Ty, ValueRef Val, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildArrayAlloca(arg0.Value, Ty.Value, Val.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFree(BuilderRef arg0, ValueRef PointerVal) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFree(arg0.Value, PointerVal.Value));
        return ret;
    }

  public unsafe static ValueRef BuildLoad(BuilderRef arg0, ValueRef PointerVal, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildLoad(arg0.Value, PointerVal.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildStore(BuilderRef arg0, ValueRef Val, ValueRef Ptr) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildStore(arg0.Value, Val.Value, Ptr.Value));
        return ret;
    }

  public unsafe static ValueRef BuildGEP(BuilderRef B, ValueRef Pointer, ValueRef[] Indices, string Name) {
    fixed (ValueRef* swig_ptrTo_Indices = Indices)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.BuildGEP(B.Value, Pointer.Value, (System.IntPtr)swig_ptrTo_Indices, (uint)Indices.Length, Name));
          return ret;
      }
  }

  public unsafe static ValueRef BuildInBoundsGEP(BuilderRef B, ValueRef Pointer, ValueRef[] Indices, string Name) {
    fixed (ValueRef* swig_ptrTo_Indices = Indices)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.BuildInBoundsGEP(B.Value, Pointer.Value, (System.IntPtr)swig_ptrTo_Indices, (uint)Indices.Length, Name));
          return ret;
      }
  }

  public unsafe static ValueRef BuildStructGEP(BuilderRef B, ValueRef Pointer, uint Idx, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildStructGEP(B.Value, Pointer.Value, Idx, Name));
        return ret;
    }

  public unsafe static ValueRef BuildGlobalString(BuilderRef B, string Str, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildGlobalString(B.Value, Str, Name));
        return ret;
    }

  public unsafe static ValueRef BuildGlobalStringPtr(BuilderRef B, string Str, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildGlobalStringPtr(B.Value, Str, Name));
        return ret;
    }

  public unsafe static bool GetVolatile(ValueRef MemoryAccessInst) {
    bool ret = LLVMPINVOKE.GetVolatile(MemoryAccessInst.Value);
    return ret;
  }

  public unsafe static void SetVolatile(ValueRef MemoryAccessInst, bool IsVolatile) {
    LLVMPINVOKE.SetVolatile(MemoryAccessInst.Value, IsVolatile);
  }

  public unsafe static AtomicOrdering GetOrdering(ValueRef MemoryAccessInst) {
    AtomicOrdering ret = (AtomicOrdering)LLVMPINVOKE.GetOrdering(MemoryAccessInst.Value);
    return ret;
  }

  public unsafe static void SetOrdering(ValueRef MemoryAccessInst, AtomicOrdering Ordering) {
    LLVMPINVOKE.SetOrdering(MemoryAccessInst.Value, (int)Ordering);
  }

  public unsafe static ValueRef BuildTrunc(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildTrunc(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildZExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildZExt(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildSExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildSExt(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFPToUI(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFPToUI(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFPToSI(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFPToSI(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildUIToFP(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildUIToFP(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildSIToFP(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildSIToFP(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFPTrunc(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFPTrunc(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFPExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFPExt(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildPtrToInt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildPtrToInt(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildIntToPtr(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildIntToPtr(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildBitCast(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildAddrSpaceCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildAddrSpaceCast(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildZExtOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildZExtOrBitCast(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildSExtOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildSExtOrBitCast(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildTruncOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildTruncOrBitCast(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildCast(BuilderRef B, Opcode Op, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildCast(B.Value, (int)Op, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildPointerCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildPointerCast(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildIntCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildIntCast(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFPCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFPCast(arg0.Value, Val.Value, DestTy.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildICmp(BuilderRef arg0, IntPredicate Op, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildICmp(arg0.Value, (int)Op, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFCmp(BuilderRef arg0, RealPredicate Op, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFCmp(arg0.Value, (int)Op, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildPhi(BuilderRef arg0, TypeRef Ty, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildPhi(arg0.Value, Ty.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildCall(BuilderRef arg0, ValueRef Fn, ValueRef[] Args, string Name) {
    fixed (ValueRef* swig_ptrTo_Args = Args)
    {
          ValueRef ret = new ValueRef(LLVMPINVOKE.BuildCall(arg0.Value, Fn.Value, (System.IntPtr)swig_ptrTo_Args, (uint)Args.Length, Name));
          return ret;
      }
  }

  public unsafe static ValueRef BuildSelect(BuilderRef arg0, ValueRef If, ValueRef Then, ValueRef Else, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildSelect(arg0.Value, If.Value, Then.Value, Else.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildVAArg(BuilderRef arg0, ValueRef List, TypeRef Ty, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildVAArg(arg0.Value, List.Value, Ty.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildExtractElement(BuilderRef arg0, ValueRef VecVal, ValueRef Index, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildExtractElement(arg0.Value, VecVal.Value, Index.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildInsertElement(BuilderRef arg0, ValueRef VecVal, ValueRef EltVal, ValueRef Index, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildInsertElement(arg0.Value, VecVal.Value, EltVal.Value, Index.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildShuffleVector(BuilderRef arg0, ValueRef V1, ValueRef V2, ValueRef Mask, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildShuffleVector(arg0.Value, V1.Value, V2.Value, Mask.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildExtractValue(BuilderRef arg0, ValueRef AggVal, uint Index, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildExtractValue(arg0.Value, AggVal.Value, Index, Name));
        return ret;
    }

  public unsafe static ValueRef BuildInsertValue(BuilderRef arg0, ValueRef AggVal, ValueRef EltVal, uint Index, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildInsertValue(arg0.Value, AggVal.Value, EltVal.Value, Index, Name));
        return ret;
    }

  public unsafe static ValueRef BuildIsNull(BuilderRef arg0, ValueRef Val, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildIsNull(arg0.Value, Val.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildIsNotNull(BuilderRef arg0, ValueRef Val, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildIsNotNull(arg0.Value, Val.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildPtrDiff(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildPtrDiff(arg0.Value, LHS.Value, RHS.Value, Name));
        return ret;
    }

  public unsafe static ValueRef BuildFence(BuilderRef B, AtomicOrdering ordering, bool singleThread, string Name) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildFence(B.Value, (int)ordering, singleThread, Name));
        return ret;
    }

  public unsafe static ValueRef BuildAtomicRMW(BuilderRef B, AtomicRMWBinOp op, ValueRef PTR, ValueRef Val, AtomicOrdering ordering, bool singleThread) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildAtomicRMW(B.Value, (int)op, PTR.Value, Val.Value, (int)ordering, singleThread));
        return ret;
    }

  public unsafe static ValueRef BuildAtomicCmpXchg(BuilderRef B, ValueRef Ptr, ValueRef Cmp, ValueRef New, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, bool SingleThread) {
        ValueRef ret = new ValueRef(LLVMPINVOKE.BuildAtomicCmpXchg(B.Value, Ptr.Value, Cmp.Value, New.Value, (int)SuccessOrdering, (int)FailureOrdering, SingleThread));
        return ret;
    }

  public unsafe static bool IsAtomicSingleThread(ValueRef AtomicInst) {
    bool ret = LLVMPINVOKE.IsAtomicSingleThread(AtomicInst.Value);
    return ret;
  }

  public unsafe static void SetAtomicSingleThread(ValueRef AtomicInst, bool SingleThread) {
    LLVMPINVOKE.SetAtomicSingleThread(AtomicInst.Value, SingleThread);
  }

  public unsafe static AtomicOrdering GetCmpXchgSuccessOrdering(ValueRef CmpXchgInst) {
    AtomicOrdering ret = (AtomicOrdering)LLVMPINVOKE.GetCmpXchgSuccessOrdering(CmpXchgInst.Value);
    return ret;
  }

  public unsafe static void SetCmpXchgSuccessOrdering(ValueRef CmpXchgInst, AtomicOrdering Ordering) {
    LLVMPINVOKE.SetCmpXchgSuccessOrdering(CmpXchgInst.Value, (int)Ordering);
  }

  public unsafe static AtomicOrdering GetCmpXchgFailureOrdering(ValueRef CmpXchgInst) {
    AtomicOrdering ret = (AtomicOrdering)LLVMPINVOKE.GetCmpXchgFailureOrdering(CmpXchgInst.Value);
    return ret;
  }

  public unsafe static void SetCmpXchgFailureOrdering(ValueRef CmpXchgInst, AtomicOrdering Ordering) {
    LLVMPINVOKE.SetCmpXchgFailureOrdering(CmpXchgInst.Value, (int)Ordering);
  }

  public unsafe static ModuleProviderRef CreateModuleProviderForExistingModule(ModuleRef M) {
        ModuleProviderRef ret = new ModuleProviderRef(LLVMPINVOKE.CreateModuleProviderForExistingModule(M.Value));
        return ret;
    }

  public unsafe static void DisposeModuleProvider(ModuleProviderRef M) {
    LLVMPINVOKE.DisposeModuleProvider(M.Value);
  }

  public unsafe static bool CreateMemoryBufferWithContentsOfFile(string Path, out MemoryBufferRef OutMemBuf, out string OutMessage) {
    bool ret = LLVMPINVOKE.CreateMemoryBufferWithContentsOfFile(Path, out OutMemBuf.Value, out OutMessage);
    return ret;
  }

  public unsafe static bool CreateMemoryBufferWithSTDIN(out MemoryBufferRef OutMemBuf, out string OutMessage) {
    bool ret = LLVMPINVOKE.CreateMemoryBufferWithSTDIN(out OutMemBuf.Value, out OutMessage);
    return ret;
  }

  public unsafe static MemoryBufferRef CreateMemoryBufferWithMemoryRange(string InputData, uint InputDataLength, string BufferName, bool RequiresNullTerminator) {
        MemoryBufferRef ret = new MemoryBufferRef(LLVMPINVOKE.CreateMemoryBufferWithMemoryRange(InputData, InputDataLength, BufferName, RequiresNullTerminator));
        return ret;
    }

  public unsafe static MemoryBufferRef CreateMemoryBufferWithMemoryRangeCopy(string InputData, uint InputDataLength, string BufferName) {
        MemoryBufferRef ret = new MemoryBufferRef(LLVMPINVOKE.CreateMemoryBufferWithMemoryRangeCopy(InputData, InputDataLength, BufferName));
        return ret;
    }

  public unsafe static string GetBufferStart(MemoryBufferRef MemBuf) {
    string ret = LLVMPINVOKE.GetBufferStart(MemBuf.Value);
    return ret;
  }

  public unsafe static uint GetBufferSize(MemoryBufferRef MemBuf) {
    uint ret = LLVMPINVOKE.GetBufferSize(MemBuf.Value);
    return ret;
  }

  public unsafe static void DisposeMemoryBuffer(MemoryBufferRef MemBuf) {
    LLVMPINVOKE.DisposeMemoryBuffer(MemBuf.Value);
  }

  public unsafe static PassRegistryRef GetGlobalPassRegistry() {
        PassRegistryRef ret = new PassRegistryRef(LLVMPINVOKE.GetGlobalPassRegistry());
        return ret;
    }

  public unsafe static PassManagerRef CreatePassManager() {
        PassManagerRef ret = new PassManagerRef(LLVMPINVOKE.CreatePassManager());
        return ret;
    }

  public unsafe static PassManagerRef CreateFunctionPassManagerForModule(ModuleRef M) {
        PassManagerRef ret = new PassManagerRef(LLVMPINVOKE.CreateFunctionPassManagerForModule(M.Value));
        return ret;
    }

  public unsafe static PassManagerRef CreateFunctionPassManager(ModuleProviderRef MP) {
        PassManagerRef ret = new PassManagerRef(LLVMPINVOKE.CreateFunctionPassManager(MP.Value));
        return ret;
    }

  public unsafe static bool RunPassManager(PassManagerRef PM, ModuleRef M) {
    bool ret = LLVMPINVOKE.RunPassManager(PM.Value, M.Value);
    return ret;
  }

  public unsafe static bool InitializeFunctionPassManager(PassManagerRef FPM) {
    bool ret = LLVMPINVOKE.InitializeFunctionPassManager(FPM.Value);
    return ret;
  }

  public unsafe static bool RunFunctionPassManager(PassManagerRef FPM, ValueRef F) {
    bool ret = LLVMPINVOKE.RunFunctionPassManager(FPM.Value, F.Value);
    return ret;
  }

  public unsafe static bool FinalizeFunctionPassManager(PassManagerRef FPM) {
    bool ret = LLVMPINVOKE.FinalizeFunctionPassManager(FPM.Value);
    return ret;
  }

  public unsafe static void DisposePassManager(PassManagerRef PM) {
    LLVMPINVOKE.DisposePassManager(PM.Value);
  }

  public unsafe static bool StartMultithreaded() {
    bool ret = LLVMPINVOKE.StartMultithreaded();
    return ret;
  }

  public unsafe static void StopMultithreaded() {
    LLVMPINVOKE.StopMultithreaded();
  }

  public unsafe static bool IsMultithreaded() {
    bool ret = LLVMPINVOKE.IsMultithreaded();
    return ret;
  }

  public unsafe static bool VerifyModule(ModuleRef M, VerifierFailureAction Action, out string OutMessage) {
    bool ret = LLVMPINVOKE.VerifyModule(M.Value, (int)Action, out OutMessage);
    return ret;
  }

  public unsafe static bool VerifyFunction(ValueRef Fn, VerifierFailureAction Action) {
    bool ret = LLVMPINVOKE.VerifyFunction(Fn.Value, (int)Action);
    return ret;
  }

  public unsafe static bool ParseBitcode(MemoryBufferRef MemBuf, out ModuleRef OutModule, out string OutMessage) {
    bool ret = LLVMPINVOKE.ParseBitcode(MemBuf.Value, out OutModule.Value, out OutMessage);
    return ret;
  }

  public unsafe static bool ParseBitcode2(MemoryBufferRef MemBuf, out ModuleRef OutModule) {
    bool ret = LLVMPINVOKE.ParseBitcode2(MemBuf.Value, out OutModule.Value);
    return ret;
  }

  public unsafe static bool ParseBitcodeInContext(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutModule, out string OutMessage) {
    bool ret = LLVMPINVOKE.ParseBitcodeInContext(ContextRef.Value, MemBuf.Value, out OutModule.Value, out OutMessage);
    return ret;
  }

  public unsafe static bool ParseBitcodeInContext2(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutModule) {
    bool ret = LLVMPINVOKE.ParseBitcodeInContext2(ContextRef.Value, MemBuf.Value, out OutModule.Value);
    return ret;
  }

  public unsafe static bool GetBitcodeModuleInContext(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutM, out string OutMessage) {
    bool ret = LLVMPINVOKE.GetBitcodeModuleInContext(ContextRef.Value, MemBuf.Value, out OutM.Value, out OutMessage);
    return ret;
  }

  public unsafe static bool GetBitcodeModuleInContext2(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutM) {
    bool ret = LLVMPINVOKE.GetBitcodeModuleInContext2(ContextRef.Value, MemBuf.Value, out OutM.Value);
    return ret;
  }

  public unsafe static bool GetBitcodeModule(MemoryBufferRef MemBuf, out ModuleRef OutM, out string OutMessage) {
    bool ret = LLVMPINVOKE.GetBitcodeModule(MemBuf.Value, out OutM.Value, out OutMessage);
    return ret;
  }

  public unsafe static bool GetBitcodeModule2(MemoryBufferRef MemBuf, out ModuleRef OutM) {
    bool ret = LLVMPINVOKE.GetBitcodeModule2(MemBuf.Value, out OutM.Value);
    return ret;
  }

  public unsafe static int WriteBitcodeToFile(ModuleRef M, string Path) {
    int ret = LLVMPINVOKE.WriteBitcodeToFile(M.Value, Path);
    return ret;
  }

  public unsafe static int WriteBitcodeToFD(ModuleRef M, int FD, int ShouldClose, int Unbuffered) {
    int ret = LLVMPINVOKE.WriteBitcodeToFD(M.Value, FD, ShouldClose, Unbuffered);
    return ret;
  }

  public unsafe static int WriteBitcodeToFileHandle(ModuleRef M, int Handle) {
    int ret = LLVMPINVOKE.WriteBitcodeToFileHandle(M.Value, Handle);
    return ret;
  }

  public unsafe static MemoryBufferRef WriteBitcodeToMemoryBuffer(ModuleRef M) {
        MemoryBufferRef ret = new MemoryBufferRef(LLVMPINVOKE.WriteBitcodeToMemoryBuffer(M.Value));
        return ret;
    }

  public unsafe static int SetDisasmOptions(System.IntPtr DC, ulong Options) {
    int ret = LLVMPINVOKE.SetDisasmOptions(DC, Options);
    return ret;
  }

  public unsafe static void DisasmDispose(System.IntPtr DC) {
    LLVMPINVOKE.DisasmDispose(DC);
  }

  public unsafe static void ResetFatalErrorHandler() {
    LLVMPINVOKE.ResetFatalErrorHandler();
  }

  public unsafe static void EnablePrettyStackTrace() {
    LLVMPINVOKE.EnablePrettyStackTrace();
  }

  public unsafe static void LinkInMCJIT() {
    LLVMPINVOKE.LinkInMCJIT();
  }

  public unsafe static void LinkInInterpreter() {
    LLVMPINVOKE.LinkInInterpreter();
  }

  public unsafe static GenericValueRef CreateGenericValueOfInt(TypeRef Ty, ulong N, bool IsSigned) {
        GenericValueRef ret = new GenericValueRef(LLVMPINVOKE.CreateGenericValueOfInt(Ty.Value, N, IsSigned));
        return ret;
    }

  public unsafe static GenericValueRef CreateGenericValueOfPointer(System.IntPtr P) {
        GenericValueRef ret = new GenericValueRef(LLVMPINVOKE.CreateGenericValueOfPointer(P));
        return ret;
    }

  public unsafe static GenericValueRef CreateGenericValueOfFloat(TypeRef Ty, double N) {
        GenericValueRef ret = new GenericValueRef(LLVMPINVOKE.CreateGenericValueOfFloat(Ty.Value, N));
        return ret;
    }

  public unsafe static uint GenericValueIntWidth(GenericValueRef GenValRef) {
    uint ret = LLVMPINVOKE.GenericValueIntWidth(GenValRef.Value);
    return ret;
  }

  public unsafe static ulong GenericValueToInt(GenericValueRef GenVal, bool IsSigned) {
    ulong ret = LLVMPINVOKE.GenericValueToInt(GenVal.Value, IsSigned);
    return ret;
  }

  public unsafe static System.IntPtr GenericValueToPointer(GenericValueRef GenVal) { return LLVMPINVOKE.GenericValueToPointer(GenVal.Value); }

  public unsafe static double GenericValueToFloat(TypeRef TyRef, GenericValueRef GenVal) {
    double ret = LLVMPINVOKE.GenericValueToFloat(TyRef.Value, GenVal.Value);
    return ret;
  }

  public unsafe static void DisposeGenericValue(GenericValueRef GenVal) {
    LLVMPINVOKE.DisposeGenericValue(GenVal.Value);
  }

  public unsafe static bool CreateExecutionEngineForModule(out ExecutionEngineRef OutEE, ModuleRef M, out string OutError) {
    bool ret = LLVMPINVOKE.CreateExecutionEngineForModule(out OutEE.Value, M.Value, out OutError);
    return ret;
  }

  public unsafe static bool CreateInterpreterForModule(out ExecutionEngineRef OutInterp, ModuleRef M, out string OutError) {
    bool ret = LLVMPINVOKE.CreateInterpreterForModule(out OutInterp.Value, M.Value, out OutError);
    return ret;
  }

  public unsafe static bool CreateJITCompilerForModule(out ExecutionEngineRef OutJIT, ModuleRef M, uint OptLevel, out string OutError) {
    bool ret = LLVMPINVOKE.CreateJITCompilerForModule(out OutJIT.Value, M.Value, OptLevel, out OutError);
    return ret;
  }

  public unsafe static void InitializeMCJITCompilerOptions(out MCJITCompilerOptions Options, uint SizeOfOptions) {
    LLVMPINVOKE.InitializeMCJITCompilerOptions(out Options.Value, SizeOfOptions);
  }

  public unsafe static bool CreateMCJITCompilerForModule(out ExecutionEngineRef OutJIT, ModuleRef M, out MCJITCompilerOptions Options, uint SizeOfOptions, out string OutError) {
    bool ret = LLVMPINVOKE.CreateMCJITCompilerForModule(out OutJIT.Value, M.Value, out Options.Value, SizeOfOptions, out OutError);
    return ret;
  }

  public unsafe static void DisposeExecutionEngine(ExecutionEngineRef EE) {
    LLVMPINVOKE.DisposeExecutionEngine(EE.Value);
  }

  public unsafe static void RunStaticConstructors(ExecutionEngineRef EE) {
    LLVMPINVOKE.RunStaticConstructors(EE.Value);
  }

  public unsafe static void RunStaticDestructors(ExecutionEngineRef EE) {
    LLVMPINVOKE.RunStaticDestructors(EE.Value);
  }

  public unsafe static int RunFunctionAsMain(ExecutionEngineRef EE, ValueRef F, uint ArgC, out string ArgV, out string EnvP) {
    int ret = LLVMPINVOKE.RunFunctionAsMain(EE.Value, F.Value, ArgC, out ArgV, out EnvP);
    return ret;
  }

  public unsafe static GenericValueRef RunFunction(ExecutionEngineRef EE, ValueRef F, uint NumArgs, out GenericValueRef Args) {
        GenericValueRef ret = new GenericValueRef(LLVMPINVOKE.RunFunction(EE.Value, F.Value, NumArgs, out Args.Value));
        return ret;
    }

  public unsafe static void FreeMachineCodeForFunction(ExecutionEngineRef EE, ValueRef F) {
    LLVMPINVOKE.FreeMachineCodeForFunction(EE.Value, F.Value);
  }

  public unsafe static void AddModule(ExecutionEngineRef EE, ModuleRef M) {
    LLVMPINVOKE.AddModule(EE.Value, M.Value);
  }

  public unsafe static bool RemoveModule(ExecutionEngineRef EE, ModuleRef M, out ModuleRef OutMod, out string OutError) {
    bool ret = LLVMPINVOKE.RemoveModule(EE.Value, M.Value, out OutMod.Value, out OutError);
    return ret;
  }

  public unsafe static bool FindFunction(ExecutionEngineRef EE, string Name, out ValueRef OutFn) {
    bool ret = LLVMPINVOKE.FindFunction(EE.Value, Name, out OutFn.Value);
    return ret;
  }

  public unsafe static System.IntPtr RecompileAndRelinkFunction(ExecutionEngineRef EE, ValueRef Fn) { return LLVMPINVOKE.RecompileAndRelinkFunction(EE.Value, Fn.Value); }

  public unsafe static TargetDataRef GetExecutionEngineTargetData(ExecutionEngineRef EE) {
        TargetDataRef ret = new TargetDataRef(LLVMPINVOKE.GetExecutionEngineTargetData(EE.Value));
        return ret;
    }

  public unsafe static TargetMachineRef GetExecutionEngineTargetMachine(ExecutionEngineRef EE) {
        TargetMachineRef ret = new TargetMachineRef(LLVMPINVOKE.GetExecutionEngineTargetMachine(EE.Value));
        return ret;
    }

  public unsafe static void AddGlobalMapping(ExecutionEngineRef EE, ValueRef Global, System.IntPtr Addr) {
    LLVMPINVOKE.AddGlobalMapping(EE.Value, Global.Value, Addr);
  }

  public unsafe static System.IntPtr GetPointerToGlobal(ExecutionEngineRef EE, ValueRef Global) { return LLVMPINVOKE.GetPointerToGlobal(EE.Value, Global.Value); }

  public unsafe static ulong GetGlobalValueAddress(ExecutionEngineRef EE, string Name) {
    ulong ret = LLVMPINVOKE.GetGlobalValueAddress(EE.Value, Name);
    return ret;
  }

  public unsafe static ulong GetFunctionAddress(ExecutionEngineRef EE, string Name) {
    ulong ret = LLVMPINVOKE.GetFunctionAddress(EE.Value, Name);
    return ret;
  }

  public unsafe static void DisposeMCJITMemoryManager(MCJITMemoryManagerRef MM) {
    LLVMPINVOKE.DisposeMCJITMemoryManager(MM.Value);
  }

  public unsafe static void InitializeTransformUtils(PassRegistryRef R) {
    LLVMPINVOKE.InitializeTransformUtils(R.Value);
  }

  public unsafe static void InitializeScalarOpts(PassRegistryRef R) {
    LLVMPINVOKE.InitializeScalarOpts(R.Value);
  }

  public unsafe static void InitializeObjCARCOpts(PassRegistryRef R) {
    LLVMPINVOKE.InitializeObjCARCOpts(R.Value);
  }

  public unsafe static void InitializeVectorization(PassRegistryRef R) {
    LLVMPINVOKE.InitializeVectorization(R.Value);
  }

  public unsafe static void InitializeInstCombine(PassRegistryRef R) {
    LLVMPINVOKE.InitializeInstCombine(R.Value);
  }

  public unsafe static void InitializeIPO(PassRegistryRef R) {
    LLVMPINVOKE.InitializeIPO(R.Value);
  }

  public unsafe static void InitializeInstrumentation(PassRegistryRef R) {
    LLVMPINVOKE.InitializeInstrumentation(R.Value);
  }

  public unsafe static void InitializeAnalysis(PassRegistryRef R) {
    LLVMPINVOKE.InitializeAnalysis(R.Value);
  }

  public unsafe static void InitializeIPA(PassRegistryRef R) {
    LLVMPINVOKE.InitializeIPA(R.Value);
  }

  public unsafe static void InitializeCodeGen(PassRegistryRef R) {
    LLVMPINVOKE.InitializeCodeGen(R.Value);
  }

  public unsafe static void InitializeTarget(PassRegistryRef R) {
    LLVMPINVOKE.InitializeTarget(R.Value);
  }

  public unsafe static bool ParseIRInContext(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutM, out string OutMessage) {
    bool ret = LLVMPINVOKE.ParseIRInContext(ContextRef.Value, MemBuf.Value, out OutM.Value, out OutMessage);
    return ret;
  }

  public unsafe static bool LinkModules2(ModuleRef Dest, ModuleRef Src) {
    bool ret = LLVMPINVOKE.LinkModules2(Dest.Value, Src.Value);
    return ret;
  }

  public unsafe static OrcJITStackRef OrcCreateInstance(TargetMachineRef TM) {
        OrcJITStackRef ret = new OrcJITStackRef(LLVMPINVOKE.OrcCreateInstance(TM.Value));
        return ret;
    }

  public unsafe static string OrcGetErrorMsg(OrcJITStackRef JITStack) {
    string ret = LLVMPINVOKE.OrcGetErrorMsg(JITStack.Value);
    return ret;
  }

  public unsafe static void OrcGetMangledSymbol(OrcJITStackRef JITStack, out string MangledSymbol, string Symbol) {
    LLVMPINVOKE.OrcGetMangledSymbol(JITStack.Value, out MangledSymbol, Symbol);
  }

  public unsafe static void OrcDisposeMangledSymbol(string MangledSymbol) {
    LLVMPINVOKE.OrcDisposeMangledSymbol(MangledSymbol);
  }

  public unsafe static OrcErrorCode OrcCreateIndirectStub(OrcJITStackRef JITStack, string StubName, ulong InitAddr) {
    OrcErrorCode ret = (OrcErrorCode)LLVMPINVOKE.OrcCreateIndirectStub(JITStack.Value, StubName, InitAddr);
    return ret;
  }

  public unsafe static OrcErrorCode OrcSetIndirectStubPointer(OrcJITStackRef JITStack, string StubName, ulong NewAddr) {
    OrcErrorCode ret = (OrcErrorCode)LLVMPINVOKE.OrcSetIndirectStubPointer(JITStack.Value, StubName, NewAddr);
    return ret;
  }

  public unsafe static void OrcRemoveModule(OrcJITStackRef JITStack, uint H) {
    LLVMPINVOKE.OrcRemoveModule(JITStack.Value, H);
  }

  public unsafe static ulong OrcGetSymbolAddress(OrcJITStackRef JITStack, string SymbolName) {
    ulong ret = LLVMPINVOKE.OrcGetSymbolAddress(JITStack.Value, SymbolName);
    return ret;
  }

  public unsafe static void OrcDisposeInstance(OrcJITStackRef JITStack) {
    LLVMPINVOKE.OrcDisposeInstance(JITStack.Value);
  }

  public unsafe static bool LoadLibraryPermanently(string Filename) {
    bool ret = LLVMPINVOKE.LoadLibraryPermanently(Filename);
    return ret;
  }

  public unsafe static void ParseCommandLineOptions(int argc, out string argv, string Overview) {
    LLVMPINVOKE.ParseCommandLineOptions(argc, out argv, Overview);
  }

  public unsafe static System.IntPtr SearchForAddressOfSymbol(string symbolName) { return LLVMPINVOKE.SearchForAddressOfSymbol(symbolName); }

  public unsafe static void AddSymbol(string symbolName, System.IntPtr symbolValue) {
    LLVMPINVOKE.AddSymbol(symbolName, symbolValue);
  }

  public unsafe static void InitializeAllTargetInfos() {
    LLVMPINVOKE.InitializeAllTargetInfos();
  }

  public unsafe static void InitializeAllTargets() {
    LLVMPINVOKE.InitializeAllTargets();
  }

  public unsafe static void InitializeAllTargetMCs() {
    LLVMPINVOKE.InitializeAllTargetMCs();
  }

  public unsafe static void InitializeAllAsmPrinters() {
    LLVMPINVOKE.InitializeAllAsmPrinters();
  }

  public unsafe static void InitializeAllAsmParsers() {
    LLVMPINVOKE.InitializeAllAsmParsers();
  }

  public unsafe static void InitializeAllDisassemblers() {
    LLVMPINVOKE.InitializeAllDisassemblers();
  }

  public unsafe static bool InitializeNativeTarget() {
    bool ret = LLVMPINVOKE.InitializeNativeTarget();
    return ret;
  }

  public unsafe static bool InitializeNativeAsmParser() {
    bool ret = LLVMPINVOKE.InitializeNativeAsmParser();
    return ret;
  }

  public unsafe static bool InitializeNativeAsmPrinter() {
    bool ret = LLVMPINVOKE.InitializeNativeAsmPrinter();
    return ret;
  }

  public unsafe static bool InitializeNativeDisassembler() {
    bool ret = LLVMPINVOKE.InitializeNativeDisassembler();
    return ret;
  }

  public unsafe static TargetDataRef GetModuleDataLayout(ModuleRef M) {
        TargetDataRef ret = new TargetDataRef(LLVMPINVOKE.GetModuleDataLayout(M.Value));
        return ret;
    }

  public unsafe static void SetModuleDataLayout(ModuleRef M, TargetDataRef DL) {
    LLVMPINVOKE.SetModuleDataLayout(M.Value, DL.Value);
  }

  public unsafe static TargetDataRef CreateTargetData(string StringRep) {
        TargetDataRef ret = new TargetDataRef(LLVMPINVOKE.CreateTargetData(StringRep));
        return ret;
    }

  public unsafe static void DisposeTargetData(TargetDataRef TD) {
    LLVMPINVOKE.DisposeTargetData(TD.Value);
  }

  public unsafe static void AddTargetLibraryInfo(TargetLibraryInfoRef TLI, PassManagerRef PM) {
    LLVMPINVOKE.AddTargetLibraryInfo(TLI.Value, PM.Value);
  }

  public unsafe static string CopyStringRepOfTargetData(TargetDataRef TD) {
    string ret = LLVMPINVOKE.CopyStringRepOfTargetData(TD.Value);
    return ret;
  }

  public unsafe static ByteOrdering ByteOrder(TargetDataRef TD) {
    ByteOrdering ret = (ByteOrdering)LLVMPINVOKE.ByteOrder(TD.Value);
    return ret;
  }

  public unsafe static uint PointerSize(TargetDataRef TD) {
    uint ret = LLVMPINVOKE.PointerSize(TD.Value);
    return ret;
  }

  public unsafe static uint PointerSizeForAS(TargetDataRef TD, uint AS) {
    uint ret = LLVMPINVOKE.PointerSizeForAS(TD.Value, AS);
    return ret;
  }

  public unsafe static TypeRef IntPtrType(TargetDataRef TD) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.IntPtrType(TD.Value));
        return ret;
    }

  public unsafe static TypeRef IntPtrTypeForAS(TargetDataRef TD, uint AS) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.IntPtrTypeForAS(TD.Value, AS));
        return ret;
    }

  public unsafe static TypeRef IntPtrTypeInContext(ContextRef C, TargetDataRef TD) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.IntPtrTypeInContext(C.Value, TD.Value));
        return ret;
    }

  public unsafe static TypeRef IntPtrTypeForASInContext(ContextRef C, TargetDataRef TD, uint AS) {
        TypeRef ret = new TypeRef(LLVMPINVOKE.IntPtrTypeForASInContext(C.Value, TD.Value, AS));
        return ret;
    }

  public unsafe static ulong SizeOfTypeInBits(TargetDataRef TD, TypeRef Ty) {
    ulong ret = LLVMPINVOKE.SizeOfTypeInBits(TD.Value, Ty.Value);
    return ret;
  }

  public unsafe static ulong StoreSizeOfType(TargetDataRef TD, TypeRef Ty) {
    ulong ret = LLVMPINVOKE.StoreSizeOfType(TD.Value, Ty.Value);
    return ret;
  }

  public unsafe static ulong ABISizeOfType(TargetDataRef TD, TypeRef Ty) {
    ulong ret = LLVMPINVOKE.ABISizeOfType(TD.Value, Ty.Value);
    return ret;
  }

  public unsafe static uint ABIAlignmentOfType(TargetDataRef TD, TypeRef Ty) {
    uint ret = LLVMPINVOKE.ABIAlignmentOfType(TD.Value, Ty.Value);
    return ret;
  }

  public unsafe static uint CallFrameAlignmentOfType(TargetDataRef TD, TypeRef Ty) {
    uint ret = LLVMPINVOKE.CallFrameAlignmentOfType(TD.Value, Ty.Value);
    return ret;
  }

  public unsafe static uint PreferredAlignmentOfType(TargetDataRef TD, TypeRef Ty) {
    uint ret = LLVMPINVOKE.PreferredAlignmentOfType(TD.Value, Ty.Value);
    return ret;
  }

  public unsafe static uint PreferredAlignmentOfGlobal(TargetDataRef TD, ValueRef GlobalVar) {
    uint ret = LLVMPINVOKE.PreferredAlignmentOfGlobal(TD.Value, GlobalVar.Value);
    return ret;
  }

  public unsafe static uint ElementAtOffset(TargetDataRef TD, TypeRef StructTy, ulong Offset) {
    uint ret = LLVMPINVOKE.ElementAtOffset(TD.Value, StructTy.Value, Offset);
    return ret;
  }

  public unsafe static ulong OffsetOfElement(TargetDataRef TD, TypeRef StructTy, uint Element) {
    ulong ret = LLVMPINVOKE.OffsetOfElement(TD.Value, StructTy.Value, Element);
    return ret;
  }

  public unsafe static TargetRef GetFirstTarget() {
        TargetRef ret = new TargetRef(LLVMPINVOKE.GetFirstTarget());
        return ret;
    }

  public unsafe static TargetRef GetNextTarget(TargetRef T) {
        TargetRef ret = new TargetRef(LLVMPINVOKE.GetNextTarget(T.Value));
        return ret;
    }

  public unsafe static TargetRef GetTargetFromName(string Name) {
        TargetRef ret = new TargetRef(LLVMPINVOKE.GetTargetFromName(Name));
        return ret;
    }

  public unsafe static bool GetTargetFromTriple(string Triple, out TargetRef T, out string ErrorMessage) {
    bool ret = LLVMPINVOKE.GetTargetFromTriple(Triple, out T.Value, out ErrorMessage);
    return ret;
  }

  public unsafe static string GetTargetName(TargetRef T) {
    string ret = LLVMPINVOKE.GetTargetName(T.Value);
    return ret;
  }

  public unsafe static string GetTargetDescription(TargetRef T) {
    string ret = LLVMPINVOKE.GetTargetDescription(T.Value);
    return ret;
  }

  public unsafe static bool TargetHasJIT(TargetRef T) {
    bool ret = LLVMPINVOKE.TargetHasJIT(T.Value);
    return ret;
  }

  public unsafe static bool TargetHasTargetMachine(TargetRef T) {
    bool ret = LLVMPINVOKE.TargetHasTargetMachine(T.Value);
    return ret;
  }

  public unsafe static bool TargetHasAsmBackend(TargetRef T) {
    bool ret = LLVMPINVOKE.TargetHasAsmBackend(T.Value);
    return ret;
  }

  public unsafe static TargetMachineRef CreateTargetMachine(TargetRef T, string Triple, string CPU, string Features, CodeGenOptLevel Level, RelocMode Reloc, CodeModel CodeModel) {
        TargetMachineRef ret = new TargetMachineRef(LLVMPINVOKE.CreateTargetMachine(T.Value, Triple, CPU, Features, (int)Level, (int)Reloc, (int)CodeModel));
        return ret;
    }

  public unsafe static void DisposeTargetMachine(TargetMachineRef T) {
    LLVMPINVOKE.DisposeTargetMachine(T.Value);
  }

  public unsafe static TargetRef GetTargetMachineTarget(TargetMachineRef T) {
        TargetRef ret = new TargetRef(LLVMPINVOKE.GetTargetMachineTarget(T.Value));
        return ret;
    }

  public unsafe static string GetTargetMachineTriple(TargetMachineRef T) {
    string ret = LLVMPINVOKE.GetTargetMachineTriple(T.Value);
    return ret;
  }

  public unsafe static string GetTargetMachineCPU(TargetMachineRef T) {
    string ret = LLVMPINVOKE.GetTargetMachineCPU(T.Value);
    return ret;
  }

  public unsafe static string GetTargetMachineFeatureString(TargetMachineRef T) {
    string ret = LLVMPINVOKE.GetTargetMachineFeatureString(T.Value);
    return ret;
  }

  public unsafe static TargetDataRef CreateTargetDataLayout(TargetMachineRef T) {
        TargetDataRef ret = new TargetDataRef(LLVMPINVOKE.CreateTargetDataLayout(T.Value));
        return ret;
    }

  public unsafe static void SetTargetMachineAsmVerbosity(TargetMachineRef T, bool VerboseAsm) {
    LLVMPINVOKE.SetTargetMachineAsmVerbosity(T.Value, VerboseAsm);
  }

  public unsafe static bool TargetMachineEmitToFile(TargetMachineRef T, ModuleRef M, string Filename, CodeGenFileType codegen, out string ErrorMessage) {
    bool ret = LLVMPINVOKE.TargetMachineEmitToFile(T.Value, M.Value, Filename, (int)codegen, out ErrorMessage);
    return ret;
  }

  public unsafe static bool TargetMachineEmitToMemoryBuffer(TargetMachineRef T, ModuleRef M, CodeGenFileType codegen, out string ErrorMessage, out MemoryBufferRef OutMemBuf) {
    bool ret = LLVMPINVOKE.TargetMachineEmitToMemoryBuffer(T.Value, M.Value, (int)codegen, out ErrorMessage, out OutMemBuf.Value);
    return ret;
  }

  public unsafe static string GetDefaultTargetTriple() {
    string ret = LLVMPINVOKE.GetDefaultTargetTriple();
    return ret;
  }

  public unsafe static void AddAnalysisPasses(TargetMachineRef T, PassManagerRef PM) {
    LLVMPINVOKE.AddAnalysisPasses(T.Value, PM.Value);
  }

  public unsafe static void AddArgumentPromotionPass(PassManagerRef PM) {
    LLVMPINVOKE.AddArgumentPromotionPass(PM.Value);
  }

  public unsafe static void AddConstantMergePass(PassManagerRef PM) {
    LLVMPINVOKE.AddConstantMergePass(PM.Value);
  }

  public unsafe static void AddDeadArgEliminationPass(PassManagerRef PM) {
    LLVMPINVOKE.AddDeadArgEliminationPass(PM.Value);
  }

  public unsafe static void AddFunctionAttrsPass(PassManagerRef PM) {
    LLVMPINVOKE.AddFunctionAttrsPass(PM.Value);
  }

  public unsafe static void AddFunctionInliningPass(PassManagerRef PM) {
    LLVMPINVOKE.AddFunctionInliningPass(PM.Value);
  }

  public unsafe static void AddAlwaysInlinerPass(PassManagerRef PM) {
    LLVMPINVOKE.AddAlwaysInlinerPass(PM.Value);
  }

  public unsafe static void AddGlobalDCEPass(PassManagerRef PM) {
    LLVMPINVOKE.AddGlobalDCEPass(PM.Value);
  }

  public unsafe static void AddGlobalOptimizerPass(PassManagerRef PM) {
    LLVMPINVOKE.AddGlobalOptimizerPass(PM.Value);
  }

  public unsafe static void AddIPConstantPropagationPass(PassManagerRef PM) {
    LLVMPINVOKE.AddIPConstantPropagationPass(PM.Value);
  }

  public unsafe static void AddPruneEHPass(PassManagerRef PM) {
    LLVMPINVOKE.AddPruneEHPass(PM.Value);
  }

  public unsafe static void AddIPSCCPPass(PassManagerRef PM) {
    LLVMPINVOKE.AddIPSCCPPass(PM.Value);
  }

  public unsafe static void AddInternalizePass(PassManagerRef arg0, uint AllButMain) {
    LLVMPINVOKE.AddInternalizePass(arg0.Value, AllButMain);
  }

  public unsafe static void AddStripDeadPrototypesPass(PassManagerRef PM) {
    LLVMPINVOKE.AddStripDeadPrototypesPass(PM.Value);
  }

  public unsafe static void AddStripSymbolsPass(PassManagerRef PM) {
    LLVMPINVOKE.AddStripSymbolsPass(PM.Value);
  }

  public unsafe static PassManagerBuilderRef PassManagerBuilderCreate() {
        PassManagerBuilderRef ret = new PassManagerBuilderRef(LLVMPINVOKE.PassManagerBuilderCreate());
        return ret;
    }

  public unsafe static void PassManagerBuilderDispose(PassManagerBuilderRef PMB) {
    LLVMPINVOKE.PassManagerBuilderDispose(PMB.Value);
  }

  public unsafe static void PassManagerBuilderSetOptLevel(PassManagerBuilderRef PMB, uint OptLevel) {
    LLVMPINVOKE.PassManagerBuilderSetOptLevel(PMB.Value, OptLevel);
  }

  public unsafe static void PassManagerBuilderSetSizeLevel(PassManagerBuilderRef PMB, uint SizeLevel) {
    LLVMPINVOKE.PassManagerBuilderSetSizeLevel(PMB.Value, SizeLevel);
  }

  public unsafe static void PassManagerBuilderSetDisableUnitAtATime(PassManagerBuilderRef PMB, bool Value) {
    LLVMPINVOKE.PassManagerBuilderSetDisableUnitAtATime(PMB.Value, Value);
  }

  public unsafe static void PassManagerBuilderSetDisableUnrollLoops(PassManagerBuilderRef PMB, bool Value) {
    LLVMPINVOKE.PassManagerBuilderSetDisableUnrollLoops(PMB.Value, Value);
  }

  public unsafe static void PassManagerBuilderSetDisableSimplifyLibCalls(PassManagerBuilderRef PMB, bool Value) {
    LLVMPINVOKE.PassManagerBuilderSetDisableSimplifyLibCalls(PMB.Value, Value);
  }

  public unsafe static void PassManagerBuilderUseInlinerWithThreshold(PassManagerBuilderRef PMB, uint Threshold) {
    LLVMPINVOKE.PassManagerBuilderUseInlinerWithThreshold(PMB.Value, Threshold);
  }

  public unsafe static void PassManagerBuilderPopulateFunctionPassManager(PassManagerBuilderRef PMB, PassManagerRef PM) {
    LLVMPINVOKE.PassManagerBuilderPopulateFunctionPassManager(PMB.Value, PM.Value);
  }

  public unsafe static void PassManagerBuilderPopulateModulePassManager(PassManagerBuilderRef PMB, PassManagerRef PM) {
    LLVMPINVOKE.PassManagerBuilderPopulateModulePassManager(PMB.Value, PM.Value);
  }

  public unsafe static void PassManagerBuilderPopulateLTOPassManager(PassManagerBuilderRef PMB, PassManagerRef PM, bool Internalize, bool RunInliner) {
    LLVMPINVOKE.PassManagerBuilderPopulateLTOPassManager(PMB.Value, PM.Value, Internalize, RunInliner);
  }

  public unsafe static void AddAggressiveDCEPass(PassManagerRef PM) {
    LLVMPINVOKE.AddAggressiveDCEPass(PM.Value);
  }

  public unsafe static void AddBitTrackingDCEPass(PassManagerRef PM) {
    LLVMPINVOKE.AddBitTrackingDCEPass(PM.Value);
  }

  public unsafe static void AddAlignmentFromAssumptionsPass(PassManagerRef PM) {
    LLVMPINVOKE.AddAlignmentFromAssumptionsPass(PM.Value);
  }

  public unsafe static void AddCFGSimplificationPass(PassManagerRef PM) {
    LLVMPINVOKE.AddCFGSimplificationPass(PM.Value);
  }

  public unsafe static void AddDeadStoreEliminationPass(PassManagerRef PM) {
    LLVMPINVOKE.AddDeadStoreEliminationPass(PM.Value);
  }

  public unsafe static void AddScalarizerPass(PassManagerRef PM) {
    LLVMPINVOKE.AddScalarizerPass(PM.Value);
  }

  public unsafe static void AddMergedLoadStoreMotionPass(PassManagerRef PM) {
    LLVMPINVOKE.AddMergedLoadStoreMotionPass(PM.Value);
  }

  public unsafe static void AddGVNPass(PassManagerRef PM) {
    LLVMPINVOKE.AddGVNPass(PM.Value);
  }

  public unsafe static void AddNewGVNPass(PassManagerRef PM) {
    LLVMPINVOKE.AddNewGVNPass(PM.Value);
  }

  public unsafe static void AddIndVarSimplifyPass(PassManagerRef PM) {
    LLVMPINVOKE.AddIndVarSimplifyPass(PM.Value);
  }

  public unsafe static void AddInstructionCombiningPass(PassManagerRef PM) {
    LLVMPINVOKE.AddInstructionCombiningPass(PM.Value);
  }

  public unsafe static void AddJumpThreadingPass(PassManagerRef PM) {
    LLVMPINVOKE.AddJumpThreadingPass(PM.Value);
  }

  public unsafe static void AddLICMPass(PassManagerRef PM) {
    LLVMPINVOKE.AddLICMPass(PM.Value);
  }

  public unsafe static void AddLoopDeletionPass(PassManagerRef PM) {
    LLVMPINVOKE.AddLoopDeletionPass(PM.Value);
  }

  public unsafe static void AddLoopIdiomPass(PassManagerRef PM) {
    LLVMPINVOKE.AddLoopIdiomPass(PM.Value);
  }

  public unsafe static void AddLoopRotatePass(PassManagerRef PM) {
    LLVMPINVOKE.AddLoopRotatePass(PM.Value);
  }

  public unsafe static void AddLoopRerollPass(PassManagerRef PM) {
    LLVMPINVOKE.AddLoopRerollPass(PM.Value);
  }

  public unsafe static void AddLoopUnrollPass(PassManagerRef PM) {
    LLVMPINVOKE.AddLoopUnrollPass(PM.Value);
  }

  public unsafe static void AddLoopUnswitchPass(PassManagerRef PM) {
    LLVMPINVOKE.AddLoopUnswitchPass(PM.Value);
  }

  public unsafe static void AddMemCpyOptPass(PassManagerRef PM) {
    LLVMPINVOKE.AddMemCpyOptPass(PM.Value);
  }

  public unsafe static void AddPartiallyInlineLibCallsPass(PassManagerRef PM) {
    LLVMPINVOKE.AddPartiallyInlineLibCallsPass(PM.Value);
  }

  public unsafe static void AddLowerSwitchPass(PassManagerRef PM) {
    LLVMPINVOKE.AddLowerSwitchPass(PM.Value);
  }

  public unsafe static void AddPromoteMemoryToRegisterPass(PassManagerRef PM) {
    LLVMPINVOKE.AddPromoteMemoryToRegisterPass(PM.Value);
  }

  public unsafe static void AddReassociatePass(PassManagerRef PM) {
    LLVMPINVOKE.AddReassociatePass(PM.Value);
  }

  public unsafe static void AddSCCPPass(PassManagerRef PM) {
    LLVMPINVOKE.AddSCCPPass(PM.Value);
  }

  public unsafe static void AddScalarReplAggregatesPass(PassManagerRef PM) {
    LLVMPINVOKE.AddScalarReplAggregatesPass(PM.Value);
  }

  public unsafe static void AddScalarReplAggregatesPassSSA(PassManagerRef PM) {
    LLVMPINVOKE.AddScalarReplAggregatesPassSSA(PM.Value);
  }

  public unsafe static void AddScalarReplAggregatesPassWithThreshold(PassManagerRef PM, int Threshold) {
    LLVMPINVOKE.AddScalarReplAggregatesPassWithThreshold(PM.Value, Threshold);
  }

  public unsafe static void AddSimplifyLibCallsPass(PassManagerRef PM) {
    LLVMPINVOKE.AddSimplifyLibCallsPass(PM.Value);
  }

  public unsafe static void AddTailCallEliminationPass(PassManagerRef PM) {
    LLVMPINVOKE.AddTailCallEliminationPass(PM.Value);
  }

  public unsafe static void AddConstantPropagationPass(PassManagerRef PM) {
    LLVMPINVOKE.AddConstantPropagationPass(PM.Value);
  }

  public unsafe static void AddDemoteMemoryToRegisterPass(PassManagerRef PM) {
    LLVMPINVOKE.AddDemoteMemoryToRegisterPass(PM.Value);
  }

  public unsafe static void AddVerifierPass(PassManagerRef PM) {
    LLVMPINVOKE.AddVerifierPass(PM.Value);
  }

  public unsafe static void AddCorrelatedValuePropagationPass(PassManagerRef PM) {
    LLVMPINVOKE.AddCorrelatedValuePropagationPass(PM.Value);
  }

  public unsafe static void AddEarlyCSEPass(PassManagerRef PM) {
    LLVMPINVOKE.AddEarlyCSEPass(PM.Value);
  }

  public unsafe static void AddEarlyCSEMemSSAPass(PassManagerRef PM) {
    LLVMPINVOKE.AddEarlyCSEMemSSAPass(PM.Value);
  }

  public unsafe static void AddLowerExpectIntrinsicPass(PassManagerRef PM) {
    LLVMPINVOKE.AddLowerExpectIntrinsicPass(PM.Value);
  }

  public unsafe static void AddTypeBasedAliasAnalysisPass(PassManagerRef PM) {
    LLVMPINVOKE.AddTypeBasedAliasAnalysisPass(PM.Value);
  }

  public unsafe static void AddScopedNoAliasAAPass(PassManagerRef PM) {
    LLVMPINVOKE.AddScopedNoAliasAAPass(PM.Value);
  }

  public unsafe static void AddBasicAliasAnalysisPass(PassManagerRef PM) {
    LLVMPINVOKE.AddBasicAliasAnalysisPass(PM.Value);
  }

  public unsafe static void AddBBVectorizePass(PassManagerRef PM) {
    LLVMPINVOKE.AddBBVectorizePass(PM.Value);
  }

  public unsafe static void AddLoopVectorizePass(PassManagerRef PM) {
    LLVMPINVOKE.AddLoopVectorizePass(PM.Value);
  }

  public unsafe static void AddSLPVectorizePass(PassManagerRef PM) {
    LLVMPINVOKE.AddSLPVectorizePass(PM.Value);
  }

  public unsafe static readonly int AttributeReturnIndex = LLVMPINVOKE.AttributeReturnIndex_get();
  public unsafe static readonly int AttributeFunctionIndex = LLVMPINVOKE.AttributeFunctionIndex_get();

  public unsafe static readonly int Disassembler_VariantKind_None = LLVMPINVOKE.Disassembler_VariantKind_None_get();
  public unsafe static readonly int Disassembler_VariantKind_ARM_HI16 = LLVMPINVOKE.Disassembler_VariantKind_ARM_HI16_get();
  public unsafe static readonly int Disassembler_VariantKind_ARM_LO16 = LLVMPINVOKE.Disassembler_VariantKind_ARM_LO16_get();
  public unsafe static readonly int Disassembler_VariantKind_ARM64_PAGE = LLVMPINVOKE.Disassembler_VariantKind_ARM64_PAGE_get();
  public unsafe static readonly int Disassembler_VariantKind_ARM64_PAGEOFF = LLVMPINVOKE.Disassembler_VariantKind_ARM64_PAGEOFF_get();
  public unsafe static readonly int Disassembler_VariantKind_ARM64_GOTPAGE = LLVMPINVOKE.Disassembler_VariantKind_ARM64_GOTPAGE_get();
  public unsafe static readonly int Disassembler_VariantKind_ARM64_GOTPAGEOFF = LLVMPINVOKE.Disassembler_VariantKind_ARM64_GOTPAGEOFF_get();
  public unsafe static readonly int Disassembler_VariantKind_ARM64_TLVP = LLVMPINVOKE.Disassembler_VariantKind_ARM64_TLVP_get();
  public unsafe static readonly int Disassembler_VariantKind_ARM64_TLVOFF = LLVMPINVOKE.Disassembler_VariantKind_ARM64_TLVOFF_get();
  public unsafe static readonly int Disassembler_ReferenceType_InOut_None = LLVMPINVOKE.Disassembler_ReferenceType_InOut_None_get();
  public unsafe static readonly int Disassembler_ReferenceType_In_Branch = LLVMPINVOKE.Disassembler_ReferenceType_In_Branch_get();
  public unsafe static readonly int Disassembler_ReferenceType_In_PCrel_Load = LLVMPINVOKE.Disassembler_ReferenceType_In_PCrel_Load_get();
  public unsafe static readonly int Disassembler_ReferenceType_In_ARM64_ADRP = LLVMPINVOKE.Disassembler_ReferenceType_In_ARM64_ADRP_get();
  public unsafe static readonly int Disassembler_ReferenceType_In_ARM64_ADDXri = LLVMPINVOKE.Disassembler_ReferenceType_In_ARM64_ADDXri_get();
  public unsafe static readonly int Disassembler_ReferenceType_In_ARM64_LDRXui = LLVMPINVOKE.Disassembler_ReferenceType_In_ARM64_LDRXui_get();
  public unsafe static readonly int Disassembler_ReferenceType_In_ARM64_LDRXl = LLVMPINVOKE.Disassembler_ReferenceType_In_ARM64_LDRXl_get();
  public unsafe static readonly int Disassembler_ReferenceType_In_ARM64_ADR = LLVMPINVOKE.Disassembler_ReferenceType_In_ARM64_ADR_get();
  public unsafe static readonly int Disassembler_ReferenceType_Out_SymbolStub = LLVMPINVOKE.Disassembler_ReferenceType_Out_SymbolStub_get();
  public unsafe static readonly int Disassembler_ReferenceType_Out_LitPool_SymAddr = LLVMPINVOKE.Disassembler_ReferenceType_Out_LitPool_SymAddr_get();
  public unsafe static readonly int Disassembler_ReferenceType_Out_LitPool_CstrAddr = LLVMPINVOKE.Disassembler_ReferenceType_Out_LitPool_CstrAddr_get();
  public unsafe static readonly int Disassembler_ReferenceType_Out_Objc_CFString_Ref = LLVMPINVOKE.Disassembler_ReferenceType_Out_Objc_CFString_Ref_get();
  public unsafe static readonly int Disassembler_ReferenceType_Out_Objc_Message = LLVMPINVOKE.Disassembler_ReferenceType_Out_Objc_Message_get();
  public unsafe static readonly int Disassembler_ReferenceType_Out_Objc_Message_Ref = LLVMPINVOKE.Disassembler_ReferenceType_Out_Objc_Message_Ref_get();
  public unsafe static readonly int Disassembler_ReferenceType_Out_Objc_Selector_Ref = LLVMPINVOKE.Disassembler_ReferenceType_Out_Objc_Selector_Ref_get();
  public unsafe static readonly int Disassembler_ReferenceType_Out_Objc_Class_Ref = LLVMPINVOKE.Disassembler_ReferenceType_Out_Objc_Class_Ref_get();
  public unsafe static readonly int Disassembler_ReferenceType_DeMangled_Name = LLVMPINVOKE.Disassembler_ReferenceType_DeMangled_Name_get();
  public unsafe static readonly int Disassembler_Option_UseMarkup = LLVMPINVOKE.Disassembler_Option_UseMarkup_get();
  public unsafe static readonly int Disassembler_Option_PrintImmHex = LLVMPINVOKE.Disassembler_Option_PrintImmHex_get();
  public unsafe static readonly int Disassembler_Option_AsmPrinterVariant = LLVMPINVOKE.Disassembler_Option_AsmPrinterVariant_get();
  public unsafe static readonly int Disassembler_Option_SetInstrComments = LLVMPINVOKE.Disassembler_Option_SetInstrComments_get();
  public unsafe static readonly int Disassembler_Option_PrintLatency = LLVMPINVOKE.Disassembler_Option_PrintLatency_get();
}

}
