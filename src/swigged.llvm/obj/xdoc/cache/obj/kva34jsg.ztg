id: swigged.llvm
language: CSharp
name:
  Default: swigged.llvm
qualifiedName:
  Default: swigged.llvm
type: Assembly
modifiers: {}
items:
- id: Swigged.LLVM
  commentId: N:Swigged.LLVM
  language: CSharp
  name:
    CSharp: Swigged.LLVM
    VB: Swigged.LLVM
  nameWithType:
    CSharp: Swigged.LLVM
    VB: Swigged.LLVM
  qualifiedName:
    CSharp: Swigged.LLVM
    VB: Swigged.LLVM
  type: Namespace
  assemblies:
  - swigged.llvm
  modifiers: {}
  items:
  - id: Swigged.LLVM.AtomicOrdering
    commentId: T:Swigged.LLVM.AtomicOrdering
    language: CSharp
    name:
      CSharp: AtomicOrdering
      VB: AtomicOrdering
    nameWithType:
      CSharp: AtomicOrdering
      VB: AtomicOrdering
    qualifiedName:
      CSharp: Swigged.LLVM.AtomicOrdering
      VB: Swigged.LLVM.AtomicOrdering
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/AtomicOrdering.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: AtomicOrdering
      path: src/swigged.llvm/AtomicOrdering.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum AtomicOrdering : int'
        VB: Public Enum AtomicOrdering As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.AtomicOrdering.AtomicOrderingNotAtomic
      commentId: F:Swigged.LLVM.AtomicOrdering.AtomicOrderingNotAtomic
      language: CSharp
      name:
        CSharp: AtomicOrderingNotAtomic
        VB: AtomicOrderingNotAtomic
      nameWithType:
        CSharp: AtomicOrdering.AtomicOrderingNotAtomic
        VB: AtomicOrdering.AtomicOrderingNotAtomic
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicOrdering.AtomicOrderingNotAtomic
        VB: Swigged.LLVM.AtomicOrdering.AtomicOrderingNotAtomic
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicOrderingNotAtomic
        path: src/swigged.llvm/AtomicOrdering.cs
        startLine: 13
      syntax:
        content:
          CSharp: AtomicOrderingNotAtomic = null
          VB: AtomicOrderingNotAtomic = Nothing
        return:
          type: Swigged.LLVM.AtomicOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicOrdering.AtomicOrderingUnordered
      commentId: F:Swigged.LLVM.AtomicOrdering.AtomicOrderingUnordered
      language: CSharp
      name:
        CSharp: AtomicOrderingUnordered
        VB: AtomicOrderingUnordered
      nameWithType:
        CSharp: AtomicOrdering.AtomicOrderingUnordered
        VB: AtomicOrdering.AtomicOrderingUnordered
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicOrdering.AtomicOrderingUnordered
        VB: Swigged.LLVM.AtomicOrdering.AtomicOrderingUnordered
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicOrderingUnordered
        path: src/swigged.llvm/AtomicOrdering.cs
        startLine: 14
      syntax:
        content:
          CSharp: AtomicOrderingUnordered = null
          VB: AtomicOrderingUnordered = Nothing
        return:
          type: Swigged.LLVM.AtomicOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicOrdering.AtomicOrderingMonotonic
      commentId: F:Swigged.LLVM.AtomicOrdering.AtomicOrderingMonotonic
      language: CSharp
      name:
        CSharp: AtomicOrderingMonotonic
        VB: AtomicOrderingMonotonic
      nameWithType:
        CSharp: AtomicOrdering.AtomicOrderingMonotonic
        VB: AtomicOrdering.AtomicOrderingMonotonic
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicOrdering.AtomicOrderingMonotonic
        VB: Swigged.LLVM.AtomicOrdering.AtomicOrderingMonotonic
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicOrderingMonotonic
        path: src/swigged.llvm/AtomicOrdering.cs
        startLine: 15
      syntax:
        content:
          CSharp: AtomicOrderingMonotonic = null
          VB: AtomicOrderingMonotonic = Nothing
        return:
          type: Swigged.LLVM.AtomicOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicOrdering.AtomicOrderingAcquire
      commentId: F:Swigged.LLVM.AtomicOrdering.AtomicOrderingAcquire
      language: CSharp
      name:
        CSharp: AtomicOrderingAcquire
        VB: AtomicOrderingAcquire
      nameWithType:
        CSharp: AtomicOrdering.AtomicOrderingAcquire
        VB: AtomicOrdering.AtomicOrderingAcquire
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicOrdering.AtomicOrderingAcquire
        VB: Swigged.LLVM.AtomicOrdering.AtomicOrderingAcquire
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicOrderingAcquire
        path: src/swigged.llvm/AtomicOrdering.cs
        startLine: 16
      syntax:
        content:
          CSharp: AtomicOrderingAcquire = null
          VB: AtomicOrderingAcquire = Nothing
        return:
          type: Swigged.LLVM.AtomicOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicOrdering.AtomicOrderingRelease
      commentId: F:Swigged.LLVM.AtomicOrdering.AtomicOrderingRelease
      language: CSharp
      name:
        CSharp: AtomicOrderingRelease
        VB: AtomicOrderingRelease
      nameWithType:
        CSharp: AtomicOrdering.AtomicOrderingRelease
        VB: AtomicOrdering.AtomicOrderingRelease
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicOrdering.AtomicOrderingRelease
        VB: Swigged.LLVM.AtomicOrdering.AtomicOrderingRelease
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicOrderingRelease
        path: src/swigged.llvm/AtomicOrdering.cs
        startLine: 17
      syntax:
        content:
          CSharp: AtomicOrderingRelease = null
          VB: AtomicOrderingRelease = Nothing
        return:
          type: Swigged.LLVM.AtomicOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicOrdering.AtomicOrderingAcquireRelease
      commentId: F:Swigged.LLVM.AtomicOrdering.AtomicOrderingAcquireRelease
      language: CSharp
      name:
        CSharp: AtomicOrderingAcquireRelease
        VB: AtomicOrderingAcquireRelease
      nameWithType:
        CSharp: AtomicOrdering.AtomicOrderingAcquireRelease
        VB: AtomicOrdering.AtomicOrderingAcquireRelease
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicOrdering.AtomicOrderingAcquireRelease
        VB: Swigged.LLVM.AtomicOrdering.AtomicOrderingAcquireRelease
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicOrderingAcquireRelease
        path: src/swigged.llvm/AtomicOrdering.cs
        startLine: 18
      syntax:
        content:
          CSharp: AtomicOrderingAcquireRelease = null
          VB: AtomicOrderingAcquireRelease = Nothing
        return:
          type: Swigged.LLVM.AtomicOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicOrdering.AtomicOrderingSequentiallyConsistent
      commentId: F:Swigged.LLVM.AtomicOrdering.AtomicOrderingSequentiallyConsistent
      language: CSharp
      name:
        CSharp: AtomicOrderingSequentiallyConsistent
        VB: AtomicOrderingSequentiallyConsistent
      nameWithType:
        CSharp: AtomicOrdering.AtomicOrderingSequentiallyConsistent
        VB: AtomicOrdering.AtomicOrderingSequentiallyConsistent
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicOrdering.AtomicOrderingSequentiallyConsistent
        VB: Swigged.LLVM.AtomicOrdering.AtomicOrderingSequentiallyConsistent
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicOrderingSequentiallyConsistent
        path: src/swigged.llvm/AtomicOrdering.cs
        startLine: 19
      syntax:
        content:
          CSharp: AtomicOrderingSequentiallyConsistent = null
          VB: AtomicOrderingSequentiallyConsistent = Nothing
        return:
          type: Swigged.LLVM.AtomicOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.AtomicRMWBinOp
    commentId: T:Swigged.LLVM.AtomicRMWBinOp
    language: CSharp
    name:
      CSharp: AtomicRMWBinOp
      VB: AtomicRMWBinOp
    nameWithType:
      CSharp: AtomicRMWBinOp
      VB: AtomicRMWBinOp
    qualifiedName:
      CSharp: Swigged.LLVM.AtomicRMWBinOp
      VB: Swigged.LLVM.AtomicRMWBinOp
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: AtomicRMWBinOp
      path: src/swigged.llvm/AtomicRMWBinOp.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum AtomicRMWBinOp : int'
        VB: Public Enum AtomicRMWBinOp As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpXchg
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpXchg
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpXchg
        VB: AtomicRMWBinOpXchg
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpXchg
        VB: AtomicRMWBinOp.AtomicRMWBinOpXchg
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpXchg
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpXchg
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpXchg
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 13
      syntax:
        content:
          CSharp: AtomicRMWBinOpXchg = 0
          VB: AtomicRMWBinOpXchg = 0
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpAdd
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpAdd
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpAdd
        VB: AtomicRMWBinOpAdd
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpAdd
        VB: AtomicRMWBinOp.AtomicRMWBinOpAdd
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpAdd
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpAdd
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpAdd
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 14
      syntax:
        content:
          CSharp: AtomicRMWBinOpAdd = 1
          VB: AtomicRMWBinOpAdd = 1
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpSub
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpSub
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpSub
        VB: AtomicRMWBinOpSub
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpSub
        VB: AtomicRMWBinOp.AtomicRMWBinOpSub
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpSub
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpSub
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpSub
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 15
      syntax:
        content:
          CSharp: AtomicRMWBinOpSub = 2
          VB: AtomicRMWBinOpSub = 2
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpAnd
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpAnd
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpAnd
        VB: AtomicRMWBinOpAnd
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpAnd
        VB: AtomicRMWBinOp.AtomicRMWBinOpAnd
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpAnd
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpAnd
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpAnd
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 16
      syntax:
        content:
          CSharp: AtomicRMWBinOpAnd = 3
          VB: AtomicRMWBinOpAnd = 3
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpNand
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpNand
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpNand
        VB: AtomicRMWBinOpNand
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpNand
        VB: AtomicRMWBinOp.AtomicRMWBinOpNand
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpNand
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpNand
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpNand
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 17
      syntax:
        content:
          CSharp: AtomicRMWBinOpNand = 4
          VB: AtomicRMWBinOpNand = 4
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpOr
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpOr
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpOr
        VB: AtomicRMWBinOpOr
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpOr
        VB: AtomicRMWBinOp.AtomicRMWBinOpOr
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpOr
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpOr
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpOr
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 18
      syntax:
        content:
          CSharp: AtomicRMWBinOpOr = 5
          VB: AtomicRMWBinOpOr = 5
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpXor
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpXor
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpXor
        VB: AtomicRMWBinOpXor
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpXor
        VB: AtomicRMWBinOp.AtomicRMWBinOpXor
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpXor
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpXor
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpXor
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 19
      syntax:
        content:
          CSharp: AtomicRMWBinOpXor = 6
          VB: AtomicRMWBinOpXor = 6
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpMax
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpMax
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpMax
        VB: AtomicRMWBinOpMax
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpMax
        VB: AtomicRMWBinOp.AtomicRMWBinOpMax
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpMax
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpMax
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpMax
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 20
      syntax:
        content:
          CSharp: AtomicRMWBinOpMax = 7
          VB: AtomicRMWBinOpMax = 7
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpMin
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpMin
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpMin
        VB: AtomicRMWBinOpMin
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpMin
        VB: AtomicRMWBinOp.AtomicRMWBinOpMin
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpMin
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpMin
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpMin
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 21
      syntax:
        content:
          CSharp: AtomicRMWBinOpMin = 8
          VB: AtomicRMWBinOpMin = 8
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpUMax
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpUMax
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpUMax
        VB: AtomicRMWBinOpUMax
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpUMax
        VB: AtomicRMWBinOp.AtomicRMWBinOpUMax
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpUMax
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpUMax
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpUMax
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 22
      syntax:
        content:
          CSharp: AtomicRMWBinOpUMax = 9
          VB: AtomicRMWBinOpUMax = 9
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpUMin
      commentId: F:Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpUMin
      language: CSharp
      name:
        CSharp: AtomicRMWBinOpUMin
        VB: AtomicRMWBinOpUMin
      nameWithType:
        CSharp: AtomicRMWBinOp.AtomicRMWBinOpUMin
        VB: AtomicRMWBinOp.AtomicRMWBinOpUMin
      qualifiedName:
        CSharp: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpUMin
        VB: Swigged.LLVM.AtomicRMWBinOp.AtomicRMWBinOpUMin
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AtomicRMWBinOp.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMWBinOpUMin
        path: src/swigged.llvm/AtomicRMWBinOp.cs
        startLine: 23
      syntax:
        content:
          CSharp: AtomicRMWBinOpUMin = 10
          VB: AtomicRMWBinOpUMin = 10
        return:
          type: Swigged.LLVM.AtomicRMWBinOp
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.AttributeRef
    commentId: T:Swigged.LLVM.AttributeRef
    language: CSharp
    name:
      CSharp: AttributeRef
      VB: AttributeRef
    nameWithType:
      CSharp: AttributeRef
      VB: AttributeRef
    qualifiedName:
      CSharp: Swigged.LLVM.AttributeRef
      VB: Swigged.LLVM.AttributeRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/AttributeRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: AttributeRef
      path: src/swigged.llvm/AttributeRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct AttributeRef : System.IEquatable<AttributeRef>'
        VB: >-
          Public Structure AttributeRef

              Implements System.IEquatable(Of AttributeRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.AttributeRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.AttributeRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: AttributeRef(System.IntPtr)
        VB: AttributeRef(System.IntPtr)
      nameWithType:
        CSharp: AttributeRef.AttributeRef(System.IntPtr)
        VB: AttributeRef.AttributeRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.AttributeRef.AttributeRef(System.IntPtr)
        VB: Swigged.LLVM.AttributeRef.AttributeRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AttributeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/AttributeRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public AttributeRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.AttributeRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.AttributeRef.Value
      commentId: F:Swigged.LLVM.AttributeRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: AttributeRef.Value
        VB: AttributeRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.AttributeRef.Value
        VB: Swigged.LLVM.AttributeRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AttributeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/AttributeRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.AttributeRef.Equals(Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.AttributeRef.Equals(Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: Equals(AttributeRef)
        VB: Equals(AttributeRef)
      nameWithType:
        CSharp: AttributeRef.Equals(AttributeRef)
        VB: AttributeRef.Equals(AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.AttributeRef.Equals(Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.AttributeRef.Equals(Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AttributeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/AttributeRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(AttributeRef other)
          VB: Public Function Equals(other As AttributeRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.AttributeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.AttributeRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.AttributeRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.AttributeRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: AttributeRef.Equals(Object)
        VB: AttributeRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.AttributeRef.Equals(System.Object)
        VB: Swigged.LLVM.AttributeRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AttributeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/AttributeRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.AttributeRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.AttributeRef.GetHashCode
      commentId: M:Swigged.LLVM.AttributeRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: AttributeRef.GetHashCode()
        VB: AttributeRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.AttributeRef.GetHashCode()
        VB: Swigged.LLVM.AttributeRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AttributeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/AttributeRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.AttributeRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.AttributeRef.op_Equality(Swigged.LLVM.AttributeRef,Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.AttributeRef.op_Equality(Swigged.LLVM.AttributeRef,Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: Equality(AttributeRef, AttributeRef)
        VB: Equality(AttributeRef, AttributeRef)
      nameWithType:
        CSharp: AttributeRef.Equality(AttributeRef, AttributeRef)
        VB: AttributeRef.Equality(AttributeRef, AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.AttributeRef.Equality(Swigged.LLVM.AttributeRef, Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.AttributeRef.Equality(Swigged.LLVM.AttributeRef, Swigged.LLVM.AttributeRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AttributeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/AttributeRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(AttributeRef left, AttributeRef right)
          VB: Public Shared Operator =(left As AttributeRef, right As AttributeRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.AttributeRef
        - id: right
          type: Swigged.LLVM.AttributeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.AttributeRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.AttributeRef.op_Inequality(Swigged.LLVM.AttributeRef,Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.AttributeRef.op_Inequality(Swigged.LLVM.AttributeRef,Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: Inequality(AttributeRef, AttributeRef)
        VB: Inequality(AttributeRef, AttributeRef)
      nameWithType:
        CSharp: AttributeRef.Inequality(AttributeRef, AttributeRef)
        VB: AttributeRef.Inequality(AttributeRef, AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.AttributeRef.Inequality(Swigged.LLVM.AttributeRef, Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.AttributeRef.Inequality(Swigged.LLVM.AttributeRef, Swigged.LLVM.AttributeRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/AttributeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/AttributeRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(AttributeRef left, AttributeRef right)
          VB: Public Shared Operator <>(left As AttributeRef, right As AttributeRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.AttributeRef
        - id: right
          type: Swigged.LLVM.AttributeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.AttributeRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.BasicBlockRef
    commentId: T:Swigged.LLVM.BasicBlockRef
    language: CSharp
    name:
      CSharp: BasicBlockRef
      VB: BasicBlockRef
    nameWithType:
      CSharp: BasicBlockRef
      VB: BasicBlockRef
    qualifiedName:
      CSharp: Swigged.LLVM.BasicBlockRef
      VB: Swigged.LLVM.BasicBlockRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/BasicBlockRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: BasicBlockRef
      path: src/swigged.llvm/BasicBlockRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct BasicBlockRef : System.IEquatable<BasicBlockRef>'
        VB: >-
          Public Structure BasicBlockRef

              Implements System.IEquatable(Of BasicBlockRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.BasicBlockRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.BasicBlockRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: BasicBlockRef(System.IntPtr)
        VB: BasicBlockRef(System.IntPtr)
      nameWithType:
        CSharp: BasicBlockRef.BasicBlockRef(System.IntPtr)
        VB: BasicBlockRef.BasicBlockRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.BasicBlockRef.BasicBlockRef(System.IntPtr)
        VB: Swigged.LLVM.BasicBlockRef.BasicBlockRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BasicBlockRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/BasicBlockRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public BasicBlockRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.BasicBlockRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.BasicBlockRef.Value
      commentId: F:Swigged.LLVM.BasicBlockRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: BasicBlockRef.Value
        VB: BasicBlockRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.BasicBlockRef.Value
        VB: Swigged.LLVM.BasicBlockRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BasicBlockRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/BasicBlockRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.BasicBlockRef.Equals(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.BasicBlockRef.Equals(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: Equals(BasicBlockRef)
        VB: Equals(BasicBlockRef)
      nameWithType:
        CSharp: BasicBlockRef.Equals(BasicBlockRef)
        VB: BasicBlockRef.Equals(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.BasicBlockRef.Equals(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.BasicBlockRef.Equals(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BasicBlockRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/BasicBlockRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(BasicBlockRef other)
          VB: Public Function Equals(other As BasicBlockRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.BasicBlockRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.BasicBlockRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.BasicBlockRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: BasicBlockRef.Equals(Object)
        VB: BasicBlockRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.BasicBlockRef.Equals(System.Object)
        VB: Swigged.LLVM.BasicBlockRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BasicBlockRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/BasicBlockRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.BasicBlockRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.BasicBlockRef.GetHashCode
      commentId: M:Swigged.LLVM.BasicBlockRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: BasicBlockRef.GetHashCode()
        VB: BasicBlockRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.BasicBlockRef.GetHashCode()
        VB: Swigged.LLVM.BasicBlockRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BasicBlockRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/BasicBlockRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.BasicBlockRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.BasicBlockRef.op_Equality(Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.BasicBlockRef.op_Equality(Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: Equality(BasicBlockRef, BasicBlockRef)
        VB: Equality(BasicBlockRef, BasicBlockRef)
      nameWithType:
        CSharp: BasicBlockRef.Equality(BasicBlockRef, BasicBlockRef)
        VB: BasicBlockRef.Equality(BasicBlockRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.BasicBlockRef.Equality(Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.BasicBlockRef.Equality(Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BasicBlockRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/BasicBlockRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(BasicBlockRef left, BasicBlockRef right)
          VB: Public Shared Operator =(left As BasicBlockRef, right As BasicBlockRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.BasicBlockRef
        - id: right
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.BasicBlockRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.BasicBlockRef.op_Inequality(Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.BasicBlockRef.op_Inequality(Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: Inequality(BasicBlockRef, BasicBlockRef)
        VB: Inequality(BasicBlockRef, BasicBlockRef)
      nameWithType:
        CSharp: BasicBlockRef.Inequality(BasicBlockRef, BasicBlockRef)
        VB: BasicBlockRef.Inequality(BasicBlockRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.BasicBlockRef.Inequality(Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.BasicBlockRef.Inequality(Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BasicBlockRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/BasicBlockRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(BasicBlockRef left, BasicBlockRef right)
          VB: Public Shared Operator <>(left As BasicBlockRef, right As BasicBlockRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.BasicBlockRef
        - id: right
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.BasicBlockRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.BuilderRef
    commentId: T:Swigged.LLVM.BuilderRef
    language: CSharp
    name:
      CSharp: BuilderRef
      VB: BuilderRef
    nameWithType:
      CSharp: BuilderRef
      VB: BuilderRef
    qualifiedName:
      CSharp: Swigged.LLVM.BuilderRef
      VB: Swigged.LLVM.BuilderRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/BuilderRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: BuilderRef
      path: src/swigged.llvm/BuilderRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct BuilderRef : System.IEquatable<BuilderRef>'
        VB: >-
          Public Structure BuilderRef

              Implements System.IEquatable(Of BuilderRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.BuilderRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.BuilderRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: BuilderRef(System.IntPtr)
        VB: BuilderRef(System.IntPtr)
      nameWithType:
        CSharp: BuilderRef.BuilderRef(System.IntPtr)
        VB: BuilderRef.BuilderRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.BuilderRef.BuilderRef(System.IntPtr)
        VB: Swigged.LLVM.BuilderRef.BuilderRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/BuilderRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public BuilderRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.BuilderRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.BuilderRef.Value
      commentId: F:Swigged.LLVM.BuilderRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: BuilderRef.Value
        VB: BuilderRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.BuilderRef.Value
        VB: Swigged.LLVM.BuilderRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/BuilderRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.BuilderRef.Equals(Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.BuilderRef.Equals(Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: Equals(BuilderRef)
        VB: Equals(BuilderRef)
      nameWithType:
        CSharp: BuilderRef.Equals(BuilderRef)
        VB: BuilderRef.Equals(BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.BuilderRef.Equals(Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.BuilderRef.Equals(Swigged.LLVM.BuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/BuilderRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(BuilderRef other)
          VB: Public Function Equals(other As BuilderRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.BuilderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.BuilderRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.BuilderRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.BuilderRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: BuilderRef.Equals(Object)
        VB: BuilderRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.BuilderRef.Equals(System.Object)
        VB: Swigged.LLVM.BuilderRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/BuilderRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.BuilderRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.BuilderRef.GetHashCode
      commentId: M:Swigged.LLVM.BuilderRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: BuilderRef.GetHashCode()
        VB: BuilderRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.BuilderRef.GetHashCode()
        VB: Swigged.LLVM.BuilderRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/BuilderRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.BuilderRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.BuilderRef.op_Equality(Swigged.LLVM.BuilderRef,Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.BuilderRef.op_Equality(Swigged.LLVM.BuilderRef,Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: Equality(BuilderRef, BuilderRef)
        VB: Equality(BuilderRef, BuilderRef)
      nameWithType:
        CSharp: BuilderRef.Equality(BuilderRef, BuilderRef)
        VB: BuilderRef.Equality(BuilderRef, BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.BuilderRef.Equality(Swigged.LLVM.BuilderRef, Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.BuilderRef.Equality(Swigged.LLVM.BuilderRef, Swigged.LLVM.BuilderRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/BuilderRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(BuilderRef left, BuilderRef right)
          VB: Public Shared Operator =(left As BuilderRef, right As BuilderRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.BuilderRef
        - id: right
          type: Swigged.LLVM.BuilderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.BuilderRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.BuilderRef.op_Inequality(Swigged.LLVM.BuilderRef,Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.BuilderRef.op_Inequality(Swigged.LLVM.BuilderRef,Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: Inequality(BuilderRef, BuilderRef)
        VB: Inequality(BuilderRef, BuilderRef)
      nameWithType:
        CSharp: BuilderRef.Inequality(BuilderRef, BuilderRef)
        VB: BuilderRef.Inequality(BuilderRef, BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.BuilderRef.Inequality(Swigged.LLVM.BuilderRef, Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.BuilderRef.Inequality(Swigged.LLVM.BuilderRef, Swigged.LLVM.BuilderRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/BuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/BuilderRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(BuilderRef left, BuilderRef right)
          VB: Public Shared Operator <>(left As BuilderRef, right As BuilderRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.BuilderRef
        - id: right
          type: Swigged.LLVM.BuilderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.BuilderRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.ByteOrdering
    commentId: T:Swigged.LLVM.ByteOrdering
    language: CSharp
    name:
      CSharp: ByteOrdering
      VB: ByteOrdering
    nameWithType:
      CSharp: ByteOrdering
      VB: ByteOrdering
    qualifiedName:
      CSharp: Swigged.LLVM.ByteOrdering
      VB: Swigged.LLVM.ByteOrdering
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/ByteOrdering.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ByteOrdering
      path: src/swigged.llvm/ByteOrdering.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum ByteOrdering : int'
        VB: Public Enum ByteOrdering As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.ByteOrdering.BigEndian
      commentId: F:Swigged.LLVM.ByteOrdering.BigEndian
      language: CSharp
      name:
        CSharp: BigEndian
        VB: BigEndian
      nameWithType:
        CSharp: ByteOrdering.BigEndian
        VB: ByteOrdering.BigEndian
      qualifiedName:
        CSharp: Swigged.LLVM.ByteOrdering.BigEndian
        VB: Swigged.LLVM.ByteOrdering.BigEndian
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ByteOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BigEndian
        path: src/swigged.llvm/ByteOrdering.cs
        startLine: 13
      syntax:
        content:
          CSharp: BigEndian = 0
          VB: BigEndian = 0
        return:
          type: Swigged.LLVM.ByteOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ByteOrdering.LittleEndian
      commentId: F:Swigged.LLVM.ByteOrdering.LittleEndian
      language: CSharp
      name:
        CSharp: LittleEndian
        VB: LittleEndian
      nameWithType:
        CSharp: ByteOrdering.LittleEndian
        VB: ByteOrdering.LittleEndian
      qualifiedName:
        CSharp: Swigged.LLVM.ByteOrdering.LittleEndian
        VB: Swigged.LLVM.ByteOrdering.LittleEndian
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ByteOrdering.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LittleEndian
        path: src/swigged.llvm/ByteOrdering.cs
        startLine: 14
      syntax:
        content:
          CSharp: LittleEndian = 1
          VB: LittleEndian = 1
        return:
          type: Swigged.LLVM.ByteOrdering
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.CallConv
    commentId: T:Swigged.LLVM.CallConv
    language: CSharp
    name:
      CSharp: CallConv
      VB: CallConv
    nameWithType:
      CSharp: CallConv
      VB: CallConv
    qualifiedName:
      CSharp: Swigged.LLVM.CallConv
      VB: Swigged.LLVM.CallConv
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/CallConv.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: CallConv
      path: src/swigged.llvm/CallConv.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum CallConv : int'
        VB: Public Enum CallConv As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.CallConv.CCallConv
      commentId: F:Swigged.LLVM.CallConv.CCallConv
      language: CSharp
      name:
        CSharp: CCallConv
        VB: CCallConv
      nameWithType:
        CSharp: CallConv.CCallConv
        VB: CallConv.CCallConv
      qualifiedName:
        CSharp: Swigged.LLVM.CallConv.CCallConv
        VB: Swigged.LLVM.CallConv.CCallConv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CallConv.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CCallConv
        path: src/swigged.llvm/CallConv.cs
        startLine: 13
      syntax:
        content:
          CSharp: CCallConv = null
          VB: CCallConv = Nothing
        return:
          type: Swigged.LLVM.CallConv
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CallConv.FastCallConv
      commentId: F:Swigged.LLVM.CallConv.FastCallConv
      language: CSharp
      name:
        CSharp: FastCallConv
        VB: FastCallConv
      nameWithType:
        CSharp: CallConv.FastCallConv
        VB: CallConv.FastCallConv
      qualifiedName:
        CSharp: Swigged.LLVM.CallConv.FastCallConv
        VB: Swigged.LLVM.CallConv.FastCallConv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CallConv.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FastCallConv
        path: src/swigged.llvm/CallConv.cs
        startLine: 14
      syntax:
        content:
          CSharp: FastCallConv = null
          VB: FastCallConv = Nothing
        return:
          type: Swigged.LLVM.CallConv
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CallConv.ColdCallConv
      commentId: F:Swigged.LLVM.CallConv.ColdCallConv
      language: CSharp
      name:
        CSharp: ColdCallConv
        VB: ColdCallConv
      nameWithType:
        CSharp: CallConv.ColdCallConv
        VB: CallConv.ColdCallConv
      qualifiedName:
        CSharp: Swigged.LLVM.CallConv.ColdCallConv
        VB: Swigged.LLVM.CallConv.ColdCallConv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CallConv.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ColdCallConv
        path: src/swigged.llvm/CallConv.cs
        startLine: 15
      syntax:
        content:
          CSharp: ColdCallConv = null
          VB: ColdCallConv = Nothing
        return:
          type: Swigged.LLVM.CallConv
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CallConv.WebKitJSCallConv
      commentId: F:Swigged.LLVM.CallConv.WebKitJSCallConv
      language: CSharp
      name:
        CSharp: WebKitJSCallConv
        VB: WebKitJSCallConv
      nameWithType:
        CSharp: CallConv.WebKitJSCallConv
        VB: CallConv.WebKitJSCallConv
      qualifiedName:
        CSharp: Swigged.LLVM.CallConv.WebKitJSCallConv
        VB: Swigged.LLVM.CallConv.WebKitJSCallConv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CallConv.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: WebKitJSCallConv
        path: src/swigged.llvm/CallConv.cs
        startLine: 16
      syntax:
        content:
          CSharp: WebKitJSCallConv = null
          VB: WebKitJSCallConv = Nothing
        return:
          type: Swigged.LLVM.CallConv
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CallConv.AnyRegCallConv
      commentId: F:Swigged.LLVM.CallConv.AnyRegCallConv
      language: CSharp
      name:
        CSharp: AnyRegCallConv
        VB: AnyRegCallConv
      nameWithType:
        CSharp: CallConv.AnyRegCallConv
        VB: CallConv.AnyRegCallConv
      qualifiedName:
        CSharp: Swigged.LLVM.CallConv.AnyRegCallConv
        VB: Swigged.LLVM.CallConv.AnyRegCallConv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CallConv.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AnyRegCallConv
        path: src/swigged.llvm/CallConv.cs
        startLine: 17
      syntax:
        content:
          CSharp: AnyRegCallConv = null
          VB: AnyRegCallConv = Nothing
        return:
          type: Swigged.LLVM.CallConv
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CallConv.X86StdcallCallConv
      commentId: F:Swigged.LLVM.CallConv.X86StdcallCallConv
      language: CSharp
      name:
        CSharp: X86StdcallCallConv
        VB: X86StdcallCallConv
      nameWithType:
        CSharp: CallConv.X86StdcallCallConv
        VB: CallConv.X86StdcallCallConv
      qualifiedName:
        CSharp: Swigged.LLVM.CallConv.X86StdcallCallConv
        VB: Swigged.LLVM.CallConv.X86StdcallCallConv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CallConv.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: X86StdcallCallConv
        path: src/swigged.llvm/CallConv.cs
        startLine: 18
      syntax:
        content:
          CSharp: X86StdcallCallConv = null
          VB: X86StdcallCallConv = Nothing
        return:
          type: Swigged.LLVM.CallConv
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CallConv.X86FastcallCallConv
      commentId: F:Swigged.LLVM.CallConv.X86FastcallCallConv
      language: CSharp
      name:
        CSharp: X86FastcallCallConv
        VB: X86FastcallCallConv
      nameWithType:
        CSharp: CallConv.X86FastcallCallConv
        VB: CallConv.X86FastcallCallConv
      qualifiedName:
        CSharp: Swigged.LLVM.CallConv.X86FastcallCallConv
        VB: Swigged.LLVM.CallConv.X86FastcallCallConv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CallConv.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: X86FastcallCallConv
        path: src/swigged.llvm/CallConv.cs
        startLine: 19
      syntax:
        content:
          CSharp: X86FastcallCallConv = null
          VB: X86FastcallCallConv = Nothing
        return:
          type: Swigged.LLVM.CallConv
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.CodeGenFileType
    commentId: T:Swigged.LLVM.CodeGenFileType
    language: CSharp
    name:
      CSharp: CodeGenFileType
      VB: CodeGenFileType
    nameWithType:
      CSharp: CodeGenFileType
      VB: CodeGenFileType
    qualifiedName:
      CSharp: Swigged.LLVM.CodeGenFileType
      VB: Swigged.LLVM.CodeGenFileType
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/CodeGenFileType.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: CodeGenFileType
      path: src/swigged.llvm/CodeGenFileType.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum CodeGenFileType : int'
        VB: Public Enum CodeGenFileType As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.CodeGenFileType.AssemblyFile
      commentId: F:Swigged.LLVM.CodeGenFileType.AssemblyFile
      language: CSharp
      name:
        CSharp: AssemblyFile
        VB: AssemblyFile
      nameWithType:
        CSharp: CodeGenFileType.AssemblyFile
        VB: CodeGenFileType.AssemblyFile
      qualifiedName:
        CSharp: Swigged.LLVM.CodeGenFileType.AssemblyFile
        VB: Swigged.LLVM.CodeGenFileType.AssemblyFile
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeGenFileType.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AssemblyFile
        path: src/swigged.llvm/CodeGenFileType.cs
        startLine: 13
      syntax:
        content:
          CSharp: AssemblyFile = 0
          VB: AssemblyFile = 0
        return:
          type: Swigged.LLVM.CodeGenFileType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeGenFileType.ObjectFile
      commentId: F:Swigged.LLVM.CodeGenFileType.ObjectFile
      language: CSharp
      name:
        CSharp: ObjectFile
        VB: ObjectFile
      nameWithType:
        CSharp: CodeGenFileType.ObjectFile
        VB: CodeGenFileType.ObjectFile
      qualifiedName:
        CSharp: Swigged.LLVM.CodeGenFileType.ObjectFile
        VB: Swigged.LLVM.CodeGenFileType.ObjectFile
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeGenFileType.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ObjectFile
        path: src/swigged.llvm/CodeGenFileType.cs
        startLine: 14
      syntax:
        content:
          CSharp: ObjectFile = 1
          VB: ObjectFile = 1
        return:
          type: Swigged.LLVM.CodeGenFileType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.CodeGenOptLevel
    commentId: T:Swigged.LLVM.CodeGenOptLevel
    language: CSharp
    name:
      CSharp: CodeGenOptLevel
      VB: CodeGenOptLevel
    nameWithType:
      CSharp: CodeGenOptLevel
      VB: CodeGenOptLevel
    qualifiedName:
      CSharp: Swigged.LLVM.CodeGenOptLevel
      VB: Swigged.LLVM.CodeGenOptLevel
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/CodeGenOptLevel.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: CodeGenOptLevel
      path: src/swigged.llvm/CodeGenOptLevel.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum CodeGenOptLevel : int'
        VB: Public Enum CodeGenOptLevel As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelNone
      commentId: F:Swigged.LLVM.CodeGenOptLevel.CodeGenLevelNone
      language: CSharp
      name:
        CSharp: CodeGenLevelNone
        VB: CodeGenLevelNone
      nameWithType:
        CSharp: CodeGenOptLevel.CodeGenLevelNone
        VB: CodeGenOptLevel.CodeGenLevelNone
      qualifiedName:
        CSharp: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelNone
        VB: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelNone
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeGenOptLevel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeGenLevelNone
        path: src/swigged.llvm/CodeGenOptLevel.cs
        startLine: 13
      syntax:
        content:
          CSharp: CodeGenLevelNone = 0
          VB: CodeGenLevelNone = 0
        return:
          type: Swigged.LLVM.CodeGenOptLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelLess
      commentId: F:Swigged.LLVM.CodeGenOptLevel.CodeGenLevelLess
      language: CSharp
      name:
        CSharp: CodeGenLevelLess
        VB: CodeGenLevelLess
      nameWithType:
        CSharp: CodeGenOptLevel.CodeGenLevelLess
        VB: CodeGenOptLevel.CodeGenLevelLess
      qualifiedName:
        CSharp: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelLess
        VB: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelLess
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeGenOptLevel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeGenLevelLess
        path: src/swigged.llvm/CodeGenOptLevel.cs
        startLine: 14
      syntax:
        content:
          CSharp: CodeGenLevelLess = 1
          VB: CodeGenLevelLess = 1
        return:
          type: Swigged.LLVM.CodeGenOptLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelDefault
      commentId: F:Swigged.LLVM.CodeGenOptLevel.CodeGenLevelDefault
      language: CSharp
      name:
        CSharp: CodeGenLevelDefault
        VB: CodeGenLevelDefault
      nameWithType:
        CSharp: CodeGenOptLevel.CodeGenLevelDefault
        VB: CodeGenOptLevel.CodeGenLevelDefault
      qualifiedName:
        CSharp: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelDefault
        VB: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelDefault
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeGenOptLevel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeGenLevelDefault
        path: src/swigged.llvm/CodeGenOptLevel.cs
        startLine: 15
      syntax:
        content:
          CSharp: CodeGenLevelDefault = 2
          VB: CodeGenLevelDefault = 2
        return:
          type: Swigged.LLVM.CodeGenOptLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelAggressive
      commentId: F:Swigged.LLVM.CodeGenOptLevel.CodeGenLevelAggressive
      language: CSharp
      name:
        CSharp: CodeGenLevelAggressive
        VB: CodeGenLevelAggressive
      nameWithType:
        CSharp: CodeGenOptLevel.CodeGenLevelAggressive
        VB: CodeGenOptLevel.CodeGenLevelAggressive
      qualifiedName:
        CSharp: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelAggressive
        VB: Swigged.LLVM.CodeGenOptLevel.CodeGenLevelAggressive
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeGenOptLevel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeGenLevelAggressive
        path: src/swigged.llvm/CodeGenOptLevel.cs
        startLine: 16
      syntax:
        content:
          CSharp: CodeGenLevelAggressive = 3
          VB: CodeGenLevelAggressive = 3
        return:
          type: Swigged.LLVM.CodeGenOptLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.CodeModel
    commentId: T:Swigged.LLVM.CodeModel
    language: CSharp
    name:
      CSharp: CodeModel
      VB: CodeModel
    nameWithType:
      CSharp: CodeModel
      VB: CodeModel
    qualifiedName:
      CSharp: Swigged.LLVM.CodeModel
      VB: Swigged.LLVM.CodeModel
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/CodeModel.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: CodeModel
      path: src/swigged.llvm/CodeModel.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum CodeModel : int'
        VB: Public Enum CodeModel As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.CodeModel.CodeModelDefault
      commentId: F:Swigged.LLVM.CodeModel.CodeModelDefault
      language: CSharp
      name:
        CSharp: CodeModelDefault
        VB: CodeModelDefault
      nameWithType:
        CSharp: CodeModel.CodeModelDefault
        VB: CodeModel.CodeModelDefault
      qualifiedName:
        CSharp: Swigged.LLVM.CodeModel.CodeModelDefault
        VB: Swigged.LLVM.CodeModel.CodeModelDefault
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeModel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeModelDefault
        path: src/swigged.llvm/CodeModel.cs
        startLine: 13
      syntax:
        content:
          CSharp: CodeModelDefault = 0
          VB: CodeModelDefault = 0
        return:
          type: Swigged.LLVM.CodeModel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeModel.CodeModelJITDefault
      commentId: F:Swigged.LLVM.CodeModel.CodeModelJITDefault
      language: CSharp
      name:
        CSharp: CodeModelJITDefault
        VB: CodeModelJITDefault
      nameWithType:
        CSharp: CodeModel.CodeModelJITDefault
        VB: CodeModel.CodeModelJITDefault
      qualifiedName:
        CSharp: Swigged.LLVM.CodeModel.CodeModelJITDefault
        VB: Swigged.LLVM.CodeModel.CodeModelJITDefault
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeModel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeModelJITDefault
        path: src/swigged.llvm/CodeModel.cs
        startLine: 14
      syntax:
        content:
          CSharp: CodeModelJITDefault = 1
          VB: CodeModelJITDefault = 1
        return:
          type: Swigged.LLVM.CodeModel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeModel.CodeModelSmall
      commentId: F:Swigged.LLVM.CodeModel.CodeModelSmall
      language: CSharp
      name:
        CSharp: CodeModelSmall
        VB: CodeModelSmall
      nameWithType:
        CSharp: CodeModel.CodeModelSmall
        VB: CodeModel.CodeModelSmall
      qualifiedName:
        CSharp: Swigged.LLVM.CodeModel.CodeModelSmall
        VB: Swigged.LLVM.CodeModel.CodeModelSmall
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeModel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeModelSmall
        path: src/swigged.llvm/CodeModel.cs
        startLine: 15
      syntax:
        content:
          CSharp: CodeModelSmall = 2
          VB: CodeModelSmall = 2
        return:
          type: Swigged.LLVM.CodeModel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeModel.CodeModelKernel
      commentId: F:Swigged.LLVM.CodeModel.CodeModelKernel
      language: CSharp
      name:
        CSharp: CodeModelKernel
        VB: CodeModelKernel
      nameWithType:
        CSharp: CodeModel.CodeModelKernel
        VB: CodeModel.CodeModelKernel
      qualifiedName:
        CSharp: Swigged.LLVM.CodeModel.CodeModelKernel
        VB: Swigged.LLVM.CodeModel.CodeModelKernel
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeModel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeModelKernel
        path: src/swigged.llvm/CodeModel.cs
        startLine: 16
      syntax:
        content:
          CSharp: CodeModelKernel = 3
          VB: CodeModelKernel = 3
        return:
          type: Swigged.LLVM.CodeModel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeModel.CodeModelMedium
      commentId: F:Swigged.LLVM.CodeModel.CodeModelMedium
      language: CSharp
      name:
        CSharp: CodeModelMedium
        VB: CodeModelMedium
      nameWithType:
        CSharp: CodeModel.CodeModelMedium
        VB: CodeModel.CodeModelMedium
      qualifiedName:
        CSharp: Swigged.LLVM.CodeModel.CodeModelMedium
        VB: Swigged.LLVM.CodeModel.CodeModelMedium
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeModel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeModelMedium
        path: src/swigged.llvm/CodeModel.cs
        startLine: 17
      syntax:
        content:
          CSharp: CodeModelMedium = 4
          VB: CodeModelMedium = 4
        return:
          type: Swigged.LLVM.CodeModel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.CodeModel.CodeModelLarge
      commentId: F:Swigged.LLVM.CodeModel.CodeModelLarge
      language: CSharp
      name:
        CSharp: CodeModelLarge
        VB: CodeModelLarge
      nameWithType:
        CSharp: CodeModel.CodeModelLarge
        VB: CodeModel.CodeModelLarge
      qualifiedName:
        CSharp: Swigged.LLVM.CodeModel.CodeModelLarge
        VB: Swigged.LLVM.CodeModel.CodeModelLarge
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/CodeModel.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CodeModelLarge
        path: src/swigged.llvm/CodeModel.cs
        startLine: 18
      syntax:
        content:
          CSharp: CodeModelLarge = 5
          VB: CodeModelLarge = 5
        return:
          type: Swigged.LLVM.CodeModel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.ContextRef
    commentId: T:Swigged.LLVM.ContextRef
    language: CSharp
    name:
      CSharp: ContextRef
      VB: ContextRef
    nameWithType:
      CSharp: ContextRef
      VB: ContextRef
    qualifiedName:
      CSharp: Swigged.LLVM.ContextRef
      VB: Swigged.LLVM.ContextRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/ContextRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ContextRef
      path: src/swigged.llvm/ContextRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct ContextRef : System.IEquatable<ContextRef>'
        VB: >-
          Public Structure ContextRef

              Implements System.IEquatable(Of ContextRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.ContextRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.ContextRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: ContextRef(System.IntPtr)
        VB: ContextRef(System.IntPtr)
      nameWithType:
        CSharp: ContextRef.ContextRef(System.IntPtr)
        VB: ContextRef.ContextRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.ContextRef.ContextRef(System.IntPtr)
        VB: Swigged.LLVM.ContextRef.ContextRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ContextRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/ContextRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public ContextRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.ContextRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ContextRef.Value
      commentId: F:Swigged.LLVM.ContextRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ContextRef.Value
        VB: ContextRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.ContextRef.Value
        VB: Swigged.LLVM.ContextRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ContextRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/ContextRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ContextRef.Equals(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.ContextRef.Equals(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Equals(ContextRef)
        VB: Equals(ContextRef)
      nameWithType:
        CSharp: ContextRef.Equals(ContextRef)
        VB: ContextRef.Equals(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ContextRef.Equals(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.ContextRef.Equals(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ContextRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ContextRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(ContextRef other)
          VB: Public Function Equals(other As ContextRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.ContextRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ContextRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ContextRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.ContextRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ContextRef.Equals(Object)
        VB: ContextRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.ContextRef.Equals(System.Object)
        VB: Swigged.LLVM.ContextRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ContextRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ContextRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ContextRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ContextRef.GetHashCode
      commentId: M:Swigged.LLVM.ContextRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ContextRef.GetHashCode()
        VB: ContextRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.ContextRef.GetHashCode()
        VB: Swigged.LLVM.ContextRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ContextRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/ContextRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.ContextRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ContextRef.op_Equality(Swigged.LLVM.ContextRef,Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.ContextRef.op_Equality(Swigged.LLVM.ContextRef,Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Equality(ContextRef, ContextRef)
        VB: Equality(ContextRef, ContextRef)
      nameWithType:
        CSharp: ContextRef.Equality(ContextRef, ContextRef)
        VB: ContextRef.Equality(ContextRef, ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ContextRef.Equality(Swigged.LLVM.ContextRef, Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.ContextRef.Equality(Swigged.LLVM.ContextRef, Swigged.LLVM.ContextRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ContextRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/ContextRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(ContextRef left, ContextRef right)
          VB: Public Shared Operator =(left As ContextRef, right As ContextRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ContextRef
        - id: right
          type: Swigged.LLVM.ContextRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ContextRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.ContextRef.op_Inequality(Swigged.LLVM.ContextRef,Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.ContextRef.op_Inequality(Swigged.LLVM.ContextRef,Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Inequality(ContextRef, ContextRef)
        VB: Inequality(ContextRef, ContextRef)
      nameWithType:
        CSharp: ContextRef.Inequality(ContextRef, ContextRef)
        VB: ContextRef.Inequality(ContextRef, ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ContextRef.Inequality(Swigged.LLVM.ContextRef, Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.ContextRef.Inequality(Swigged.LLVM.ContextRef, Swigged.LLVM.ContextRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ContextRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/ContextRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(ContextRef left, ContextRef right)
          VB: Public Shared Operator <>(left As ContextRef, right As ContextRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ContextRef
        - id: right
          type: Swigged.LLVM.ContextRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ContextRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.DiagnosticInfoRef
    commentId: T:Swigged.LLVM.DiagnosticInfoRef
    language: CSharp
    name:
      CSharp: DiagnosticInfoRef
      VB: DiagnosticInfoRef
    nameWithType:
      CSharp: DiagnosticInfoRef
      VB: DiagnosticInfoRef
    qualifiedName:
      CSharp: Swigged.LLVM.DiagnosticInfoRef
      VB: Swigged.LLVM.DiagnosticInfoRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/DiagnosticInfoRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: DiagnosticInfoRef
      path: src/swigged.llvm/DiagnosticInfoRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct DiagnosticInfoRef : System.IEquatable<DiagnosticInfoRef>'
        VB: >-
          Public Structure DiagnosticInfoRef

              Implements System.IEquatable(Of DiagnosticInfoRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.DiagnosticInfoRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.DiagnosticInfoRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: DiagnosticInfoRef(System.IntPtr)
        VB: DiagnosticInfoRef(System.IntPtr)
      nameWithType:
        CSharp: DiagnosticInfoRef.DiagnosticInfoRef(System.IntPtr)
        VB: DiagnosticInfoRef.DiagnosticInfoRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticInfoRef.DiagnosticInfoRef(System.IntPtr)
        VB: Swigged.LLVM.DiagnosticInfoRef.DiagnosticInfoRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/DiagnosticInfoRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public DiagnosticInfoRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.DiagnosticInfoRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.DiagnosticInfoRef.Value
      commentId: F:Swigged.LLVM.DiagnosticInfoRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: DiagnosticInfoRef.Value
        VB: DiagnosticInfoRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticInfoRef.Value
        VB: Swigged.LLVM.DiagnosticInfoRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/DiagnosticInfoRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.DiagnosticInfoRef.Equals(Swigged.LLVM.DiagnosticInfoRef)
      commentId: M:Swigged.LLVM.DiagnosticInfoRef.Equals(Swigged.LLVM.DiagnosticInfoRef)
      language: CSharp
      name:
        CSharp: Equals(DiagnosticInfoRef)
        VB: Equals(DiagnosticInfoRef)
      nameWithType:
        CSharp: DiagnosticInfoRef.Equals(DiagnosticInfoRef)
        VB: DiagnosticInfoRef.Equals(DiagnosticInfoRef)
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticInfoRef.Equals(Swigged.LLVM.DiagnosticInfoRef)
        VB: Swigged.LLVM.DiagnosticInfoRef.Equals(Swigged.LLVM.DiagnosticInfoRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/DiagnosticInfoRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(DiagnosticInfoRef other)
          VB: Public Function Equals(other As DiagnosticInfoRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.DiagnosticInfoRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.DiagnosticInfoRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.DiagnosticInfoRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.DiagnosticInfoRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: DiagnosticInfoRef.Equals(Object)
        VB: DiagnosticInfoRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticInfoRef.Equals(System.Object)
        VB: Swigged.LLVM.DiagnosticInfoRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/DiagnosticInfoRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.DiagnosticInfoRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.DiagnosticInfoRef.GetHashCode
      commentId: M:Swigged.LLVM.DiagnosticInfoRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: DiagnosticInfoRef.GetHashCode()
        VB: DiagnosticInfoRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticInfoRef.GetHashCode()
        VB: Swigged.LLVM.DiagnosticInfoRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/DiagnosticInfoRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.DiagnosticInfoRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.DiagnosticInfoRef.op_Equality(Swigged.LLVM.DiagnosticInfoRef,Swigged.LLVM.DiagnosticInfoRef)
      commentId: M:Swigged.LLVM.DiagnosticInfoRef.op_Equality(Swigged.LLVM.DiagnosticInfoRef,Swigged.LLVM.DiagnosticInfoRef)
      language: CSharp
      name:
        CSharp: Equality(DiagnosticInfoRef, DiagnosticInfoRef)
        VB: Equality(DiagnosticInfoRef, DiagnosticInfoRef)
      nameWithType:
        CSharp: DiagnosticInfoRef.Equality(DiagnosticInfoRef, DiagnosticInfoRef)
        VB: DiagnosticInfoRef.Equality(DiagnosticInfoRef, DiagnosticInfoRef)
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticInfoRef.Equality(Swigged.LLVM.DiagnosticInfoRef, Swigged.LLVM.DiagnosticInfoRef)
        VB: Swigged.LLVM.DiagnosticInfoRef.Equality(Swigged.LLVM.DiagnosticInfoRef, Swigged.LLVM.DiagnosticInfoRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/DiagnosticInfoRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(DiagnosticInfoRef left, DiagnosticInfoRef right)
          VB: Public Shared Operator =(left As DiagnosticInfoRef, right As DiagnosticInfoRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.DiagnosticInfoRef
        - id: right
          type: Swigged.LLVM.DiagnosticInfoRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.DiagnosticInfoRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.DiagnosticInfoRef.op_Inequality(Swigged.LLVM.DiagnosticInfoRef,Swigged.LLVM.DiagnosticInfoRef)
      commentId: M:Swigged.LLVM.DiagnosticInfoRef.op_Inequality(Swigged.LLVM.DiagnosticInfoRef,Swigged.LLVM.DiagnosticInfoRef)
      language: CSharp
      name:
        CSharp: Inequality(DiagnosticInfoRef, DiagnosticInfoRef)
        VB: Inequality(DiagnosticInfoRef, DiagnosticInfoRef)
      nameWithType:
        CSharp: DiagnosticInfoRef.Inequality(DiagnosticInfoRef, DiagnosticInfoRef)
        VB: DiagnosticInfoRef.Inequality(DiagnosticInfoRef, DiagnosticInfoRef)
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticInfoRef.Inequality(Swigged.LLVM.DiagnosticInfoRef, Swigged.LLVM.DiagnosticInfoRef)
        VB: Swigged.LLVM.DiagnosticInfoRef.Inequality(Swigged.LLVM.DiagnosticInfoRef, Swigged.LLVM.DiagnosticInfoRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/DiagnosticInfoRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(DiagnosticInfoRef left, DiagnosticInfoRef right)
          VB: Public Shared Operator <>(left As DiagnosticInfoRef, right As DiagnosticInfoRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.DiagnosticInfoRef
        - id: right
          type: Swigged.LLVM.DiagnosticInfoRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.DiagnosticInfoRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.DiagnosticSeverity
    commentId: T:Swigged.LLVM.DiagnosticSeverity
    language: CSharp
    name:
      CSharp: DiagnosticSeverity
      VB: DiagnosticSeverity
    nameWithType:
      CSharp: DiagnosticSeverity
      VB: DiagnosticSeverity
    qualifiedName:
      CSharp: Swigged.LLVM.DiagnosticSeverity
      VB: Swigged.LLVM.DiagnosticSeverity
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/DiagnosticSeverity.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: DiagnosticSeverity
      path: src/swigged.llvm/DiagnosticSeverity.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum DiagnosticSeverity : int'
        VB: Public Enum DiagnosticSeverity As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.DiagnosticSeverity.DSError
      commentId: F:Swigged.LLVM.DiagnosticSeverity.DSError
      language: CSharp
      name:
        CSharp: DSError
        VB: DSError
      nameWithType:
        CSharp: DiagnosticSeverity.DSError
        VB: DiagnosticSeverity.DSError
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticSeverity.DSError
        VB: Swigged.LLVM.DiagnosticSeverity.DSError
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticSeverity.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DSError
        path: src/swigged.llvm/DiagnosticSeverity.cs
        startLine: 13
      syntax:
        content:
          CSharp: DSError = 0
          VB: DSError = 0
        return:
          type: Swigged.LLVM.DiagnosticSeverity
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.DiagnosticSeverity.DSWarning
      commentId: F:Swigged.LLVM.DiagnosticSeverity.DSWarning
      language: CSharp
      name:
        CSharp: DSWarning
        VB: DSWarning
      nameWithType:
        CSharp: DiagnosticSeverity.DSWarning
        VB: DiagnosticSeverity.DSWarning
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticSeverity.DSWarning
        VB: Swigged.LLVM.DiagnosticSeverity.DSWarning
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticSeverity.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DSWarning
        path: src/swigged.llvm/DiagnosticSeverity.cs
        startLine: 14
      syntax:
        content:
          CSharp: DSWarning = 1
          VB: DSWarning = 1
        return:
          type: Swigged.LLVM.DiagnosticSeverity
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.DiagnosticSeverity.DSRemark
      commentId: F:Swigged.LLVM.DiagnosticSeverity.DSRemark
      language: CSharp
      name:
        CSharp: DSRemark
        VB: DSRemark
      nameWithType:
        CSharp: DiagnosticSeverity.DSRemark
        VB: DiagnosticSeverity.DSRemark
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticSeverity.DSRemark
        VB: Swigged.LLVM.DiagnosticSeverity.DSRemark
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticSeverity.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DSRemark
        path: src/swigged.llvm/DiagnosticSeverity.cs
        startLine: 15
      syntax:
        content:
          CSharp: DSRemark = 2
          VB: DSRemark = 2
        return:
          type: Swigged.LLVM.DiagnosticSeverity
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.DiagnosticSeverity.DSNote
      commentId: F:Swigged.LLVM.DiagnosticSeverity.DSNote
      language: CSharp
      name:
        CSharp: DSNote
        VB: DSNote
      nameWithType:
        CSharp: DiagnosticSeverity.DSNote
        VB: DiagnosticSeverity.DSNote
      qualifiedName:
        CSharp: Swigged.LLVM.DiagnosticSeverity.DSNote
        VB: Swigged.LLVM.DiagnosticSeverity.DSNote
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DiagnosticSeverity.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DSNote
        path: src/swigged.llvm/DiagnosticSeverity.cs
        startLine: 16
      syntax:
        content:
          CSharp: DSNote = 3
          VB: DSNote = 3
        return:
          type: Swigged.LLVM.DiagnosticSeverity
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.DLLStorageClass
    commentId: T:Swigged.LLVM.DLLStorageClass
    language: CSharp
    name:
      CSharp: DLLStorageClass
      VB: DLLStorageClass
    nameWithType:
      CSharp: DLLStorageClass
      VB: DLLStorageClass
    qualifiedName:
      CSharp: Swigged.LLVM.DLLStorageClass
      VB: Swigged.LLVM.DLLStorageClass
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/DLLStorageClass.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: DLLStorageClass
      path: src/swigged.llvm/DLLStorageClass.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum DLLStorageClass : int'
        VB: Public Enum DLLStorageClass As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.DLLStorageClass.DefaultStorageClass
      commentId: F:Swigged.LLVM.DLLStorageClass.DefaultStorageClass
      language: CSharp
      name:
        CSharp: DefaultStorageClass
        VB: DefaultStorageClass
      nameWithType:
        CSharp: DLLStorageClass.DefaultStorageClass
        VB: DLLStorageClass.DefaultStorageClass
      qualifiedName:
        CSharp: Swigged.LLVM.DLLStorageClass.DefaultStorageClass
        VB: Swigged.LLVM.DLLStorageClass.DefaultStorageClass
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DLLStorageClass.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DefaultStorageClass
        path: src/swigged.llvm/DLLStorageClass.cs
        startLine: 13
      syntax:
        content:
          CSharp: DefaultStorageClass = null
          VB: DefaultStorageClass = Nothing
        return:
          type: Swigged.LLVM.DLLStorageClass
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.DLLStorageClass.DLLImportStorageClass
      commentId: F:Swigged.LLVM.DLLStorageClass.DLLImportStorageClass
      language: CSharp
      name:
        CSharp: DLLImportStorageClass
        VB: DLLImportStorageClass
      nameWithType:
        CSharp: DLLStorageClass.DLLImportStorageClass
        VB: DLLStorageClass.DLLImportStorageClass
      qualifiedName:
        CSharp: Swigged.LLVM.DLLStorageClass.DLLImportStorageClass
        VB: Swigged.LLVM.DLLStorageClass.DLLImportStorageClass
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DLLStorageClass.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DLLImportStorageClass
        path: src/swigged.llvm/DLLStorageClass.cs
        startLine: 14
      syntax:
        content:
          CSharp: DLLImportStorageClass = null
          VB: DLLImportStorageClass = Nothing
        return:
          type: Swigged.LLVM.DLLStorageClass
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.DLLStorageClass.DLLExportStorageClass
      commentId: F:Swigged.LLVM.DLLStorageClass.DLLExportStorageClass
      language: CSharp
      name:
        CSharp: DLLExportStorageClass
        VB: DLLExportStorageClass
      nameWithType:
        CSharp: DLLStorageClass.DLLExportStorageClass
        VB: DLLStorageClass.DLLExportStorageClass
      qualifiedName:
        CSharp: Swigged.LLVM.DLLStorageClass.DLLExportStorageClass
        VB: Swigged.LLVM.DLLStorageClass.DLLExportStorageClass
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/DLLStorageClass.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DLLExportStorageClass
        path: src/swigged.llvm/DLLStorageClass.cs
        startLine: 15
      syntax:
        content:
          CSharp: DLLExportStorageClass = null
          VB: DLLExportStorageClass = Nothing
        return:
          type: Swigged.LLVM.DLLStorageClass
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.ExecutionEngineRef
    commentId: T:Swigged.LLVM.ExecutionEngineRef
    language: CSharp
    name:
      CSharp: ExecutionEngineRef
      VB: ExecutionEngineRef
    nameWithType:
      CSharp: ExecutionEngineRef
      VB: ExecutionEngineRef
    qualifiedName:
      CSharp: Swigged.LLVM.ExecutionEngineRef
      VB: Swigged.LLVM.ExecutionEngineRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/ExecutionEngineRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ExecutionEngineRef
      path: src/swigged.llvm/ExecutionEngineRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct ExecutionEngineRef : System.IEquatable<ExecutionEngineRef>'
        VB: >-
          Public Structure ExecutionEngineRef

              Implements System.IEquatable(Of ExecutionEngineRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.ExecutionEngineRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.ExecutionEngineRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: ExecutionEngineRef(System.IntPtr)
        VB: ExecutionEngineRef(System.IntPtr)
      nameWithType:
        CSharp: ExecutionEngineRef.ExecutionEngineRef(System.IntPtr)
        VB: ExecutionEngineRef.ExecutionEngineRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.ExecutionEngineRef.ExecutionEngineRef(System.IntPtr)
        VB: Swigged.LLVM.ExecutionEngineRef.ExecutionEngineRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ExecutionEngineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/ExecutionEngineRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public ExecutionEngineRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.ExecutionEngineRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ExecutionEngineRef.Value
      commentId: F:Swigged.LLVM.ExecutionEngineRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ExecutionEngineRef.Value
        VB: ExecutionEngineRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.ExecutionEngineRef.Value
        VB: Swigged.LLVM.ExecutionEngineRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ExecutionEngineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/ExecutionEngineRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ExecutionEngineRef.Equals(Swigged.LLVM.ExecutionEngineRef)
      commentId: M:Swigged.LLVM.ExecutionEngineRef.Equals(Swigged.LLVM.ExecutionEngineRef)
      language: CSharp
      name:
        CSharp: Equals(ExecutionEngineRef)
        VB: Equals(ExecutionEngineRef)
      nameWithType:
        CSharp: ExecutionEngineRef.Equals(ExecutionEngineRef)
        VB: ExecutionEngineRef.Equals(ExecutionEngineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ExecutionEngineRef.Equals(Swigged.LLVM.ExecutionEngineRef)
        VB: Swigged.LLVM.ExecutionEngineRef.Equals(Swigged.LLVM.ExecutionEngineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ExecutionEngineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ExecutionEngineRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(ExecutionEngineRef other)
          VB: Public Function Equals(other As ExecutionEngineRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.ExecutionEngineRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ExecutionEngineRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ExecutionEngineRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.ExecutionEngineRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ExecutionEngineRef.Equals(Object)
        VB: ExecutionEngineRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.ExecutionEngineRef.Equals(System.Object)
        VB: Swigged.LLVM.ExecutionEngineRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ExecutionEngineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ExecutionEngineRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ExecutionEngineRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ExecutionEngineRef.GetHashCode
      commentId: M:Swigged.LLVM.ExecutionEngineRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ExecutionEngineRef.GetHashCode()
        VB: ExecutionEngineRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.ExecutionEngineRef.GetHashCode()
        VB: Swigged.LLVM.ExecutionEngineRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ExecutionEngineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/ExecutionEngineRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.ExecutionEngineRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ExecutionEngineRef.op_Equality(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ExecutionEngineRef)
      commentId: M:Swigged.LLVM.ExecutionEngineRef.op_Equality(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ExecutionEngineRef)
      language: CSharp
      name:
        CSharp: Equality(ExecutionEngineRef, ExecutionEngineRef)
        VB: Equality(ExecutionEngineRef, ExecutionEngineRef)
      nameWithType:
        CSharp: ExecutionEngineRef.Equality(ExecutionEngineRef, ExecutionEngineRef)
        VB: ExecutionEngineRef.Equality(ExecutionEngineRef, ExecutionEngineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ExecutionEngineRef.Equality(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ExecutionEngineRef)
        VB: Swigged.LLVM.ExecutionEngineRef.Equality(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ExecutionEngineRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ExecutionEngineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/ExecutionEngineRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(ExecutionEngineRef left, ExecutionEngineRef right)
          VB: Public Shared Operator =(left As ExecutionEngineRef, right As ExecutionEngineRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ExecutionEngineRef
        - id: right
          type: Swigged.LLVM.ExecutionEngineRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ExecutionEngineRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.ExecutionEngineRef.op_Inequality(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ExecutionEngineRef)
      commentId: M:Swigged.LLVM.ExecutionEngineRef.op_Inequality(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ExecutionEngineRef)
      language: CSharp
      name:
        CSharp: Inequality(ExecutionEngineRef, ExecutionEngineRef)
        VB: Inequality(ExecutionEngineRef, ExecutionEngineRef)
      nameWithType:
        CSharp: ExecutionEngineRef.Inequality(ExecutionEngineRef, ExecutionEngineRef)
        VB: ExecutionEngineRef.Inequality(ExecutionEngineRef, ExecutionEngineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ExecutionEngineRef.Inequality(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ExecutionEngineRef)
        VB: Swigged.LLVM.ExecutionEngineRef.Inequality(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ExecutionEngineRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ExecutionEngineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/ExecutionEngineRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(ExecutionEngineRef left, ExecutionEngineRef right)
          VB: Public Shared Operator <>(left As ExecutionEngineRef, right As ExecutionEngineRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ExecutionEngineRef
        - id: right
          type: Swigged.LLVM.ExecutionEngineRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ExecutionEngineRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.GenericValueRef
    commentId: T:Swigged.LLVM.GenericValueRef
    language: CSharp
    name:
      CSharp: GenericValueRef
      VB: GenericValueRef
    nameWithType:
      CSharp: GenericValueRef
      VB: GenericValueRef
    qualifiedName:
      CSharp: Swigged.LLVM.GenericValueRef
      VB: Swigged.LLVM.GenericValueRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/GenericValueRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: GenericValueRef
      path: src/swigged.llvm/GenericValueRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct GenericValueRef : System.IEquatable<GenericValueRef>'
        VB: >-
          Public Structure GenericValueRef

              Implements System.IEquatable(Of GenericValueRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.GenericValueRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.GenericValueRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: GenericValueRef(System.IntPtr)
        VB: GenericValueRef(System.IntPtr)
      nameWithType:
        CSharp: GenericValueRef.GenericValueRef(System.IntPtr)
        VB: GenericValueRef.GenericValueRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.GenericValueRef.GenericValueRef(System.IntPtr)
        VB: Swigged.LLVM.GenericValueRef.GenericValueRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/GenericValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/GenericValueRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public GenericValueRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.GenericValueRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.GenericValueRef.Value
      commentId: F:Swigged.LLVM.GenericValueRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: GenericValueRef.Value
        VB: GenericValueRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.GenericValueRef.Value
        VB: Swigged.LLVM.GenericValueRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/GenericValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/GenericValueRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.GenericValueRef.Equals(Swigged.LLVM.GenericValueRef)
      commentId: M:Swigged.LLVM.GenericValueRef.Equals(Swigged.LLVM.GenericValueRef)
      language: CSharp
      name:
        CSharp: Equals(GenericValueRef)
        VB: Equals(GenericValueRef)
      nameWithType:
        CSharp: GenericValueRef.Equals(GenericValueRef)
        VB: GenericValueRef.Equals(GenericValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.GenericValueRef.Equals(Swigged.LLVM.GenericValueRef)
        VB: Swigged.LLVM.GenericValueRef.Equals(Swigged.LLVM.GenericValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/GenericValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/GenericValueRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(GenericValueRef other)
          VB: Public Function Equals(other As GenericValueRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.GenericValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.GenericValueRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.GenericValueRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.GenericValueRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: GenericValueRef.Equals(Object)
        VB: GenericValueRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.GenericValueRef.Equals(System.Object)
        VB: Swigged.LLVM.GenericValueRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/GenericValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/GenericValueRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.GenericValueRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.GenericValueRef.GetHashCode
      commentId: M:Swigged.LLVM.GenericValueRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: GenericValueRef.GetHashCode()
        VB: GenericValueRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.GenericValueRef.GetHashCode()
        VB: Swigged.LLVM.GenericValueRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/GenericValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/GenericValueRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.GenericValueRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.GenericValueRef.op_Equality(Swigged.LLVM.GenericValueRef,Swigged.LLVM.GenericValueRef)
      commentId: M:Swigged.LLVM.GenericValueRef.op_Equality(Swigged.LLVM.GenericValueRef,Swigged.LLVM.GenericValueRef)
      language: CSharp
      name:
        CSharp: Equality(GenericValueRef, GenericValueRef)
        VB: Equality(GenericValueRef, GenericValueRef)
      nameWithType:
        CSharp: GenericValueRef.Equality(GenericValueRef, GenericValueRef)
        VB: GenericValueRef.Equality(GenericValueRef, GenericValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.GenericValueRef.Equality(Swigged.LLVM.GenericValueRef, Swigged.LLVM.GenericValueRef)
        VB: Swigged.LLVM.GenericValueRef.Equality(Swigged.LLVM.GenericValueRef, Swigged.LLVM.GenericValueRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/GenericValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/GenericValueRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(GenericValueRef left, GenericValueRef right)
          VB: Public Shared Operator =(left As GenericValueRef, right As GenericValueRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.GenericValueRef
        - id: right
          type: Swigged.LLVM.GenericValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.GenericValueRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.GenericValueRef.op_Inequality(Swigged.LLVM.GenericValueRef,Swigged.LLVM.GenericValueRef)
      commentId: M:Swigged.LLVM.GenericValueRef.op_Inequality(Swigged.LLVM.GenericValueRef,Swigged.LLVM.GenericValueRef)
      language: CSharp
      name:
        CSharp: Inequality(GenericValueRef, GenericValueRef)
        VB: Inequality(GenericValueRef, GenericValueRef)
      nameWithType:
        CSharp: GenericValueRef.Inequality(GenericValueRef, GenericValueRef)
        VB: GenericValueRef.Inequality(GenericValueRef, GenericValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.GenericValueRef.Inequality(Swigged.LLVM.GenericValueRef, Swigged.LLVM.GenericValueRef)
        VB: Swigged.LLVM.GenericValueRef.Inequality(Swigged.LLVM.GenericValueRef, Swigged.LLVM.GenericValueRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/GenericValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/GenericValueRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(GenericValueRef left, GenericValueRef right)
          VB: Public Shared Operator <>(left As GenericValueRef, right As GenericValueRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.GenericValueRef
        - id: right
          type: Swigged.LLVM.GenericValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.GenericValueRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.IntPredicate
    commentId: T:Swigged.LLVM.IntPredicate
    language: CSharp
    name:
      CSharp: IntPredicate
      VB: IntPredicate
    nameWithType:
      CSharp: IntPredicate
      VB: IntPredicate
    qualifiedName:
      CSharp: Swigged.LLVM.IntPredicate
      VB: Swigged.LLVM.IntPredicate
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/IntPredicate.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: IntPredicate
      path: src/swigged.llvm/IntPredicate.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum IntPredicate : int'
        VB: Public Enum IntPredicate As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.IntPredicate.IntEQ
      commentId: F:Swigged.LLVM.IntPredicate.IntEQ
      language: CSharp
      name:
        CSharp: IntEQ
        VB: IntEQ
      nameWithType:
        CSharp: IntPredicate.IntEQ
        VB: IntPredicate.IntEQ
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntEQ
        VB: Swigged.LLVM.IntPredicate.IntEQ
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntEQ
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 13
      syntax:
        content:
          CSharp: IntEQ = null
          VB: IntEQ = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntNE
      commentId: F:Swigged.LLVM.IntPredicate.IntNE
      language: CSharp
      name:
        CSharp: IntNE
        VB: IntNE
      nameWithType:
        CSharp: IntPredicate.IntNE
        VB: IntPredicate.IntNE
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntNE
        VB: Swigged.LLVM.IntPredicate.IntNE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntNE
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 14
      syntax:
        content:
          CSharp: IntNE = null
          VB: IntNE = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntUGT
      commentId: F:Swigged.LLVM.IntPredicate.IntUGT
      language: CSharp
      name:
        CSharp: IntUGT
        VB: IntUGT
      nameWithType:
        CSharp: IntPredicate.IntUGT
        VB: IntPredicate.IntUGT
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntUGT
        VB: Swigged.LLVM.IntPredicate.IntUGT
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntUGT
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 15
      syntax:
        content:
          CSharp: IntUGT = null
          VB: IntUGT = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntUGE
      commentId: F:Swigged.LLVM.IntPredicate.IntUGE
      language: CSharp
      name:
        CSharp: IntUGE
        VB: IntUGE
      nameWithType:
        CSharp: IntPredicate.IntUGE
        VB: IntPredicate.IntUGE
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntUGE
        VB: Swigged.LLVM.IntPredicate.IntUGE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntUGE
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 16
      syntax:
        content:
          CSharp: IntUGE = null
          VB: IntUGE = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntULT
      commentId: F:Swigged.LLVM.IntPredicate.IntULT
      language: CSharp
      name:
        CSharp: IntULT
        VB: IntULT
      nameWithType:
        CSharp: IntPredicate.IntULT
        VB: IntPredicate.IntULT
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntULT
        VB: Swigged.LLVM.IntPredicate.IntULT
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntULT
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 17
      syntax:
        content:
          CSharp: IntULT = null
          VB: IntULT = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntULE
      commentId: F:Swigged.LLVM.IntPredicate.IntULE
      language: CSharp
      name:
        CSharp: IntULE
        VB: IntULE
      nameWithType:
        CSharp: IntPredicate.IntULE
        VB: IntPredicate.IntULE
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntULE
        VB: Swigged.LLVM.IntPredicate.IntULE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntULE
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 18
      syntax:
        content:
          CSharp: IntULE = null
          VB: IntULE = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntSGT
      commentId: F:Swigged.LLVM.IntPredicate.IntSGT
      language: CSharp
      name:
        CSharp: IntSGT
        VB: IntSGT
      nameWithType:
        CSharp: IntPredicate.IntSGT
        VB: IntPredicate.IntSGT
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntSGT
        VB: Swigged.LLVM.IntPredicate.IntSGT
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntSGT
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 19
      syntax:
        content:
          CSharp: IntSGT = null
          VB: IntSGT = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntSGE
      commentId: F:Swigged.LLVM.IntPredicate.IntSGE
      language: CSharp
      name:
        CSharp: IntSGE
        VB: IntSGE
      nameWithType:
        CSharp: IntPredicate.IntSGE
        VB: IntPredicate.IntSGE
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntSGE
        VB: Swigged.LLVM.IntPredicate.IntSGE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntSGE
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 20
      syntax:
        content:
          CSharp: IntSGE = null
          VB: IntSGE = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntSLT
      commentId: F:Swigged.LLVM.IntPredicate.IntSLT
      language: CSharp
      name:
        CSharp: IntSLT
        VB: IntSLT
      nameWithType:
        CSharp: IntPredicate.IntSLT
        VB: IntPredicate.IntSLT
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntSLT
        VB: Swigged.LLVM.IntPredicate.IntSLT
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntSLT
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 21
      syntax:
        content:
          CSharp: IntSLT = null
          VB: IntSLT = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.IntPredicate.IntSLE
      commentId: F:Swigged.LLVM.IntPredicate.IntSLE
      language: CSharp
      name:
        CSharp: IntSLE
        VB: IntSLE
      nameWithType:
        CSharp: IntPredicate.IntSLE
        VB: IntPredicate.IntSLE
      qualifiedName:
        CSharp: Swigged.LLVM.IntPredicate.IntSLE
        VB: Swigged.LLVM.IntPredicate.IntSLE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/IntPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntSLE
        path: src/swigged.llvm/IntPredicate.cs
        startLine: 22
      syntax:
        content:
          CSharp: IntSLE = null
          VB: IntSLE = Nothing
        return:
          type: Swigged.LLVM.IntPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.LandingPadClauseTy
    commentId: T:Swigged.LLVM.LandingPadClauseTy
    language: CSharp
    name:
      CSharp: LandingPadClauseTy
      VB: LandingPadClauseTy
    nameWithType:
      CSharp: LandingPadClauseTy
      VB: LandingPadClauseTy
    qualifiedName:
      CSharp: Swigged.LLVM.LandingPadClauseTy
      VB: Swigged.LLVM.LandingPadClauseTy
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/LandingPadClauseTy.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: LandingPadClauseTy
      path: src/swigged.llvm/LandingPadClauseTy.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum LandingPadClauseTy : int'
        VB: Public Enum LandingPadClauseTy As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.LandingPadClauseTy.LandingPadCatch
      commentId: F:Swigged.LLVM.LandingPadClauseTy.LandingPadCatch
      language: CSharp
      name:
        CSharp: LandingPadCatch
        VB: LandingPadCatch
      nameWithType:
        CSharp: LandingPadClauseTy.LandingPadCatch
        VB: LandingPadClauseTy.LandingPadCatch
      qualifiedName:
        CSharp: Swigged.LLVM.LandingPadClauseTy.LandingPadCatch
        VB: Swigged.LLVM.LandingPadClauseTy.LandingPadCatch
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LandingPadClauseTy.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LandingPadCatch
        path: src/swigged.llvm/LandingPadClauseTy.cs
        startLine: 13
      syntax:
        content:
          CSharp: LandingPadCatch = 0
          VB: LandingPadCatch = 0
        return:
          type: Swigged.LLVM.LandingPadClauseTy
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.LandingPadClauseTy.LandingPadFilter
      commentId: F:Swigged.LLVM.LandingPadClauseTy.LandingPadFilter
      language: CSharp
      name:
        CSharp: LandingPadFilter
        VB: LandingPadFilter
      nameWithType:
        CSharp: LandingPadClauseTy.LandingPadFilter
        VB: LandingPadClauseTy.LandingPadFilter
      qualifiedName:
        CSharp: Swigged.LLVM.LandingPadClauseTy.LandingPadFilter
        VB: Swigged.LLVM.LandingPadClauseTy.LandingPadFilter
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LandingPadClauseTy.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LandingPadFilter
        path: src/swigged.llvm/LandingPadClauseTy.cs
        startLine: 14
      syntax:
        content:
          CSharp: LandingPadFilter = 1
          VB: LandingPadFilter = 1
        return:
          type: Swigged.LLVM.LandingPadClauseTy
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.Linkage
    commentId: T:Swigged.LLVM.Linkage
    language: CSharp
    name:
      CSharp: Linkage
      VB: Linkage
    nameWithType:
      CSharp: Linkage
      VB: Linkage
    qualifiedName:
      CSharp: Swigged.LLVM.Linkage
      VB: Swigged.LLVM.Linkage
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/Linkage.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: Linkage
      path: src/swigged.llvm/Linkage.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum Linkage : int'
        VB: Public Enum Linkage As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.Linkage.ExternalLinkage
      commentId: F:Swigged.LLVM.Linkage.ExternalLinkage
      language: CSharp
      name:
        CSharp: ExternalLinkage
        VB: ExternalLinkage
      nameWithType:
        CSharp: Linkage.ExternalLinkage
        VB: Linkage.ExternalLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.ExternalLinkage
        VB: Swigged.LLVM.Linkage.ExternalLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ExternalLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 13
      syntax:
        content:
          CSharp: ExternalLinkage = 0
          VB: ExternalLinkage = 0
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.AvailableExternallyLinkage
      commentId: F:Swigged.LLVM.Linkage.AvailableExternallyLinkage
      language: CSharp
      name:
        CSharp: AvailableExternallyLinkage
        VB: AvailableExternallyLinkage
      nameWithType:
        CSharp: Linkage.AvailableExternallyLinkage
        VB: Linkage.AvailableExternallyLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.AvailableExternallyLinkage
        VB: Swigged.LLVM.Linkage.AvailableExternallyLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AvailableExternallyLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 14
      syntax:
        content:
          CSharp: AvailableExternallyLinkage = 1
          VB: AvailableExternallyLinkage = 1
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.LinkOnceAnyLinkage
      commentId: F:Swigged.LLVM.Linkage.LinkOnceAnyLinkage
      language: CSharp
      name:
        CSharp: LinkOnceAnyLinkage
        VB: LinkOnceAnyLinkage
      nameWithType:
        CSharp: Linkage.LinkOnceAnyLinkage
        VB: Linkage.LinkOnceAnyLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.LinkOnceAnyLinkage
        VB: Swigged.LLVM.Linkage.LinkOnceAnyLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkOnceAnyLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 15
      syntax:
        content:
          CSharp: LinkOnceAnyLinkage = 2
          VB: LinkOnceAnyLinkage = 2
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.LinkOnceODRLinkage
      commentId: F:Swigged.LLVM.Linkage.LinkOnceODRLinkage
      language: CSharp
      name:
        CSharp: LinkOnceODRLinkage
        VB: LinkOnceODRLinkage
      nameWithType:
        CSharp: Linkage.LinkOnceODRLinkage
        VB: Linkage.LinkOnceODRLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.LinkOnceODRLinkage
        VB: Swigged.LLVM.Linkage.LinkOnceODRLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkOnceODRLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 16
      syntax:
        content:
          CSharp: LinkOnceODRLinkage = 3
          VB: LinkOnceODRLinkage = 3
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.LinkOnceODRAutoHideLinkage
      commentId: F:Swigged.LLVM.Linkage.LinkOnceODRAutoHideLinkage
      language: CSharp
      name:
        CSharp: LinkOnceODRAutoHideLinkage
        VB: LinkOnceODRAutoHideLinkage
      nameWithType:
        CSharp: Linkage.LinkOnceODRAutoHideLinkage
        VB: Linkage.LinkOnceODRAutoHideLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.LinkOnceODRAutoHideLinkage
        VB: Swigged.LLVM.Linkage.LinkOnceODRAutoHideLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkOnceODRAutoHideLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 17
      syntax:
        content:
          CSharp: LinkOnceODRAutoHideLinkage = 4
          VB: LinkOnceODRAutoHideLinkage = 4
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.WeakAnyLinkage
      commentId: F:Swigged.LLVM.Linkage.WeakAnyLinkage
      language: CSharp
      name:
        CSharp: WeakAnyLinkage
        VB: WeakAnyLinkage
      nameWithType:
        CSharp: Linkage.WeakAnyLinkage
        VB: Linkage.WeakAnyLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.WeakAnyLinkage
        VB: Swigged.LLVM.Linkage.WeakAnyLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: WeakAnyLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 18
      syntax:
        content:
          CSharp: WeakAnyLinkage = 5
          VB: WeakAnyLinkage = 5
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.WeakODRLinkage
      commentId: F:Swigged.LLVM.Linkage.WeakODRLinkage
      language: CSharp
      name:
        CSharp: WeakODRLinkage
        VB: WeakODRLinkage
      nameWithType:
        CSharp: Linkage.WeakODRLinkage
        VB: Linkage.WeakODRLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.WeakODRLinkage
        VB: Swigged.LLVM.Linkage.WeakODRLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: WeakODRLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 19
      syntax:
        content:
          CSharp: WeakODRLinkage = 6
          VB: WeakODRLinkage = 6
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.AppendingLinkage
      commentId: F:Swigged.LLVM.Linkage.AppendingLinkage
      language: CSharp
      name:
        CSharp: AppendingLinkage
        VB: AppendingLinkage
      nameWithType:
        CSharp: Linkage.AppendingLinkage
        VB: Linkage.AppendingLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.AppendingLinkage
        VB: Swigged.LLVM.Linkage.AppendingLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AppendingLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 20
      syntax:
        content:
          CSharp: AppendingLinkage = 7
          VB: AppendingLinkage = 7
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.InternalLinkage
      commentId: F:Swigged.LLVM.Linkage.InternalLinkage
      language: CSharp
      name:
        CSharp: InternalLinkage
        VB: InternalLinkage
      nameWithType:
        CSharp: Linkage.InternalLinkage
        VB: Linkage.InternalLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.InternalLinkage
        VB: Swigged.LLVM.Linkage.InternalLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InternalLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 21
      syntax:
        content:
          CSharp: InternalLinkage = 8
          VB: InternalLinkage = 8
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.PrivateLinkage
      commentId: F:Swigged.LLVM.Linkage.PrivateLinkage
      language: CSharp
      name:
        CSharp: PrivateLinkage
        VB: PrivateLinkage
      nameWithType:
        CSharp: Linkage.PrivateLinkage
        VB: Linkage.PrivateLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.PrivateLinkage
        VB: Swigged.LLVM.Linkage.PrivateLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PrivateLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 22
      syntax:
        content:
          CSharp: PrivateLinkage = 9
          VB: PrivateLinkage = 9
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.DLLImportLinkage
      commentId: F:Swigged.LLVM.Linkage.DLLImportLinkage
      language: CSharp
      name:
        CSharp: DLLImportLinkage
        VB: DLLImportLinkage
      nameWithType:
        CSharp: Linkage.DLLImportLinkage
        VB: Linkage.DLLImportLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.DLLImportLinkage
        VB: Swigged.LLVM.Linkage.DLLImportLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DLLImportLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 23
      syntax:
        content:
          CSharp: DLLImportLinkage = 10
          VB: DLLImportLinkage = 10
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.DLLExportLinkage
      commentId: F:Swigged.LLVM.Linkage.DLLExportLinkage
      language: CSharp
      name:
        CSharp: DLLExportLinkage
        VB: DLLExportLinkage
      nameWithType:
        CSharp: Linkage.DLLExportLinkage
        VB: Linkage.DLLExportLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.DLLExportLinkage
        VB: Swigged.LLVM.Linkage.DLLExportLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DLLExportLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 24
      syntax:
        content:
          CSharp: DLLExportLinkage = 11
          VB: DLLExportLinkage = 11
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.ExternalWeakLinkage
      commentId: F:Swigged.LLVM.Linkage.ExternalWeakLinkage
      language: CSharp
      name:
        CSharp: ExternalWeakLinkage
        VB: ExternalWeakLinkage
      nameWithType:
        CSharp: Linkage.ExternalWeakLinkage
        VB: Linkage.ExternalWeakLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.ExternalWeakLinkage
        VB: Swigged.LLVM.Linkage.ExternalWeakLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ExternalWeakLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 25
      syntax:
        content:
          CSharp: ExternalWeakLinkage = 12
          VB: ExternalWeakLinkage = 12
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.GhostLinkage
      commentId: F:Swigged.LLVM.Linkage.GhostLinkage
      language: CSharp
      name:
        CSharp: GhostLinkage
        VB: GhostLinkage
      nameWithType:
        CSharp: Linkage.GhostLinkage
        VB: Linkage.GhostLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.GhostLinkage
        VB: Swigged.LLVM.Linkage.GhostLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GhostLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 26
      syntax:
        content:
          CSharp: GhostLinkage = 13
          VB: GhostLinkage = 13
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.CommonLinkage
      commentId: F:Swigged.LLVM.Linkage.CommonLinkage
      language: CSharp
      name:
        CSharp: CommonLinkage
        VB: CommonLinkage
      nameWithType:
        CSharp: Linkage.CommonLinkage
        VB: Linkage.CommonLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.CommonLinkage
        VB: Swigged.LLVM.Linkage.CommonLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CommonLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 27
      syntax:
        content:
          CSharp: CommonLinkage = 14
          VB: CommonLinkage = 14
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.LinkerPrivateLinkage
      commentId: F:Swigged.LLVM.Linkage.LinkerPrivateLinkage
      language: CSharp
      name:
        CSharp: LinkerPrivateLinkage
        VB: LinkerPrivateLinkage
      nameWithType:
        CSharp: Linkage.LinkerPrivateLinkage
        VB: Linkage.LinkerPrivateLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.LinkerPrivateLinkage
        VB: Swigged.LLVM.Linkage.LinkerPrivateLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkerPrivateLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 28
      syntax:
        content:
          CSharp: LinkerPrivateLinkage = 15
          VB: LinkerPrivateLinkage = 15
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Linkage.LinkerPrivateWeakLinkage
      commentId: F:Swigged.LLVM.Linkage.LinkerPrivateWeakLinkage
      language: CSharp
      name:
        CSharp: LinkerPrivateWeakLinkage
        VB: LinkerPrivateWeakLinkage
      nameWithType:
        CSharp: Linkage.LinkerPrivateWeakLinkage
        VB: Linkage.LinkerPrivateWeakLinkage
      qualifiedName:
        CSharp: Swigged.LLVM.Linkage.LinkerPrivateWeakLinkage
        VB: Swigged.LLVM.Linkage.LinkerPrivateWeakLinkage
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Linkage.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkerPrivateWeakLinkage
        path: src/swigged.llvm/Linkage.cs
        startLine: 29
      syntax:
        content:
          CSharp: LinkerPrivateWeakLinkage = 16
          VB: LinkerPrivateWeakLinkage = 16
        return:
          type: Swigged.LLVM.Linkage
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.LinkerMode
    commentId: T:Swigged.LLVM.LinkerMode
    language: CSharp
    name:
      CSharp: LinkerMode
      VB: LinkerMode
    nameWithType:
      CSharp: LinkerMode
      VB: LinkerMode
    qualifiedName:
      CSharp: Swigged.LLVM.LinkerMode
      VB: Swigged.LLVM.LinkerMode
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/LinkerMode.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: LinkerMode
      path: src/swigged.llvm/LinkerMode.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum LinkerMode : int'
        VB: Public Enum LinkerMode As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.LinkerMode.LinkerDestroySource
      commentId: F:Swigged.LLVM.LinkerMode.LinkerDestroySource
      language: CSharp
      name:
        CSharp: LinkerDestroySource
        VB: LinkerDestroySource
      nameWithType:
        CSharp: LinkerMode.LinkerDestroySource
        VB: LinkerMode.LinkerDestroySource
      qualifiedName:
        CSharp: Swigged.LLVM.LinkerMode.LinkerDestroySource
        VB: Swigged.LLVM.LinkerMode.LinkerDestroySource
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LinkerMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkerDestroySource
        path: src/swigged.llvm/LinkerMode.cs
        startLine: 13
      syntax:
        content:
          CSharp: LinkerDestroySource = null
          VB: LinkerDestroySource = Nothing
        return:
          type: Swigged.LLVM.LinkerMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.LinkerMode.LinkerPreserveSource_Removed
      commentId: F:Swigged.LLVM.LinkerMode.LinkerPreserveSource_Removed
      language: CSharp
      name:
        CSharp: LinkerPreserveSource_Removed
        VB: LinkerPreserveSource_Removed
      nameWithType:
        CSharp: LinkerMode.LinkerPreserveSource_Removed
        VB: LinkerMode.LinkerPreserveSource_Removed
      qualifiedName:
        CSharp: Swigged.LLVM.LinkerMode.LinkerPreserveSource_Removed
        VB: Swigged.LLVM.LinkerMode.LinkerPreserveSource_Removed
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LinkerMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkerPreserveSource_Removed
        path: src/swigged.llvm/LinkerMode.cs
        startLine: 14
      syntax:
        content:
          CSharp: LinkerPreserveSource_Removed = null
          VB: LinkerPreserveSource_Removed = Nothing
        return:
          type: Swigged.LLVM.LinkerMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.MCJITCompilerOptions
    commentId: T:Swigged.LLVM.MCJITCompilerOptions
    language: CSharp
    name:
      CSharp: MCJITCompilerOptions
      VB: MCJITCompilerOptions
    nameWithType:
      CSharp: MCJITCompilerOptions
      VB: MCJITCompilerOptions
    qualifiedName:
      CSharp: Swigged.LLVM.MCJITCompilerOptions
      VB: Swigged.LLVM.MCJITCompilerOptions
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/Additional/TypeRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: MCJITCompilerOptions
      path: src/swigged.llvm/Additional/TypeRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct MCJITCompilerOptions : System.IEquatable<MCJITCompilerOptions>, System.IDisposable'
        VB: >-
          Public Structure MCJITCompilerOptions

              Implements System.IEquatable(Of MCJITCompilerOptions), System.IDisposable
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.MCJITCompilerOptions.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.MCJITCompilerOptions.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: MCJITCompilerOptions(System.IntPtr)
        VB: MCJITCompilerOptions(System.IntPtr)
      nameWithType:
        CSharp: MCJITCompilerOptions.MCJITCompilerOptions(System.IntPtr)
        VB: MCJITCompilerOptions.MCJITCompilerOptions(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITCompilerOptions.MCJITCompilerOptions(System.IntPtr)
        VB: Swigged.LLVM.MCJITCompilerOptions.MCJITCompilerOptions(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITCompilerOptions.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/MCJITCompilerOptions.cs
        startLine: 13
      syntax:
        content:
          CSharp: public MCJITCompilerOptions(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.MCJITCompilerOptions.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MCJITCompilerOptions.Value
      commentId: F:Swigged.LLVM.MCJITCompilerOptions.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: MCJITCompilerOptions.Value
        VB: MCJITCompilerOptions.Value
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITCompilerOptions.Value
        VB: Swigged.LLVM.MCJITCompilerOptions.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITCompilerOptions.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/MCJITCompilerOptions.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MCJITCompilerOptions.Equals(Swigged.LLVM.MCJITCompilerOptions)
      commentId: M:Swigged.LLVM.MCJITCompilerOptions.Equals(Swigged.LLVM.MCJITCompilerOptions)
      language: CSharp
      name:
        CSharp: Equals(MCJITCompilerOptions)
        VB: Equals(MCJITCompilerOptions)
      nameWithType:
        CSharp: MCJITCompilerOptions.Equals(MCJITCompilerOptions)
        VB: MCJITCompilerOptions.Equals(MCJITCompilerOptions)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITCompilerOptions.Equals(Swigged.LLVM.MCJITCompilerOptions)
        VB: Swigged.LLVM.MCJITCompilerOptions.Equals(Swigged.LLVM.MCJITCompilerOptions)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITCompilerOptions.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/MCJITCompilerOptions.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(MCJITCompilerOptions other)
          VB: Public Function Equals(other As MCJITCompilerOptions) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.MCJITCompilerOptions
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MCJITCompilerOptions.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MCJITCompilerOptions.Equals(System.Object)
      commentId: M:Swigged.LLVM.MCJITCompilerOptions.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: MCJITCompilerOptions.Equals(Object)
        VB: MCJITCompilerOptions.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITCompilerOptions.Equals(System.Object)
        VB: Swigged.LLVM.MCJITCompilerOptions.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITCompilerOptions.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/MCJITCompilerOptions.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MCJITCompilerOptions.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.MCJITCompilerOptions.GetHashCode
      commentId: M:Swigged.LLVM.MCJITCompilerOptions.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: MCJITCompilerOptions.GetHashCode()
        VB: MCJITCompilerOptions.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITCompilerOptions.GetHashCode()
        VB: Swigged.LLVM.MCJITCompilerOptions.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITCompilerOptions.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/MCJITCompilerOptions.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.MCJITCompilerOptions.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.MCJITCompilerOptions.op_Equality(Swigged.LLVM.MCJITCompilerOptions,Swigged.LLVM.MCJITCompilerOptions)
      commentId: M:Swigged.LLVM.MCJITCompilerOptions.op_Equality(Swigged.LLVM.MCJITCompilerOptions,Swigged.LLVM.MCJITCompilerOptions)
      language: CSharp
      name:
        CSharp: Equality(MCJITCompilerOptions, MCJITCompilerOptions)
        VB: Equality(MCJITCompilerOptions, MCJITCompilerOptions)
      nameWithType:
        CSharp: MCJITCompilerOptions.Equality(MCJITCompilerOptions, MCJITCompilerOptions)
        VB: MCJITCompilerOptions.Equality(MCJITCompilerOptions, MCJITCompilerOptions)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITCompilerOptions.Equality(Swigged.LLVM.MCJITCompilerOptions, Swigged.LLVM.MCJITCompilerOptions)
        VB: Swigged.LLVM.MCJITCompilerOptions.Equality(Swigged.LLVM.MCJITCompilerOptions, Swigged.LLVM.MCJITCompilerOptions)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITCompilerOptions.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/MCJITCompilerOptions.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(MCJITCompilerOptions left, MCJITCompilerOptions right)
          VB: Public Shared Operator =(left As MCJITCompilerOptions, right As MCJITCompilerOptions) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.MCJITCompilerOptions
        - id: right
          type: Swigged.LLVM.MCJITCompilerOptions
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MCJITCompilerOptions.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.MCJITCompilerOptions.op_Inequality(Swigged.LLVM.MCJITCompilerOptions,Swigged.LLVM.MCJITCompilerOptions)
      commentId: M:Swigged.LLVM.MCJITCompilerOptions.op_Inequality(Swigged.LLVM.MCJITCompilerOptions,Swigged.LLVM.MCJITCompilerOptions)
      language: CSharp
      name:
        CSharp: Inequality(MCJITCompilerOptions, MCJITCompilerOptions)
        VB: Inequality(MCJITCompilerOptions, MCJITCompilerOptions)
      nameWithType:
        CSharp: MCJITCompilerOptions.Inequality(MCJITCompilerOptions, MCJITCompilerOptions)
        VB: MCJITCompilerOptions.Inequality(MCJITCompilerOptions, MCJITCompilerOptions)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITCompilerOptions.Inequality(Swigged.LLVM.MCJITCompilerOptions, Swigged.LLVM.MCJITCompilerOptions)
        VB: Swigged.LLVM.MCJITCompilerOptions.Inequality(Swigged.LLVM.MCJITCompilerOptions, Swigged.LLVM.MCJITCompilerOptions)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITCompilerOptions.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/MCJITCompilerOptions.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(MCJITCompilerOptions left, MCJITCompilerOptions right)
          VB: Public Shared Operator <>(left As MCJITCompilerOptions, right As MCJITCompilerOptions) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.MCJITCompilerOptions
        - id: right
          type: Swigged.LLVM.MCJITCompilerOptions
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MCJITCompilerOptions.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.MCJITCompilerOptions.Dispose
      commentId: M:Swigged.LLVM.MCJITCompilerOptions.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: MCJITCompilerOptions.Dispose()
        VB: MCJITCompilerOptions.Dispose()
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITCompilerOptions.Dispose()
        VB: Swigged.LLVM.MCJITCompilerOptions.Dispose()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Additional/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Dispose
        path: src/swigged.llvm/Additional/TypeRef.cs
        startLine: 14
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Swigged.LLVM.MCJITCompilerOptions.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Swigged.LLVM.MCJITMemoryManagerRef
    commentId: T:Swigged.LLVM.MCJITMemoryManagerRef
    language: CSharp
    name:
      CSharp: MCJITMemoryManagerRef
      VB: MCJITMemoryManagerRef
    nameWithType:
      CSharp: MCJITMemoryManagerRef
      VB: MCJITMemoryManagerRef
    qualifiedName:
      CSharp: Swigged.LLVM.MCJITMemoryManagerRef
      VB: Swigged.LLVM.MCJITMemoryManagerRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/MCJITMemoryManagerRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: MCJITMemoryManagerRef
      path: src/swigged.llvm/MCJITMemoryManagerRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct MCJITMemoryManagerRef : System.IEquatable<MCJITMemoryManagerRef>'
        VB: >-
          Public Structure MCJITMemoryManagerRef

              Implements System.IEquatable(Of MCJITMemoryManagerRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.MCJITMemoryManagerRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.MCJITMemoryManagerRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: MCJITMemoryManagerRef(System.IntPtr)
        VB: MCJITMemoryManagerRef(System.IntPtr)
      nameWithType:
        CSharp: MCJITMemoryManagerRef.MCJITMemoryManagerRef(System.IntPtr)
        VB: MCJITMemoryManagerRef.MCJITMemoryManagerRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITMemoryManagerRef.MCJITMemoryManagerRef(System.IntPtr)
        VB: Swigged.LLVM.MCJITMemoryManagerRef.MCJITMemoryManagerRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITMemoryManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/MCJITMemoryManagerRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public MCJITMemoryManagerRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.MCJITMemoryManagerRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MCJITMemoryManagerRef.Value
      commentId: F:Swigged.LLVM.MCJITMemoryManagerRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: MCJITMemoryManagerRef.Value
        VB: MCJITMemoryManagerRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITMemoryManagerRef.Value
        VB: Swigged.LLVM.MCJITMemoryManagerRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITMemoryManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/MCJITMemoryManagerRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MCJITMemoryManagerRef.Equals(Swigged.LLVM.MCJITMemoryManagerRef)
      commentId: M:Swigged.LLVM.MCJITMemoryManagerRef.Equals(Swigged.LLVM.MCJITMemoryManagerRef)
      language: CSharp
      name:
        CSharp: Equals(MCJITMemoryManagerRef)
        VB: Equals(MCJITMemoryManagerRef)
      nameWithType:
        CSharp: MCJITMemoryManagerRef.Equals(MCJITMemoryManagerRef)
        VB: MCJITMemoryManagerRef.Equals(MCJITMemoryManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITMemoryManagerRef.Equals(Swigged.LLVM.MCJITMemoryManagerRef)
        VB: Swigged.LLVM.MCJITMemoryManagerRef.Equals(Swigged.LLVM.MCJITMemoryManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITMemoryManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/MCJITMemoryManagerRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(MCJITMemoryManagerRef other)
          VB: Public Function Equals(other As MCJITMemoryManagerRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.MCJITMemoryManagerRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MCJITMemoryManagerRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MCJITMemoryManagerRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.MCJITMemoryManagerRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: MCJITMemoryManagerRef.Equals(Object)
        VB: MCJITMemoryManagerRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITMemoryManagerRef.Equals(System.Object)
        VB: Swigged.LLVM.MCJITMemoryManagerRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITMemoryManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/MCJITMemoryManagerRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MCJITMemoryManagerRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode
      commentId: M:Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: MCJITMemoryManagerRef.GetHashCode()
        VB: MCJITMemoryManagerRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode()
        VB: Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITMemoryManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/MCJITMemoryManagerRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.MCJITMemoryManagerRef.op_Equality(Swigged.LLVM.MCJITMemoryManagerRef,Swigged.LLVM.MCJITMemoryManagerRef)
      commentId: M:Swigged.LLVM.MCJITMemoryManagerRef.op_Equality(Swigged.LLVM.MCJITMemoryManagerRef,Swigged.LLVM.MCJITMemoryManagerRef)
      language: CSharp
      name:
        CSharp: Equality(MCJITMemoryManagerRef, MCJITMemoryManagerRef)
        VB: Equality(MCJITMemoryManagerRef, MCJITMemoryManagerRef)
      nameWithType:
        CSharp: MCJITMemoryManagerRef.Equality(MCJITMemoryManagerRef, MCJITMemoryManagerRef)
        VB: MCJITMemoryManagerRef.Equality(MCJITMemoryManagerRef, MCJITMemoryManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITMemoryManagerRef.Equality(Swigged.LLVM.MCJITMemoryManagerRef, Swigged.LLVM.MCJITMemoryManagerRef)
        VB: Swigged.LLVM.MCJITMemoryManagerRef.Equality(Swigged.LLVM.MCJITMemoryManagerRef, Swigged.LLVM.MCJITMemoryManagerRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITMemoryManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/MCJITMemoryManagerRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(MCJITMemoryManagerRef left, MCJITMemoryManagerRef right)
          VB: Public Shared Operator =(left As MCJITMemoryManagerRef, right As MCJITMemoryManagerRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.MCJITMemoryManagerRef
        - id: right
          type: Swigged.LLVM.MCJITMemoryManagerRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MCJITMemoryManagerRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.MCJITMemoryManagerRef.op_Inequality(Swigged.LLVM.MCJITMemoryManagerRef,Swigged.LLVM.MCJITMemoryManagerRef)
      commentId: M:Swigged.LLVM.MCJITMemoryManagerRef.op_Inequality(Swigged.LLVM.MCJITMemoryManagerRef,Swigged.LLVM.MCJITMemoryManagerRef)
      language: CSharp
      name:
        CSharp: Inequality(MCJITMemoryManagerRef, MCJITMemoryManagerRef)
        VB: Inequality(MCJITMemoryManagerRef, MCJITMemoryManagerRef)
      nameWithType:
        CSharp: MCJITMemoryManagerRef.Inequality(MCJITMemoryManagerRef, MCJITMemoryManagerRef)
        VB: MCJITMemoryManagerRef.Inequality(MCJITMemoryManagerRef, MCJITMemoryManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.MCJITMemoryManagerRef.Inequality(Swigged.LLVM.MCJITMemoryManagerRef, Swigged.LLVM.MCJITMemoryManagerRef)
        VB: Swigged.LLVM.MCJITMemoryManagerRef.Inequality(Swigged.LLVM.MCJITMemoryManagerRef, Swigged.LLVM.MCJITMemoryManagerRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MCJITMemoryManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/MCJITMemoryManagerRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(MCJITMemoryManagerRef left, MCJITMemoryManagerRef right)
          VB: Public Shared Operator <>(left As MCJITMemoryManagerRef, right As MCJITMemoryManagerRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.MCJITMemoryManagerRef
        - id: right
          type: Swigged.LLVM.MCJITMemoryManagerRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MCJITMemoryManagerRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.MemoryBufferRef
    commentId: T:Swigged.LLVM.MemoryBufferRef
    language: CSharp
    name:
      CSharp: MemoryBufferRef
      VB: MemoryBufferRef
    nameWithType:
      CSharp: MemoryBufferRef
      VB: MemoryBufferRef
    qualifiedName:
      CSharp: Swigged.LLVM.MemoryBufferRef
      VB: Swigged.LLVM.MemoryBufferRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/MemoryBufferRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: MemoryBufferRef
      path: src/swigged.llvm/MemoryBufferRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct MemoryBufferRef : System.IEquatable<MemoryBufferRef>'
        VB: >-
          Public Structure MemoryBufferRef

              Implements System.IEquatable(Of MemoryBufferRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.MemoryBufferRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.MemoryBufferRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: MemoryBufferRef(System.IntPtr)
        VB: MemoryBufferRef(System.IntPtr)
      nameWithType:
        CSharp: MemoryBufferRef.MemoryBufferRef(System.IntPtr)
        VB: MemoryBufferRef.MemoryBufferRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.MemoryBufferRef.MemoryBufferRef(System.IntPtr)
        VB: Swigged.LLVM.MemoryBufferRef.MemoryBufferRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MemoryBufferRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/MemoryBufferRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public MemoryBufferRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.MemoryBufferRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MemoryBufferRef.Value
      commentId: F:Swigged.LLVM.MemoryBufferRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: MemoryBufferRef.Value
        VB: MemoryBufferRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.MemoryBufferRef.Value
        VB: Swigged.LLVM.MemoryBufferRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MemoryBufferRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/MemoryBufferRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MemoryBufferRef.Equals(Swigged.LLVM.MemoryBufferRef)
      commentId: M:Swigged.LLVM.MemoryBufferRef.Equals(Swigged.LLVM.MemoryBufferRef)
      language: CSharp
      name:
        CSharp: Equals(MemoryBufferRef)
        VB: Equals(MemoryBufferRef)
      nameWithType:
        CSharp: MemoryBufferRef.Equals(MemoryBufferRef)
        VB: MemoryBufferRef.Equals(MemoryBufferRef)
      qualifiedName:
        CSharp: Swigged.LLVM.MemoryBufferRef.Equals(Swigged.LLVM.MemoryBufferRef)
        VB: Swigged.LLVM.MemoryBufferRef.Equals(Swigged.LLVM.MemoryBufferRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MemoryBufferRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/MemoryBufferRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(MemoryBufferRef other)
          VB: Public Function Equals(other As MemoryBufferRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.MemoryBufferRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MemoryBufferRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.MemoryBufferRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.MemoryBufferRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: MemoryBufferRef.Equals(Object)
        VB: MemoryBufferRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.MemoryBufferRef.Equals(System.Object)
        VB: Swigged.LLVM.MemoryBufferRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MemoryBufferRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/MemoryBufferRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MemoryBufferRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.MemoryBufferRef.GetHashCode
      commentId: M:Swigged.LLVM.MemoryBufferRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: MemoryBufferRef.GetHashCode()
        VB: MemoryBufferRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.MemoryBufferRef.GetHashCode()
        VB: Swigged.LLVM.MemoryBufferRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MemoryBufferRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/MemoryBufferRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.MemoryBufferRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.MemoryBufferRef.op_Equality(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.MemoryBufferRef)
      commentId: M:Swigged.LLVM.MemoryBufferRef.op_Equality(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.MemoryBufferRef)
      language: CSharp
      name:
        CSharp: Equality(MemoryBufferRef, MemoryBufferRef)
        VB: Equality(MemoryBufferRef, MemoryBufferRef)
      nameWithType:
        CSharp: MemoryBufferRef.Equality(MemoryBufferRef, MemoryBufferRef)
        VB: MemoryBufferRef.Equality(MemoryBufferRef, MemoryBufferRef)
      qualifiedName:
        CSharp: Swigged.LLVM.MemoryBufferRef.Equality(Swigged.LLVM.MemoryBufferRef, Swigged.LLVM.MemoryBufferRef)
        VB: Swigged.LLVM.MemoryBufferRef.Equality(Swigged.LLVM.MemoryBufferRef, Swigged.LLVM.MemoryBufferRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MemoryBufferRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/MemoryBufferRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(MemoryBufferRef left, MemoryBufferRef right)
          VB: Public Shared Operator =(left As MemoryBufferRef, right As MemoryBufferRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.MemoryBufferRef
        - id: right
          type: Swigged.LLVM.MemoryBufferRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MemoryBufferRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.MemoryBufferRef.op_Inequality(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.MemoryBufferRef)
      commentId: M:Swigged.LLVM.MemoryBufferRef.op_Inequality(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.MemoryBufferRef)
      language: CSharp
      name:
        CSharp: Inequality(MemoryBufferRef, MemoryBufferRef)
        VB: Inequality(MemoryBufferRef, MemoryBufferRef)
      nameWithType:
        CSharp: MemoryBufferRef.Inequality(MemoryBufferRef, MemoryBufferRef)
        VB: MemoryBufferRef.Inequality(MemoryBufferRef, MemoryBufferRef)
      qualifiedName:
        CSharp: Swigged.LLVM.MemoryBufferRef.Inequality(Swigged.LLVM.MemoryBufferRef, Swigged.LLVM.MemoryBufferRef)
        VB: Swigged.LLVM.MemoryBufferRef.Inequality(Swigged.LLVM.MemoryBufferRef, Swigged.LLVM.MemoryBufferRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/MemoryBufferRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/MemoryBufferRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(MemoryBufferRef left, MemoryBufferRef right)
          VB: Public Shared Operator <>(left As MemoryBufferRef, right As MemoryBufferRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.MemoryBufferRef
        - id: right
          type: Swigged.LLVM.MemoryBufferRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.MemoryBufferRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.ModuleProviderRef
    commentId: T:Swigged.LLVM.ModuleProviderRef
    language: CSharp
    name:
      CSharp: ModuleProviderRef
      VB: ModuleProviderRef
    nameWithType:
      CSharp: ModuleProviderRef
      VB: ModuleProviderRef
    qualifiedName:
      CSharp: Swigged.LLVM.ModuleProviderRef
      VB: Swigged.LLVM.ModuleProviderRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/ModuleProviderRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ModuleProviderRef
      path: src/swigged.llvm/ModuleProviderRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct ModuleProviderRef : System.IEquatable<ModuleProviderRef>'
        VB: >-
          Public Structure ModuleProviderRef

              Implements System.IEquatable(Of ModuleProviderRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.ModuleProviderRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.ModuleProviderRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: ModuleProviderRef(System.IntPtr)
        VB: ModuleProviderRef(System.IntPtr)
      nameWithType:
        CSharp: ModuleProviderRef.ModuleProviderRef(System.IntPtr)
        VB: ModuleProviderRef.ModuleProviderRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleProviderRef.ModuleProviderRef(System.IntPtr)
        VB: Swigged.LLVM.ModuleProviderRef.ModuleProviderRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleProviderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/ModuleProviderRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public ModuleProviderRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.ModuleProviderRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ModuleProviderRef.Value
      commentId: F:Swigged.LLVM.ModuleProviderRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ModuleProviderRef.Value
        VB: ModuleProviderRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleProviderRef.Value
        VB: Swigged.LLVM.ModuleProviderRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleProviderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/ModuleProviderRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ModuleProviderRef.Equals(Swigged.LLVM.ModuleProviderRef)
      commentId: M:Swigged.LLVM.ModuleProviderRef.Equals(Swigged.LLVM.ModuleProviderRef)
      language: CSharp
      name:
        CSharp: Equals(ModuleProviderRef)
        VB: Equals(ModuleProviderRef)
      nameWithType:
        CSharp: ModuleProviderRef.Equals(ModuleProviderRef)
        VB: ModuleProviderRef.Equals(ModuleProviderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleProviderRef.Equals(Swigged.LLVM.ModuleProviderRef)
        VB: Swigged.LLVM.ModuleProviderRef.Equals(Swigged.LLVM.ModuleProviderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleProviderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ModuleProviderRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(ModuleProviderRef other)
          VB: Public Function Equals(other As ModuleProviderRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.ModuleProviderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ModuleProviderRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ModuleProviderRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.ModuleProviderRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ModuleProviderRef.Equals(Object)
        VB: ModuleProviderRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleProviderRef.Equals(System.Object)
        VB: Swigged.LLVM.ModuleProviderRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleProviderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ModuleProviderRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ModuleProviderRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ModuleProviderRef.GetHashCode
      commentId: M:Swigged.LLVM.ModuleProviderRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ModuleProviderRef.GetHashCode()
        VB: ModuleProviderRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleProviderRef.GetHashCode()
        VB: Swigged.LLVM.ModuleProviderRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleProviderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/ModuleProviderRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.ModuleProviderRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ModuleProviderRef.op_Equality(Swigged.LLVM.ModuleProviderRef,Swigged.LLVM.ModuleProviderRef)
      commentId: M:Swigged.LLVM.ModuleProviderRef.op_Equality(Swigged.LLVM.ModuleProviderRef,Swigged.LLVM.ModuleProviderRef)
      language: CSharp
      name:
        CSharp: Equality(ModuleProviderRef, ModuleProviderRef)
        VB: Equality(ModuleProviderRef, ModuleProviderRef)
      nameWithType:
        CSharp: ModuleProviderRef.Equality(ModuleProviderRef, ModuleProviderRef)
        VB: ModuleProviderRef.Equality(ModuleProviderRef, ModuleProviderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleProviderRef.Equality(Swigged.LLVM.ModuleProviderRef, Swigged.LLVM.ModuleProviderRef)
        VB: Swigged.LLVM.ModuleProviderRef.Equality(Swigged.LLVM.ModuleProviderRef, Swigged.LLVM.ModuleProviderRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleProviderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/ModuleProviderRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(ModuleProviderRef left, ModuleProviderRef right)
          VB: Public Shared Operator =(left As ModuleProviderRef, right As ModuleProviderRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ModuleProviderRef
        - id: right
          type: Swigged.LLVM.ModuleProviderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ModuleProviderRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.ModuleProviderRef.op_Inequality(Swigged.LLVM.ModuleProviderRef,Swigged.LLVM.ModuleProviderRef)
      commentId: M:Swigged.LLVM.ModuleProviderRef.op_Inequality(Swigged.LLVM.ModuleProviderRef,Swigged.LLVM.ModuleProviderRef)
      language: CSharp
      name:
        CSharp: Inequality(ModuleProviderRef, ModuleProviderRef)
        VB: Inequality(ModuleProviderRef, ModuleProviderRef)
      nameWithType:
        CSharp: ModuleProviderRef.Inequality(ModuleProviderRef, ModuleProviderRef)
        VB: ModuleProviderRef.Inequality(ModuleProviderRef, ModuleProviderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleProviderRef.Inequality(Swigged.LLVM.ModuleProviderRef, Swigged.LLVM.ModuleProviderRef)
        VB: Swigged.LLVM.ModuleProviderRef.Inequality(Swigged.LLVM.ModuleProviderRef, Swigged.LLVM.ModuleProviderRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleProviderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/ModuleProviderRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(ModuleProviderRef left, ModuleProviderRef right)
          VB: Public Shared Operator <>(left As ModuleProviderRef, right As ModuleProviderRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ModuleProviderRef
        - id: right
          type: Swigged.LLVM.ModuleProviderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ModuleProviderRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.ModuleRef
    commentId: T:Swigged.LLVM.ModuleRef
    language: CSharp
    name:
      CSharp: ModuleRef
      VB: ModuleRef
    nameWithType:
      CSharp: ModuleRef
      VB: ModuleRef
    qualifiedName:
      CSharp: Swigged.LLVM.ModuleRef
      VB: Swigged.LLVM.ModuleRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/ModuleRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ModuleRef
      path: src/swigged.llvm/ModuleRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct ModuleRef : System.IEquatable<ModuleRef>'
        VB: >-
          Public Structure ModuleRef

              Implements System.IEquatable(Of ModuleRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.ModuleRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.ModuleRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: ModuleRef(System.IntPtr)
        VB: ModuleRef(System.IntPtr)
      nameWithType:
        CSharp: ModuleRef.ModuleRef(System.IntPtr)
        VB: ModuleRef.ModuleRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleRef.ModuleRef(System.IntPtr)
        VB: Swigged.LLVM.ModuleRef.ModuleRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/ModuleRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public ModuleRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.ModuleRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ModuleRef.Value
      commentId: F:Swigged.LLVM.ModuleRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ModuleRef.Value
        VB: ModuleRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleRef.Value
        VB: Swigged.LLVM.ModuleRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/ModuleRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ModuleRef.Equals(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.ModuleRef.Equals(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: Equals(ModuleRef)
        VB: Equals(ModuleRef)
      nameWithType:
        CSharp: ModuleRef.Equals(ModuleRef)
        VB: ModuleRef.Equals(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleRef.Equals(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.ModuleRef.Equals(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ModuleRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(ModuleRef other)
          VB: Public Function Equals(other As ModuleRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ModuleRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ModuleRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.ModuleRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ModuleRef.Equals(Object)
        VB: ModuleRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleRef.Equals(System.Object)
        VB: Swigged.LLVM.ModuleRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ModuleRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ModuleRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ModuleRef.GetHashCode
      commentId: M:Swigged.LLVM.ModuleRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ModuleRef.GetHashCode()
        VB: ModuleRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleRef.GetHashCode()
        VB: Swigged.LLVM.ModuleRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/ModuleRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.ModuleRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ModuleRef.op_Equality(Swigged.LLVM.ModuleRef,Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.ModuleRef.op_Equality(Swigged.LLVM.ModuleRef,Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: Equality(ModuleRef, ModuleRef)
        VB: Equality(ModuleRef, ModuleRef)
      nameWithType:
        CSharp: ModuleRef.Equality(ModuleRef, ModuleRef)
        VB: ModuleRef.Equality(ModuleRef, ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleRef.Equality(Swigged.LLVM.ModuleRef, Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.ModuleRef.Equality(Swigged.LLVM.ModuleRef, Swigged.LLVM.ModuleRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/ModuleRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(ModuleRef left, ModuleRef right)
          VB: Public Shared Operator =(left As ModuleRef, right As ModuleRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ModuleRef
        - id: right
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ModuleRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.ModuleRef.op_Inequality(Swigged.LLVM.ModuleRef,Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.ModuleRef.op_Inequality(Swigged.LLVM.ModuleRef,Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: Inequality(ModuleRef, ModuleRef)
        VB: Inequality(ModuleRef, ModuleRef)
      nameWithType:
        CSharp: ModuleRef.Inequality(ModuleRef, ModuleRef)
        VB: ModuleRef.Inequality(ModuleRef, ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ModuleRef.Inequality(Swigged.LLVM.ModuleRef, Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.ModuleRef.Inequality(Swigged.LLVM.ModuleRef, Swigged.LLVM.ModuleRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ModuleRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/ModuleRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(ModuleRef left, ModuleRef right)
          VB: Public Shared Operator <>(left As ModuleRef, right As ModuleRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ModuleRef
        - id: right
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ModuleRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.ObjectFileRef
    commentId: T:Swigged.LLVM.ObjectFileRef
    language: CSharp
    name:
      CSharp: ObjectFileRef
      VB: ObjectFileRef
    nameWithType:
      CSharp: ObjectFileRef
      VB: ObjectFileRef
    qualifiedName:
      CSharp: Swigged.LLVM.ObjectFileRef
      VB: Swigged.LLVM.ObjectFileRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/ObjectFileRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ObjectFileRef
      path: src/swigged.llvm/ObjectFileRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct ObjectFileRef : System.IEquatable<ObjectFileRef>'
        VB: >-
          Public Structure ObjectFileRef

              Implements System.IEquatable(Of ObjectFileRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.ObjectFileRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.ObjectFileRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: ObjectFileRef(System.IntPtr)
        VB: ObjectFileRef(System.IntPtr)
      nameWithType:
        CSharp: ObjectFileRef.ObjectFileRef(System.IntPtr)
        VB: ObjectFileRef.ObjectFileRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.ObjectFileRef.ObjectFileRef(System.IntPtr)
        VB: Swigged.LLVM.ObjectFileRef.ObjectFileRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ObjectFileRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/ObjectFileRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public ObjectFileRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.ObjectFileRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ObjectFileRef.Value
      commentId: F:Swigged.LLVM.ObjectFileRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ObjectFileRef.Value
        VB: ObjectFileRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.ObjectFileRef.Value
        VB: Swigged.LLVM.ObjectFileRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ObjectFileRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/ObjectFileRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ObjectFileRef.Equals(Swigged.LLVM.ObjectFileRef)
      commentId: M:Swigged.LLVM.ObjectFileRef.Equals(Swigged.LLVM.ObjectFileRef)
      language: CSharp
      name:
        CSharp: Equals(ObjectFileRef)
        VB: Equals(ObjectFileRef)
      nameWithType:
        CSharp: ObjectFileRef.Equals(ObjectFileRef)
        VB: ObjectFileRef.Equals(ObjectFileRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ObjectFileRef.Equals(Swigged.LLVM.ObjectFileRef)
        VB: Swigged.LLVM.ObjectFileRef.Equals(Swigged.LLVM.ObjectFileRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ObjectFileRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ObjectFileRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(ObjectFileRef other)
          VB: Public Function Equals(other As ObjectFileRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.ObjectFileRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ObjectFileRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ObjectFileRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.ObjectFileRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ObjectFileRef.Equals(Object)
        VB: ObjectFileRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.ObjectFileRef.Equals(System.Object)
        VB: Swigged.LLVM.ObjectFileRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ObjectFileRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ObjectFileRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ObjectFileRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ObjectFileRef.GetHashCode
      commentId: M:Swigged.LLVM.ObjectFileRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ObjectFileRef.GetHashCode()
        VB: ObjectFileRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.ObjectFileRef.GetHashCode()
        VB: Swigged.LLVM.ObjectFileRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ObjectFileRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/ObjectFileRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.ObjectFileRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ObjectFileRef.op_Equality(Swigged.LLVM.ObjectFileRef,Swigged.LLVM.ObjectFileRef)
      commentId: M:Swigged.LLVM.ObjectFileRef.op_Equality(Swigged.LLVM.ObjectFileRef,Swigged.LLVM.ObjectFileRef)
      language: CSharp
      name:
        CSharp: Equality(ObjectFileRef, ObjectFileRef)
        VB: Equality(ObjectFileRef, ObjectFileRef)
      nameWithType:
        CSharp: ObjectFileRef.Equality(ObjectFileRef, ObjectFileRef)
        VB: ObjectFileRef.Equality(ObjectFileRef, ObjectFileRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ObjectFileRef.Equality(Swigged.LLVM.ObjectFileRef, Swigged.LLVM.ObjectFileRef)
        VB: Swigged.LLVM.ObjectFileRef.Equality(Swigged.LLVM.ObjectFileRef, Swigged.LLVM.ObjectFileRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ObjectFileRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/ObjectFileRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(ObjectFileRef left, ObjectFileRef right)
          VB: Public Shared Operator =(left As ObjectFileRef, right As ObjectFileRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ObjectFileRef
        - id: right
          type: Swigged.LLVM.ObjectFileRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ObjectFileRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.ObjectFileRef.op_Inequality(Swigged.LLVM.ObjectFileRef,Swigged.LLVM.ObjectFileRef)
      commentId: M:Swigged.LLVM.ObjectFileRef.op_Inequality(Swigged.LLVM.ObjectFileRef,Swigged.LLVM.ObjectFileRef)
      language: CSharp
      name:
        CSharp: Inequality(ObjectFileRef, ObjectFileRef)
        VB: Inequality(ObjectFileRef, ObjectFileRef)
      nameWithType:
        CSharp: ObjectFileRef.Inequality(ObjectFileRef, ObjectFileRef)
        VB: ObjectFileRef.Inequality(ObjectFileRef, ObjectFileRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ObjectFileRef.Inequality(Swigged.LLVM.ObjectFileRef, Swigged.LLVM.ObjectFileRef)
        VB: Swigged.LLVM.ObjectFileRef.Inequality(Swigged.LLVM.ObjectFileRef, Swigged.LLVM.ObjectFileRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ObjectFileRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/ObjectFileRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(ObjectFileRef left, ObjectFileRef right)
          VB: Public Shared Operator <>(left As ObjectFileRef, right As ObjectFileRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ObjectFileRef
        - id: right
          type: Swigged.LLVM.ObjectFileRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ObjectFileRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.Opcode
    commentId: T:Swigged.LLVM.Opcode
    language: CSharp
    name:
      CSharp: Opcode
      VB: Opcode
    nameWithType:
      CSharp: Opcode
      VB: Opcode
    qualifiedName:
      CSharp: Swigged.LLVM.Opcode
      VB: Swigged.LLVM.Opcode
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/Opcode.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: Opcode
      path: src/swigged.llvm/Opcode.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum Opcode : int'
        VB: Public Enum Opcode As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.Opcode.Ret
      commentId: F:Swigged.LLVM.Opcode.Ret
      language: CSharp
      name:
        CSharp: Ret
        VB: Ret
      nameWithType:
        CSharp: Opcode.Ret
        VB: Opcode.Ret
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Ret
        VB: Swigged.LLVM.Opcode.Ret
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Ret
        path: src/swigged.llvm/Opcode.cs
        startLine: 13
      syntax:
        content:
          CSharp: Ret = null
          VB: Ret = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Br
      commentId: F:Swigged.LLVM.Opcode.Br
      language: CSharp
      name:
        CSharp: Br
        VB: Br
      nameWithType:
        CSharp: Opcode.Br
        VB: Opcode.Br
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Br
        VB: Swigged.LLVM.Opcode.Br
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Br
        path: src/swigged.llvm/Opcode.cs
        startLine: 14
      syntax:
        content:
          CSharp: Br = null
          VB: Br = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Switch
      commentId: F:Swigged.LLVM.Opcode.Switch
      language: CSharp
      name:
        CSharp: Switch
        VB: Switch
      nameWithType:
        CSharp: Opcode.Switch
        VB: Opcode.Switch
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Switch
        VB: Swigged.LLVM.Opcode.Switch
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Switch
        path: src/swigged.llvm/Opcode.cs
        startLine: 15
      syntax:
        content:
          CSharp: Switch = null
          VB: Switch = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.IndirectBr
      commentId: F:Swigged.LLVM.Opcode.IndirectBr
      language: CSharp
      name:
        CSharp: IndirectBr
        VB: IndirectBr
      nameWithType:
        CSharp: Opcode.IndirectBr
        VB: Opcode.IndirectBr
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.IndirectBr
        VB: Swigged.LLVM.Opcode.IndirectBr
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IndirectBr
        path: src/swigged.llvm/Opcode.cs
        startLine: 16
      syntax:
        content:
          CSharp: IndirectBr = null
          VB: IndirectBr = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Invoke
      commentId: F:Swigged.LLVM.Opcode.Invoke
      language: CSharp
      name:
        CSharp: Invoke
        VB: Invoke
      nameWithType:
        CSharp: Opcode.Invoke
        VB: Opcode.Invoke
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Invoke
        VB: Swigged.LLVM.Opcode.Invoke
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Invoke
        path: src/swigged.llvm/Opcode.cs
        startLine: 17
      syntax:
        content:
          CSharp: Invoke = null
          VB: Invoke = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Unreachable
      commentId: F:Swigged.LLVM.Opcode.Unreachable
      language: CSharp
      name:
        CSharp: Unreachable
        VB: Unreachable
      nameWithType:
        CSharp: Opcode.Unreachable
        VB: Opcode.Unreachable
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Unreachable
        VB: Swigged.LLVM.Opcode.Unreachable
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Unreachable
        path: src/swigged.llvm/Opcode.cs
        startLine: 18
      syntax:
        content:
          CSharp: Unreachable = null
          VB: Unreachable = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Add
      commentId: F:Swigged.LLVM.Opcode.Add
      language: CSharp
      name:
        CSharp: Add
        VB: Add
      nameWithType:
        CSharp: Opcode.Add
        VB: Opcode.Add
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Add
        VB: Swigged.LLVM.Opcode.Add
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Add
        path: src/swigged.llvm/Opcode.cs
        startLine: 19
      syntax:
        content:
          CSharp: Add = null
          VB: Add = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FAdd
      commentId: F:Swigged.LLVM.Opcode.FAdd
      language: CSharp
      name:
        CSharp: FAdd
        VB: FAdd
      nameWithType:
        CSharp: Opcode.FAdd
        VB: Opcode.FAdd
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FAdd
        VB: Swigged.LLVM.Opcode.FAdd
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FAdd
        path: src/swigged.llvm/Opcode.cs
        startLine: 20
      syntax:
        content:
          CSharp: FAdd = null
          VB: FAdd = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Sub
      commentId: F:Swigged.LLVM.Opcode.Sub
      language: CSharp
      name:
        CSharp: Sub
        VB: Sub
      nameWithType:
        CSharp: Opcode.Sub
        VB: Opcode.Sub
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Sub
        VB: Swigged.LLVM.Opcode.Sub
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Sub
        path: src/swigged.llvm/Opcode.cs
        startLine: 21
      syntax:
        content:
          CSharp: Sub = null
          VB: Sub = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FSub
      commentId: F:Swigged.LLVM.Opcode.FSub
      language: CSharp
      name:
        CSharp: FSub
        VB: FSub
      nameWithType:
        CSharp: Opcode.FSub
        VB: Opcode.FSub
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FSub
        VB: Swigged.LLVM.Opcode.FSub
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FSub
        path: src/swigged.llvm/Opcode.cs
        startLine: 22
      syntax:
        content:
          CSharp: FSub = null
          VB: FSub = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Mul
      commentId: F:Swigged.LLVM.Opcode.Mul
      language: CSharp
      name:
        CSharp: Mul
        VB: Mul
      nameWithType:
        CSharp: Opcode.Mul
        VB: Opcode.Mul
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Mul
        VB: Swigged.LLVM.Opcode.Mul
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Mul
        path: src/swigged.llvm/Opcode.cs
        startLine: 23
      syntax:
        content:
          CSharp: Mul = null
          VB: Mul = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FMul
      commentId: F:Swigged.LLVM.Opcode.FMul
      language: CSharp
      name:
        CSharp: FMul
        VB: FMul
      nameWithType:
        CSharp: Opcode.FMul
        VB: Opcode.FMul
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FMul
        VB: Swigged.LLVM.Opcode.FMul
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FMul
        path: src/swigged.llvm/Opcode.cs
        startLine: 24
      syntax:
        content:
          CSharp: FMul = null
          VB: FMul = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.UDiv
      commentId: F:Swigged.LLVM.Opcode.UDiv
      language: CSharp
      name:
        CSharp: UDiv
        VB: UDiv
      nameWithType:
        CSharp: Opcode.UDiv
        VB: Opcode.UDiv
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.UDiv
        VB: Swigged.LLVM.Opcode.UDiv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: UDiv
        path: src/swigged.llvm/Opcode.cs
        startLine: 25
      syntax:
        content:
          CSharp: UDiv = null
          VB: UDiv = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.SDiv
      commentId: F:Swigged.LLVM.Opcode.SDiv
      language: CSharp
      name:
        CSharp: SDiv
        VB: SDiv
      nameWithType:
        CSharp: Opcode.SDiv
        VB: Opcode.SDiv
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.SDiv
        VB: Swigged.LLVM.Opcode.SDiv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SDiv
        path: src/swigged.llvm/Opcode.cs
        startLine: 26
      syntax:
        content:
          CSharp: SDiv = null
          VB: SDiv = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FDiv
      commentId: F:Swigged.LLVM.Opcode.FDiv
      language: CSharp
      name:
        CSharp: FDiv
        VB: FDiv
      nameWithType:
        CSharp: Opcode.FDiv
        VB: Opcode.FDiv
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FDiv
        VB: Swigged.LLVM.Opcode.FDiv
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FDiv
        path: src/swigged.llvm/Opcode.cs
        startLine: 27
      syntax:
        content:
          CSharp: FDiv = null
          VB: FDiv = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.URem
      commentId: F:Swigged.LLVM.Opcode.URem
      language: CSharp
      name:
        CSharp: URem
        VB: URem
      nameWithType:
        CSharp: Opcode.URem
        VB: Opcode.URem
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.URem
        VB: Swigged.LLVM.Opcode.URem
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: URem
        path: src/swigged.llvm/Opcode.cs
        startLine: 28
      syntax:
        content:
          CSharp: URem = null
          VB: URem = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.SRem
      commentId: F:Swigged.LLVM.Opcode.SRem
      language: CSharp
      name:
        CSharp: SRem
        VB: SRem
      nameWithType:
        CSharp: Opcode.SRem
        VB: Opcode.SRem
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.SRem
        VB: Swigged.LLVM.Opcode.SRem
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SRem
        path: src/swigged.llvm/Opcode.cs
        startLine: 29
      syntax:
        content:
          CSharp: SRem = null
          VB: SRem = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FRem
      commentId: F:Swigged.LLVM.Opcode.FRem
      language: CSharp
      name:
        CSharp: FRem
        VB: FRem
      nameWithType:
        CSharp: Opcode.FRem
        VB: Opcode.FRem
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FRem
        VB: Swigged.LLVM.Opcode.FRem
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FRem
        path: src/swigged.llvm/Opcode.cs
        startLine: 30
      syntax:
        content:
          CSharp: FRem = null
          VB: FRem = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Shl
      commentId: F:Swigged.LLVM.Opcode.Shl
      language: CSharp
      name:
        CSharp: Shl
        VB: Shl
      nameWithType:
        CSharp: Opcode.Shl
        VB: Opcode.Shl
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Shl
        VB: Swigged.LLVM.Opcode.Shl
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Shl
        path: src/swigged.llvm/Opcode.cs
        startLine: 31
      syntax:
        content:
          CSharp: Shl = null
          VB: Shl = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.LShr
      commentId: F:Swigged.LLVM.Opcode.LShr
      language: CSharp
      name:
        CSharp: LShr
        VB: LShr
      nameWithType:
        CSharp: Opcode.LShr
        VB: Opcode.LShr
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.LShr
        VB: Swigged.LLVM.Opcode.LShr
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LShr
        path: src/swigged.llvm/Opcode.cs
        startLine: 32
      syntax:
        content:
          CSharp: LShr = null
          VB: LShr = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.AShr
      commentId: F:Swigged.LLVM.Opcode.AShr
      language: CSharp
      name:
        CSharp: AShr
        VB: AShr
      nameWithType:
        CSharp: Opcode.AShr
        VB: Opcode.AShr
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.AShr
        VB: Swigged.LLVM.Opcode.AShr
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AShr
        path: src/swigged.llvm/Opcode.cs
        startLine: 33
      syntax:
        content:
          CSharp: AShr = null
          VB: AShr = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.And
      commentId: F:Swigged.LLVM.Opcode.And
      language: CSharp
      name:
        CSharp: And
        VB: And
      nameWithType:
        CSharp: Opcode.And
        VB: Opcode.And
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.And
        VB: Swigged.LLVM.Opcode.And
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: And
        path: src/swigged.llvm/Opcode.cs
        startLine: 34
      syntax:
        content:
          CSharp: And = null
          VB: And = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Or
      commentId: F:Swigged.LLVM.Opcode.Or
      language: CSharp
      name:
        CSharp: Or
        VB: Or
      nameWithType:
        CSharp: Opcode.Or
        VB: Opcode.Or
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Or
        VB: Swigged.LLVM.Opcode.Or
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Or
        path: src/swigged.llvm/Opcode.cs
        startLine: 35
      syntax:
        content:
          CSharp: Or = null
          VB: Or = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Xor
      commentId: F:Swigged.LLVM.Opcode.Xor
      language: CSharp
      name:
        CSharp: Xor
        VB: Xor
      nameWithType:
        CSharp: Opcode.Xor
        VB: Opcode.Xor
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Xor
        VB: Swigged.LLVM.Opcode.Xor
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Xor
        path: src/swigged.llvm/Opcode.cs
        startLine: 36
      syntax:
        content:
          CSharp: Xor = null
          VB: Xor = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Alloca
      commentId: F:Swigged.LLVM.Opcode.Alloca
      language: CSharp
      name:
        CSharp: Alloca
        VB: Alloca
      nameWithType:
        CSharp: Opcode.Alloca
        VB: Opcode.Alloca
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Alloca
        VB: Swigged.LLVM.Opcode.Alloca
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Alloca
        path: src/swigged.llvm/Opcode.cs
        startLine: 37
      syntax:
        content:
          CSharp: Alloca = null
          VB: Alloca = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Load
      commentId: F:Swigged.LLVM.Opcode.Load
      language: CSharp
      name:
        CSharp: Load
        VB: Load
      nameWithType:
        CSharp: Opcode.Load
        VB: Opcode.Load
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Load
        VB: Swigged.LLVM.Opcode.Load
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Load
        path: src/swigged.llvm/Opcode.cs
        startLine: 38
      syntax:
        content:
          CSharp: Load = null
          VB: Load = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Store
      commentId: F:Swigged.LLVM.Opcode.Store
      language: CSharp
      name:
        CSharp: Store
        VB: Store
      nameWithType:
        CSharp: Opcode.Store
        VB: Opcode.Store
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Store
        VB: Swigged.LLVM.Opcode.Store
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Store
        path: src/swigged.llvm/Opcode.cs
        startLine: 39
      syntax:
        content:
          CSharp: Store = null
          VB: Store = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.GetElementPtr
      commentId: F:Swigged.LLVM.Opcode.GetElementPtr
      language: CSharp
      name:
        CSharp: GetElementPtr
        VB: GetElementPtr
      nameWithType:
        CSharp: Opcode.GetElementPtr
        VB: Opcode.GetElementPtr
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.GetElementPtr
        VB: Swigged.LLVM.Opcode.GetElementPtr
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetElementPtr
        path: src/swigged.llvm/Opcode.cs
        startLine: 40
      syntax:
        content:
          CSharp: GetElementPtr = null
          VB: GetElementPtr = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Trunc
      commentId: F:Swigged.LLVM.Opcode.Trunc
      language: CSharp
      name:
        CSharp: Trunc
        VB: Trunc
      nameWithType:
        CSharp: Opcode.Trunc
        VB: Opcode.Trunc
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Trunc
        VB: Swigged.LLVM.Opcode.Trunc
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Trunc
        path: src/swigged.llvm/Opcode.cs
        startLine: 41
      syntax:
        content:
          CSharp: Trunc = null
          VB: Trunc = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.ZExt
      commentId: F:Swigged.LLVM.Opcode.ZExt
      language: CSharp
      name:
        CSharp: ZExt
        VB: ZExt
      nameWithType:
        CSharp: Opcode.ZExt
        VB: Opcode.ZExt
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.ZExt
        VB: Swigged.LLVM.Opcode.ZExt
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ZExt
        path: src/swigged.llvm/Opcode.cs
        startLine: 42
      syntax:
        content:
          CSharp: ZExt = null
          VB: ZExt = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.SExt
      commentId: F:Swigged.LLVM.Opcode.SExt
      language: CSharp
      name:
        CSharp: SExt
        VB: SExt
      nameWithType:
        CSharp: Opcode.SExt
        VB: Opcode.SExt
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.SExt
        VB: Swigged.LLVM.Opcode.SExt
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SExt
        path: src/swigged.llvm/Opcode.cs
        startLine: 43
      syntax:
        content:
          CSharp: SExt = null
          VB: SExt = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FPToUI
      commentId: F:Swigged.LLVM.Opcode.FPToUI
      language: CSharp
      name:
        CSharp: FPToUI
        VB: FPToUI
      nameWithType:
        CSharp: Opcode.FPToUI
        VB: Opcode.FPToUI
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FPToUI
        VB: Swigged.LLVM.Opcode.FPToUI
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FPToUI
        path: src/swigged.llvm/Opcode.cs
        startLine: 44
      syntax:
        content:
          CSharp: FPToUI = null
          VB: FPToUI = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FPToSI
      commentId: F:Swigged.LLVM.Opcode.FPToSI
      language: CSharp
      name:
        CSharp: FPToSI
        VB: FPToSI
      nameWithType:
        CSharp: Opcode.FPToSI
        VB: Opcode.FPToSI
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FPToSI
        VB: Swigged.LLVM.Opcode.FPToSI
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FPToSI
        path: src/swigged.llvm/Opcode.cs
        startLine: 45
      syntax:
        content:
          CSharp: FPToSI = null
          VB: FPToSI = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.UIToFP
      commentId: F:Swigged.LLVM.Opcode.UIToFP
      language: CSharp
      name:
        CSharp: UIToFP
        VB: UIToFP
      nameWithType:
        CSharp: Opcode.UIToFP
        VB: Opcode.UIToFP
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.UIToFP
        VB: Swigged.LLVM.Opcode.UIToFP
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: UIToFP
        path: src/swigged.llvm/Opcode.cs
        startLine: 46
      syntax:
        content:
          CSharp: UIToFP = null
          VB: UIToFP = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.SIToFP
      commentId: F:Swigged.LLVM.Opcode.SIToFP
      language: CSharp
      name:
        CSharp: SIToFP
        VB: SIToFP
      nameWithType:
        CSharp: Opcode.SIToFP
        VB: Opcode.SIToFP
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.SIToFP
        VB: Swigged.LLVM.Opcode.SIToFP
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SIToFP
        path: src/swigged.llvm/Opcode.cs
        startLine: 47
      syntax:
        content:
          CSharp: SIToFP = null
          VB: SIToFP = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FPTrunc
      commentId: F:Swigged.LLVM.Opcode.FPTrunc
      language: CSharp
      name:
        CSharp: FPTrunc
        VB: FPTrunc
      nameWithType:
        CSharp: Opcode.FPTrunc
        VB: Opcode.FPTrunc
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FPTrunc
        VB: Swigged.LLVM.Opcode.FPTrunc
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FPTrunc
        path: src/swigged.llvm/Opcode.cs
        startLine: 48
      syntax:
        content:
          CSharp: FPTrunc = null
          VB: FPTrunc = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FPExt
      commentId: F:Swigged.LLVM.Opcode.FPExt
      language: CSharp
      name:
        CSharp: FPExt
        VB: FPExt
      nameWithType:
        CSharp: Opcode.FPExt
        VB: Opcode.FPExt
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FPExt
        VB: Swigged.LLVM.Opcode.FPExt
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FPExt
        path: src/swigged.llvm/Opcode.cs
        startLine: 49
      syntax:
        content:
          CSharp: FPExt = null
          VB: FPExt = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.PtrToInt
      commentId: F:Swigged.LLVM.Opcode.PtrToInt
      language: CSharp
      name:
        CSharp: PtrToInt
        VB: PtrToInt
      nameWithType:
        CSharp: Opcode.PtrToInt
        VB: Opcode.PtrToInt
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.PtrToInt
        VB: Swigged.LLVM.Opcode.PtrToInt
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PtrToInt
        path: src/swigged.llvm/Opcode.cs
        startLine: 50
      syntax:
        content:
          CSharp: PtrToInt = null
          VB: PtrToInt = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.IntToPtr
      commentId: F:Swigged.LLVM.Opcode.IntToPtr
      language: CSharp
      name:
        CSharp: IntToPtr
        VB: IntToPtr
      nameWithType:
        CSharp: Opcode.IntToPtr
        VB: Opcode.IntToPtr
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.IntToPtr
        VB: Swigged.LLVM.Opcode.IntToPtr
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntToPtr
        path: src/swigged.llvm/Opcode.cs
        startLine: 51
      syntax:
        content:
          CSharp: IntToPtr = null
          VB: IntToPtr = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.BitCast
      commentId: F:Swigged.LLVM.Opcode.BitCast
      language: CSharp
      name:
        CSharp: BitCast
        VB: BitCast
      nameWithType:
        CSharp: Opcode.BitCast
        VB: Opcode.BitCast
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.BitCast
        VB: Swigged.LLVM.Opcode.BitCast
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BitCast
        path: src/swigged.llvm/Opcode.cs
        startLine: 52
      syntax:
        content:
          CSharp: BitCast = null
          VB: BitCast = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.AddrSpaceCast
      commentId: F:Swigged.LLVM.Opcode.AddrSpaceCast
      language: CSharp
      name:
        CSharp: AddrSpaceCast
        VB: AddrSpaceCast
      nameWithType:
        CSharp: Opcode.AddrSpaceCast
        VB: Opcode.AddrSpaceCast
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.AddrSpaceCast
        VB: Swigged.LLVM.Opcode.AddrSpaceCast
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddrSpaceCast
        path: src/swigged.llvm/Opcode.cs
        startLine: 53
      syntax:
        content:
          CSharp: AddrSpaceCast = null
          VB: AddrSpaceCast = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.ICmp
      commentId: F:Swigged.LLVM.Opcode.ICmp
      language: CSharp
      name:
        CSharp: ICmp
        VB: ICmp
      nameWithType:
        CSharp: Opcode.ICmp
        VB: Opcode.ICmp
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.ICmp
        VB: Swigged.LLVM.Opcode.ICmp
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ICmp
        path: src/swigged.llvm/Opcode.cs
        startLine: 54
      syntax:
        content:
          CSharp: ICmp = null
          VB: ICmp = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.FCmp
      commentId: F:Swigged.LLVM.Opcode.FCmp
      language: CSharp
      name:
        CSharp: FCmp
        VB: FCmp
      nameWithType:
        CSharp: Opcode.FCmp
        VB: Opcode.FCmp
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.FCmp
        VB: Swigged.LLVM.Opcode.FCmp
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FCmp
        path: src/swigged.llvm/Opcode.cs
        startLine: 55
      syntax:
        content:
          CSharp: FCmp = null
          VB: FCmp = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.PHI
      commentId: F:Swigged.LLVM.Opcode.PHI
      language: CSharp
      name:
        CSharp: PHI
        VB: PHI
      nameWithType:
        CSharp: Opcode.PHI
        VB: Opcode.PHI
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.PHI
        VB: Swigged.LLVM.Opcode.PHI
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PHI
        path: src/swigged.llvm/Opcode.cs
        startLine: 56
      syntax:
        content:
          CSharp: PHI = null
          VB: PHI = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Call
      commentId: F:Swigged.LLVM.Opcode.Call
      language: CSharp
      name:
        CSharp: Call
        VB: Call
      nameWithType:
        CSharp: Opcode.Call
        VB: Opcode.Call
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Call
        VB: Swigged.LLVM.Opcode.Call
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Call
        path: src/swigged.llvm/Opcode.cs
        startLine: 57
      syntax:
        content:
          CSharp: Call = null
          VB: Call = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Select
      commentId: F:Swigged.LLVM.Opcode.Select
      language: CSharp
      name:
        CSharp: Select
        VB: Select
      nameWithType:
        CSharp: Opcode.Select
        VB: Opcode.Select
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Select
        VB: Swigged.LLVM.Opcode.Select
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Select
        path: src/swigged.llvm/Opcode.cs
        startLine: 58
      syntax:
        content:
          CSharp: Select = null
          VB: Select = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.UserOp1
      commentId: F:Swigged.LLVM.Opcode.UserOp1
      language: CSharp
      name:
        CSharp: UserOp1
        VB: UserOp1
      nameWithType:
        CSharp: Opcode.UserOp1
        VB: Opcode.UserOp1
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.UserOp1
        VB: Swigged.LLVM.Opcode.UserOp1
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: UserOp1
        path: src/swigged.llvm/Opcode.cs
        startLine: 59
      syntax:
        content:
          CSharp: UserOp1 = null
          VB: UserOp1 = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.UserOp2
      commentId: F:Swigged.LLVM.Opcode.UserOp2
      language: CSharp
      name:
        CSharp: UserOp2
        VB: UserOp2
      nameWithType:
        CSharp: Opcode.UserOp2
        VB: Opcode.UserOp2
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.UserOp2
        VB: Swigged.LLVM.Opcode.UserOp2
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: UserOp2
        path: src/swigged.llvm/Opcode.cs
        startLine: 60
      syntax:
        content:
          CSharp: UserOp2 = null
          VB: UserOp2 = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.VAArg
      commentId: F:Swigged.LLVM.Opcode.VAArg
      language: CSharp
      name:
        CSharp: VAArg
        VB: VAArg
      nameWithType:
        CSharp: Opcode.VAArg
        VB: Opcode.VAArg
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.VAArg
        VB: Swigged.LLVM.Opcode.VAArg
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: VAArg
        path: src/swigged.llvm/Opcode.cs
        startLine: 61
      syntax:
        content:
          CSharp: VAArg = null
          VB: VAArg = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.ExtractElement
      commentId: F:Swigged.LLVM.Opcode.ExtractElement
      language: CSharp
      name:
        CSharp: ExtractElement
        VB: ExtractElement
      nameWithType:
        CSharp: Opcode.ExtractElement
        VB: Opcode.ExtractElement
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.ExtractElement
        VB: Swigged.LLVM.Opcode.ExtractElement
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ExtractElement
        path: src/swigged.llvm/Opcode.cs
        startLine: 62
      syntax:
        content:
          CSharp: ExtractElement = null
          VB: ExtractElement = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.InsertElement
      commentId: F:Swigged.LLVM.Opcode.InsertElement
      language: CSharp
      name:
        CSharp: InsertElement
        VB: InsertElement
      nameWithType:
        CSharp: Opcode.InsertElement
        VB: Opcode.InsertElement
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.InsertElement
        VB: Swigged.LLVM.Opcode.InsertElement
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InsertElement
        path: src/swigged.llvm/Opcode.cs
        startLine: 63
      syntax:
        content:
          CSharp: InsertElement = null
          VB: InsertElement = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.ShuffleVector
      commentId: F:Swigged.LLVM.Opcode.ShuffleVector
      language: CSharp
      name:
        CSharp: ShuffleVector
        VB: ShuffleVector
      nameWithType:
        CSharp: Opcode.ShuffleVector
        VB: Opcode.ShuffleVector
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.ShuffleVector
        VB: Swigged.LLVM.Opcode.ShuffleVector
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ShuffleVector
        path: src/swigged.llvm/Opcode.cs
        startLine: 64
      syntax:
        content:
          CSharp: ShuffleVector = null
          VB: ShuffleVector = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.ExtractValue
      commentId: F:Swigged.LLVM.Opcode.ExtractValue
      language: CSharp
      name:
        CSharp: ExtractValue
        VB: ExtractValue
      nameWithType:
        CSharp: Opcode.ExtractValue
        VB: Opcode.ExtractValue
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.ExtractValue
        VB: Swigged.LLVM.Opcode.ExtractValue
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ExtractValue
        path: src/swigged.llvm/Opcode.cs
        startLine: 65
      syntax:
        content:
          CSharp: ExtractValue = null
          VB: ExtractValue = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.InsertValue
      commentId: F:Swigged.LLVM.Opcode.InsertValue
      language: CSharp
      name:
        CSharp: InsertValue
        VB: InsertValue
      nameWithType:
        CSharp: Opcode.InsertValue
        VB: Opcode.InsertValue
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.InsertValue
        VB: Swigged.LLVM.Opcode.InsertValue
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InsertValue
        path: src/swigged.llvm/Opcode.cs
        startLine: 66
      syntax:
        content:
          CSharp: InsertValue = null
          VB: InsertValue = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Fence
      commentId: F:Swigged.LLVM.Opcode.Fence
      language: CSharp
      name:
        CSharp: Fence
        VB: Fence
      nameWithType:
        CSharp: Opcode.Fence
        VB: Opcode.Fence
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Fence
        VB: Swigged.LLVM.Opcode.Fence
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Fence
        path: src/swigged.llvm/Opcode.cs
        startLine: 67
      syntax:
        content:
          CSharp: Fence = null
          VB: Fence = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.AtomicCmpXchg
      commentId: F:Swigged.LLVM.Opcode.AtomicCmpXchg
      language: CSharp
      name:
        CSharp: AtomicCmpXchg
        VB: AtomicCmpXchg
      nameWithType:
        CSharp: Opcode.AtomicCmpXchg
        VB: Opcode.AtomicCmpXchg
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.AtomicCmpXchg
        VB: Swigged.LLVM.Opcode.AtomicCmpXchg
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicCmpXchg
        path: src/swigged.llvm/Opcode.cs
        startLine: 68
      syntax:
        content:
          CSharp: AtomicCmpXchg = null
          VB: AtomicCmpXchg = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.AtomicRMW
      commentId: F:Swigged.LLVM.Opcode.AtomicRMW
      language: CSharp
      name:
        CSharp: AtomicRMW
        VB: AtomicRMW
      nameWithType:
        CSharp: Opcode.AtomicRMW
        VB: Opcode.AtomicRMW
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.AtomicRMW
        VB: Swigged.LLVM.Opcode.AtomicRMW
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AtomicRMW
        path: src/swigged.llvm/Opcode.cs
        startLine: 69
      syntax:
        content:
          CSharp: AtomicRMW = null
          VB: AtomicRMW = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.Resume
      commentId: F:Swigged.LLVM.Opcode.Resume
      language: CSharp
      name:
        CSharp: Resume
        VB: Resume
      nameWithType:
        CSharp: Opcode.Resume
        VB: Opcode.Resume
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.Resume
        VB: Swigged.LLVM.Opcode.Resume
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Resume
        path: src/swigged.llvm/Opcode.cs
        startLine: 70
      syntax:
        content:
          CSharp: Resume = null
          VB: Resume = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.LandingPad
      commentId: F:Swigged.LLVM.Opcode.LandingPad
      language: CSharp
      name:
        CSharp: LandingPad
        VB: LandingPad
      nameWithType:
        CSharp: Opcode.LandingPad
        VB: Opcode.LandingPad
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.LandingPad
        VB: Swigged.LLVM.Opcode.LandingPad
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LandingPad
        path: src/swigged.llvm/Opcode.cs
        startLine: 71
      syntax:
        content:
          CSharp: LandingPad = null
          VB: LandingPad = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.CleanupRet
      commentId: F:Swigged.LLVM.Opcode.CleanupRet
      language: CSharp
      name:
        CSharp: CleanupRet
        VB: CleanupRet
      nameWithType:
        CSharp: Opcode.CleanupRet
        VB: Opcode.CleanupRet
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.CleanupRet
        VB: Swigged.LLVM.Opcode.CleanupRet
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CleanupRet
        path: src/swigged.llvm/Opcode.cs
        startLine: 72
      syntax:
        content:
          CSharp: CleanupRet = null
          VB: CleanupRet = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.CatchRet
      commentId: F:Swigged.LLVM.Opcode.CatchRet
      language: CSharp
      name:
        CSharp: CatchRet
        VB: CatchRet
      nameWithType:
        CSharp: Opcode.CatchRet
        VB: Opcode.CatchRet
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.CatchRet
        VB: Swigged.LLVM.Opcode.CatchRet
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CatchRet
        path: src/swigged.llvm/Opcode.cs
        startLine: 73
      syntax:
        content:
          CSharp: CatchRet = null
          VB: CatchRet = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.CatchPad
      commentId: F:Swigged.LLVM.Opcode.CatchPad
      language: CSharp
      name:
        CSharp: CatchPad
        VB: CatchPad
      nameWithType:
        CSharp: Opcode.CatchPad
        VB: Opcode.CatchPad
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.CatchPad
        VB: Swigged.LLVM.Opcode.CatchPad
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CatchPad
        path: src/swigged.llvm/Opcode.cs
        startLine: 74
      syntax:
        content:
          CSharp: CatchPad = null
          VB: CatchPad = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.CleanupPad
      commentId: F:Swigged.LLVM.Opcode.CleanupPad
      language: CSharp
      name:
        CSharp: CleanupPad
        VB: CleanupPad
      nameWithType:
        CSharp: Opcode.CleanupPad
        VB: Opcode.CleanupPad
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.CleanupPad
        VB: Swigged.LLVM.Opcode.CleanupPad
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CleanupPad
        path: src/swigged.llvm/Opcode.cs
        startLine: 75
      syntax:
        content:
          CSharp: CleanupPad = null
          VB: CleanupPad = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Opcode.CatchSwitch
      commentId: F:Swigged.LLVM.Opcode.CatchSwitch
      language: CSharp
      name:
        CSharp: CatchSwitch
        VB: CatchSwitch
      nameWithType:
        CSharp: Opcode.CatchSwitch
        VB: Opcode.CatchSwitch
      qualifiedName:
        CSharp: Swigged.LLVM.Opcode.CatchSwitch
        VB: Swigged.LLVM.Opcode.CatchSwitch
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Opcode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CatchSwitch
        path: src/swigged.llvm/Opcode.cs
        startLine: 76
      syntax:
        content:
          CSharp: CatchSwitch = null
          VB: CatchSwitch = Nothing
        return:
          type: Swigged.LLVM.Opcode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.OpInfo1
    commentId: T:Swigged.LLVM.OpInfo1
    language: CSharp
    name:
      CSharp: OpInfo1
      VB: OpInfo1
    nameWithType:
      CSharp: OpInfo1
      VB: OpInfo1
    qualifiedName:
      CSharp: Swigged.LLVM.OpInfo1
      VB: Swigged.LLVM.OpInfo1
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/OpInfo1.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: OpInfo1
      path: src/swigged.llvm/OpInfo1.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct OpInfo1 : System.IEquatable<OpInfo1>'
        VB: >-
          Public Structure OpInfo1

              Implements System.IEquatable(Of OpInfo1)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.OpInfo1.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.OpInfo1.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: OpInfo1(System.IntPtr)
        VB: OpInfo1(System.IntPtr)
      nameWithType:
        CSharp: OpInfo1.OpInfo1(System.IntPtr)
        VB: OpInfo1.OpInfo1(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfo1.OpInfo1(System.IntPtr)
        VB: Swigged.LLVM.OpInfo1.OpInfo1(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfo1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/OpInfo1.cs
        startLine: 13
      syntax:
        content:
          CSharp: public OpInfo1(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.OpInfo1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OpInfo1.Value
      commentId: F:Swigged.LLVM.OpInfo1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: OpInfo1.Value
        VB: OpInfo1.Value
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfo1.Value
        VB: Swigged.LLVM.OpInfo1.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfo1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/OpInfo1.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OpInfo1.Equals(Swigged.LLVM.OpInfo1)
      commentId: M:Swigged.LLVM.OpInfo1.Equals(Swigged.LLVM.OpInfo1)
      language: CSharp
      name:
        CSharp: Equals(OpInfo1)
        VB: Equals(OpInfo1)
      nameWithType:
        CSharp: OpInfo1.Equals(OpInfo1)
        VB: OpInfo1.Equals(OpInfo1)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfo1.Equals(Swigged.LLVM.OpInfo1)
        VB: Swigged.LLVM.OpInfo1.Equals(Swigged.LLVM.OpInfo1)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfo1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/OpInfo1.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(OpInfo1 other)
          VB: Public Function Equals(other As OpInfo1) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.OpInfo1
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OpInfo1.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OpInfo1.Equals(System.Object)
      commentId: M:Swigged.LLVM.OpInfo1.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: OpInfo1.Equals(Object)
        VB: OpInfo1.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfo1.Equals(System.Object)
        VB: Swigged.LLVM.OpInfo1.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfo1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/OpInfo1.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OpInfo1.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.OpInfo1.GetHashCode
      commentId: M:Swigged.LLVM.OpInfo1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: OpInfo1.GetHashCode()
        VB: OpInfo1.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfo1.GetHashCode()
        VB: Swigged.LLVM.OpInfo1.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfo1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/OpInfo1.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.OpInfo1.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.OpInfo1.op_Equality(Swigged.LLVM.OpInfo1,Swigged.LLVM.OpInfo1)
      commentId: M:Swigged.LLVM.OpInfo1.op_Equality(Swigged.LLVM.OpInfo1,Swigged.LLVM.OpInfo1)
      language: CSharp
      name:
        CSharp: Equality(OpInfo1, OpInfo1)
        VB: Equality(OpInfo1, OpInfo1)
      nameWithType:
        CSharp: OpInfo1.Equality(OpInfo1, OpInfo1)
        VB: OpInfo1.Equality(OpInfo1, OpInfo1)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfo1.Equality(Swigged.LLVM.OpInfo1, Swigged.LLVM.OpInfo1)
        VB: Swigged.LLVM.OpInfo1.Equality(Swigged.LLVM.OpInfo1, Swigged.LLVM.OpInfo1)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfo1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/OpInfo1.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(OpInfo1 left, OpInfo1 right)
          VB: Public Shared Operator =(left As OpInfo1, right As OpInfo1) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.OpInfo1
        - id: right
          type: Swigged.LLVM.OpInfo1
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OpInfo1.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.OpInfo1.op_Inequality(Swigged.LLVM.OpInfo1,Swigged.LLVM.OpInfo1)
      commentId: M:Swigged.LLVM.OpInfo1.op_Inequality(Swigged.LLVM.OpInfo1,Swigged.LLVM.OpInfo1)
      language: CSharp
      name:
        CSharp: Inequality(OpInfo1, OpInfo1)
        VB: Inequality(OpInfo1, OpInfo1)
      nameWithType:
        CSharp: OpInfo1.Inequality(OpInfo1, OpInfo1)
        VB: OpInfo1.Inequality(OpInfo1, OpInfo1)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfo1.Inequality(Swigged.LLVM.OpInfo1, Swigged.LLVM.OpInfo1)
        VB: Swigged.LLVM.OpInfo1.Inequality(Swigged.LLVM.OpInfo1, Swigged.LLVM.OpInfo1)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfo1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/OpInfo1.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(OpInfo1 left, OpInfo1 right)
          VB: Public Shared Operator <>(left As OpInfo1, right As OpInfo1) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.OpInfo1
        - id: right
          type: Swigged.LLVM.OpInfo1
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OpInfo1.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.OpInfoSymbol1
    commentId: T:Swigged.LLVM.OpInfoSymbol1
    language: CSharp
    name:
      CSharp: OpInfoSymbol1
      VB: OpInfoSymbol1
    nameWithType:
      CSharp: OpInfoSymbol1
      VB: OpInfoSymbol1
    qualifiedName:
      CSharp: Swigged.LLVM.OpInfoSymbol1
      VB: Swigged.LLVM.OpInfoSymbol1
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/OpInfoSymbol1.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: OpInfoSymbol1
      path: src/swigged.llvm/OpInfoSymbol1.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct OpInfoSymbol1 : System.IEquatable<OpInfoSymbol1>'
        VB: >-
          Public Structure OpInfoSymbol1

              Implements System.IEquatable(Of OpInfoSymbol1)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.OpInfoSymbol1.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.OpInfoSymbol1.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: OpInfoSymbol1(System.IntPtr)
        VB: OpInfoSymbol1(System.IntPtr)
      nameWithType:
        CSharp: OpInfoSymbol1.OpInfoSymbol1(System.IntPtr)
        VB: OpInfoSymbol1.OpInfoSymbol1(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfoSymbol1.OpInfoSymbol1(System.IntPtr)
        VB: Swigged.LLVM.OpInfoSymbol1.OpInfoSymbol1(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfoSymbol1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/OpInfoSymbol1.cs
        startLine: 13
      syntax:
        content:
          CSharp: public OpInfoSymbol1(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.OpInfoSymbol1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OpInfoSymbol1.Value
      commentId: F:Swigged.LLVM.OpInfoSymbol1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: OpInfoSymbol1.Value
        VB: OpInfoSymbol1.Value
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfoSymbol1.Value
        VB: Swigged.LLVM.OpInfoSymbol1.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfoSymbol1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/OpInfoSymbol1.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OpInfoSymbol1.Equals(Swigged.LLVM.OpInfoSymbol1)
      commentId: M:Swigged.LLVM.OpInfoSymbol1.Equals(Swigged.LLVM.OpInfoSymbol1)
      language: CSharp
      name:
        CSharp: Equals(OpInfoSymbol1)
        VB: Equals(OpInfoSymbol1)
      nameWithType:
        CSharp: OpInfoSymbol1.Equals(OpInfoSymbol1)
        VB: OpInfoSymbol1.Equals(OpInfoSymbol1)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfoSymbol1.Equals(Swigged.LLVM.OpInfoSymbol1)
        VB: Swigged.LLVM.OpInfoSymbol1.Equals(Swigged.LLVM.OpInfoSymbol1)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfoSymbol1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/OpInfoSymbol1.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(OpInfoSymbol1 other)
          VB: Public Function Equals(other As OpInfoSymbol1) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.OpInfoSymbol1
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OpInfoSymbol1.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OpInfoSymbol1.Equals(System.Object)
      commentId: M:Swigged.LLVM.OpInfoSymbol1.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: OpInfoSymbol1.Equals(Object)
        VB: OpInfoSymbol1.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfoSymbol1.Equals(System.Object)
        VB: Swigged.LLVM.OpInfoSymbol1.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfoSymbol1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/OpInfoSymbol1.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OpInfoSymbol1.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.OpInfoSymbol1.GetHashCode
      commentId: M:Swigged.LLVM.OpInfoSymbol1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: OpInfoSymbol1.GetHashCode()
        VB: OpInfoSymbol1.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfoSymbol1.GetHashCode()
        VB: Swigged.LLVM.OpInfoSymbol1.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfoSymbol1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/OpInfoSymbol1.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.OpInfoSymbol1.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.OpInfoSymbol1.op_Equality(Swigged.LLVM.OpInfoSymbol1,Swigged.LLVM.OpInfoSymbol1)
      commentId: M:Swigged.LLVM.OpInfoSymbol1.op_Equality(Swigged.LLVM.OpInfoSymbol1,Swigged.LLVM.OpInfoSymbol1)
      language: CSharp
      name:
        CSharp: Equality(OpInfoSymbol1, OpInfoSymbol1)
        VB: Equality(OpInfoSymbol1, OpInfoSymbol1)
      nameWithType:
        CSharp: OpInfoSymbol1.Equality(OpInfoSymbol1, OpInfoSymbol1)
        VB: OpInfoSymbol1.Equality(OpInfoSymbol1, OpInfoSymbol1)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfoSymbol1.Equality(Swigged.LLVM.OpInfoSymbol1, Swigged.LLVM.OpInfoSymbol1)
        VB: Swigged.LLVM.OpInfoSymbol1.Equality(Swigged.LLVM.OpInfoSymbol1, Swigged.LLVM.OpInfoSymbol1)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfoSymbol1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/OpInfoSymbol1.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(OpInfoSymbol1 left, OpInfoSymbol1 right)
          VB: Public Shared Operator =(left As OpInfoSymbol1, right As OpInfoSymbol1) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.OpInfoSymbol1
        - id: right
          type: Swigged.LLVM.OpInfoSymbol1
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OpInfoSymbol1.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.OpInfoSymbol1.op_Inequality(Swigged.LLVM.OpInfoSymbol1,Swigged.LLVM.OpInfoSymbol1)
      commentId: M:Swigged.LLVM.OpInfoSymbol1.op_Inequality(Swigged.LLVM.OpInfoSymbol1,Swigged.LLVM.OpInfoSymbol1)
      language: CSharp
      name:
        CSharp: Inequality(OpInfoSymbol1, OpInfoSymbol1)
        VB: Inequality(OpInfoSymbol1, OpInfoSymbol1)
      nameWithType:
        CSharp: OpInfoSymbol1.Inequality(OpInfoSymbol1, OpInfoSymbol1)
        VB: OpInfoSymbol1.Inequality(OpInfoSymbol1, OpInfoSymbol1)
      qualifiedName:
        CSharp: Swigged.LLVM.OpInfoSymbol1.Inequality(Swigged.LLVM.OpInfoSymbol1, Swigged.LLVM.OpInfoSymbol1)
        VB: Swigged.LLVM.OpInfoSymbol1.Inequality(Swigged.LLVM.OpInfoSymbol1, Swigged.LLVM.OpInfoSymbol1)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OpInfoSymbol1.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/OpInfoSymbol1.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(OpInfoSymbol1 left, OpInfoSymbol1 right)
          VB: Public Shared Operator <>(left As OpInfoSymbol1, right As OpInfoSymbol1) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.OpInfoSymbol1
        - id: right
          type: Swigged.LLVM.OpInfoSymbol1
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OpInfoSymbol1.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.OrcErrorCode
    commentId: T:Swigged.LLVM.OrcErrorCode
    language: CSharp
    name:
      CSharp: OrcErrorCode
      VB: OrcErrorCode
    nameWithType:
      CSharp: OrcErrorCode
      VB: OrcErrorCode
    qualifiedName:
      CSharp: Swigged.LLVM.OrcErrorCode
      VB: Swigged.LLVM.OrcErrorCode
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/OrcErrorCode.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: OrcErrorCode
      path: src/swigged.llvm/OrcErrorCode.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum OrcErrorCode : int'
        VB: Public Enum OrcErrorCode As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.OrcErrorCode.OrcErrSuccess
      commentId: F:Swigged.LLVM.OrcErrorCode.OrcErrSuccess
      language: CSharp
      name:
        CSharp: OrcErrSuccess
        VB: OrcErrSuccess
      nameWithType:
        CSharp: OrcErrorCode.OrcErrSuccess
        VB: OrcErrorCode.OrcErrSuccess
      qualifiedName:
        CSharp: Swigged.LLVM.OrcErrorCode.OrcErrSuccess
        VB: Swigged.LLVM.OrcErrorCode.OrcErrSuccess
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcErrorCode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcErrSuccess
        path: src/swigged.llvm/OrcErrorCode.cs
        startLine: 13
      syntax:
        content:
          CSharp: OrcErrSuccess = null
          VB: OrcErrSuccess = Nothing
        return:
          type: Swigged.LLVM.OrcErrorCode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.OrcErrorCode.OrcErrGeneric
      commentId: F:Swigged.LLVM.OrcErrorCode.OrcErrGeneric
      language: CSharp
      name:
        CSharp: OrcErrGeneric
        VB: OrcErrGeneric
      nameWithType:
        CSharp: OrcErrorCode.OrcErrGeneric
        VB: OrcErrorCode.OrcErrGeneric
      qualifiedName:
        CSharp: Swigged.LLVM.OrcErrorCode.OrcErrGeneric
        VB: Swigged.LLVM.OrcErrorCode.OrcErrGeneric
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcErrorCode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcErrGeneric
        path: src/swigged.llvm/OrcErrorCode.cs
        startLine: 14
      syntax:
        content:
          CSharp: OrcErrGeneric = null
          VB: OrcErrGeneric = Nothing
        return:
          type: Swigged.LLVM.OrcErrorCode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.OrcJITStackRef
    commentId: T:Swigged.LLVM.OrcJITStackRef
    language: CSharp
    name:
      CSharp: OrcJITStackRef
      VB: OrcJITStackRef
    nameWithType:
      CSharp: OrcJITStackRef
      VB: OrcJITStackRef
    qualifiedName:
      CSharp: Swigged.LLVM.OrcJITStackRef
      VB: Swigged.LLVM.OrcJITStackRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/OrcJITStackRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: OrcJITStackRef
      path: src/swigged.llvm/OrcJITStackRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct OrcJITStackRef : System.IEquatable<OrcJITStackRef>'
        VB: >-
          Public Structure OrcJITStackRef

              Implements System.IEquatable(Of OrcJITStackRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.OrcJITStackRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.OrcJITStackRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: OrcJITStackRef(System.IntPtr)
        VB: OrcJITStackRef(System.IntPtr)
      nameWithType:
        CSharp: OrcJITStackRef.OrcJITStackRef(System.IntPtr)
        VB: OrcJITStackRef.OrcJITStackRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.OrcJITStackRef.OrcJITStackRef(System.IntPtr)
        VB: Swigged.LLVM.OrcJITStackRef.OrcJITStackRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcJITStackRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/OrcJITStackRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public OrcJITStackRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.OrcJITStackRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OrcJITStackRef.Value
      commentId: F:Swigged.LLVM.OrcJITStackRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: OrcJITStackRef.Value
        VB: OrcJITStackRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.OrcJITStackRef.Value
        VB: Swigged.LLVM.OrcJITStackRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcJITStackRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/OrcJITStackRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OrcJITStackRef.Equals(Swigged.LLVM.OrcJITStackRef)
      commentId: M:Swigged.LLVM.OrcJITStackRef.Equals(Swigged.LLVM.OrcJITStackRef)
      language: CSharp
      name:
        CSharp: Equals(OrcJITStackRef)
        VB: Equals(OrcJITStackRef)
      nameWithType:
        CSharp: OrcJITStackRef.Equals(OrcJITStackRef)
        VB: OrcJITStackRef.Equals(OrcJITStackRef)
      qualifiedName:
        CSharp: Swigged.LLVM.OrcJITStackRef.Equals(Swigged.LLVM.OrcJITStackRef)
        VB: Swigged.LLVM.OrcJITStackRef.Equals(Swigged.LLVM.OrcJITStackRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcJITStackRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/OrcJITStackRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(OrcJITStackRef other)
          VB: Public Function Equals(other As OrcJITStackRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.OrcJITStackRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OrcJITStackRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.OrcJITStackRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.OrcJITStackRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: OrcJITStackRef.Equals(Object)
        VB: OrcJITStackRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.OrcJITStackRef.Equals(System.Object)
        VB: Swigged.LLVM.OrcJITStackRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcJITStackRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/OrcJITStackRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OrcJITStackRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.OrcJITStackRef.GetHashCode
      commentId: M:Swigged.LLVM.OrcJITStackRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: OrcJITStackRef.GetHashCode()
        VB: OrcJITStackRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.OrcJITStackRef.GetHashCode()
        VB: Swigged.LLVM.OrcJITStackRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcJITStackRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/OrcJITStackRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.OrcJITStackRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.OrcJITStackRef.op_Equality(Swigged.LLVM.OrcJITStackRef,Swigged.LLVM.OrcJITStackRef)
      commentId: M:Swigged.LLVM.OrcJITStackRef.op_Equality(Swigged.LLVM.OrcJITStackRef,Swigged.LLVM.OrcJITStackRef)
      language: CSharp
      name:
        CSharp: Equality(OrcJITStackRef, OrcJITStackRef)
        VB: Equality(OrcJITStackRef, OrcJITStackRef)
      nameWithType:
        CSharp: OrcJITStackRef.Equality(OrcJITStackRef, OrcJITStackRef)
        VB: OrcJITStackRef.Equality(OrcJITStackRef, OrcJITStackRef)
      qualifiedName:
        CSharp: Swigged.LLVM.OrcJITStackRef.Equality(Swigged.LLVM.OrcJITStackRef, Swigged.LLVM.OrcJITStackRef)
        VB: Swigged.LLVM.OrcJITStackRef.Equality(Swigged.LLVM.OrcJITStackRef, Swigged.LLVM.OrcJITStackRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcJITStackRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/OrcJITStackRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(OrcJITStackRef left, OrcJITStackRef right)
          VB: Public Shared Operator =(left As OrcJITStackRef, right As OrcJITStackRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.OrcJITStackRef
        - id: right
          type: Swigged.LLVM.OrcJITStackRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OrcJITStackRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.OrcJITStackRef.op_Inequality(Swigged.LLVM.OrcJITStackRef,Swigged.LLVM.OrcJITStackRef)
      commentId: M:Swigged.LLVM.OrcJITStackRef.op_Inequality(Swigged.LLVM.OrcJITStackRef,Swigged.LLVM.OrcJITStackRef)
      language: CSharp
      name:
        CSharp: Inequality(OrcJITStackRef, OrcJITStackRef)
        VB: Inequality(OrcJITStackRef, OrcJITStackRef)
      nameWithType:
        CSharp: OrcJITStackRef.Inequality(OrcJITStackRef, OrcJITStackRef)
        VB: OrcJITStackRef.Inequality(OrcJITStackRef, OrcJITStackRef)
      qualifiedName:
        CSharp: Swigged.LLVM.OrcJITStackRef.Inequality(Swigged.LLVM.OrcJITStackRef, Swigged.LLVM.OrcJITStackRef)
        VB: Swigged.LLVM.OrcJITStackRef.Inequality(Swigged.LLVM.OrcJITStackRef, Swigged.LLVM.OrcJITStackRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/OrcJITStackRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/OrcJITStackRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(OrcJITStackRef left, OrcJITStackRef right)
          VB: Public Shared Operator <>(left As OrcJITStackRef, right As OrcJITStackRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.OrcJITStackRef
        - id: right
          type: Swigged.LLVM.OrcJITStackRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.OrcJITStackRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.PassManagerBuilderRef
    commentId: T:Swigged.LLVM.PassManagerBuilderRef
    language: CSharp
    name:
      CSharp: PassManagerBuilderRef
      VB: PassManagerBuilderRef
    nameWithType:
      CSharp: PassManagerBuilderRef
      VB: PassManagerBuilderRef
    qualifiedName:
      CSharp: Swigged.LLVM.PassManagerBuilderRef
      VB: Swigged.LLVM.PassManagerBuilderRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/PassManagerBuilderRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: PassManagerBuilderRef
      path: src/swigged.llvm/PassManagerBuilderRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct PassManagerBuilderRef : System.IEquatable<PassManagerBuilderRef>'
        VB: >-
          Public Structure PassManagerBuilderRef

              Implements System.IEquatable(Of PassManagerBuilderRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.PassManagerBuilderRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.PassManagerBuilderRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: PassManagerBuilderRef(System.IntPtr)
        VB: PassManagerBuilderRef(System.IntPtr)
      nameWithType:
        CSharp: PassManagerBuilderRef.PassManagerBuilderRef(System.IntPtr)
        VB: PassManagerBuilderRef.PassManagerBuilderRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerBuilderRef.PassManagerBuilderRef(System.IntPtr)
        VB: Swigged.LLVM.PassManagerBuilderRef.PassManagerBuilderRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerBuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/PassManagerBuilderRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public PassManagerBuilderRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.PassManagerBuilderRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassManagerBuilderRef.Value
      commentId: F:Swigged.LLVM.PassManagerBuilderRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: PassManagerBuilderRef.Value
        VB: PassManagerBuilderRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerBuilderRef.Value
        VB: Swigged.LLVM.PassManagerBuilderRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerBuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/PassManagerBuilderRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassManagerBuilderRef.Equals(Swigged.LLVM.PassManagerBuilderRef)
      commentId: M:Swigged.LLVM.PassManagerBuilderRef.Equals(Swigged.LLVM.PassManagerBuilderRef)
      language: CSharp
      name:
        CSharp: Equals(PassManagerBuilderRef)
        VB: Equals(PassManagerBuilderRef)
      nameWithType:
        CSharp: PassManagerBuilderRef.Equals(PassManagerBuilderRef)
        VB: PassManagerBuilderRef.Equals(PassManagerBuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerBuilderRef.Equals(Swigged.LLVM.PassManagerBuilderRef)
        VB: Swigged.LLVM.PassManagerBuilderRef.Equals(Swigged.LLVM.PassManagerBuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerBuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/PassManagerBuilderRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(PassManagerBuilderRef other)
          VB: Public Function Equals(other As PassManagerBuilderRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.PassManagerBuilderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassManagerBuilderRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassManagerBuilderRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.PassManagerBuilderRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: PassManagerBuilderRef.Equals(Object)
        VB: PassManagerBuilderRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerBuilderRef.Equals(System.Object)
        VB: Swigged.LLVM.PassManagerBuilderRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerBuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/PassManagerBuilderRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassManagerBuilderRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.PassManagerBuilderRef.GetHashCode
      commentId: M:Swigged.LLVM.PassManagerBuilderRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: PassManagerBuilderRef.GetHashCode()
        VB: PassManagerBuilderRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerBuilderRef.GetHashCode()
        VB: Swigged.LLVM.PassManagerBuilderRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerBuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/PassManagerBuilderRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.PassManagerBuilderRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.PassManagerBuilderRef.op_Equality(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerBuilderRef)
      commentId: M:Swigged.LLVM.PassManagerBuilderRef.op_Equality(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerBuilderRef)
      language: CSharp
      name:
        CSharp: Equality(PassManagerBuilderRef, PassManagerBuilderRef)
        VB: Equality(PassManagerBuilderRef, PassManagerBuilderRef)
      nameWithType:
        CSharp: PassManagerBuilderRef.Equality(PassManagerBuilderRef, PassManagerBuilderRef)
        VB: PassManagerBuilderRef.Equality(PassManagerBuilderRef, PassManagerBuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerBuilderRef.Equality(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerBuilderRef)
        VB: Swigged.LLVM.PassManagerBuilderRef.Equality(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerBuilderRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerBuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/PassManagerBuilderRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(PassManagerBuilderRef left, PassManagerBuilderRef right)
          VB: Public Shared Operator =(left As PassManagerBuilderRef, right As PassManagerBuilderRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: right
          type: Swigged.LLVM.PassManagerBuilderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassManagerBuilderRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.PassManagerBuilderRef.op_Inequality(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerBuilderRef)
      commentId: M:Swigged.LLVM.PassManagerBuilderRef.op_Inequality(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerBuilderRef)
      language: CSharp
      name:
        CSharp: Inequality(PassManagerBuilderRef, PassManagerBuilderRef)
        VB: Inequality(PassManagerBuilderRef, PassManagerBuilderRef)
      nameWithType:
        CSharp: PassManagerBuilderRef.Inequality(PassManagerBuilderRef, PassManagerBuilderRef)
        VB: PassManagerBuilderRef.Inequality(PassManagerBuilderRef, PassManagerBuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerBuilderRef.Inequality(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerBuilderRef)
        VB: Swigged.LLVM.PassManagerBuilderRef.Inequality(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerBuilderRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerBuilderRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/PassManagerBuilderRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(PassManagerBuilderRef left, PassManagerBuilderRef right)
          VB: Public Shared Operator <>(left As PassManagerBuilderRef, right As PassManagerBuilderRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: right
          type: Swigged.LLVM.PassManagerBuilderRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassManagerBuilderRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.PassManagerRef
    commentId: T:Swigged.LLVM.PassManagerRef
    language: CSharp
    name:
      CSharp: PassManagerRef
      VB: PassManagerRef
    nameWithType:
      CSharp: PassManagerRef
      VB: PassManagerRef
    qualifiedName:
      CSharp: Swigged.LLVM.PassManagerRef
      VB: Swigged.LLVM.PassManagerRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/PassManagerRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: PassManagerRef
      path: src/swigged.llvm/PassManagerRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct PassManagerRef : System.IEquatable<PassManagerRef>'
        VB: >-
          Public Structure PassManagerRef

              Implements System.IEquatable(Of PassManagerRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.PassManagerRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.PassManagerRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: PassManagerRef(System.IntPtr)
        VB: PassManagerRef(System.IntPtr)
      nameWithType:
        CSharp: PassManagerRef.PassManagerRef(System.IntPtr)
        VB: PassManagerRef.PassManagerRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerRef.PassManagerRef(System.IntPtr)
        VB: Swigged.LLVM.PassManagerRef.PassManagerRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/PassManagerRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public PassManagerRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.PassManagerRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassManagerRef.Value
      commentId: F:Swigged.LLVM.PassManagerRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: PassManagerRef.Value
        VB: PassManagerRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerRef.Value
        VB: Swigged.LLVM.PassManagerRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/PassManagerRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassManagerRef.Equals(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.PassManagerRef.Equals(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: Equals(PassManagerRef)
        VB: Equals(PassManagerRef)
      nameWithType:
        CSharp: PassManagerRef.Equals(PassManagerRef)
        VB: PassManagerRef.Equals(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerRef.Equals(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.PassManagerRef.Equals(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/PassManagerRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(PassManagerRef other)
          VB: Public Function Equals(other As PassManagerRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.PassManagerRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassManagerRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassManagerRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.PassManagerRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: PassManagerRef.Equals(Object)
        VB: PassManagerRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerRef.Equals(System.Object)
        VB: Swigged.LLVM.PassManagerRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/PassManagerRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassManagerRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.PassManagerRef.GetHashCode
      commentId: M:Swigged.LLVM.PassManagerRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: PassManagerRef.GetHashCode()
        VB: PassManagerRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerRef.GetHashCode()
        VB: Swigged.LLVM.PassManagerRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/PassManagerRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.PassManagerRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.PassManagerRef.op_Equality(Swigged.LLVM.PassManagerRef,Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.PassManagerRef.op_Equality(Swigged.LLVM.PassManagerRef,Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: Equality(PassManagerRef, PassManagerRef)
        VB: Equality(PassManagerRef, PassManagerRef)
      nameWithType:
        CSharp: PassManagerRef.Equality(PassManagerRef, PassManagerRef)
        VB: PassManagerRef.Equality(PassManagerRef, PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerRef.Equality(Swigged.LLVM.PassManagerRef, Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.PassManagerRef.Equality(Swigged.LLVM.PassManagerRef, Swigged.LLVM.PassManagerRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/PassManagerRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(PassManagerRef left, PassManagerRef right)
          VB: Public Shared Operator =(left As PassManagerRef, right As PassManagerRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.PassManagerRef
        - id: right
          type: Swigged.LLVM.PassManagerRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassManagerRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.PassManagerRef.op_Inequality(Swigged.LLVM.PassManagerRef,Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.PassManagerRef.op_Inequality(Swigged.LLVM.PassManagerRef,Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: Inequality(PassManagerRef, PassManagerRef)
        VB: Inequality(PassManagerRef, PassManagerRef)
      nameWithType:
        CSharp: PassManagerRef.Inequality(PassManagerRef, PassManagerRef)
        VB: PassManagerRef.Inequality(PassManagerRef, PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassManagerRef.Inequality(Swigged.LLVM.PassManagerRef, Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.PassManagerRef.Inequality(Swigged.LLVM.PassManagerRef, Swigged.LLVM.PassManagerRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassManagerRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/PassManagerRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(PassManagerRef left, PassManagerRef right)
          VB: Public Shared Operator <>(left As PassManagerRef, right As PassManagerRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.PassManagerRef
        - id: right
          type: Swigged.LLVM.PassManagerRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassManagerRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.PassRegistryRef
    commentId: T:Swigged.LLVM.PassRegistryRef
    language: CSharp
    name:
      CSharp: PassRegistryRef
      VB: PassRegistryRef
    nameWithType:
      CSharp: PassRegistryRef
      VB: PassRegistryRef
    qualifiedName:
      CSharp: Swigged.LLVM.PassRegistryRef
      VB: Swigged.LLVM.PassRegistryRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/PassRegistryRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: PassRegistryRef
      path: src/swigged.llvm/PassRegistryRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct PassRegistryRef : System.IEquatable<PassRegistryRef>'
        VB: >-
          Public Structure PassRegistryRef

              Implements System.IEquatable(Of PassRegistryRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.PassRegistryRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.PassRegistryRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: PassRegistryRef(System.IntPtr)
        VB: PassRegistryRef(System.IntPtr)
      nameWithType:
        CSharp: PassRegistryRef.PassRegistryRef(System.IntPtr)
        VB: PassRegistryRef.PassRegistryRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.PassRegistryRef.PassRegistryRef(System.IntPtr)
        VB: Swigged.LLVM.PassRegistryRef.PassRegistryRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassRegistryRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/PassRegistryRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public PassRegistryRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.PassRegistryRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassRegistryRef.Value
      commentId: F:Swigged.LLVM.PassRegistryRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: PassRegistryRef.Value
        VB: PassRegistryRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.PassRegistryRef.Value
        VB: Swigged.LLVM.PassRegistryRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassRegistryRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/PassRegistryRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassRegistryRef.Equals(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.PassRegistryRef.Equals(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: Equals(PassRegistryRef)
        VB: Equals(PassRegistryRef)
      nameWithType:
        CSharp: PassRegistryRef.Equals(PassRegistryRef)
        VB: PassRegistryRef.Equals(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassRegistryRef.Equals(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.PassRegistryRef.Equals(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassRegistryRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/PassRegistryRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(PassRegistryRef other)
          VB: Public Function Equals(other As PassRegistryRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.PassRegistryRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassRegistryRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.PassRegistryRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.PassRegistryRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: PassRegistryRef.Equals(Object)
        VB: PassRegistryRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.PassRegistryRef.Equals(System.Object)
        VB: Swigged.LLVM.PassRegistryRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassRegistryRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/PassRegistryRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassRegistryRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.PassRegistryRef.GetHashCode
      commentId: M:Swigged.LLVM.PassRegistryRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: PassRegistryRef.GetHashCode()
        VB: PassRegistryRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.PassRegistryRef.GetHashCode()
        VB: Swigged.LLVM.PassRegistryRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassRegistryRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/PassRegistryRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.PassRegistryRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.PassRegistryRef.op_Equality(Swigged.LLVM.PassRegistryRef,Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.PassRegistryRef.op_Equality(Swigged.LLVM.PassRegistryRef,Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: Equality(PassRegistryRef, PassRegistryRef)
        VB: Equality(PassRegistryRef, PassRegistryRef)
      nameWithType:
        CSharp: PassRegistryRef.Equality(PassRegistryRef, PassRegistryRef)
        VB: PassRegistryRef.Equality(PassRegistryRef, PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassRegistryRef.Equality(Swigged.LLVM.PassRegistryRef, Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.PassRegistryRef.Equality(Swigged.LLVM.PassRegistryRef, Swigged.LLVM.PassRegistryRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassRegistryRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/PassRegistryRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(PassRegistryRef left, PassRegistryRef right)
          VB: Public Shared Operator =(left As PassRegistryRef, right As PassRegistryRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.PassRegistryRef
        - id: right
          type: Swigged.LLVM.PassRegistryRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassRegistryRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.PassRegistryRef.op_Inequality(Swigged.LLVM.PassRegistryRef,Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.PassRegistryRef.op_Inequality(Swigged.LLVM.PassRegistryRef,Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: Inequality(PassRegistryRef, PassRegistryRef)
        VB: Inequality(PassRegistryRef, PassRegistryRef)
      nameWithType:
        CSharp: PassRegistryRef.Inequality(PassRegistryRef, PassRegistryRef)
        VB: PassRegistryRef.Inequality(PassRegistryRef, PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.PassRegistryRef.Inequality(Swigged.LLVM.PassRegistryRef, Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.PassRegistryRef.Inequality(Swigged.LLVM.PassRegistryRef, Swigged.LLVM.PassRegistryRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/PassRegistryRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/PassRegistryRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(PassRegistryRef left, PassRegistryRef right)
          VB: Public Shared Operator <>(left As PassRegistryRef, right As PassRegistryRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.PassRegistryRef
        - id: right
          type: Swigged.LLVM.PassRegistryRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.PassRegistryRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.RealPredicate
    commentId: T:Swigged.LLVM.RealPredicate
    language: CSharp
    name:
      CSharp: RealPredicate
      VB: RealPredicate
    nameWithType:
      CSharp: RealPredicate
      VB: RealPredicate
    qualifiedName:
      CSharp: Swigged.LLVM.RealPredicate
      VB: Swigged.LLVM.RealPredicate
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/RealPredicate.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: RealPredicate
      path: src/swigged.llvm/RealPredicate.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum RealPredicate : int'
        VB: Public Enum RealPredicate As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.RealPredicate.RealPredicateFalse
      commentId: F:Swigged.LLVM.RealPredicate.RealPredicateFalse
      language: CSharp
      name:
        CSharp: RealPredicateFalse
        VB: RealPredicateFalse
      nameWithType:
        CSharp: RealPredicate.RealPredicateFalse
        VB: RealPredicate.RealPredicateFalse
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealPredicateFalse
        VB: Swigged.LLVM.RealPredicate.RealPredicateFalse
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealPredicateFalse
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 13
      syntax:
        content:
          CSharp: RealPredicateFalse = 0
          VB: RealPredicateFalse = 0
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealOEQ
      commentId: F:Swigged.LLVM.RealPredicate.RealOEQ
      language: CSharp
      name:
        CSharp: RealOEQ
        VB: RealOEQ
      nameWithType:
        CSharp: RealPredicate.RealOEQ
        VB: RealPredicate.RealOEQ
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealOEQ
        VB: Swigged.LLVM.RealPredicate.RealOEQ
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealOEQ
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 14
      syntax:
        content:
          CSharp: RealOEQ = 1
          VB: RealOEQ = 1
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealOGT
      commentId: F:Swigged.LLVM.RealPredicate.RealOGT
      language: CSharp
      name:
        CSharp: RealOGT
        VB: RealOGT
      nameWithType:
        CSharp: RealPredicate.RealOGT
        VB: RealPredicate.RealOGT
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealOGT
        VB: Swigged.LLVM.RealPredicate.RealOGT
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealOGT
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 15
      syntax:
        content:
          CSharp: RealOGT = 2
          VB: RealOGT = 2
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealOGE
      commentId: F:Swigged.LLVM.RealPredicate.RealOGE
      language: CSharp
      name:
        CSharp: RealOGE
        VB: RealOGE
      nameWithType:
        CSharp: RealPredicate.RealOGE
        VB: RealPredicate.RealOGE
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealOGE
        VB: Swigged.LLVM.RealPredicate.RealOGE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealOGE
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 16
      syntax:
        content:
          CSharp: RealOGE = 3
          VB: RealOGE = 3
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealOLT
      commentId: F:Swigged.LLVM.RealPredicate.RealOLT
      language: CSharp
      name:
        CSharp: RealOLT
        VB: RealOLT
      nameWithType:
        CSharp: RealPredicate.RealOLT
        VB: RealPredicate.RealOLT
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealOLT
        VB: Swigged.LLVM.RealPredicate.RealOLT
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealOLT
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 17
      syntax:
        content:
          CSharp: RealOLT = 4
          VB: RealOLT = 4
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealOLE
      commentId: F:Swigged.LLVM.RealPredicate.RealOLE
      language: CSharp
      name:
        CSharp: RealOLE
        VB: RealOLE
      nameWithType:
        CSharp: RealPredicate.RealOLE
        VB: RealPredicate.RealOLE
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealOLE
        VB: Swigged.LLVM.RealPredicate.RealOLE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealOLE
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 18
      syntax:
        content:
          CSharp: RealOLE = 5
          VB: RealOLE = 5
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealONE
      commentId: F:Swigged.LLVM.RealPredicate.RealONE
      language: CSharp
      name:
        CSharp: RealONE
        VB: RealONE
      nameWithType:
        CSharp: RealPredicate.RealONE
        VB: RealPredicate.RealONE
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealONE
        VB: Swigged.LLVM.RealPredicate.RealONE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealONE
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 19
      syntax:
        content:
          CSharp: RealONE = 6
          VB: RealONE = 6
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealORD
      commentId: F:Swigged.LLVM.RealPredicate.RealORD
      language: CSharp
      name:
        CSharp: RealORD
        VB: RealORD
      nameWithType:
        CSharp: RealPredicate.RealORD
        VB: RealPredicate.RealORD
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealORD
        VB: Swigged.LLVM.RealPredicate.RealORD
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealORD
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 20
      syntax:
        content:
          CSharp: RealORD = 7
          VB: RealORD = 7
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealUNO
      commentId: F:Swigged.LLVM.RealPredicate.RealUNO
      language: CSharp
      name:
        CSharp: RealUNO
        VB: RealUNO
      nameWithType:
        CSharp: RealPredicate.RealUNO
        VB: RealPredicate.RealUNO
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealUNO
        VB: Swigged.LLVM.RealPredicate.RealUNO
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealUNO
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 21
      syntax:
        content:
          CSharp: RealUNO = 8
          VB: RealUNO = 8
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealUEQ
      commentId: F:Swigged.LLVM.RealPredicate.RealUEQ
      language: CSharp
      name:
        CSharp: RealUEQ
        VB: RealUEQ
      nameWithType:
        CSharp: RealPredicate.RealUEQ
        VB: RealPredicate.RealUEQ
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealUEQ
        VB: Swigged.LLVM.RealPredicate.RealUEQ
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealUEQ
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 22
      syntax:
        content:
          CSharp: RealUEQ = 9
          VB: RealUEQ = 9
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealUGT
      commentId: F:Swigged.LLVM.RealPredicate.RealUGT
      language: CSharp
      name:
        CSharp: RealUGT
        VB: RealUGT
      nameWithType:
        CSharp: RealPredicate.RealUGT
        VB: RealPredicate.RealUGT
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealUGT
        VB: Swigged.LLVM.RealPredicate.RealUGT
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealUGT
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 23
      syntax:
        content:
          CSharp: RealUGT = 10
          VB: RealUGT = 10
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealUGE
      commentId: F:Swigged.LLVM.RealPredicate.RealUGE
      language: CSharp
      name:
        CSharp: RealUGE
        VB: RealUGE
      nameWithType:
        CSharp: RealPredicate.RealUGE
        VB: RealPredicate.RealUGE
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealUGE
        VB: Swigged.LLVM.RealPredicate.RealUGE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealUGE
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 24
      syntax:
        content:
          CSharp: RealUGE = 11
          VB: RealUGE = 11
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealULT
      commentId: F:Swigged.LLVM.RealPredicate.RealULT
      language: CSharp
      name:
        CSharp: RealULT
        VB: RealULT
      nameWithType:
        CSharp: RealPredicate.RealULT
        VB: RealPredicate.RealULT
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealULT
        VB: Swigged.LLVM.RealPredicate.RealULT
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealULT
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 25
      syntax:
        content:
          CSharp: RealULT = 12
          VB: RealULT = 12
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealULE
      commentId: F:Swigged.LLVM.RealPredicate.RealULE
      language: CSharp
      name:
        CSharp: RealULE
        VB: RealULE
      nameWithType:
        CSharp: RealPredicate.RealULE
        VB: RealPredicate.RealULE
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealULE
        VB: Swigged.LLVM.RealPredicate.RealULE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealULE
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 26
      syntax:
        content:
          CSharp: RealULE = 13
          VB: RealULE = 13
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealUNE
      commentId: F:Swigged.LLVM.RealPredicate.RealUNE
      language: CSharp
      name:
        CSharp: RealUNE
        VB: RealUNE
      nameWithType:
        CSharp: RealPredicate.RealUNE
        VB: RealPredicate.RealUNE
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealUNE
        VB: Swigged.LLVM.RealPredicate.RealUNE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealUNE
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 27
      syntax:
        content:
          CSharp: RealUNE = 14
          VB: RealUNE = 14
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RealPredicate.RealPredicateTrue
      commentId: F:Swigged.LLVM.RealPredicate.RealPredicateTrue
      language: CSharp
      name:
        CSharp: RealPredicateTrue
        VB: RealPredicateTrue
      nameWithType:
        CSharp: RealPredicate.RealPredicateTrue
        VB: RealPredicate.RealPredicateTrue
      qualifiedName:
        CSharp: Swigged.LLVM.RealPredicate.RealPredicateTrue
        VB: Swigged.LLVM.RealPredicate.RealPredicateTrue
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RealPredicate.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RealPredicateTrue
        path: src/swigged.llvm/RealPredicate.cs
        startLine: 28
      syntax:
        content:
          CSharp: RealPredicateTrue = 15
          VB: RealPredicateTrue = 15
        return:
          type: Swigged.LLVM.RealPredicate
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.RelocMode
    commentId: T:Swigged.LLVM.RelocMode
    language: CSharp
    name:
      CSharp: RelocMode
      VB: RelocMode
    nameWithType:
      CSharp: RelocMode
      VB: RelocMode
    qualifiedName:
      CSharp: Swigged.LLVM.RelocMode
      VB: Swigged.LLVM.RelocMode
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/RelocMode.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: RelocMode
      path: src/swigged.llvm/RelocMode.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum RelocMode : int'
        VB: Public Enum RelocMode As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.RelocMode.RelocDefault
      commentId: F:Swigged.LLVM.RelocMode.RelocDefault
      language: CSharp
      name:
        CSharp: RelocDefault
        VB: RelocDefault
      nameWithType:
        CSharp: RelocMode.RelocDefault
        VB: RelocMode.RelocDefault
      qualifiedName:
        CSharp: Swigged.LLVM.RelocMode.RelocDefault
        VB: Swigged.LLVM.RelocMode.RelocDefault
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RelocMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RelocDefault
        path: src/swigged.llvm/RelocMode.cs
        startLine: 13
      syntax:
        content:
          CSharp: RelocDefault = 0
          VB: RelocDefault = 0
        return:
          type: Swigged.LLVM.RelocMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RelocMode.RelocStatic
      commentId: F:Swigged.LLVM.RelocMode.RelocStatic
      language: CSharp
      name:
        CSharp: RelocStatic
        VB: RelocStatic
      nameWithType:
        CSharp: RelocMode.RelocStatic
        VB: RelocMode.RelocStatic
      qualifiedName:
        CSharp: Swigged.LLVM.RelocMode.RelocStatic
        VB: Swigged.LLVM.RelocMode.RelocStatic
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RelocMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RelocStatic
        path: src/swigged.llvm/RelocMode.cs
        startLine: 14
      syntax:
        content:
          CSharp: RelocStatic = 1
          VB: RelocStatic = 1
        return:
          type: Swigged.LLVM.RelocMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RelocMode.RelocPIC
      commentId: F:Swigged.LLVM.RelocMode.RelocPIC
      language: CSharp
      name:
        CSharp: RelocPIC
        VB: RelocPIC
      nameWithType:
        CSharp: RelocMode.RelocPIC
        VB: RelocMode.RelocPIC
      qualifiedName:
        CSharp: Swigged.LLVM.RelocMode.RelocPIC
        VB: Swigged.LLVM.RelocMode.RelocPIC
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RelocMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RelocPIC
        path: src/swigged.llvm/RelocMode.cs
        startLine: 15
      syntax:
        content:
          CSharp: RelocPIC = 2
          VB: RelocPIC = 2
        return:
          type: Swigged.LLVM.RelocMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.RelocMode.RelocDynamicNoPic
      commentId: F:Swigged.LLVM.RelocMode.RelocDynamicNoPic
      language: CSharp
      name:
        CSharp: RelocDynamicNoPic
        VB: RelocDynamicNoPic
      nameWithType:
        CSharp: RelocMode.RelocDynamicNoPic
        VB: RelocMode.RelocDynamicNoPic
      qualifiedName:
        CSharp: Swigged.LLVM.RelocMode.RelocDynamicNoPic
        VB: Swigged.LLVM.RelocMode.RelocDynamicNoPic
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/RelocMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RelocDynamicNoPic
        path: src/swigged.llvm/RelocMode.cs
        startLine: 16
      syntax:
        content:
          CSharp: RelocDynamicNoPic = 3
          VB: RelocDynamicNoPic = 3
        return:
          type: Swigged.LLVM.RelocMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.TargetDataRef
    commentId: T:Swigged.LLVM.TargetDataRef
    language: CSharp
    name:
      CSharp: TargetDataRef
      VB: TargetDataRef
    nameWithType:
      CSharp: TargetDataRef
      VB: TargetDataRef
    qualifiedName:
      CSharp: Swigged.LLVM.TargetDataRef
      VB: Swigged.LLVM.TargetDataRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/TargetDataRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: TargetDataRef
      path: src/swigged.llvm/TargetDataRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct TargetDataRef : System.IEquatable<TargetDataRef>'
        VB: >-
          Public Structure TargetDataRef

              Implements System.IEquatable(Of TargetDataRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.TargetDataRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.TargetDataRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: TargetDataRef(System.IntPtr)
        VB: TargetDataRef(System.IntPtr)
      nameWithType:
        CSharp: TargetDataRef.TargetDataRef(System.IntPtr)
        VB: TargetDataRef.TargetDataRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetDataRef.TargetDataRef(System.IntPtr)
        VB: Swigged.LLVM.TargetDataRef.TargetDataRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetDataRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/TargetDataRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public TargetDataRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.TargetDataRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetDataRef.Value
      commentId: F:Swigged.LLVM.TargetDataRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: TargetDataRef.Value
        VB: TargetDataRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.TargetDataRef.Value
        VB: Swigged.LLVM.TargetDataRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetDataRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/TargetDataRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetDataRef.Equals(Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.TargetDataRef.Equals(Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: Equals(TargetDataRef)
        VB: Equals(TargetDataRef)
      nameWithType:
        CSharp: TargetDataRef.Equals(TargetDataRef)
        VB: TargetDataRef.Equals(TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetDataRef.Equals(Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.TargetDataRef.Equals(Swigged.LLVM.TargetDataRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetDataRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TargetDataRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(TargetDataRef other)
          VB: Public Function Equals(other As TargetDataRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.TargetDataRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetDataRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetDataRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.TargetDataRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: TargetDataRef.Equals(Object)
        VB: TargetDataRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetDataRef.Equals(System.Object)
        VB: Swigged.LLVM.TargetDataRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetDataRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TargetDataRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetDataRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TargetDataRef.GetHashCode
      commentId: M:Swigged.LLVM.TargetDataRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: TargetDataRef.GetHashCode()
        VB: TargetDataRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.TargetDataRef.GetHashCode()
        VB: Swigged.LLVM.TargetDataRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetDataRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/TargetDataRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.TargetDataRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TargetDataRef.op_Equality(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.TargetDataRef.op_Equality(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: Equality(TargetDataRef, TargetDataRef)
        VB: Equality(TargetDataRef, TargetDataRef)
      nameWithType:
        CSharp: TargetDataRef.Equality(TargetDataRef, TargetDataRef)
        VB: TargetDataRef.Equality(TargetDataRef, TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetDataRef.Equality(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.TargetDataRef.Equality(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TargetDataRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetDataRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/TargetDataRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(TargetDataRef left, TargetDataRef right)
          VB: Public Shared Operator =(left As TargetDataRef, right As TargetDataRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TargetDataRef
        - id: right
          type: Swigged.LLVM.TargetDataRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetDataRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.TargetDataRef.op_Inequality(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.TargetDataRef.op_Inequality(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: Inequality(TargetDataRef, TargetDataRef)
        VB: Inequality(TargetDataRef, TargetDataRef)
      nameWithType:
        CSharp: TargetDataRef.Inequality(TargetDataRef, TargetDataRef)
        VB: TargetDataRef.Inequality(TargetDataRef, TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetDataRef.Inequality(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.TargetDataRef.Inequality(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TargetDataRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetDataRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/TargetDataRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(TargetDataRef left, TargetDataRef right)
          VB: Public Shared Operator <>(left As TargetDataRef, right As TargetDataRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TargetDataRef
        - id: right
          type: Swigged.LLVM.TargetDataRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetDataRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.TargetLibraryInfoRef
    commentId: T:Swigged.LLVM.TargetLibraryInfoRef
    language: CSharp
    name:
      CSharp: TargetLibraryInfoRef
      VB: TargetLibraryInfoRef
    nameWithType:
      CSharp: TargetLibraryInfoRef
      VB: TargetLibraryInfoRef
    qualifiedName:
      CSharp: Swigged.LLVM.TargetLibraryInfoRef
      VB: Swigged.LLVM.TargetLibraryInfoRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/TargetLibraryInfoRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: TargetLibraryInfoRef
      path: src/swigged.llvm/TargetLibraryInfoRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct TargetLibraryInfoRef : System.IEquatable<TargetLibraryInfoRef>'
        VB: >-
          Public Structure TargetLibraryInfoRef

              Implements System.IEquatable(Of TargetLibraryInfoRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.TargetLibraryInfoRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.TargetLibraryInfoRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: TargetLibraryInfoRef(System.IntPtr)
        VB: TargetLibraryInfoRef(System.IntPtr)
      nameWithType:
        CSharp: TargetLibraryInfoRef.TargetLibraryInfoRef(System.IntPtr)
        VB: TargetLibraryInfoRef.TargetLibraryInfoRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetLibraryInfoRef.TargetLibraryInfoRef(System.IntPtr)
        VB: Swigged.LLVM.TargetLibraryInfoRef.TargetLibraryInfoRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetLibraryInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/TargetLibraryInfoRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public TargetLibraryInfoRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.TargetLibraryInfoRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetLibraryInfoRef.Value
      commentId: F:Swigged.LLVM.TargetLibraryInfoRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: TargetLibraryInfoRef.Value
        VB: TargetLibraryInfoRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.TargetLibraryInfoRef.Value
        VB: Swigged.LLVM.TargetLibraryInfoRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetLibraryInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/TargetLibraryInfoRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetLibraryInfoRef.Equals(Swigged.LLVM.TargetLibraryInfoRef)
      commentId: M:Swigged.LLVM.TargetLibraryInfoRef.Equals(Swigged.LLVM.TargetLibraryInfoRef)
      language: CSharp
      name:
        CSharp: Equals(TargetLibraryInfoRef)
        VB: Equals(TargetLibraryInfoRef)
      nameWithType:
        CSharp: TargetLibraryInfoRef.Equals(TargetLibraryInfoRef)
        VB: TargetLibraryInfoRef.Equals(TargetLibraryInfoRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetLibraryInfoRef.Equals(Swigged.LLVM.TargetLibraryInfoRef)
        VB: Swigged.LLVM.TargetLibraryInfoRef.Equals(Swigged.LLVM.TargetLibraryInfoRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetLibraryInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TargetLibraryInfoRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(TargetLibraryInfoRef other)
          VB: Public Function Equals(other As TargetLibraryInfoRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.TargetLibraryInfoRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetLibraryInfoRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetLibraryInfoRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.TargetLibraryInfoRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: TargetLibraryInfoRef.Equals(Object)
        VB: TargetLibraryInfoRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetLibraryInfoRef.Equals(System.Object)
        VB: Swigged.LLVM.TargetLibraryInfoRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetLibraryInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TargetLibraryInfoRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetLibraryInfoRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TargetLibraryInfoRef.GetHashCode
      commentId: M:Swigged.LLVM.TargetLibraryInfoRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: TargetLibraryInfoRef.GetHashCode()
        VB: TargetLibraryInfoRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.TargetLibraryInfoRef.GetHashCode()
        VB: Swigged.LLVM.TargetLibraryInfoRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetLibraryInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/TargetLibraryInfoRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.TargetLibraryInfoRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TargetLibraryInfoRef.op_Equality(Swigged.LLVM.TargetLibraryInfoRef,Swigged.LLVM.TargetLibraryInfoRef)
      commentId: M:Swigged.LLVM.TargetLibraryInfoRef.op_Equality(Swigged.LLVM.TargetLibraryInfoRef,Swigged.LLVM.TargetLibraryInfoRef)
      language: CSharp
      name:
        CSharp: Equality(TargetLibraryInfoRef, TargetLibraryInfoRef)
        VB: Equality(TargetLibraryInfoRef, TargetLibraryInfoRef)
      nameWithType:
        CSharp: TargetLibraryInfoRef.Equality(TargetLibraryInfoRef, TargetLibraryInfoRef)
        VB: TargetLibraryInfoRef.Equality(TargetLibraryInfoRef, TargetLibraryInfoRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetLibraryInfoRef.Equality(Swigged.LLVM.TargetLibraryInfoRef, Swigged.LLVM.TargetLibraryInfoRef)
        VB: Swigged.LLVM.TargetLibraryInfoRef.Equality(Swigged.LLVM.TargetLibraryInfoRef, Swigged.LLVM.TargetLibraryInfoRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetLibraryInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/TargetLibraryInfoRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(TargetLibraryInfoRef left, TargetLibraryInfoRef right)
          VB: Public Shared Operator =(left As TargetLibraryInfoRef, right As TargetLibraryInfoRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TargetLibraryInfoRef
        - id: right
          type: Swigged.LLVM.TargetLibraryInfoRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetLibraryInfoRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.TargetLibraryInfoRef.op_Inequality(Swigged.LLVM.TargetLibraryInfoRef,Swigged.LLVM.TargetLibraryInfoRef)
      commentId: M:Swigged.LLVM.TargetLibraryInfoRef.op_Inequality(Swigged.LLVM.TargetLibraryInfoRef,Swigged.LLVM.TargetLibraryInfoRef)
      language: CSharp
      name:
        CSharp: Inequality(TargetLibraryInfoRef, TargetLibraryInfoRef)
        VB: Inequality(TargetLibraryInfoRef, TargetLibraryInfoRef)
      nameWithType:
        CSharp: TargetLibraryInfoRef.Inequality(TargetLibraryInfoRef, TargetLibraryInfoRef)
        VB: TargetLibraryInfoRef.Inequality(TargetLibraryInfoRef, TargetLibraryInfoRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetLibraryInfoRef.Inequality(Swigged.LLVM.TargetLibraryInfoRef, Swigged.LLVM.TargetLibraryInfoRef)
        VB: Swigged.LLVM.TargetLibraryInfoRef.Inequality(Swigged.LLVM.TargetLibraryInfoRef, Swigged.LLVM.TargetLibraryInfoRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetLibraryInfoRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/TargetLibraryInfoRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(TargetLibraryInfoRef left, TargetLibraryInfoRef right)
          VB: Public Shared Operator <>(left As TargetLibraryInfoRef, right As TargetLibraryInfoRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TargetLibraryInfoRef
        - id: right
          type: Swigged.LLVM.TargetLibraryInfoRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetLibraryInfoRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.TargetMachineRef
    commentId: T:Swigged.LLVM.TargetMachineRef
    language: CSharp
    name:
      CSharp: TargetMachineRef
      VB: TargetMachineRef
    nameWithType:
      CSharp: TargetMachineRef
      VB: TargetMachineRef
    qualifiedName:
      CSharp: Swigged.LLVM.TargetMachineRef
      VB: Swigged.LLVM.TargetMachineRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/TargetMachineRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: TargetMachineRef
      path: src/swigged.llvm/TargetMachineRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct TargetMachineRef : System.IEquatable<TargetMachineRef>'
        VB: >-
          Public Structure TargetMachineRef

              Implements System.IEquatable(Of TargetMachineRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.TargetMachineRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.TargetMachineRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: TargetMachineRef(System.IntPtr)
        VB: TargetMachineRef(System.IntPtr)
      nameWithType:
        CSharp: TargetMachineRef.TargetMachineRef(System.IntPtr)
        VB: TargetMachineRef.TargetMachineRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetMachineRef.TargetMachineRef(System.IntPtr)
        VB: Swigged.LLVM.TargetMachineRef.TargetMachineRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetMachineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/TargetMachineRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public TargetMachineRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.TargetMachineRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetMachineRef.Value
      commentId: F:Swigged.LLVM.TargetMachineRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: TargetMachineRef.Value
        VB: TargetMachineRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.TargetMachineRef.Value
        VB: Swigged.LLVM.TargetMachineRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetMachineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/TargetMachineRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetMachineRef.Equals(Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.TargetMachineRef.Equals(Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: Equals(TargetMachineRef)
        VB: Equals(TargetMachineRef)
      nameWithType:
        CSharp: TargetMachineRef.Equals(TargetMachineRef)
        VB: TargetMachineRef.Equals(TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetMachineRef.Equals(Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.TargetMachineRef.Equals(Swigged.LLVM.TargetMachineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetMachineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TargetMachineRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(TargetMachineRef other)
          VB: Public Function Equals(other As TargetMachineRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetMachineRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetMachineRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.TargetMachineRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: TargetMachineRef.Equals(Object)
        VB: TargetMachineRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetMachineRef.Equals(System.Object)
        VB: Swigged.LLVM.TargetMachineRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetMachineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TargetMachineRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetMachineRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TargetMachineRef.GetHashCode
      commentId: M:Swigged.LLVM.TargetMachineRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: TargetMachineRef.GetHashCode()
        VB: TargetMachineRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.TargetMachineRef.GetHashCode()
        VB: Swigged.LLVM.TargetMachineRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetMachineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/TargetMachineRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.TargetMachineRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TargetMachineRef.op_Equality(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.TargetMachineRef.op_Equality(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: Equality(TargetMachineRef, TargetMachineRef)
        VB: Equality(TargetMachineRef, TargetMachineRef)
      nameWithType:
        CSharp: TargetMachineRef.Equality(TargetMachineRef, TargetMachineRef)
        VB: TargetMachineRef.Equality(TargetMachineRef, TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetMachineRef.Equality(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.TargetMachineRef.Equality(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.TargetMachineRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetMachineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/TargetMachineRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(TargetMachineRef left, TargetMachineRef right)
          VB: Public Shared Operator =(left As TargetMachineRef, right As TargetMachineRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TargetMachineRef
        - id: right
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetMachineRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.TargetMachineRef.op_Inequality(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.TargetMachineRef.op_Inequality(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: Inequality(TargetMachineRef, TargetMachineRef)
        VB: Inequality(TargetMachineRef, TargetMachineRef)
      nameWithType:
        CSharp: TargetMachineRef.Inequality(TargetMachineRef, TargetMachineRef)
        VB: TargetMachineRef.Inequality(TargetMachineRef, TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetMachineRef.Inequality(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.TargetMachineRef.Inequality(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.TargetMachineRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetMachineRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/TargetMachineRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(TargetMachineRef left, TargetMachineRef right)
          VB: Public Shared Operator <>(left As TargetMachineRef, right As TargetMachineRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TargetMachineRef
        - id: right
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetMachineRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.TargetRef
    commentId: T:Swigged.LLVM.TargetRef
    language: CSharp
    name:
      CSharp: TargetRef
      VB: TargetRef
    nameWithType:
      CSharp: TargetRef
      VB: TargetRef
    qualifiedName:
      CSharp: Swigged.LLVM.TargetRef
      VB: Swigged.LLVM.TargetRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/TargetRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: TargetRef
      path: src/swigged.llvm/TargetRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct TargetRef : System.IEquatable<TargetRef>'
        VB: >-
          Public Structure TargetRef

              Implements System.IEquatable(Of TargetRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.TargetRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.TargetRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: TargetRef(System.IntPtr)
        VB: TargetRef(System.IntPtr)
      nameWithType:
        CSharp: TargetRef.TargetRef(System.IntPtr)
        VB: TargetRef.TargetRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetRef.TargetRef(System.IntPtr)
        VB: Swigged.LLVM.TargetRef.TargetRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/TargetRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public TargetRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.TargetRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetRef.Value
      commentId: F:Swigged.LLVM.TargetRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: TargetRef.Value
        VB: TargetRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.TargetRef.Value
        VB: Swigged.LLVM.TargetRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/TargetRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetRef.Equals(Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.TargetRef.Equals(Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: Equals(TargetRef)
        VB: Equals(TargetRef)
      nameWithType:
        CSharp: TargetRef.Equals(TargetRef)
        VB: TargetRef.Equals(TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetRef.Equals(Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.TargetRef.Equals(Swigged.LLVM.TargetRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TargetRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(TargetRef other)
          VB: Public Function Equals(other As TargetRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.TargetRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TargetRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.TargetRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: TargetRef.Equals(Object)
        VB: TargetRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetRef.Equals(System.Object)
        VB: Swigged.LLVM.TargetRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TargetRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TargetRef.GetHashCode
      commentId: M:Swigged.LLVM.TargetRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: TargetRef.GetHashCode()
        VB: TargetRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.TargetRef.GetHashCode()
        VB: Swigged.LLVM.TargetRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/TargetRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.TargetRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TargetRef.op_Equality(Swigged.LLVM.TargetRef,Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.TargetRef.op_Equality(Swigged.LLVM.TargetRef,Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: Equality(TargetRef, TargetRef)
        VB: Equality(TargetRef, TargetRef)
      nameWithType:
        CSharp: TargetRef.Equality(TargetRef, TargetRef)
        VB: TargetRef.Equality(TargetRef, TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetRef.Equality(Swigged.LLVM.TargetRef, Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.TargetRef.Equality(Swigged.LLVM.TargetRef, Swigged.LLVM.TargetRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/TargetRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(TargetRef left, TargetRef right)
          VB: Public Shared Operator =(left As TargetRef, right As TargetRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TargetRef
        - id: right
          type: Swigged.LLVM.TargetRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.TargetRef.op_Inequality(Swigged.LLVM.TargetRef,Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.TargetRef.op_Inequality(Swigged.LLVM.TargetRef,Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: Inequality(TargetRef, TargetRef)
        VB: Inequality(TargetRef, TargetRef)
      nameWithType:
        CSharp: TargetRef.Inequality(TargetRef, TargetRef)
        VB: TargetRef.Inequality(TargetRef, TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TargetRef.Inequality(Swigged.LLVM.TargetRef, Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.TargetRef.Inequality(Swigged.LLVM.TargetRef, Swigged.LLVM.TargetRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TargetRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/TargetRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(TargetRef left, TargetRef right)
          VB: Public Shared Operator <>(left As TargetRef, right As TargetRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TargetRef
        - id: right
          type: Swigged.LLVM.TargetRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TargetRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.ThreadLocalMode
    commentId: T:Swigged.LLVM.ThreadLocalMode
    language: CSharp
    name:
      CSharp: ThreadLocalMode
      VB: ThreadLocalMode
    nameWithType:
      CSharp: ThreadLocalMode
      VB: ThreadLocalMode
    qualifiedName:
      CSharp: Swigged.LLVM.ThreadLocalMode
      VB: Swigged.LLVM.ThreadLocalMode
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/ThreadLocalMode.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ThreadLocalMode
      path: src/swigged.llvm/ThreadLocalMode.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum ThreadLocalMode : int'
        VB: Public Enum ThreadLocalMode As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.ThreadLocalMode.NotThreadLocal
      commentId: F:Swigged.LLVM.ThreadLocalMode.NotThreadLocal
      language: CSharp
      name:
        CSharp: NotThreadLocal
        VB: NotThreadLocal
      nameWithType:
        CSharp: ThreadLocalMode.NotThreadLocal
        VB: ThreadLocalMode.NotThreadLocal
      qualifiedName:
        CSharp: Swigged.LLVM.ThreadLocalMode.NotThreadLocal
        VB: Swigged.LLVM.ThreadLocalMode.NotThreadLocal
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ThreadLocalMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: NotThreadLocal
        path: src/swigged.llvm/ThreadLocalMode.cs
        startLine: 13
      syntax:
        content:
          CSharp: NotThreadLocal = null
          VB: NotThreadLocal = Nothing
        return:
          type: Swigged.LLVM.ThreadLocalMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ThreadLocalMode.GeneralDynamicTLSModel
      commentId: F:Swigged.LLVM.ThreadLocalMode.GeneralDynamicTLSModel
      language: CSharp
      name:
        CSharp: GeneralDynamicTLSModel
        VB: GeneralDynamicTLSModel
      nameWithType:
        CSharp: ThreadLocalMode.GeneralDynamicTLSModel
        VB: ThreadLocalMode.GeneralDynamicTLSModel
      qualifiedName:
        CSharp: Swigged.LLVM.ThreadLocalMode.GeneralDynamicTLSModel
        VB: Swigged.LLVM.ThreadLocalMode.GeneralDynamicTLSModel
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ThreadLocalMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GeneralDynamicTLSModel
        path: src/swigged.llvm/ThreadLocalMode.cs
        startLine: 14
      syntax:
        content:
          CSharp: GeneralDynamicTLSModel = null
          VB: GeneralDynamicTLSModel = Nothing
        return:
          type: Swigged.LLVM.ThreadLocalMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ThreadLocalMode.LocalDynamicTLSModel
      commentId: F:Swigged.LLVM.ThreadLocalMode.LocalDynamicTLSModel
      language: CSharp
      name:
        CSharp: LocalDynamicTLSModel
        VB: LocalDynamicTLSModel
      nameWithType:
        CSharp: ThreadLocalMode.LocalDynamicTLSModel
        VB: ThreadLocalMode.LocalDynamicTLSModel
      qualifiedName:
        CSharp: Swigged.LLVM.ThreadLocalMode.LocalDynamicTLSModel
        VB: Swigged.LLVM.ThreadLocalMode.LocalDynamicTLSModel
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ThreadLocalMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LocalDynamicTLSModel
        path: src/swigged.llvm/ThreadLocalMode.cs
        startLine: 15
      syntax:
        content:
          CSharp: LocalDynamicTLSModel = null
          VB: LocalDynamicTLSModel = Nothing
        return:
          type: Swigged.LLVM.ThreadLocalMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ThreadLocalMode.InitialExecTLSModel
      commentId: F:Swigged.LLVM.ThreadLocalMode.InitialExecTLSModel
      language: CSharp
      name:
        CSharp: InitialExecTLSModel
        VB: InitialExecTLSModel
      nameWithType:
        CSharp: ThreadLocalMode.InitialExecTLSModel
        VB: ThreadLocalMode.InitialExecTLSModel
      qualifiedName:
        CSharp: Swigged.LLVM.ThreadLocalMode.InitialExecTLSModel
        VB: Swigged.LLVM.ThreadLocalMode.InitialExecTLSModel
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ThreadLocalMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitialExecTLSModel
        path: src/swigged.llvm/ThreadLocalMode.cs
        startLine: 16
      syntax:
        content:
          CSharp: InitialExecTLSModel = null
          VB: InitialExecTLSModel = Nothing
        return:
          type: Swigged.LLVM.ThreadLocalMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ThreadLocalMode.LocalExecTLSModel
      commentId: F:Swigged.LLVM.ThreadLocalMode.LocalExecTLSModel
      language: CSharp
      name:
        CSharp: LocalExecTLSModel
        VB: LocalExecTLSModel
      nameWithType:
        CSharp: ThreadLocalMode.LocalExecTLSModel
        VB: ThreadLocalMode.LocalExecTLSModel
      qualifiedName:
        CSharp: Swigged.LLVM.ThreadLocalMode.LocalExecTLSModel
        VB: Swigged.LLVM.ThreadLocalMode.LocalExecTLSModel
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ThreadLocalMode.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LocalExecTLSModel
        path: src/swigged.llvm/ThreadLocalMode.cs
        startLine: 17
      syntax:
        content:
          CSharp: LocalExecTLSModel = null
          VB: LocalExecTLSModel = Nothing
        return:
          type: Swigged.LLVM.ThreadLocalMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.TypeKind
    commentId: T:Swigged.LLVM.TypeKind
    language: CSharp
    name:
      CSharp: TypeKind
      VB: TypeKind
    nameWithType:
      CSharp: TypeKind
      VB: TypeKind
    qualifiedName:
      CSharp: Swigged.LLVM.TypeKind
      VB: Swigged.LLVM.TypeKind
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/TypeKind.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: TypeKind
      path: src/swigged.llvm/TypeKind.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum TypeKind : int'
        VB: Public Enum TypeKind As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.TypeKind.VoidTypeKind
      commentId: F:Swigged.LLVM.TypeKind.VoidTypeKind
      language: CSharp
      name:
        CSharp: VoidTypeKind
        VB: VoidTypeKind
      nameWithType:
        CSharp: TypeKind.VoidTypeKind
        VB: TypeKind.VoidTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.VoidTypeKind
        VB: Swigged.LLVM.TypeKind.VoidTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: VoidTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 13
      syntax:
        content:
          CSharp: VoidTypeKind = 0
          VB: VoidTypeKind = 0
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.HalfTypeKind
      commentId: F:Swigged.LLVM.TypeKind.HalfTypeKind
      language: CSharp
      name:
        CSharp: HalfTypeKind
        VB: HalfTypeKind
      nameWithType:
        CSharp: TypeKind.HalfTypeKind
        VB: TypeKind.HalfTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.HalfTypeKind
        VB: Swigged.LLVM.TypeKind.HalfTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: HalfTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 14
      syntax:
        content:
          CSharp: HalfTypeKind = 1
          VB: HalfTypeKind = 1
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.FloatTypeKind
      commentId: F:Swigged.LLVM.TypeKind.FloatTypeKind
      language: CSharp
      name:
        CSharp: FloatTypeKind
        VB: FloatTypeKind
      nameWithType:
        CSharp: TypeKind.FloatTypeKind
        VB: TypeKind.FloatTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.FloatTypeKind
        VB: Swigged.LLVM.TypeKind.FloatTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FloatTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 15
      syntax:
        content:
          CSharp: FloatTypeKind = 2
          VB: FloatTypeKind = 2
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.DoubleTypeKind
      commentId: F:Swigged.LLVM.TypeKind.DoubleTypeKind
      language: CSharp
      name:
        CSharp: DoubleTypeKind
        VB: DoubleTypeKind
      nameWithType:
        CSharp: TypeKind.DoubleTypeKind
        VB: TypeKind.DoubleTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.DoubleTypeKind
        VB: Swigged.LLVM.TypeKind.DoubleTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DoubleTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 16
      syntax:
        content:
          CSharp: DoubleTypeKind = 3
          VB: DoubleTypeKind = 3
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.X86_FP80TypeKind
      commentId: F:Swigged.LLVM.TypeKind.X86_FP80TypeKind
      language: CSharp
      name:
        CSharp: X86_FP80TypeKind
        VB: X86_FP80TypeKind
      nameWithType:
        CSharp: TypeKind.X86_FP80TypeKind
        VB: TypeKind.X86_FP80TypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.X86_FP80TypeKind
        VB: Swigged.LLVM.TypeKind.X86_FP80TypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: X86_FP80TypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 17
      syntax:
        content:
          CSharp: X86_FP80TypeKind = 4
          VB: X86_FP80TypeKind = 4
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.FP128TypeKind
      commentId: F:Swigged.LLVM.TypeKind.FP128TypeKind
      language: CSharp
      name:
        CSharp: FP128TypeKind
        VB: FP128TypeKind
      nameWithType:
        CSharp: TypeKind.FP128TypeKind
        VB: TypeKind.FP128TypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.FP128TypeKind
        VB: Swigged.LLVM.TypeKind.FP128TypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FP128TypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 18
      syntax:
        content:
          CSharp: FP128TypeKind = 5
          VB: FP128TypeKind = 5
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.PPC_FP128TypeKind
      commentId: F:Swigged.LLVM.TypeKind.PPC_FP128TypeKind
      language: CSharp
      name:
        CSharp: PPC_FP128TypeKind
        VB: PPC_FP128TypeKind
      nameWithType:
        CSharp: TypeKind.PPC_FP128TypeKind
        VB: TypeKind.PPC_FP128TypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.PPC_FP128TypeKind
        VB: Swigged.LLVM.TypeKind.PPC_FP128TypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PPC_FP128TypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 19
      syntax:
        content:
          CSharp: PPC_FP128TypeKind = 6
          VB: PPC_FP128TypeKind = 6
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.LabelTypeKind
      commentId: F:Swigged.LLVM.TypeKind.LabelTypeKind
      language: CSharp
      name:
        CSharp: LabelTypeKind
        VB: LabelTypeKind
      nameWithType:
        CSharp: TypeKind.LabelTypeKind
        VB: TypeKind.LabelTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.LabelTypeKind
        VB: Swigged.LLVM.TypeKind.LabelTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LabelTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 20
      syntax:
        content:
          CSharp: LabelTypeKind = 7
          VB: LabelTypeKind = 7
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.IntegerTypeKind
      commentId: F:Swigged.LLVM.TypeKind.IntegerTypeKind
      language: CSharp
      name:
        CSharp: IntegerTypeKind
        VB: IntegerTypeKind
      nameWithType:
        CSharp: TypeKind.IntegerTypeKind
        VB: TypeKind.IntegerTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.IntegerTypeKind
        VB: Swigged.LLVM.TypeKind.IntegerTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntegerTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 21
      syntax:
        content:
          CSharp: IntegerTypeKind = 8
          VB: IntegerTypeKind = 8
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.FunctionTypeKind
      commentId: F:Swigged.LLVM.TypeKind.FunctionTypeKind
      language: CSharp
      name:
        CSharp: FunctionTypeKind
        VB: FunctionTypeKind
      nameWithType:
        CSharp: TypeKind.FunctionTypeKind
        VB: TypeKind.FunctionTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.FunctionTypeKind
        VB: Swigged.LLVM.TypeKind.FunctionTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FunctionTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 22
      syntax:
        content:
          CSharp: FunctionTypeKind = 9
          VB: FunctionTypeKind = 9
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.StructTypeKind
      commentId: F:Swigged.LLVM.TypeKind.StructTypeKind
      language: CSharp
      name:
        CSharp: StructTypeKind
        VB: StructTypeKind
      nameWithType:
        CSharp: TypeKind.StructTypeKind
        VB: TypeKind.StructTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.StructTypeKind
        VB: Swigged.LLVM.TypeKind.StructTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StructTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 23
      syntax:
        content:
          CSharp: StructTypeKind = 10
          VB: StructTypeKind = 10
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.ArrayTypeKind
      commentId: F:Swigged.LLVM.TypeKind.ArrayTypeKind
      language: CSharp
      name:
        CSharp: ArrayTypeKind
        VB: ArrayTypeKind
      nameWithType:
        CSharp: TypeKind.ArrayTypeKind
        VB: TypeKind.ArrayTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.ArrayTypeKind
        VB: Swigged.LLVM.TypeKind.ArrayTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ArrayTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 24
      syntax:
        content:
          CSharp: ArrayTypeKind = 11
          VB: ArrayTypeKind = 11
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.PointerTypeKind
      commentId: F:Swigged.LLVM.TypeKind.PointerTypeKind
      language: CSharp
      name:
        CSharp: PointerTypeKind
        VB: PointerTypeKind
      nameWithType:
        CSharp: TypeKind.PointerTypeKind
        VB: TypeKind.PointerTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.PointerTypeKind
        VB: Swigged.LLVM.TypeKind.PointerTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PointerTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 25
      syntax:
        content:
          CSharp: PointerTypeKind = 12
          VB: PointerTypeKind = 12
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.VectorTypeKind
      commentId: F:Swigged.LLVM.TypeKind.VectorTypeKind
      language: CSharp
      name:
        CSharp: VectorTypeKind
        VB: VectorTypeKind
      nameWithType:
        CSharp: TypeKind.VectorTypeKind
        VB: TypeKind.VectorTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.VectorTypeKind
        VB: Swigged.LLVM.TypeKind.VectorTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: VectorTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 26
      syntax:
        content:
          CSharp: VectorTypeKind = 13
          VB: VectorTypeKind = 13
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.MetadataTypeKind
      commentId: F:Swigged.LLVM.TypeKind.MetadataTypeKind
      language: CSharp
      name:
        CSharp: MetadataTypeKind
        VB: MetadataTypeKind
      nameWithType:
        CSharp: TypeKind.MetadataTypeKind
        VB: TypeKind.MetadataTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.MetadataTypeKind
        VB: Swigged.LLVM.TypeKind.MetadataTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MetadataTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 27
      syntax:
        content:
          CSharp: MetadataTypeKind = 14
          VB: MetadataTypeKind = 14
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.X86_MMXTypeKind
      commentId: F:Swigged.LLVM.TypeKind.X86_MMXTypeKind
      language: CSharp
      name:
        CSharp: X86_MMXTypeKind
        VB: X86_MMXTypeKind
      nameWithType:
        CSharp: TypeKind.X86_MMXTypeKind
        VB: TypeKind.X86_MMXTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.X86_MMXTypeKind
        VB: Swigged.LLVM.TypeKind.X86_MMXTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: X86_MMXTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 28
      syntax:
        content:
          CSharp: X86_MMXTypeKind = 15
          VB: X86_MMXTypeKind = 15
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.TypeKind.TokenTypeKind
      commentId: F:Swigged.LLVM.TypeKind.TokenTypeKind
      language: CSharp
      name:
        CSharp: TokenTypeKind
        VB: TokenTypeKind
      nameWithType:
        CSharp: TypeKind.TokenTypeKind
        VB: TypeKind.TokenTypeKind
      qualifiedName:
        CSharp: Swigged.LLVM.TypeKind.TokenTypeKind
        VB: Swigged.LLVM.TypeKind.TokenTypeKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: TokenTypeKind
        path: src/swigged.llvm/TypeKind.cs
        startLine: 29
      syntax:
        content:
          CSharp: TokenTypeKind = 16
          VB: TokenTypeKind = 16
        return:
          type: Swigged.LLVM.TypeKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.TypeRef
    commentId: T:Swigged.LLVM.TypeRef
    language: CSharp
    name:
      CSharp: TypeRef
      VB: TypeRef
    nameWithType:
      CSharp: TypeRef
      VB: TypeRef
    qualifiedName:
      CSharp: Swigged.LLVM.TypeRef
      VB: Swigged.LLVM.TypeRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/Additional/TypeRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: TypeRef
      path: src/swigged.llvm/Additional/TypeRef.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public struct TypeRef : System.IEquatable<TypeRef>'
        VB: >-
          Public Structure TypeRef

              Implements System.IEquatable(Of TypeRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.TypeRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.TypeRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: TypeRef(System.IntPtr)
        VB: TypeRef(System.IntPtr)
      nameWithType:
        CSharp: TypeRef.TypeRef(System.IntPtr)
        VB: TypeRef.TypeRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.TypeRef.TypeRef(System.IntPtr)
        VB: Swigged.LLVM.TypeRef.TypeRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/TypeRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public TypeRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.TypeRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TypeRef.Value
      commentId: F:Swigged.LLVM.TypeRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: TypeRef.Value
        VB: TypeRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.TypeRef.Value
        VB: Swigged.LLVM.TypeRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/TypeRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TypeRef.Equals(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.TypeRef.Equals(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: Equals(TypeRef)
        VB: Equals(TypeRef)
      nameWithType:
        CSharp: TypeRef.Equals(TypeRef)
        VB: TypeRef.Equals(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TypeRef.Equals(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.TypeRef.Equals(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TypeRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(TypeRef other)
          VB: Public Function Equals(other As TypeRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.TypeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TypeRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.TypeRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.TypeRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: TypeRef.Equals(Object)
        VB: TypeRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.TypeRef.Equals(System.Object)
        VB: Swigged.LLVM.TypeRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/TypeRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TypeRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TypeRef.GetHashCode
      commentId: M:Swigged.LLVM.TypeRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: TypeRef.GetHashCode()
        VB: TypeRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.TypeRef.GetHashCode()
        VB: Swigged.LLVM.TypeRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/TypeRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.TypeRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.TypeRef.op_Equality(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.TypeRef.op_Equality(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: Equality(TypeRef, TypeRef)
        VB: Equality(TypeRef, TypeRef)
      nameWithType:
        CSharp: TypeRef.Equality(TypeRef, TypeRef)
        VB: TypeRef.Equality(TypeRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TypeRef.Equality(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.TypeRef.Equality(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/TypeRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(TypeRef left, TypeRef right)
          VB: Public Shared Operator =(left As TypeRef, right As TypeRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TypeRef
        - id: right
          type: Swigged.LLVM.TypeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TypeRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.TypeRef.op_Inequality(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.TypeRef.op_Inequality(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: Inequality(TypeRef, TypeRef)
        VB: Inequality(TypeRef, TypeRef)
      nameWithType:
        CSharp: TypeRef.Inequality(TypeRef, TypeRef)
        VB: TypeRef.Inequality(TypeRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.TypeRef.Inequality(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.TypeRef.Inequality(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/TypeRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(TypeRef left, TypeRef right)
          VB: Public Shared Operator <>(left As TypeRef, right As TypeRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.TypeRef
        - id: right
          type: Swigged.LLVM.TypeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.TypeRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.TypeRef.ToString
      commentId: M:Swigged.LLVM.TypeRef.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: TypeRef.ToString()
        VB: TypeRef.ToString()
      qualifiedName:
        CSharp: Swigged.LLVM.TypeRef.ToString()
        VB: Swigged.LLVM.TypeRef.ToString()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Additional/TypeRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ToString
        path: src/swigged.llvm/Additional/TypeRef.cs
        startLine: 6
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Swigged.LLVM.TypeRef.ToString*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Swigged.LLVM.UseRef
    commentId: T:Swigged.LLVM.UseRef
    language: CSharp
    name:
      CSharp: UseRef
      VB: UseRef
    nameWithType:
      CSharp: UseRef
      VB: UseRef
    qualifiedName:
      CSharp: Swigged.LLVM.UseRef
      VB: Swigged.LLVM.UseRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/UseRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: UseRef
      path: src/swigged.llvm/UseRef.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public struct UseRef : System.IEquatable<UseRef>'
        VB: >-
          Public Structure UseRef

              Implements System.IEquatable(Of UseRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.UseRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.UseRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: UseRef(System.IntPtr)
        VB: UseRef(System.IntPtr)
      nameWithType:
        CSharp: UseRef.UseRef(System.IntPtr)
        VB: UseRef.UseRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.UseRef.UseRef(System.IntPtr)
        VB: Swigged.LLVM.UseRef.UseRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/UseRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/UseRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public UseRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.UseRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.UseRef.Value
      commentId: F:Swigged.LLVM.UseRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: UseRef.Value
        VB: UseRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.UseRef.Value
        VB: Swigged.LLVM.UseRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/UseRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/UseRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.UseRef.Equals(Swigged.LLVM.UseRef)
      commentId: M:Swigged.LLVM.UseRef.Equals(Swigged.LLVM.UseRef)
      language: CSharp
      name:
        CSharp: Equals(UseRef)
        VB: Equals(UseRef)
      nameWithType:
        CSharp: UseRef.Equals(UseRef)
        VB: UseRef.Equals(UseRef)
      qualifiedName:
        CSharp: Swigged.LLVM.UseRef.Equals(Swigged.LLVM.UseRef)
        VB: Swigged.LLVM.UseRef.Equals(Swigged.LLVM.UseRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/UseRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/UseRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(UseRef other)
          VB: Public Function Equals(other As UseRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.UseRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.UseRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.UseRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.UseRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: UseRef.Equals(Object)
        VB: UseRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.UseRef.Equals(System.Object)
        VB: Swigged.LLVM.UseRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/UseRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/UseRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.UseRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.UseRef.GetHashCode
      commentId: M:Swigged.LLVM.UseRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: UseRef.GetHashCode()
        VB: UseRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.UseRef.GetHashCode()
        VB: Swigged.LLVM.UseRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/UseRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/UseRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.UseRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.UseRef.op_Equality(Swigged.LLVM.UseRef,Swigged.LLVM.UseRef)
      commentId: M:Swigged.LLVM.UseRef.op_Equality(Swigged.LLVM.UseRef,Swigged.LLVM.UseRef)
      language: CSharp
      name:
        CSharp: Equality(UseRef, UseRef)
        VB: Equality(UseRef, UseRef)
      nameWithType:
        CSharp: UseRef.Equality(UseRef, UseRef)
        VB: UseRef.Equality(UseRef, UseRef)
      qualifiedName:
        CSharp: Swigged.LLVM.UseRef.Equality(Swigged.LLVM.UseRef, Swigged.LLVM.UseRef)
        VB: Swigged.LLVM.UseRef.Equality(Swigged.LLVM.UseRef, Swigged.LLVM.UseRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/UseRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/UseRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(UseRef left, UseRef right)
          VB: Public Shared Operator =(left As UseRef, right As UseRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.UseRef
        - id: right
          type: Swigged.LLVM.UseRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.UseRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.UseRef.op_Inequality(Swigged.LLVM.UseRef,Swigged.LLVM.UseRef)
      commentId: M:Swigged.LLVM.UseRef.op_Inequality(Swigged.LLVM.UseRef,Swigged.LLVM.UseRef)
      language: CSharp
      name:
        CSharp: Inequality(UseRef, UseRef)
        VB: Inequality(UseRef, UseRef)
      nameWithType:
        CSharp: UseRef.Inequality(UseRef, UseRef)
        VB: UseRef.Inequality(UseRef, UseRef)
      qualifiedName:
        CSharp: Swigged.LLVM.UseRef.Inequality(Swigged.LLVM.UseRef, Swigged.LLVM.UseRef)
        VB: Swigged.LLVM.UseRef.Inequality(Swigged.LLVM.UseRef, Swigged.LLVM.UseRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/UseRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/UseRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(UseRef left, UseRef right)
          VB: Public Shared Operator <>(left As UseRef, right As UseRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.UseRef
        - id: right
          type: Swigged.LLVM.UseRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.UseRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Swigged.LLVM.ValueKind
    commentId: T:Swigged.LLVM.ValueKind
    language: CSharp
    name:
      CSharp: ValueKind
      VB: ValueKind
    nameWithType:
      CSharp: ValueKind
      VB: ValueKind
    qualifiedName:
      CSharp: Swigged.LLVM.ValueKind
      VB: Swigged.LLVM.ValueKind
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/ValueKind.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ValueKind
      path: src/swigged.llvm/ValueKind.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum ValueKind : int'
        VB: Public Enum ValueKind As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.ValueKind.ArgumentValueKind
      commentId: F:Swigged.LLVM.ValueKind.ArgumentValueKind
      language: CSharp
      name:
        CSharp: ArgumentValueKind
        VB: ArgumentValueKind
      nameWithType:
        CSharp: ValueKind.ArgumentValueKind
        VB: ValueKind.ArgumentValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ArgumentValueKind
        VB: Swigged.LLVM.ValueKind.ArgumentValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ArgumentValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 13
      syntax:
        content:
          CSharp: ArgumentValueKind = 0
          VB: ArgumentValueKind = 0
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.BasicBlockValueKind
      commentId: F:Swigged.LLVM.ValueKind.BasicBlockValueKind
      language: CSharp
      name:
        CSharp: BasicBlockValueKind
        VB: BasicBlockValueKind
      nameWithType:
        CSharp: ValueKind.BasicBlockValueKind
        VB: ValueKind.BasicBlockValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.BasicBlockValueKind
        VB: Swigged.LLVM.ValueKind.BasicBlockValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BasicBlockValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 14
      syntax:
        content:
          CSharp: BasicBlockValueKind = 1
          VB: BasicBlockValueKind = 1
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.MemoryUseValueKind
      commentId: F:Swigged.LLVM.ValueKind.MemoryUseValueKind
      language: CSharp
      name:
        CSharp: MemoryUseValueKind
        VB: MemoryUseValueKind
      nameWithType:
        CSharp: ValueKind.MemoryUseValueKind
        VB: ValueKind.MemoryUseValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.MemoryUseValueKind
        VB: Swigged.LLVM.ValueKind.MemoryUseValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MemoryUseValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 15
      syntax:
        content:
          CSharp: MemoryUseValueKind = 2
          VB: MemoryUseValueKind = 2
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.MemoryDefValueKind
      commentId: F:Swigged.LLVM.ValueKind.MemoryDefValueKind
      language: CSharp
      name:
        CSharp: MemoryDefValueKind
        VB: MemoryDefValueKind
      nameWithType:
        CSharp: ValueKind.MemoryDefValueKind
        VB: ValueKind.MemoryDefValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.MemoryDefValueKind
        VB: Swigged.LLVM.ValueKind.MemoryDefValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MemoryDefValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 16
      syntax:
        content:
          CSharp: MemoryDefValueKind = 3
          VB: MemoryDefValueKind = 3
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.MemoryPhiValueKind
      commentId: F:Swigged.LLVM.ValueKind.MemoryPhiValueKind
      language: CSharp
      name:
        CSharp: MemoryPhiValueKind
        VB: MemoryPhiValueKind
      nameWithType:
        CSharp: ValueKind.MemoryPhiValueKind
        VB: ValueKind.MemoryPhiValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.MemoryPhiValueKind
        VB: Swigged.LLVM.ValueKind.MemoryPhiValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MemoryPhiValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 17
      syntax:
        content:
          CSharp: MemoryPhiValueKind = 4
          VB: MemoryPhiValueKind = 4
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.FunctionValueKind
      commentId: F:Swigged.LLVM.ValueKind.FunctionValueKind
      language: CSharp
      name:
        CSharp: FunctionValueKind
        VB: FunctionValueKind
      nameWithType:
        CSharp: ValueKind.FunctionValueKind
        VB: ValueKind.FunctionValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.FunctionValueKind
        VB: Swigged.LLVM.ValueKind.FunctionValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FunctionValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 18
      syntax:
        content:
          CSharp: FunctionValueKind = 5
          VB: FunctionValueKind = 5
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.GlobalAliasValueKind
      commentId: F:Swigged.LLVM.ValueKind.GlobalAliasValueKind
      language: CSharp
      name:
        CSharp: GlobalAliasValueKind
        VB: GlobalAliasValueKind
      nameWithType:
        CSharp: ValueKind.GlobalAliasValueKind
        VB: ValueKind.GlobalAliasValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.GlobalAliasValueKind
        VB: Swigged.LLVM.ValueKind.GlobalAliasValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GlobalAliasValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 19
      syntax:
        content:
          CSharp: GlobalAliasValueKind = 6
          VB: GlobalAliasValueKind = 6
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.GlobalIFuncValueKind
      commentId: F:Swigged.LLVM.ValueKind.GlobalIFuncValueKind
      language: CSharp
      name:
        CSharp: GlobalIFuncValueKind
        VB: GlobalIFuncValueKind
      nameWithType:
        CSharp: ValueKind.GlobalIFuncValueKind
        VB: ValueKind.GlobalIFuncValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.GlobalIFuncValueKind
        VB: Swigged.LLVM.ValueKind.GlobalIFuncValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GlobalIFuncValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 20
      syntax:
        content:
          CSharp: GlobalIFuncValueKind = 7
          VB: GlobalIFuncValueKind = 7
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.GlobalVariableValueKind
      commentId: F:Swigged.LLVM.ValueKind.GlobalVariableValueKind
      language: CSharp
      name:
        CSharp: GlobalVariableValueKind
        VB: GlobalVariableValueKind
      nameWithType:
        CSharp: ValueKind.GlobalVariableValueKind
        VB: ValueKind.GlobalVariableValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.GlobalVariableValueKind
        VB: Swigged.LLVM.ValueKind.GlobalVariableValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GlobalVariableValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 21
      syntax:
        content:
          CSharp: GlobalVariableValueKind = 8
          VB: GlobalVariableValueKind = 8
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.BlockAddressValueKind
      commentId: F:Swigged.LLVM.ValueKind.BlockAddressValueKind
      language: CSharp
      name:
        CSharp: BlockAddressValueKind
        VB: BlockAddressValueKind
      nameWithType:
        CSharp: ValueKind.BlockAddressValueKind
        VB: ValueKind.BlockAddressValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.BlockAddressValueKind
        VB: Swigged.LLVM.ValueKind.BlockAddressValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BlockAddressValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 22
      syntax:
        content:
          CSharp: BlockAddressValueKind = 9
          VB: BlockAddressValueKind = 9
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantExprValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantExprValueKind
      language: CSharp
      name:
        CSharp: ConstantExprValueKind
        VB: ConstantExprValueKind
      nameWithType:
        CSharp: ValueKind.ConstantExprValueKind
        VB: ValueKind.ConstantExprValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantExprValueKind
        VB: Swigged.LLVM.ValueKind.ConstantExprValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantExprValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 23
      syntax:
        content:
          CSharp: ConstantExprValueKind = 10
          VB: ConstantExprValueKind = 10
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantArrayValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantArrayValueKind
      language: CSharp
      name:
        CSharp: ConstantArrayValueKind
        VB: ConstantArrayValueKind
      nameWithType:
        CSharp: ValueKind.ConstantArrayValueKind
        VB: ValueKind.ConstantArrayValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantArrayValueKind
        VB: Swigged.LLVM.ValueKind.ConstantArrayValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantArrayValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 24
      syntax:
        content:
          CSharp: ConstantArrayValueKind = 11
          VB: ConstantArrayValueKind = 11
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantStructValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantStructValueKind
      language: CSharp
      name:
        CSharp: ConstantStructValueKind
        VB: ConstantStructValueKind
      nameWithType:
        CSharp: ValueKind.ConstantStructValueKind
        VB: ValueKind.ConstantStructValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantStructValueKind
        VB: Swigged.LLVM.ValueKind.ConstantStructValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantStructValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 25
      syntax:
        content:
          CSharp: ConstantStructValueKind = 12
          VB: ConstantStructValueKind = 12
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantVectorValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantVectorValueKind
      language: CSharp
      name:
        CSharp: ConstantVectorValueKind
        VB: ConstantVectorValueKind
      nameWithType:
        CSharp: ValueKind.ConstantVectorValueKind
        VB: ValueKind.ConstantVectorValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantVectorValueKind
        VB: Swigged.LLVM.ValueKind.ConstantVectorValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantVectorValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 26
      syntax:
        content:
          CSharp: ConstantVectorValueKind = 13
          VB: ConstantVectorValueKind = 13
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.UndefValueValueKind
      commentId: F:Swigged.LLVM.ValueKind.UndefValueValueKind
      language: CSharp
      name:
        CSharp: UndefValueValueKind
        VB: UndefValueValueKind
      nameWithType:
        CSharp: ValueKind.UndefValueValueKind
        VB: ValueKind.UndefValueValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.UndefValueValueKind
        VB: Swigged.LLVM.ValueKind.UndefValueValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: UndefValueValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 27
      syntax:
        content:
          CSharp: UndefValueValueKind = 14
          VB: UndefValueValueKind = 14
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantAggregateZeroValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantAggregateZeroValueKind
      language: CSharp
      name:
        CSharp: ConstantAggregateZeroValueKind
        VB: ConstantAggregateZeroValueKind
      nameWithType:
        CSharp: ValueKind.ConstantAggregateZeroValueKind
        VB: ValueKind.ConstantAggregateZeroValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantAggregateZeroValueKind
        VB: Swigged.LLVM.ValueKind.ConstantAggregateZeroValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantAggregateZeroValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 28
      syntax:
        content:
          CSharp: ConstantAggregateZeroValueKind = 15
          VB: ConstantAggregateZeroValueKind = 15
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantDataArrayValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantDataArrayValueKind
      language: CSharp
      name:
        CSharp: ConstantDataArrayValueKind
        VB: ConstantDataArrayValueKind
      nameWithType:
        CSharp: ValueKind.ConstantDataArrayValueKind
        VB: ValueKind.ConstantDataArrayValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantDataArrayValueKind
        VB: Swigged.LLVM.ValueKind.ConstantDataArrayValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantDataArrayValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 29
      syntax:
        content:
          CSharp: ConstantDataArrayValueKind = 16
          VB: ConstantDataArrayValueKind = 16
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantDataVectorValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantDataVectorValueKind
      language: CSharp
      name:
        CSharp: ConstantDataVectorValueKind
        VB: ConstantDataVectorValueKind
      nameWithType:
        CSharp: ValueKind.ConstantDataVectorValueKind
        VB: ValueKind.ConstantDataVectorValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantDataVectorValueKind
        VB: Swigged.LLVM.ValueKind.ConstantDataVectorValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantDataVectorValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 30
      syntax:
        content:
          CSharp: ConstantDataVectorValueKind = 17
          VB: ConstantDataVectorValueKind = 17
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantIntValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantIntValueKind
      language: CSharp
      name:
        CSharp: ConstantIntValueKind
        VB: ConstantIntValueKind
      nameWithType:
        CSharp: ValueKind.ConstantIntValueKind
        VB: ValueKind.ConstantIntValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantIntValueKind
        VB: Swigged.LLVM.ValueKind.ConstantIntValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantIntValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 31
      syntax:
        content:
          CSharp: ConstantIntValueKind = 18
          VB: ConstantIntValueKind = 18
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantFPValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantFPValueKind
      language: CSharp
      name:
        CSharp: ConstantFPValueKind
        VB: ConstantFPValueKind
      nameWithType:
        CSharp: ValueKind.ConstantFPValueKind
        VB: ValueKind.ConstantFPValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantFPValueKind
        VB: Swigged.LLVM.ValueKind.ConstantFPValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantFPValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 32
      syntax:
        content:
          CSharp: ConstantFPValueKind = 19
          VB: ConstantFPValueKind = 19
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantPointerNullValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantPointerNullValueKind
      language: CSharp
      name:
        CSharp: ConstantPointerNullValueKind
        VB: ConstantPointerNullValueKind
      nameWithType:
        CSharp: ValueKind.ConstantPointerNullValueKind
        VB: ValueKind.ConstantPointerNullValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantPointerNullValueKind
        VB: Swigged.LLVM.ValueKind.ConstantPointerNullValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantPointerNullValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 33
      syntax:
        content:
          CSharp: ConstantPointerNullValueKind = 20
          VB: ConstantPointerNullValueKind = 20
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.ConstantTokenNoneValueKind
      commentId: F:Swigged.LLVM.ValueKind.ConstantTokenNoneValueKind
      language: CSharp
      name:
        CSharp: ConstantTokenNoneValueKind
        VB: ConstantTokenNoneValueKind
      nameWithType:
        CSharp: ValueKind.ConstantTokenNoneValueKind
        VB: ValueKind.ConstantTokenNoneValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.ConstantTokenNoneValueKind
        VB: Swigged.LLVM.ValueKind.ConstantTokenNoneValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstantTokenNoneValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 34
      syntax:
        content:
          CSharp: ConstantTokenNoneValueKind = 21
          VB: ConstantTokenNoneValueKind = 21
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.MetadataAsValueValueKind
      commentId: F:Swigged.LLVM.ValueKind.MetadataAsValueValueKind
      language: CSharp
      name:
        CSharp: MetadataAsValueValueKind
        VB: MetadataAsValueValueKind
      nameWithType:
        CSharp: ValueKind.MetadataAsValueValueKind
        VB: ValueKind.MetadataAsValueValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.MetadataAsValueValueKind
        VB: Swigged.LLVM.ValueKind.MetadataAsValueValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MetadataAsValueValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 35
      syntax:
        content:
          CSharp: MetadataAsValueValueKind = 22
          VB: MetadataAsValueValueKind = 22
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.InlineAsmValueKind
      commentId: F:Swigged.LLVM.ValueKind.InlineAsmValueKind
      language: CSharp
      name:
        CSharp: InlineAsmValueKind
        VB: InlineAsmValueKind
      nameWithType:
        CSharp: ValueKind.InlineAsmValueKind
        VB: ValueKind.InlineAsmValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.InlineAsmValueKind
        VB: Swigged.LLVM.ValueKind.InlineAsmValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InlineAsmValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 36
      syntax:
        content:
          CSharp: InlineAsmValueKind = 23
          VB: InlineAsmValueKind = 23
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.ValueKind.InstructionValueKind
      commentId: F:Swigged.LLVM.ValueKind.InstructionValueKind
      language: CSharp
      name:
        CSharp: InstructionValueKind
        VB: InstructionValueKind
      nameWithType:
        CSharp: ValueKind.InstructionValueKind
        VB: ValueKind.InstructionValueKind
      qualifiedName:
        CSharp: Swigged.LLVM.ValueKind.InstructionValueKind
        VB: Swigged.LLVM.ValueKind.InstructionValueKind
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueKind.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InstructionValueKind
        path: src/swigged.llvm/ValueKind.cs
        startLine: 37
      syntax:
        content:
          CSharp: InstructionValueKind = 24
          VB: InstructionValueKind = 24
        return:
          type: Swigged.LLVM.ValueKind
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.ValueRef
    commentId: T:Swigged.LLVM.ValueRef
    language: CSharp
    name:
      CSharp: ValueRef
      VB: ValueRef
    nameWithType:
      CSharp: ValueRef
      VB: ValueRef
    qualifiedName:
      CSharp: Swigged.LLVM.ValueRef
      VB: Swigged.LLVM.ValueRef
    type: Struct
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/Additional/ValueRef.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: ValueRef
      path: src/swigged.llvm/Additional/ValueRef.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public struct ValueRef : System.IEquatable<ValueRef>'
        VB: >-
          Public Structure ValueRef

              Implements System.IEquatable(Of ValueRef)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Swigged.LLVM.ValueRef.#ctor(System.IntPtr)
      commentId: M:Swigged.LLVM.ValueRef.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: ValueRef(System.IntPtr)
        VB: ValueRef(System.IntPtr)
      nameWithType:
        CSharp: ValueRef.ValueRef(System.IntPtr)
        VB: ValueRef.ValueRef(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.ValueRef.ValueRef(System.IntPtr)
        VB: Swigged.LLVM.ValueRef.ValueRef(System.IntPtr)
      type: Constructor
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: .ctor
        path: src/swigged.llvm/ValueRef.cs
        startLine: 13
      syntax:
        content:
          CSharp: public ValueRef(System.IntPtr cPtr)
          VB: Public Sub New(cPtr As System.IntPtr)
        parameters:
        - id: cPtr
          type: System.IntPtr
      overload: Swigged.LLVM.ValueRef.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ValueRef.Value
      commentId: F:Swigged.LLVM.ValueRef.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ValueRef.Value
        VB: ValueRef.Value
      qualifiedName:
        CSharp: Swigged.LLVM.ValueRef.Value
        VB: Swigged.LLVM.ValueRef.Value
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Value
        path: src/swigged.llvm/ValueRef.cs
        startLine: 18
      syntax:
        content:
          CSharp: public System.IntPtr Value
          VB: Public Value As System.IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ValueRef.Equals(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.ValueRef.Equals(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: Equals(ValueRef)
        VB: Equals(ValueRef)
      nameWithType:
        CSharp: ValueRef.Equals(ValueRef)
        VB: ValueRef.Equals(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ValueRef.Equals(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.ValueRef.Equals(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ValueRef.cs
        startLine: 20
      syntax:
        content:
          CSharp: public bool Equals(ValueRef other)
          VB: Public Function Equals(other As ValueRef) As Boolean
        parameters:
        - id: other
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ValueRef.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Swigged.LLVM.ValueRef.Equals(System.Object)
      commentId: M:Swigged.LLVM.ValueRef.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ValueRef.Equals(Object)
        VB: ValueRef.Equals(Object)
      qualifiedName:
        CSharp: Swigged.LLVM.ValueRef.Equals(System.Object)
        VB: Swigged.LLVM.ValueRef.Equals(System.Object)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Equals
        path: src/swigged.llvm/ValueRef.cs
        startLine: 25
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ValueRef.Equals*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ValueRef.GetHashCode
      commentId: M:Swigged.LLVM.ValueRef.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ValueRef.GetHashCode()
        VB: ValueRef.GetHashCode()
      qualifiedName:
        CSharp: Swigged.LLVM.ValueRef.GetHashCode()
        VB: Swigged.LLVM.ValueRef.GetHashCode()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetHashCode
        path: src/swigged.llvm/ValueRef.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Swigged.LLVM.ValueRef.GetHashCode*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Swigged.LLVM.ValueRef.op_Equality(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.ValueRef.op_Equality(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: Equality(ValueRef, ValueRef)
        VB: Equality(ValueRef, ValueRef)
      nameWithType:
        CSharp: ValueRef.Equality(ValueRef, ValueRef)
        VB: ValueRef.Equality(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ValueRef.Equality(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.ValueRef.Equality(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Equality
        path: src/swigged.llvm/ValueRef.cs
        startLine: 36
      syntax:
        content:
          CSharp: public static bool operator ==(ValueRef left, ValueRef right)
          VB: Public Shared Operator =(left As ValueRef, right As ValueRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ValueRef
        - id: right
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ValueRef.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.ValueRef.op_Inequality(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.ValueRef.op_Inequality(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: Inequality(ValueRef, ValueRef)
        VB: Inequality(ValueRef, ValueRef)
      nameWithType:
        CSharp: ValueRef.Inequality(ValueRef, ValueRef)
        VB: ValueRef.Inequality(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.ValueRef.Inequality(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.ValueRef.Inequality(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Operator
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/ValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: op_Inequality
        path: src/swigged.llvm/ValueRef.cs
        startLine: 41
      syntax:
        content:
          CSharp: public static bool operator !=(ValueRef left, ValueRef right)
          VB: Public Shared Operator <>(left As ValueRef, right As ValueRef) As Boolean
        parameters:
        - id: left
          type: Swigged.LLVM.ValueRef
        - id: right
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.ValueRef.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.ValueRef.ToString
      commentId: M:Swigged.LLVM.ValueRef.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ValueRef.ToString()
        VB: ValueRef.ToString()
      qualifiedName:
        CSharp: Swigged.LLVM.ValueRef.ToString()
        VB: Swigged.LLVM.ValueRef.ToString()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Additional/ValueRef.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ToString
        path: src/swigged.llvm/Additional/ValueRef.cs
        startLine: 6
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Swigged.LLVM.ValueRef.ToString*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Swigged.LLVM.VerifierFailureAction
    commentId: T:Swigged.LLVM.VerifierFailureAction
    language: CSharp
    name:
      CSharp: VerifierFailureAction
      VB: VerifierFailureAction
    nameWithType:
      CSharp: VerifierFailureAction
      VB: VerifierFailureAction
    qualifiedName:
      CSharp: Swigged.LLVM.VerifierFailureAction
      VB: Swigged.LLVM.VerifierFailureAction
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/VerifierFailureAction.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: VerifierFailureAction
      path: src/swigged.llvm/VerifierFailureAction.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum VerifierFailureAction : int'
        VB: Public Enum VerifierFailureAction As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.VerifierFailureAction.AbortProcessAction
      commentId: F:Swigged.LLVM.VerifierFailureAction.AbortProcessAction
      language: CSharp
      name:
        CSharp: AbortProcessAction
        VB: AbortProcessAction
      nameWithType:
        CSharp: VerifierFailureAction.AbortProcessAction
        VB: VerifierFailureAction.AbortProcessAction
      qualifiedName:
        CSharp: Swigged.LLVM.VerifierFailureAction.AbortProcessAction
        VB: Swigged.LLVM.VerifierFailureAction.AbortProcessAction
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/VerifierFailureAction.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AbortProcessAction
        path: src/swigged.llvm/VerifierFailureAction.cs
        startLine: 13
      syntax:
        content:
          CSharp: AbortProcessAction = 0
          VB: AbortProcessAction = 0
        return:
          type: Swigged.LLVM.VerifierFailureAction
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.VerifierFailureAction.PrintMessageAction
      commentId: F:Swigged.LLVM.VerifierFailureAction.PrintMessageAction
      language: CSharp
      name:
        CSharp: PrintMessageAction
        VB: PrintMessageAction
      nameWithType:
        CSharp: VerifierFailureAction.PrintMessageAction
        VB: VerifierFailureAction.PrintMessageAction
      qualifiedName:
        CSharp: Swigged.LLVM.VerifierFailureAction.PrintMessageAction
        VB: Swigged.LLVM.VerifierFailureAction.PrintMessageAction
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/VerifierFailureAction.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PrintMessageAction
        path: src/swigged.llvm/VerifierFailureAction.cs
        startLine: 14
      syntax:
        content:
          CSharp: PrintMessageAction = 1
          VB: PrintMessageAction = 1
        return:
          type: Swigged.LLVM.VerifierFailureAction
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.VerifierFailureAction.ReturnStatusAction
      commentId: F:Swigged.LLVM.VerifierFailureAction.ReturnStatusAction
      language: CSharp
      name:
        CSharp: ReturnStatusAction
        VB: ReturnStatusAction
      nameWithType:
        CSharp: VerifierFailureAction.ReturnStatusAction
        VB: VerifierFailureAction.ReturnStatusAction
      qualifiedName:
        CSharp: Swigged.LLVM.VerifierFailureAction.ReturnStatusAction
        VB: Swigged.LLVM.VerifierFailureAction.ReturnStatusAction
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/VerifierFailureAction.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ReturnStatusAction
        path: src/swigged.llvm/VerifierFailureAction.cs
        startLine: 15
      syntax:
        content:
          CSharp: ReturnStatusAction = 2
          VB: ReturnStatusAction = 2
        return:
          type: Swigged.LLVM.VerifierFailureAction
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.Visibility
    commentId: T:Swigged.LLVM.Visibility
    language: CSharp
    name:
      CSharp: Visibility
      VB: Visibility
    nameWithType:
      CSharp: Visibility
      VB: Visibility
    qualifiedName:
      CSharp: Swigged.LLVM.Visibility
      VB: Swigged.LLVM.Visibility
    type: Enum
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/Visibility.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: Visibility
      path: src/swigged.llvm/Visibility.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public enum Visibility : int'
        VB: Public Enum Visibility As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Swigged.LLVM.Visibility.DefaultVisibility
      commentId: F:Swigged.LLVM.Visibility.DefaultVisibility
      language: CSharp
      name:
        CSharp: DefaultVisibility
        VB: DefaultVisibility
      nameWithType:
        CSharp: Visibility.DefaultVisibility
        VB: Visibility.DefaultVisibility
      qualifiedName:
        CSharp: Swigged.LLVM.Visibility.DefaultVisibility
        VB: Swigged.LLVM.Visibility.DefaultVisibility
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Visibility.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DefaultVisibility
        path: src/swigged.llvm/Visibility.cs
        startLine: 13
      syntax:
        content:
          CSharp: DefaultVisibility = 0
          VB: DefaultVisibility = 0
        return:
          type: Swigged.LLVM.Visibility
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Visibility.HiddenVisibility
      commentId: F:Swigged.LLVM.Visibility.HiddenVisibility
      language: CSharp
      name:
        CSharp: HiddenVisibility
        VB: HiddenVisibility
      nameWithType:
        CSharp: Visibility.HiddenVisibility
        VB: Visibility.HiddenVisibility
      qualifiedName:
        CSharp: Swigged.LLVM.Visibility.HiddenVisibility
        VB: Swigged.LLVM.Visibility.HiddenVisibility
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Visibility.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: HiddenVisibility
        path: src/swigged.llvm/Visibility.cs
        startLine: 14
      syntax:
        content:
          CSharp: HiddenVisibility = 1
          VB: HiddenVisibility = 1
        return:
          type: Swigged.LLVM.Visibility
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Swigged.LLVM.Visibility.ProtectedVisibility
      commentId: F:Swigged.LLVM.Visibility.ProtectedVisibility
      language: CSharp
      name:
        CSharp: ProtectedVisibility
        VB: ProtectedVisibility
      nameWithType:
        CSharp: Visibility.ProtectedVisibility
        VB: Visibility.ProtectedVisibility
      qualifiedName:
        CSharp: Swigged.LLVM.Visibility.ProtectedVisibility
        VB: Swigged.LLVM.Visibility.ProtectedVisibility
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/Visibility.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ProtectedVisibility
        path: src/swigged.llvm/Visibility.cs
        startLine: 15
      syntax:
        content:
          CSharp: ProtectedVisibility = 2
          VB: ProtectedVisibility = 2
        return:
          type: Swigged.LLVM.Visibility
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Swigged.LLVM.LLVM
    commentId: T:Swigged.LLVM.LLVM
    language: CSharp
    name:
      CSharp: LLVM
      VB: LLVM
    nameWithType:
      CSharp: LLVM
      VB: LLVM
    qualifiedName:
      CSharp: Swigged.LLVM.LLVM
      VB: Swigged.LLVM.LLVM
    type: Class
    assemblies:
    - swigged.llvm
    namespace: Swigged.LLVM
    source:
      remote:
        path: src/swigged.llvm/LLVM.cs
        branch: master
        repo: https://github.com/kaby76/swigged-llvm-docfx.git
      id: LLVM
      path: src/swigged.llvm/LLVM.cs
      startLine: 12
    syntax:
      content:
        CSharp: 'public class LLVM : object'
        VB: >-
          Public Class LLVM

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Swigged.LLVM.LLVM.InitializeCore(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeCore(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeCore(PassRegistryRef)
        VB: InitializeCore(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeCore(PassRegistryRef)
        VB: LLVM.InitializeCore(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeCore(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeCore(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeCore
        path: src/swigged.llvm/LLVM.cs
        startLine: 13
      syntax:
        content:
          CSharp: public static void InitializeCore(PassRegistryRef R)
          VB: Public Shared Sub InitializeCore(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeCore*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Shutdown
      commentId: M:Swigged.LLVM.LLVM.Shutdown
      language: CSharp
      name:
        CSharp: Shutdown()
        VB: Shutdown()
      nameWithType:
        CSharp: LLVM.Shutdown()
        VB: LLVM.Shutdown()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Shutdown()
        VB: Swigged.LLVM.LLVM.Shutdown()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Shutdown
        path: src/swigged.llvm/LLVM.cs
        startLine: 17
      syntax:
        content:
          CSharp: public static void Shutdown()
          VB: Public Shared Sub Shutdown
      overload: Swigged.LLVM.LLVM.Shutdown*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateMessage(System.String)
      commentId: M:Swigged.LLVM.LLVM.CreateMessage(System.String)
      language: CSharp
      name:
        CSharp: CreateMessage(String)
        VB: CreateMessage(String)
      nameWithType:
        CSharp: LLVM.CreateMessage(String)
        VB: LLVM.CreateMessage(String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateMessage(System.String)
        VB: Swigged.LLVM.LLVM.CreateMessage(System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateMessage
        path: src/swigged.llvm/LLVM.cs
        startLine: 21
      syntax:
        content:
          CSharp: public static string CreateMessage(string Message)
          VB: Public Shared Function CreateMessage(Message As String) As String
        parameters:
        - id: Message
          type: System.String
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.CreateMessage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeMessage(System.String)
      commentId: M:Swigged.LLVM.LLVM.DisposeMessage(System.String)
      language: CSharp
      name:
        CSharp: DisposeMessage(String)
        VB: DisposeMessage(String)
      nameWithType:
        CSharp: LLVM.DisposeMessage(String)
        VB: LLVM.DisposeMessage(String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeMessage(System.String)
        VB: Swigged.LLVM.LLVM.DisposeMessage(System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeMessage
        path: src/swigged.llvm/LLVM.cs
        startLine: 26
      syntax:
        content:
          CSharp: public static void DisposeMessage(string Message)
          VB: Public Shared Sub DisposeMessage(Message As String)
        parameters:
        - id: Message
          type: System.String
      overload: Swigged.LLVM.LLVM.DisposeMessage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ContextCreate
      commentId: M:Swigged.LLVM.LLVM.ContextCreate
      language: CSharp
      name:
        CSharp: ContextCreate()
        VB: ContextCreate()
      nameWithType:
        CSharp: LLVM.ContextCreate()
        VB: LLVM.ContextCreate()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ContextCreate()
        VB: Swigged.LLVM.LLVM.ContextCreate()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ContextCreate
        path: src/swigged.llvm/LLVM.cs
        startLine: 30
      syntax:
        content:
          CSharp: public static ContextRef ContextCreate()
          VB: Public Shared Function ContextCreate As ContextRef
        return:
          type: Swigged.LLVM.ContextRef
      overload: Swigged.LLVM.LLVM.ContextCreate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetGlobalContext
      commentId: M:Swigged.LLVM.LLVM.GetGlobalContext
      language: CSharp
      name:
        CSharp: GetGlobalContext()
        VB: GetGlobalContext()
      nameWithType:
        CSharp: LLVM.GetGlobalContext()
        VB: LLVM.GetGlobalContext()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetGlobalContext()
        VB: Swigged.LLVM.LLVM.GetGlobalContext()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetGlobalContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 35
      syntax:
        content:
          CSharp: public static ContextRef GetGlobalContext()
          VB: Public Shared Function GetGlobalContext As ContextRef
        return:
          type: Swigged.LLVM.ContextRef
      overload: Swigged.LLVM.LLVM.GetGlobalContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ContextGetDiagnosticContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.ContextGetDiagnosticContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: ContextGetDiagnosticContext(ContextRef)
        VB: ContextGetDiagnosticContext(ContextRef)
      nameWithType:
        CSharp: LLVM.ContextGetDiagnosticContext(ContextRef)
        VB: LLVM.ContextGetDiagnosticContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ContextGetDiagnosticContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.ContextGetDiagnosticContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ContextGetDiagnosticContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 40
      syntax:
        content:
          CSharp: public static System.IntPtr ContextGetDiagnosticContext(ContextRef C)
          VB: Public Shared Function ContextGetDiagnosticContext(C As ContextRef) As System.IntPtr
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: System.IntPtr
      overload: Swigged.LLVM.LLVM.ContextGetDiagnosticContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ContextDispose(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.ContextDispose(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: ContextDispose(ContextRef)
        VB: ContextDispose(ContextRef)
      nameWithType:
        CSharp: LLVM.ContextDispose(ContextRef)
        VB: LLVM.ContextDispose(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ContextDispose(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.ContextDispose(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ContextDispose
        path: src/swigged.llvm/LLVM.cs
        startLine: 42
      syntax:
        content:
          CSharp: public static void ContextDispose(ContextRef C)
          VB: Public Shared Sub ContextDispose(C As ContextRef)
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
      overload: Swigged.LLVM.LLVM.ContextDispose*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetDiagInfoDescription(Swigged.LLVM.DiagnosticInfoRef)
      commentId: M:Swigged.LLVM.LLVM.GetDiagInfoDescription(Swigged.LLVM.DiagnosticInfoRef)
      language: CSharp
      name:
        CSharp: GetDiagInfoDescription(DiagnosticInfoRef)
        VB: GetDiagInfoDescription(DiagnosticInfoRef)
      nameWithType:
        CSharp: LLVM.GetDiagInfoDescription(DiagnosticInfoRef)
        VB: LLVM.GetDiagInfoDescription(DiagnosticInfoRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetDiagInfoDescription(Swigged.LLVM.DiagnosticInfoRef)
        VB: Swigged.LLVM.LLVM.GetDiagInfoDescription(Swigged.LLVM.DiagnosticInfoRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetDiagInfoDescription
        path: src/swigged.llvm/LLVM.cs
        startLine: 46
      syntax:
        content:
          CSharp: public static string GetDiagInfoDescription(DiagnosticInfoRef DI)
          VB: Public Shared Function GetDiagInfoDescription(DI As DiagnosticInfoRef) As String
        parameters:
        - id: DI
          type: Swigged.LLVM.DiagnosticInfoRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetDiagInfoDescription*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetDiagInfoSeverity(Swigged.LLVM.DiagnosticInfoRef)
      commentId: M:Swigged.LLVM.LLVM.GetDiagInfoSeverity(Swigged.LLVM.DiagnosticInfoRef)
      language: CSharp
      name:
        CSharp: GetDiagInfoSeverity(DiagnosticInfoRef)
        VB: GetDiagInfoSeverity(DiagnosticInfoRef)
      nameWithType:
        CSharp: LLVM.GetDiagInfoSeverity(DiagnosticInfoRef)
        VB: LLVM.GetDiagInfoSeverity(DiagnosticInfoRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetDiagInfoSeverity(Swigged.LLVM.DiagnosticInfoRef)
        VB: Swigged.LLVM.LLVM.GetDiagInfoSeverity(Swigged.LLVM.DiagnosticInfoRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetDiagInfoSeverity
        path: src/swigged.llvm/LLVM.cs
        startLine: 51
      syntax:
        content:
          CSharp: public static DiagnosticSeverity GetDiagInfoSeverity(DiagnosticInfoRef DI)
          VB: Public Shared Function GetDiagInfoSeverity(DI As DiagnosticInfoRef) As DiagnosticSeverity
        parameters:
        - id: DI
          type: Swigged.LLVM.DiagnosticInfoRef
        return:
          type: Swigged.LLVM.DiagnosticSeverity
      overload: Swigged.LLVM.LLVM.GetDiagInfoSeverity*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetMDKindIDInContext(Swigged.LLVM.ContextRef,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetMDKindIDInContext(Swigged.LLVM.ContextRef,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: GetMDKindIDInContext(ContextRef, String, UInt32)
        VB: GetMDKindIDInContext(ContextRef, String, UInt32)
      nameWithType:
        CSharp: LLVM.GetMDKindIDInContext(ContextRef, String, UInt32)
        VB: LLVM.GetMDKindIDInContext(ContextRef, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetMDKindIDInContext(Swigged.LLVM.ContextRef, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetMDKindIDInContext(Swigged.LLVM.ContextRef, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetMDKindIDInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 56
      syntax:
        content:
          CSharp: public static uint GetMDKindIDInContext(ContextRef C, string Name, uint SLen)
          VB: Public Shared Function GetMDKindIDInContext(C As ContextRef, Name As String, SLen As UInteger) As UInteger
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: Name
          type: System.String
        - id: SLen
          type: System.UInt32
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetMDKindIDInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetMDKindID(System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetMDKindID(System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: GetMDKindID(String, UInt32)
        VB: GetMDKindID(String, UInt32)
      nameWithType:
        CSharp: LLVM.GetMDKindID(String, UInt32)
        VB: LLVM.GetMDKindID(String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetMDKindID(System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetMDKindID(System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetMDKindID
        path: src/swigged.llvm/LLVM.cs
        startLine: 61
      syntax:
        content:
          CSharp: public static uint GetMDKindID(string Name, uint SLen)
          VB: Public Shared Function GetMDKindID(Name As String, SLen As UInteger) As UInteger
        parameters:
        - id: Name
          type: System.String
        - id: SLen
          type: System.UInt32
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetMDKindID*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetEnumAttributeKindForName(System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetEnumAttributeKindForName(System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: GetEnumAttributeKindForName(String, UInt32)
        VB: GetEnumAttributeKindForName(String, UInt32)
      nameWithType:
        CSharp: LLVM.GetEnumAttributeKindForName(String, UInt32)
        VB: LLVM.GetEnumAttributeKindForName(String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetEnumAttributeKindForName(System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetEnumAttributeKindForName(System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetEnumAttributeKindForName
        path: src/swigged.llvm/LLVM.cs
        startLine: 66
      syntax:
        content:
          CSharp: public static uint GetEnumAttributeKindForName(string Name, uint SLen)
          VB: Public Shared Function GetEnumAttributeKindForName(Name As String, SLen As UInteger) As UInteger
        parameters:
        - id: Name
          type: System.String
        - id: SLen
          type: System.UInt32
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetEnumAttributeKindForName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetLastEnumAttributeKind
      commentId: M:Swigged.LLVM.LLVM.GetLastEnumAttributeKind
      language: CSharp
      name:
        CSharp: GetLastEnumAttributeKind()
        VB: GetLastEnumAttributeKind()
      nameWithType:
        CSharp: LLVM.GetLastEnumAttributeKind()
        VB: LLVM.GetLastEnumAttributeKind()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetLastEnumAttributeKind()
        VB: Swigged.LLVM.LLVM.GetLastEnumAttributeKind()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetLastEnumAttributeKind
        path: src/swigged.llvm/LLVM.cs
        startLine: 71
      syntax:
        content:
          CSharp: public static uint GetLastEnumAttributeKind()
          VB: Public Shared Function GetLastEnumAttributeKind As UInteger
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetLastEnumAttributeKind*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateEnumAttribute(Swigged.LLVM.ContextRef,System.UInt32,System.UInt64)
      commentId: M:Swigged.LLVM.LLVM.CreateEnumAttribute(Swigged.LLVM.ContextRef,System.UInt32,System.UInt64)
      language: CSharp
      name:
        CSharp: CreateEnumAttribute(ContextRef, UInt32, UInt64)
        VB: CreateEnumAttribute(ContextRef, UInt32, UInt64)
      nameWithType:
        CSharp: LLVM.CreateEnumAttribute(ContextRef, UInt32, UInt64)
        VB: LLVM.CreateEnumAttribute(ContextRef, UInt32, UInt64)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateEnumAttribute(Swigged.LLVM.ContextRef, System.UInt32, System.UInt64)
        VB: Swigged.LLVM.LLVM.CreateEnumAttribute(Swigged.LLVM.ContextRef, System.UInt32, System.UInt64)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateEnumAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 76
      syntax:
        content:
          CSharp: public static AttributeRef CreateEnumAttribute(ContextRef C, uint KindID, ulong Val)
          VB: Public Shared Function CreateEnumAttribute(C As ContextRef, KindID As UInteger, Val As ULong) As AttributeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: KindID
          type: System.UInt32
        - id: Val
          type: System.UInt64
        return:
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.CreateEnumAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetEnumAttributeKind(Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.LLVM.GetEnumAttributeKind(Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: GetEnumAttributeKind(AttributeRef)
        VB: GetEnumAttributeKind(AttributeRef)
      nameWithType:
        CSharp: LLVM.GetEnumAttributeKind(AttributeRef)
        VB: LLVM.GetEnumAttributeKind(AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetEnumAttributeKind(Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.LLVM.GetEnumAttributeKind(Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetEnumAttributeKind
        path: src/swigged.llvm/LLVM.cs
        startLine: 81
      syntax:
        content:
          CSharp: public static uint GetEnumAttributeKind(AttributeRef A)
          VB: Public Shared Function GetEnumAttributeKind(A As AttributeRef) As UInteger
        parameters:
        - id: A
          type: Swigged.LLVM.AttributeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetEnumAttributeKind*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetEnumAttributeValue(Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.LLVM.GetEnumAttributeValue(Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: GetEnumAttributeValue(AttributeRef)
        VB: GetEnumAttributeValue(AttributeRef)
      nameWithType:
        CSharp: LLVM.GetEnumAttributeValue(AttributeRef)
        VB: LLVM.GetEnumAttributeValue(AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetEnumAttributeValue(Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.LLVM.GetEnumAttributeValue(Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetEnumAttributeValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 86
      syntax:
        content:
          CSharp: public static ulong GetEnumAttributeValue(AttributeRef A)
          VB: Public Shared Function GetEnumAttributeValue(A As AttributeRef) As ULong
        parameters:
        - id: A
          type: Swigged.LLVM.AttributeRef
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.GetEnumAttributeValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateStringAttribute(Swigged.LLVM.ContextRef,System.String,System.UInt32,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.CreateStringAttribute(Swigged.LLVM.ContextRef,System.String,System.UInt32,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: CreateStringAttribute(ContextRef, String, UInt32, String, UInt32)
        VB: CreateStringAttribute(ContextRef, String, UInt32, String, UInt32)
      nameWithType:
        CSharp: LLVM.CreateStringAttribute(ContextRef, String, UInt32, String, UInt32)
        VB: LLVM.CreateStringAttribute(ContextRef, String, UInt32, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateStringAttribute(Swigged.LLVM.ContextRef, System.String, System.UInt32, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.CreateStringAttribute(Swigged.LLVM.ContextRef, System.String, System.UInt32, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateStringAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 91
      syntax:
        content:
          CSharp: public static AttributeRef CreateStringAttribute(ContextRef C, string K, uint KLength, string V, uint VLength)
          VB: Public Shared Function CreateStringAttribute(C As ContextRef, K As String, KLength As UInteger, V As String, VLength As UInteger) As AttributeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: K
          type: System.String
        - id: KLength
          type: System.UInt32
        - id: V
          type: System.String
        - id: VLength
          type: System.UInt32
        return:
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.CreateStringAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetStringAttributeKind(Swigged.LLVM.AttributeRef,System.UInt32@)
      commentId: M:Swigged.LLVM.LLVM.GetStringAttributeKind(Swigged.LLVM.AttributeRef,System.UInt32@)
      language: CSharp
      name:
        CSharp: GetStringAttributeKind(AttributeRef, out UInt32)
        VB: GetStringAttributeKind(AttributeRef, ByRef UInt32)
      nameWithType:
        CSharp: LLVM.GetStringAttributeKind(AttributeRef, out UInt32)
        VB: LLVM.GetStringAttributeKind(AttributeRef, ByRef UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetStringAttributeKind(Swigged.LLVM.AttributeRef, out System.UInt32)
        VB: Swigged.LLVM.LLVM.GetStringAttributeKind(Swigged.LLVM.AttributeRef, ByRef System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetStringAttributeKind
        path: src/swigged.llvm/LLVM.cs
        startLine: 96
      syntax:
        content:
          CSharp: public static string GetStringAttributeKind(AttributeRef A, out uint Length)
          VB: Public Shared Function GetStringAttributeKind(A As AttributeRef, ByRef Length As UInteger) As String
        parameters:
        - id: A
          type: Swigged.LLVM.AttributeRef
        - id: Length
          type: System.UInt32
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetStringAttributeKind*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetStringAttributeValue(Swigged.LLVM.AttributeRef,System.UInt32@)
      commentId: M:Swigged.LLVM.LLVM.GetStringAttributeValue(Swigged.LLVM.AttributeRef,System.UInt32@)
      language: CSharp
      name:
        CSharp: GetStringAttributeValue(AttributeRef, out UInt32)
        VB: GetStringAttributeValue(AttributeRef, ByRef UInt32)
      nameWithType:
        CSharp: LLVM.GetStringAttributeValue(AttributeRef, out UInt32)
        VB: LLVM.GetStringAttributeValue(AttributeRef, ByRef UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetStringAttributeValue(Swigged.LLVM.AttributeRef, out System.UInt32)
        VB: Swigged.LLVM.LLVM.GetStringAttributeValue(Swigged.LLVM.AttributeRef, ByRef System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetStringAttributeValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 101
      syntax:
        content:
          CSharp: public static string GetStringAttributeValue(AttributeRef A, out uint Length)
          VB: Public Shared Function GetStringAttributeValue(A As AttributeRef, ByRef Length As UInteger) As String
        parameters:
        - id: A
          type: Swigged.LLVM.AttributeRef
        - id: Length
          type: System.UInt32
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetStringAttributeValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsEnumAttribute(Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.LLVM.IsEnumAttribute(Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: IsEnumAttribute(AttributeRef)
        VB: IsEnumAttribute(AttributeRef)
      nameWithType:
        CSharp: LLVM.IsEnumAttribute(AttributeRef)
        VB: LLVM.IsEnumAttribute(AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsEnumAttribute(Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.LLVM.IsEnumAttribute(Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsEnumAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 106
      syntax:
        content:
          CSharp: public static bool IsEnumAttribute(AttributeRef A)
          VB: Public Shared Function IsEnumAttribute(A As AttributeRef) As Boolean
        parameters:
        - id: A
          type: Swigged.LLVM.AttributeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsEnumAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsStringAttribute(Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.LLVM.IsStringAttribute(Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: IsStringAttribute(AttributeRef)
        VB: IsStringAttribute(AttributeRef)
      nameWithType:
        CSharp: LLVM.IsStringAttribute(AttributeRef)
        VB: LLVM.IsStringAttribute(AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsStringAttribute(Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.LLVM.IsStringAttribute(Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsStringAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 111
      syntax:
        content:
          CSharp: public static bool IsStringAttribute(AttributeRef A)
          VB: Public Shared Function IsStringAttribute(A As AttributeRef) As Boolean
        parameters:
        - id: A
          type: Swigged.LLVM.AttributeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsStringAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ModuleCreateWithName(System.String)
      commentId: M:Swigged.LLVM.LLVM.ModuleCreateWithName(System.String)
      language: CSharp
      name:
        CSharp: ModuleCreateWithName(String)
        VB: ModuleCreateWithName(String)
      nameWithType:
        CSharp: LLVM.ModuleCreateWithName(String)
        VB: LLVM.ModuleCreateWithName(String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ModuleCreateWithName(System.String)
        VB: Swigged.LLVM.LLVM.ModuleCreateWithName(System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ModuleCreateWithName
        path: src/swigged.llvm/LLVM.cs
        startLine: 116
      syntax:
        content:
          CSharp: public static ModuleRef ModuleCreateWithName(string ModuleID)
          VB: Public Shared Function ModuleCreateWithName(ModuleID As String) As ModuleRef
        parameters:
        - id: ModuleID
          type: System.String
        return:
          type: Swigged.LLVM.ModuleRef
      overload: Swigged.LLVM.LLVM.ModuleCreateWithName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ModuleCreateWithNameInContext(System.String,Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.ModuleCreateWithNameInContext(System.String,Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: ModuleCreateWithNameInContext(String, ContextRef)
        VB: ModuleCreateWithNameInContext(String, ContextRef)
      nameWithType:
        CSharp: LLVM.ModuleCreateWithNameInContext(String, ContextRef)
        VB: LLVM.ModuleCreateWithNameInContext(String, ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ModuleCreateWithNameInContext(System.String, Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.ModuleCreateWithNameInContext(System.String, Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ModuleCreateWithNameInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 121
      syntax:
        content:
          CSharp: public static ModuleRef ModuleCreateWithNameInContext(string ModuleID, ContextRef C)
          VB: Public Shared Function ModuleCreateWithNameInContext(ModuleID As String, C As ContextRef) As ModuleRef
        parameters:
        - id: ModuleID
          type: System.String
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.ModuleRef
      overload: Swigged.LLVM.LLVM.ModuleCreateWithNameInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CloneModule(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.CloneModule(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: CloneModule(ModuleRef)
        VB: CloneModule(ModuleRef)
      nameWithType:
        CSharp: LLVM.CloneModule(ModuleRef)
        VB: LLVM.CloneModule(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CloneModule(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.CloneModule(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CloneModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 126
      syntax:
        content:
          CSharp: public static ModuleRef CloneModule(ModuleRef M)
          VB: Public Shared Function CloneModule(M As ModuleRef) As ModuleRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.ModuleRef
      overload: Swigged.LLVM.LLVM.CloneModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeModule(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeModule(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: DisposeModule(ModuleRef)
        VB: DisposeModule(ModuleRef)
      nameWithType:
        CSharp: LLVM.DisposeModule(ModuleRef)
        VB: LLVM.DisposeModule(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeModule(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.DisposeModule(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 131
      syntax:
        content:
          CSharp: public static void DisposeModule(ModuleRef M)
          VB: Public Shared Sub DisposeModule(M As ModuleRef)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
      overload: Swigged.LLVM.LLVM.DisposeModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetModuleIdentifier(Swigged.LLVM.ModuleRef,System.IntPtr@)
      commentId: M:Swigged.LLVM.LLVM.GetModuleIdentifier(Swigged.LLVM.ModuleRef,System.IntPtr@)
      language: CSharp
      name:
        CSharp: GetModuleIdentifier(ModuleRef, out System.IntPtr)
        VB: GetModuleIdentifier(ModuleRef, ByRef System.IntPtr)
      nameWithType:
        CSharp: LLVM.GetModuleIdentifier(ModuleRef, out System.IntPtr)
        VB: LLVM.GetModuleIdentifier(ModuleRef, ByRef System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetModuleIdentifier(Swigged.LLVM.ModuleRef, out System.IntPtr)
        VB: Swigged.LLVM.LLVM.GetModuleIdentifier(Swigged.LLVM.ModuleRef, ByRef System.IntPtr)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetModuleIdentifier
        path: src/swigged.llvm/LLVM.cs
        startLine: 135
      syntax:
        content:
          CSharp: public static string GetModuleIdentifier(ModuleRef M, out System.IntPtr Len)
          VB: Public Shared Function GetModuleIdentifier(M As ModuleRef, ByRef Len As System.IntPtr) As String
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Len
          type: System.IntPtr
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetModuleIdentifier*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetModuleIdentifier(Swigged.LLVM.ModuleRef,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.SetModuleIdentifier(Swigged.LLVM.ModuleRef,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: SetModuleIdentifier(ModuleRef, String, UInt32)
        VB: SetModuleIdentifier(ModuleRef, String, UInt32)
      nameWithType:
        CSharp: LLVM.SetModuleIdentifier(ModuleRef, String, UInt32)
        VB: LLVM.SetModuleIdentifier(ModuleRef, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetModuleIdentifier(Swigged.LLVM.ModuleRef, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.SetModuleIdentifier(Swigged.LLVM.ModuleRef, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetModuleIdentifier
        path: src/swigged.llvm/LLVM.cs
        startLine: 140
      syntax:
        content:
          CSharp: public static void SetModuleIdentifier(ModuleRef M, string Ident, uint Len)
          VB: Public Shared Sub SetModuleIdentifier(M As ModuleRef, Ident As String, Len As UInteger)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Ident
          type: System.String
        - id: Len
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.SetModuleIdentifier*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetDataLayoutStr(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetDataLayoutStr(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetDataLayoutStr(ModuleRef)
        VB: GetDataLayoutStr(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetDataLayoutStr(ModuleRef)
        VB: LLVM.GetDataLayoutStr(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetDataLayoutStr(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetDataLayoutStr(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetDataLayoutStr
        path: src/swigged.llvm/LLVM.cs
        startLine: 144
      syntax:
        content:
          CSharp: public static string GetDataLayoutStr(ModuleRef M)
          VB: Public Shared Function GetDataLayoutStr(M As ModuleRef) As String
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetDataLayoutStr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetDataLayout(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetDataLayout(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetDataLayout(ModuleRef)
        VB: GetDataLayout(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetDataLayout(ModuleRef)
        VB: LLVM.GetDataLayout(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetDataLayout(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetDataLayout(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetDataLayout
        path: src/swigged.llvm/LLVM.cs
        startLine: 149
      syntax:
        content:
          CSharp: public static string GetDataLayout(ModuleRef M)
          VB: Public Shared Function GetDataLayout(M As ModuleRef) As String
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetDataLayout*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetDataLayout(Swigged.LLVM.ModuleRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.SetDataLayout(Swigged.LLVM.ModuleRef,System.String)
      language: CSharp
      name:
        CSharp: SetDataLayout(ModuleRef, String)
        VB: SetDataLayout(ModuleRef, String)
      nameWithType:
        CSharp: LLVM.SetDataLayout(ModuleRef, String)
        VB: LLVM.SetDataLayout(ModuleRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetDataLayout(Swigged.LLVM.ModuleRef, System.String)
        VB: Swigged.LLVM.LLVM.SetDataLayout(Swigged.LLVM.ModuleRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetDataLayout
        path: src/swigged.llvm/LLVM.cs
        startLine: 154
      syntax:
        content:
          CSharp: public static void SetDataLayout(ModuleRef M, string DataLayoutStr)
          VB: Public Shared Sub SetDataLayout(M As ModuleRef, DataLayoutStr As String)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: DataLayoutStr
          type: System.String
      overload: Swigged.LLVM.LLVM.SetDataLayout*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTarget(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetTarget(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetTarget(ModuleRef)
        VB: GetTarget(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetTarget(ModuleRef)
        VB: LLVM.GetTarget(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTarget(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetTarget(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTarget
        path: src/swigged.llvm/LLVM.cs
        startLine: 158
      syntax:
        content:
          CSharp: public static string GetTarget(ModuleRef M)
          VB: Public Shared Function GetTarget(M As ModuleRef) As String
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetTarget*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetTarget(Swigged.LLVM.ModuleRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.SetTarget(Swigged.LLVM.ModuleRef,System.String)
      language: CSharp
      name:
        CSharp: SetTarget(ModuleRef, String)
        VB: SetTarget(ModuleRef, String)
      nameWithType:
        CSharp: LLVM.SetTarget(ModuleRef, String)
        VB: LLVM.SetTarget(ModuleRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetTarget(Swigged.LLVM.ModuleRef, System.String)
        VB: Swigged.LLVM.LLVM.SetTarget(Swigged.LLVM.ModuleRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetTarget
        path: src/swigged.llvm/LLVM.cs
        startLine: 163
      syntax:
        content:
          CSharp: public static void SetTarget(ModuleRef M, string Triple)
          VB: Public Shared Sub SetTarget(M As ModuleRef, Triple As String)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Triple
          type: System.String
      overload: Swigged.LLVM.LLVM.SetTarget*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DumpModule(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.DumpModule(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: DumpModule(ModuleRef)
        VB: DumpModule(ModuleRef)
      nameWithType:
        CSharp: LLVM.DumpModule(ModuleRef)
        VB: LLVM.DumpModule(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DumpModule(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.DumpModule(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DumpModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 167
      syntax:
        content:
          CSharp: public static void DumpModule(ModuleRef M)
          VB: Public Shared Sub DumpModule(M As ModuleRef)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
      overload: Swigged.LLVM.LLVM.DumpModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PrintModuleToFile(Swigged.LLVM.ModuleRef,System.String,System.String@)
      commentId: M:Swigged.LLVM.LLVM.PrintModuleToFile(Swigged.LLVM.ModuleRef,System.String,System.String@)
      language: CSharp
      name:
        CSharp: PrintModuleToFile(ModuleRef, String, out String)
        VB: PrintModuleToFile(ModuleRef, String, ByRef String)
      nameWithType:
        CSharp: LLVM.PrintModuleToFile(ModuleRef, String, out String)
        VB: LLVM.PrintModuleToFile(ModuleRef, String, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PrintModuleToFile(Swigged.LLVM.ModuleRef, System.String, out System.String)
        VB: Swigged.LLVM.LLVM.PrintModuleToFile(Swigged.LLVM.ModuleRef, System.String, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PrintModuleToFile
        path: src/swigged.llvm/LLVM.cs
        startLine: 171
      syntax:
        content:
          CSharp: public static bool PrintModuleToFile(ModuleRef M, string Filename, out string ErrorMessage)
          VB: Public Shared Function PrintModuleToFile(M As ModuleRef, Filename As String, ByRef ErrorMessage As String) As Boolean
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Filename
          type: System.String
        - id: ErrorMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.PrintModuleToFile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PrintModuleToString(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.PrintModuleToString(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: PrintModuleToString(ModuleRef)
        VB: PrintModuleToString(ModuleRef)
      nameWithType:
        CSharp: LLVM.PrintModuleToString(ModuleRef)
        VB: LLVM.PrintModuleToString(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PrintModuleToString(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.PrintModuleToString(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PrintModuleToString
        path: src/swigged.llvm/LLVM.cs
        startLine: 176
      syntax:
        content:
          CSharp: public static string PrintModuleToString(ModuleRef M)
          VB: Public Shared Function PrintModuleToString(M As ModuleRef) As String
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.PrintModuleToString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetModuleInlineAsm(Swigged.LLVM.ModuleRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.SetModuleInlineAsm(Swigged.LLVM.ModuleRef,System.String)
      language: CSharp
      name:
        CSharp: SetModuleInlineAsm(ModuleRef, String)
        VB: SetModuleInlineAsm(ModuleRef, String)
      nameWithType:
        CSharp: LLVM.SetModuleInlineAsm(ModuleRef, String)
        VB: LLVM.SetModuleInlineAsm(ModuleRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetModuleInlineAsm(Swigged.LLVM.ModuleRef, System.String)
        VB: Swigged.LLVM.LLVM.SetModuleInlineAsm(Swigged.LLVM.ModuleRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetModuleInlineAsm
        path: src/swigged.llvm/LLVM.cs
        startLine: 181
      syntax:
        content:
          CSharp: public static void SetModuleInlineAsm(ModuleRef M, string Asm)
          VB: Public Shared Sub SetModuleInlineAsm(M As ModuleRef, Asm As String)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Asm
          type: System.String
      overload: Swigged.LLVM.LLVM.SetModuleInlineAsm*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetModuleContext(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetModuleContext(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetModuleContext(ModuleRef)
        VB: GetModuleContext(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetModuleContext(ModuleRef)
        VB: LLVM.GetModuleContext(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetModuleContext(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetModuleContext(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetModuleContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 185
      syntax:
        content:
          CSharp: public static ContextRef GetModuleContext(ModuleRef M)
          VB: Public Shared Function GetModuleContext(M As ModuleRef) As ContextRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.ContextRef
      overload: Swigged.LLVM.LLVM.GetModuleContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTypeByName(Swigged.LLVM.ModuleRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.GetTypeByName(Swigged.LLVM.ModuleRef,System.String)
      language: CSharp
      name:
        CSharp: GetTypeByName(ModuleRef, String)
        VB: GetTypeByName(ModuleRef, String)
      nameWithType:
        CSharp: LLVM.GetTypeByName(ModuleRef, String)
        VB: LLVM.GetTypeByName(ModuleRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTypeByName(Swigged.LLVM.ModuleRef, System.String)
        VB: Swigged.LLVM.LLVM.GetTypeByName(Swigged.LLVM.ModuleRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTypeByName
        path: src/swigged.llvm/LLVM.cs
        startLine: 190
      syntax:
        content:
          CSharp: public static TypeRef GetTypeByName(ModuleRef M, string Name)
          VB: Public Shared Function GetTypeByName(M As ModuleRef, Name As String) As TypeRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.GetTypeByName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNamedMetadataNumOperands(Swigged.LLVM.ModuleRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.GetNamedMetadataNumOperands(Swigged.LLVM.ModuleRef,System.String)
      language: CSharp
      name:
        CSharp: GetNamedMetadataNumOperands(ModuleRef, String)
        VB: GetNamedMetadataNumOperands(ModuleRef, String)
      nameWithType:
        CSharp: LLVM.GetNamedMetadataNumOperands(ModuleRef, String)
        VB: LLVM.GetNamedMetadataNumOperands(ModuleRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNamedMetadataNumOperands(Swigged.LLVM.ModuleRef, System.String)
        VB: Swigged.LLVM.LLVM.GetNamedMetadataNumOperands(Swigged.LLVM.ModuleRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNamedMetadataNumOperands
        path: src/swigged.llvm/LLVM.cs
        startLine: 195
      syntax:
        content:
          CSharp: public static uint GetNamedMetadataNumOperands(ModuleRef M, string Name)
          VB: Public Shared Function GetNamedMetadataNumOperands(M As ModuleRef, Name As String) As UInteger
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Name
          type: System.String
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetNamedMetadataNumOperands*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNamedMetadataOperands(Swigged.LLVM.ModuleRef,System.String,Swigged.LLVM.ValueRef@)
      commentId: M:Swigged.LLVM.LLVM.GetNamedMetadataOperands(Swigged.LLVM.ModuleRef,System.String,Swigged.LLVM.ValueRef@)
      language: CSharp
      name:
        CSharp: GetNamedMetadataOperands(ModuleRef, String, out ValueRef)
        VB: GetNamedMetadataOperands(ModuleRef, String, ByRef ValueRef)
      nameWithType:
        CSharp: LLVM.GetNamedMetadataOperands(ModuleRef, String, out ValueRef)
        VB: LLVM.GetNamedMetadataOperands(ModuleRef, String, ByRef ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNamedMetadataOperands(Swigged.LLVM.ModuleRef, System.String, out Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNamedMetadataOperands(Swigged.LLVM.ModuleRef, System.String, ByRef Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNamedMetadataOperands
        path: src/swigged.llvm/LLVM.cs
        startLine: 200
      syntax:
        content:
          CSharp: public static void GetNamedMetadataOperands(ModuleRef M, string Name, out ValueRef Dest)
          VB: Public Shared Sub GetNamedMetadataOperands(M As ModuleRef, Name As String, ByRef Dest As ValueRef)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Name
          type: System.String
        - id: Dest
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetNamedMetadataOperands*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddNamedMetadataOperand(Swigged.LLVM.ModuleRef,System.String,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.AddNamedMetadataOperand(Swigged.LLVM.ModuleRef,System.String,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: AddNamedMetadataOperand(ModuleRef, String, ValueRef)
        VB: AddNamedMetadataOperand(ModuleRef, String, ValueRef)
      nameWithType:
        CSharp: LLVM.AddNamedMetadataOperand(ModuleRef, String, ValueRef)
        VB: LLVM.AddNamedMetadataOperand(ModuleRef, String, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddNamedMetadataOperand(Swigged.LLVM.ModuleRef, System.String, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.AddNamedMetadataOperand(Swigged.LLVM.ModuleRef, System.String, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddNamedMetadataOperand
        path: src/swigged.llvm/LLVM.cs
        startLine: 204
      syntax:
        content:
          CSharp: public static void AddNamedMetadataOperand(ModuleRef M, string Name, ValueRef Val)
          VB: Public Shared Sub AddNamedMetadataOperand(M As ModuleRef, Name As String, Val As ValueRef)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Name
          type: System.String
        - id: Val
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.AddNamedMetadataOperand*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddFunction(Swigged.LLVM.ModuleRef,System.String,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.AddFunction(Swigged.LLVM.ModuleRef,System.String,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: AddFunction(ModuleRef, String, TypeRef)
        VB: AddFunction(ModuleRef, String, TypeRef)
      nameWithType:
        CSharp: LLVM.AddFunction(ModuleRef, String, TypeRef)
        VB: LLVM.AddFunction(ModuleRef, String, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddFunction(Swigged.LLVM.ModuleRef, System.String, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.AddFunction(Swigged.LLVM.ModuleRef, System.String, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 208
      syntax:
        content:
          CSharp: public static ValueRef AddFunction(ModuleRef M, string Name, TypeRef FunctionTy)
          VB: Public Shared Function AddFunction(M As ModuleRef, Name As String, FunctionTy As TypeRef) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Name
          type: System.String
        - id: FunctionTy
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.AddFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNamedFunction(Swigged.LLVM.ModuleRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.GetNamedFunction(Swigged.LLVM.ModuleRef,System.String)
      language: CSharp
      name:
        CSharp: GetNamedFunction(ModuleRef, String)
        VB: GetNamedFunction(ModuleRef, String)
      nameWithType:
        CSharp: LLVM.GetNamedFunction(ModuleRef, String)
        VB: LLVM.GetNamedFunction(ModuleRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNamedFunction(Swigged.LLVM.ModuleRef, System.String)
        VB: Swigged.LLVM.LLVM.GetNamedFunction(Swigged.LLVM.ModuleRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNamedFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 213
      syntax:
        content:
          CSharp: public static ValueRef GetNamedFunction(ModuleRef M, string Name)
          VB: Public Shared Function GetNamedFunction(M As ModuleRef, Name As String) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetNamedFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFirstFunction(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetFirstFunction(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetFirstFunction(ModuleRef)
        VB: GetFirstFunction(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetFirstFunction(ModuleRef)
        VB: LLVM.GetFirstFunction(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFirstFunction(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetFirstFunction(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFirstFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 218
      syntax:
        content:
          CSharp: public static ValueRef GetFirstFunction(ModuleRef M)
          VB: Public Shared Function GetFirstFunction(M As ModuleRef) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetFirstFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetLastFunction(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetLastFunction(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetLastFunction(ModuleRef)
        VB: GetLastFunction(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetLastFunction(ModuleRef)
        VB: LLVM.GetLastFunction(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetLastFunction(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetLastFunction(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetLastFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 223
      syntax:
        content:
          CSharp: public static ValueRef GetLastFunction(ModuleRef M)
          VB: Public Shared Function GetLastFunction(M As ModuleRef) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetLastFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNextFunction(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNextFunction(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNextFunction(ValueRef)
        VB: GetNextFunction(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNextFunction(ValueRef)
        VB: LLVM.GetNextFunction(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNextFunction(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNextFunction(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNextFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 228
      syntax:
        content:
          CSharp: public static ValueRef GetNextFunction(ValueRef Fn)
          VB: Public Shared Function GetNextFunction(Fn As ValueRef) As ValueRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetNextFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetPreviousFunction(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetPreviousFunction(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetPreviousFunction(ValueRef)
        VB: GetPreviousFunction(ValueRef)
      nameWithType:
        CSharp: LLVM.GetPreviousFunction(ValueRef)
        VB: LLVM.GetPreviousFunction(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetPreviousFunction(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetPreviousFunction(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetPreviousFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 233
      syntax:
        content:
          CSharp: public static ValueRef GetPreviousFunction(ValueRef Fn)
          VB: Public Shared Function GetPreviousFunction(Fn As ValueRef) As ValueRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetPreviousFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTypeKind(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetTypeKind(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetTypeKind(TypeRef)
        VB: GetTypeKind(TypeRef)
      nameWithType:
        CSharp: LLVM.GetTypeKind(TypeRef)
        VB: LLVM.GetTypeKind(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTypeKind(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetTypeKind(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTypeKind
        path: src/swigged.llvm/LLVM.cs
        startLine: 238
      syntax:
        content:
          CSharp: public static TypeKind GetTypeKind(TypeRef Ty)
          VB: Public Shared Function GetTypeKind(Ty As TypeRef) As TypeKind
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.TypeKind
      overload: Swigged.LLVM.LLVM.GetTypeKind*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.TypeIsSized(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.TypeIsSized(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: TypeIsSized(TypeRef)
        VB: TypeIsSized(TypeRef)
      nameWithType:
        CSharp: LLVM.TypeIsSized(TypeRef)
        VB: LLVM.TypeIsSized(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.TypeIsSized(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.TypeIsSized(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: TypeIsSized
        path: src/swigged.llvm/LLVM.cs
        startLine: 243
      syntax:
        content:
          CSharp: public static bool TypeIsSized(TypeRef Ty)
          VB: Public Shared Function TypeIsSized(Ty As TypeRef) As Boolean
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.TypeIsSized*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTypeContext(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetTypeContext(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetTypeContext(TypeRef)
        VB: GetTypeContext(TypeRef)
      nameWithType:
        CSharp: LLVM.GetTypeContext(TypeRef)
        VB: LLVM.GetTypeContext(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTypeContext(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetTypeContext(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTypeContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 248
      syntax:
        content:
          CSharp: public static ContextRef GetTypeContext(TypeRef Ty)
          VB: Public Shared Function GetTypeContext(Ty As TypeRef) As ContextRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ContextRef
      overload: Swigged.LLVM.LLVM.GetTypeContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DumpType(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.DumpType(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: DumpType(TypeRef)
        VB: DumpType(TypeRef)
      nameWithType:
        CSharp: LLVM.DumpType(TypeRef)
        VB: LLVM.DumpType(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DumpType(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.DumpType(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DumpType
        path: src/swigged.llvm/LLVM.cs
        startLine: 253
      syntax:
        content:
          CSharp: public static void DumpType(TypeRef Val)
          VB: Public Shared Sub DumpType(Val As TypeRef)
        parameters:
        - id: Val
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.DumpType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PrintTypeToString(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.PrintTypeToString(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: PrintTypeToString(TypeRef)
        VB: PrintTypeToString(TypeRef)
      nameWithType:
        CSharp: LLVM.PrintTypeToString(TypeRef)
        VB: LLVM.PrintTypeToString(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PrintTypeToString(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.PrintTypeToString(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PrintTypeToString
        path: src/swigged.llvm/LLVM.cs
        startLine: 257
      syntax:
        content:
          CSharp: public static string PrintTypeToString(TypeRef Val)
          VB: Public Shared Function PrintTypeToString(Val As TypeRef) As String
        parameters:
        - id: Val
          type: Swigged.LLVM.TypeRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.PrintTypeToString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int1TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.Int1TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Int1TypeInContext(ContextRef)
        VB: Int1TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.Int1TypeInContext(ContextRef)
        VB: LLVM.Int1TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int1TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.Int1TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int1TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 262
      syntax:
        content:
          CSharp: public static TypeRef Int1TypeInContext(ContextRef C)
          VB: Public Shared Function Int1TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int1TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int8TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.Int8TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Int8TypeInContext(ContextRef)
        VB: Int8TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.Int8TypeInContext(ContextRef)
        VB: LLVM.Int8TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int8TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.Int8TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int8TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 267
      syntax:
        content:
          CSharp: public static TypeRef Int8TypeInContext(ContextRef C)
          VB: Public Shared Function Int8TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int8TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int16TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.Int16TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Int16TypeInContext(ContextRef)
        VB: Int16TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.Int16TypeInContext(ContextRef)
        VB: LLVM.Int16TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int16TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.Int16TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int16TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 272
      syntax:
        content:
          CSharp: public static TypeRef Int16TypeInContext(ContextRef C)
          VB: Public Shared Function Int16TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int16TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int32TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.Int32TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Int32TypeInContext(ContextRef)
        VB: Int32TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.Int32TypeInContext(ContextRef)
        VB: LLVM.Int32TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int32TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.Int32TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int32TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 277
      syntax:
        content:
          CSharp: public static TypeRef Int32TypeInContext(ContextRef C)
          VB: Public Shared Function Int32TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int32TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int64TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.Int64TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Int64TypeInContext(ContextRef)
        VB: Int64TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.Int64TypeInContext(ContextRef)
        VB: LLVM.Int64TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int64TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.Int64TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int64TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 282
      syntax:
        content:
          CSharp: public static TypeRef Int64TypeInContext(ContextRef C)
          VB: Public Shared Function Int64TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int64TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int128TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.Int128TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: Int128TypeInContext(ContextRef)
        VB: Int128TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.Int128TypeInContext(ContextRef)
        VB: LLVM.Int128TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int128TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.Int128TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int128TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 287
      syntax:
        content:
          CSharp: public static TypeRef Int128TypeInContext(ContextRef C)
          VB: Public Shared Function Int128TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int128TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IntTypeInContext(Swigged.LLVM.ContextRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.IntTypeInContext(Swigged.LLVM.ContextRef,System.UInt32)
      language: CSharp
      name:
        CSharp: IntTypeInContext(ContextRef, UInt32)
        VB: IntTypeInContext(ContextRef, UInt32)
      nameWithType:
        CSharp: LLVM.IntTypeInContext(ContextRef, UInt32)
        VB: LLVM.IntTypeInContext(ContextRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IntTypeInContext(Swigged.LLVM.ContextRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.IntTypeInContext(Swigged.LLVM.ContextRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 292
      syntax:
        content:
          CSharp: public static TypeRef IntTypeInContext(ContextRef C, uint NumBits)
          VB: Public Shared Function IntTypeInContext(C As ContextRef, NumBits As UInteger) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: NumBits
          type: System.UInt32
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.IntTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int1Type
      commentId: M:Swigged.LLVM.LLVM.Int1Type
      language: CSharp
      name:
        CSharp: Int1Type()
        VB: Int1Type()
      nameWithType:
        CSharp: LLVM.Int1Type()
        VB: LLVM.Int1Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int1Type()
        VB: Swigged.LLVM.LLVM.Int1Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int1Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 297
      syntax:
        content:
          CSharp: public static TypeRef Int1Type()
          VB: Public Shared Function Int1Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int1Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int8Type
      commentId: M:Swigged.LLVM.LLVM.Int8Type
      language: CSharp
      name:
        CSharp: Int8Type()
        VB: Int8Type()
      nameWithType:
        CSharp: LLVM.Int8Type()
        VB: LLVM.Int8Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int8Type()
        VB: Swigged.LLVM.LLVM.Int8Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int8Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 302
      syntax:
        content:
          CSharp: public static TypeRef Int8Type()
          VB: Public Shared Function Int8Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int8Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int16Type
      commentId: M:Swigged.LLVM.LLVM.Int16Type
      language: CSharp
      name:
        CSharp: Int16Type()
        VB: Int16Type()
      nameWithType:
        CSharp: LLVM.Int16Type()
        VB: LLVM.Int16Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int16Type()
        VB: Swigged.LLVM.LLVM.Int16Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int16Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 307
      syntax:
        content:
          CSharp: public static TypeRef Int16Type()
          VB: Public Shared Function Int16Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int16Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int32Type
      commentId: M:Swigged.LLVM.LLVM.Int32Type
      language: CSharp
      name:
        CSharp: Int32Type()
        VB: Int32Type()
      nameWithType:
        CSharp: LLVM.Int32Type()
        VB: LLVM.Int32Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int32Type()
        VB: Swigged.LLVM.LLVM.Int32Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int32Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 312
      syntax:
        content:
          CSharp: public static TypeRef Int32Type()
          VB: Public Shared Function Int32Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int32Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int64Type
      commentId: M:Swigged.LLVM.LLVM.Int64Type
      language: CSharp
      name:
        CSharp: Int64Type()
        VB: Int64Type()
      nameWithType:
        CSharp: LLVM.Int64Type()
        VB: LLVM.Int64Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int64Type()
        VB: Swigged.LLVM.LLVM.Int64Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int64Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 317
      syntax:
        content:
          CSharp: public static TypeRef Int64Type()
          VB: Public Shared Function Int64Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int64Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.Int128Type
      commentId: M:Swigged.LLVM.LLVM.Int128Type
      language: CSharp
      name:
        CSharp: Int128Type()
        VB: Int128Type()
      nameWithType:
        CSharp: LLVM.Int128Type()
        VB: LLVM.Int128Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Int128Type()
        VB: Swigged.LLVM.LLVM.Int128Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Int128Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 322
      syntax:
        content:
          CSharp: public static TypeRef Int128Type()
          VB: Public Shared Function Int128Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.Int128Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IntType(System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.IntType(System.UInt32)
      language: CSharp
      name:
        CSharp: IntType(UInt32)
        VB: IntType(UInt32)
      nameWithType:
        CSharp: LLVM.IntType(UInt32)
        VB: LLVM.IntType(UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IntType(System.UInt32)
        VB: Swigged.LLVM.LLVM.IntType(System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntType
        path: src/swigged.llvm/LLVM.cs
        startLine: 327
      syntax:
        content:
          CSharp: public static TypeRef IntType(uint NumBits)
          VB: Public Shared Function IntType(NumBits As UInteger) As TypeRef
        parameters:
        - id: NumBits
          type: System.UInt32
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.IntType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetIntTypeWidth(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetIntTypeWidth(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetIntTypeWidth(TypeRef)
        VB: GetIntTypeWidth(TypeRef)
      nameWithType:
        CSharp: LLVM.GetIntTypeWidth(TypeRef)
        VB: LLVM.GetIntTypeWidth(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetIntTypeWidth(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetIntTypeWidth(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetIntTypeWidth
        path: src/swigged.llvm/LLVM.cs
        startLine: 332
      syntax:
        content:
          CSharp: public static uint GetIntTypeWidth(TypeRef IntegerTy)
          VB: Public Shared Function GetIntTypeWidth(IntegerTy As TypeRef) As UInteger
        parameters:
        - id: IntegerTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetIntTypeWidth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.HalfTypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.HalfTypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: HalfTypeInContext(ContextRef)
        VB: HalfTypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.HalfTypeInContext(ContextRef)
        VB: LLVM.HalfTypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.HalfTypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.HalfTypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: HalfTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 337
      syntax:
        content:
          CSharp: public static TypeRef HalfTypeInContext(ContextRef C)
          VB: Public Shared Function HalfTypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.HalfTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.FloatTypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.FloatTypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: FloatTypeInContext(ContextRef)
        VB: FloatTypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.FloatTypeInContext(ContextRef)
        VB: LLVM.FloatTypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.FloatTypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.FloatTypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FloatTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 342
      syntax:
        content:
          CSharp: public static TypeRef FloatTypeInContext(ContextRef C)
          VB: Public Shared Function FloatTypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.FloatTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DoubleTypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.DoubleTypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: DoubleTypeInContext(ContextRef)
        VB: DoubleTypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.DoubleTypeInContext(ContextRef)
        VB: LLVM.DoubleTypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DoubleTypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.DoubleTypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DoubleTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 347
      syntax:
        content:
          CSharp: public static TypeRef DoubleTypeInContext(ContextRef C)
          VB: Public Shared Function DoubleTypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.DoubleTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.X86FP80TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.X86FP80TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: X86FP80TypeInContext(ContextRef)
        VB: X86FP80TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.X86FP80TypeInContext(ContextRef)
        VB: LLVM.X86FP80TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.X86FP80TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.X86FP80TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: X86FP80TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 352
      syntax:
        content:
          CSharp: public static TypeRef X86FP80TypeInContext(ContextRef C)
          VB: Public Shared Function X86FP80TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.X86FP80TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.FP128TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.FP128TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: FP128TypeInContext(ContextRef)
        VB: FP128TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.FP128TypeInContext(ContextRef)
        VB: LLVM.FP128TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.FP128TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.FP128TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FP128TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 357
      syntax:
        content:
          CSharp: public static TypeRef FP128TypeInContext(ContextRef C)
          VB: Public Shared Function FP128TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.FP128TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PPCFP128TypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.PPCFP128TypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: PPCFP128TypeInContext(ContextRef)
        VB: PPCFP128TypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.PPCFP128TypeInContext(ContextRef)
        VB: LLVM.PPCFP128TypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PPCFP128TypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.PPCFP128TypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PPCFP128TypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 362
      syntax:
        content:
          CSharp: public static TypeRef PPCFP128TypeInContext(ContextRef C)
          VB: Public Shared Function PPCFP128TypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.PPCFP128TypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.HalfType
      commentId: M:Swigged.LLVM.LLVM.HalfType
      language: CSharp
      name:
        CSharp: HalfType()
        VB: HalfType()
      nameWithType:
        CSharp: LLVM.HalfType()
        VB: LLVM.HalfType()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.HalfType()
        VB: Swigged.LLVM.LLVM.HalfType()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: HalfType
        path: src/swigged.llvm/LLVM.cs
        startLine: 367
      syntax:
        content:
          CSharp: public static TypeRef HalfType()
          VB: Public Shared Function HalfType As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.HalfType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.FloatType
      commentId: M:Swigged.LLVM.LLVM.FloatType
      language: CSharp
      name:
        CSharp: FloatType()
        VB: FloatType()
      nameWithType:
        CSharp: LLVM.FloatType()
        VB: LLVM.FloatType()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.FloatType()
        VB: Swigged.LLVM.LLVM.FloatType()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FloatType
        path: src/swigged.llvm/LLVM.cs
        startLine: 372
      syntax:
        content:
          CSharp: public static TypeRef FloatType()
          VB: Public Shared Function FloatType As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.FloatType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DoubleType
      commentId: M:Swigged.LLVM.LLVM.DoubleType
      language: CSharp
      name:
        CSharp: DoubleType()
        VB: DoubleType()
      nameWithType:
        CSharp: LLVM.DoubleType()
        VB: LLVM.DoubleType()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DoubleType()
        VB: Swigged.LLVM.LLVM.DoubleType()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DoubleType
        path: src/swigged.llvm/LLVM.cs
        startLine: 377
      syntax:
        content:
          CSharp: public static TypeRef DoubleType()
          VB: Public Shared Function DoubleType As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.DoubleType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.X86FP80Type
      commentId: M:Swigged.LLVM.LLVM.X86FP80Type
      language: CSharp
      name:
        CSharp: X86FP80Type()
        VB: X86FP80Type()
      nameWithType:
        CSharp: LLVM.X86FP80Type()
        VB: LLVM.X86FP80Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.X86FP80Type()
        VB: Swigged.LLVM.LLVM.X86FP80Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: X86FP80Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 382
      syntax:
        content:
          CSharp: public static TypeRef X86FP80Type()
          VB: Public Shared Function X86FP80Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.X86FP80Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.FP128Type
      commentId: M:Swigged.LLVM.LLVM.FP128Type
      language: CSharp
      name:
        CSharp: FP128Type()
        VB: FP128Type()
      nameWithType:
        CSharp: LLVM.FP128Type()
        VB: LLVM.FP128Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.FP128Type()
        VB: Swigged.LLVM.LLVM.FP128Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FP128Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 387
      syntax:
        content:
          CSharp: public static TypeRef FP128Type()
          VB: Public Shared Function FP128Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.FP128Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PPCFP128Type
      commentId: M:Swigged.LLVM.LLVM.PPCFP128Type
      language: CSharp
      name:
        CSharp: PPCFP128Type()
        VB: PPCFP128Type()
      nameWithType:
        CSharp: LLVM.PPCFP128Type()
        VB: LLVM.PPCFP128Type()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PPCFP128Type()
        VB: Swigged.LLVM.LLVM.PPCFP128Type()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PPCFP128Type
        path: src/swigged.llvm/LLVM.cs
        startLine: 392
      syntax:
        content:
          CSharp: public static TypeRef PPCFP128Type()
          VB: Public Shared Function PPCFP128Type As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.PPCFP128Type*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.FunctionType(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef[],System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.FunctionType(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef[],System.Boolean)
      language: CSharp
      name:
        CSharp: FunctionType(TypeRef, TypeRef[], Boolean)
        VB: FunctionType(TypeRef, TypeRef(), Boolean)
      nameWithType:
        CSharp: LLVM.FunctionType(TypeRef, TypeRef[], Boolean)
        VB: LLVM.FunctionType(TypeRef, TypeRef(), Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.FunctionType(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef[], System.Boolean)
        VB: Swigged.LLVM.LLVM.FunctionType(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef(), System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FunctionType
        path: src/swigged.llvm/LLVM.cs
        startLine: 397
      syntax:
        content:
          CSharp: public static TypeRef FunctionType(TypeRef ReturnType, TypeRef[] ParamTypes, bool IsVarArg)
          VB: Public Shared Function FunctionType(ReturnType As TypeRef, ParamTypes As TypeRef(), IsVarArg As Boolean) As TypeRef
        parameters:
        - id: ReturnType
          type: Swigged.LLVM.TypeRef
        - id: ParamTypes
          type: Swigged.LLVM.TypeRef[]
        - id: IsVarArg
          type: System.Boolean
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.FunctionType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsFunctionVarArg(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.IsFunctionVarArg(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: IsFunctionVarArg(TypeRef)
        VB: IsFunctionVarArg(TypeRef)
      nameWithType:
        CSharp: LLVM.IsFunctionVarArg(TypeRef)
        VB: LLVM.IsFunctionVarArg(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsFunctionVarArg(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.IsFunctionVarArg(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsFunctionVarArg
        path: src/swigged.llvm/LLVM.cs
        startLine: 405
      syntax:
        content:
          CSharp: public static bool IsFunctionVarArg(TypeRef FunctionTy)
          VB: Public Shared Function IsFunctionVarArg(FunctionTy As TypeRef) As Boolean
        parameters:
        - id: FunctionTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsFunctionVarArg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetReturnType(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetReturnType(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetReturnType(TypeRef)
        VB: GetReturnType(TypeRef)
      nameWithType:
        CSharp: LLVM.GetReturnType(TypeRef)
        VB: LLVM.GetReturnType(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetReturnType(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetReturnType(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetReturnType
        path: src/swigged.llvm/LLVM.cs
        startLine: 410
      syntax:
        content:
          CSharp: public static TypeRef GetReturnType(TypeRef FunctionTy)
          VB: Public Shared Function GetReturnType(FunctionTy As TypeRef) As TypeRef
        parameters:
        - id: FunctionTy
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.GetReturnType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CountParamTypes(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.CountParamTypes(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: CountParamTypes(TypeRef)
        VB: CountParamTypes(TypeRef)
      nameWithType:
        CSharp: LLVM.CountParamTypes(TypeRef)
        VB: LLVM.CountParamTypes(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CountParamTypes(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.CountParamTypes(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CountParamTypes
        path: src/swigged.llvm/LLVM.cs
        startLine: 415
      syntax:
        content:
          CSharp: public static uint CountParamTypes(TypeRef FunctionTy)
          VB: Public Shared Function CountParamTypes(FunctionTy As TypeRef) As UInteger
        parameters:
        - id: FunctionTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.CountParamTypes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetParamTypes(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef[])
      commentId: M:Swigged.LLVM.LLVM.GetParamTypes(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef[])
      language: CSharp
      name:
        CSharp: GetParamTypes(TypeRef, TypeRef[])
        VB: GetParamTypes(TypeRef, TypeRef())
      nameWithType:
        CSharp: LLVM.GetParamTypes(TypeRef, TypeRef[])
        VB: LLVM.GetParamTypes(TypeRef, TypeRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetParamTypes(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef[])
        VB: Swigged.LLVM.LLVM.GetParamTypes(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetParamTypes
        path: src/swigged.llvm/LLVM.cs
        startLine: 420
      syntax:
        content:
          CSharp: public static void GetParamTypes(TypeRef FunctionTy, TypeRef[] Dest)
          VB: Public Shared Sub GetParamTypes(FunctionTy As TypeRef, Dest As TypeRef())
        parameters:
        - id: FunctionTy
          type: Swigged.LLVM.TypeRef
        - id: Dest
          type: Swigged.LLVM.TypeRef[]
      overload: Swigged.LLVM.LLVM.GetParamTypes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.StructTypeInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.TypeRef[],System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.StructTypeInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.TypeRef[],System.Boolean)
      language: CSharp
      name:
        CSharp: StructTypeInContext(ContextRef, TypeRef[], Boolean)
        VB: StructTypeInContext(ContextRef, TypeRef(), Boolean)
      nameWithType:
        CSharp: LLVM.StructTypeInContext(ContextRef, TypeRef[], Boolean)
        VB: LLVM.StructTypeInContext(ContextRef, TypeRef(), Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.StructTypeInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.TypeRef[], System.Boolean)
        VB: Swigged.LLVM.LLVM.StructTypeInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.TypeRef(), System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StructTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 427
      syntax:
        content:
          CSharp: public static TypeRef StructTypeInContext(ContextRef C, TypeRef[] ElementTypes, bool Packed)
          VB: Public Shared Function StructTypeInContext(C As ContextRef, ElementTypes As TypeRef(), Packed As Boolean) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: ElementTypes
          type: Swigged.LLVM.TypeRef[]
        - id: Packed
          type: System.Boolean
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.StructTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.StructType(Swigged.LLVM.TypeRef[],System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.StructType(Swigged.LLVM.TypeRef[],System.Boolean)
      language: CSharp
      name:
        CSharp: StructType(TypeRef[], Boolean)
        VB: StructType(TypeRef(), Boolean)
      nameWithType:
        CSharp: LLVM.StructType(TypeRef[], Boolean)
        VB: LLVM.StructType(TypeRef(), Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.StructType(Swigged.LLVM.TypeRef[], System.Boolean)
        VB: Swigged.LLVM.LLVM.StructType(Swigged.LLVM.TypeRef(), System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StructType
        path: src/swigged.llvm/LLVM.cs
        startLine: 435
      syntax:
        content:
          CSharp: public static TypeRef StructType(TypeRef[] ElementTypes, bool Packed)
          VB: Public Shared Function StructType(ElementTypes As TypeRef(), Packed As Boolean) As TypeRef
        parameters:
        - id: ElementTypes
          type: Swigged.LLVM.TypeRef[]
        - id: Packed
          type: System.Boolean
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.StructType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.StructCreateNamed(Swigged.LLVM.ContextRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.StructCreateNamed(Swigged.LLVM.ContextRef,System.String)
      language: CSharp
      name:
        CSharp: StructCreateNamed(ContextRef, String)
        VB: StructCreateNamed(ContextRef, String)
      nameWithType:
        CSharp: LLVM.StructCreateNamed(ContextRef, String)
        VB: LLVM.StructCreateNamed(ContextRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.StructCreateNamed(Swigged.LLVM.ContextRef, System.String)
        VB: Swigged.LLVM.LLVM.StructCreateNamed(Swigged.LLVM.ContextRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StructCreateNamed
        path: src/swigged.llvm/LLVM.cs
        startLine: 443
      syntax:
        content:
          CSharp: public static TypeRef StructCreateNamed(ContextRef C, string Name)
          VB: Public Shared Function StructCreateNamed(C As ContextRef, Name As String) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.StructCreateNamed*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetStructName(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetStructName(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetStructName(TypeRef)
        VB: GetStructName(TypeRef)
      nameWithType:
        CSharp: LLVM.GetStructName(TypeRef)
        VB: LLVM.GetStructName(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetStructName(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetStructName(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetStructName
        path: src/swigged.llvm/LLVM.cs
        startLine: 448
      syntax:
        content:
          CSharp: public static string GetStructName(TypeRef Ty)
          VB: Public Shared Function GetStructName(Ty As TypeRef) As String
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetStructName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.StructSetBody(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef[],System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.StructSetBody(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef[],System.Boolean)
      language: CSharp
      name:
        CSharp: StructSetBody(TypeRef, TypeRef[], Boolean)
        VB: StructSetBody(TypeRef, TypeRef(), Boolean)
      nameWithType:
        CSharp: LLVM.StructSetBody(TypeRef, TypeRef[], Boolean)
        VB: LLVM.StructSetBody(TypeRef, TypeRef(), Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.StructSetBody(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef[], System.Boolean)
        VB: Swigged.LLVM.LLVM.StructSetBody(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef(), System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StructSetBody
        path: src/swigged.llvm/LLVM.cs
        startLine: 453
      syntax:
        content:
          CSharp: public static void StructSetBody(TypeRef StructTy, TypeRef[] ElementTypes, bool Packed)
          VB: Public Shared Sub StructSetBody(StructTy As TypeRef, ElementTypes As TypeRef(), Packed As Boolean)
        parameters:
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        - id: ElementTypes
          type: Swigged.LLVM.TypeRef[]
        - id: Packed
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.StructSetBody*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CountStructElementTypes(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.CountStructElementTypes(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: CountStructElementTypes(TypeRef)
        VB: CountStructElementTypes(TypeRef)
      nameWithType:
        CSharp: LLVM.CountStructElementTypes(TypeRef)
        VB: LLVM.CountStructElementTypes(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CountStructElementTypes(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.CountStructElementTypes(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CountStructElementTypes
        path: src/swigged.llvm/LLVM.cs
        startLine: 460
      syntax:
        content:
          CSharp: public static uint CountStructElementTypes(TypeRef StructTy)
          VB: Public Shared Function CountStructElementTypes(StructTy As TypeRef) As UInteger
        parameters:
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.CountStructElementTypes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetStructElementTypes(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef[])
      commentId: M:Swigged.LLVM.LLVM.GetStructElementTypes(Swigged.LLVM.TypeRef,Swigged.LLVM.TypeRef[])
      language: CSharp
      name:
        CSharp: GetStructElementTypes(TypeRef, TypeRef[])
        VB: GetStructElementTypes(TypeRef, TypeRef())
      nameWithType:
        CSharp: LLVM.GetStructElementTypes(TypeRef, TypeRef[])
        VB: LLVM.GetStructElementTypes(TypeRef, TypeRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetStructElementTypes(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef[])
        VB: Swigged.LLVM.LLVM.GetStructElementTypes(Swigged.LLVM.TypeRef, Swigged.LLVM.TypeRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetStructElementTypes
        path: src/swigged.llvm/LLVM.cs
        startLine: 465
      syntax:
        content:
          CSharp: public static void GetStructElementTypes(TypeRef StructTy, TypeRef[] Dest)
          VB: Public Shared Sub GetStructElementTypes(StructTy As TypeRef, Dest As TypeRef())
        parameters:
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        - id: Dest
          type: Swigged.LLVM.TypeRef[]
      overload: Swigged.LLVM.LLVM.GetStructElementTypes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.StructGetTypeAtIndex(Swigged.LLVM.TypeRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.StructGetTypeAtIndex(Swigged.LLVM.TypeRef,System.UInt32)
      language: CSharp
      name:
        CSharp: StructGetTypeAtIndex(TypeRef, UInt32)
        VB: StructGetTypeAtIndex(TypeRef, UInt32)
      nameWithType:
        CSharp: LLVM.StructGetTypeAtIndex(TypeRef, UInt32)
        VB: LLVM.StructGetTypeAtIndex(TypeRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.StructGetTypeAtIndex(Swigged.LLVM.TypeRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.StructGetTypeAtIndex(Swigged.LLVM.TypeRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StructGetTypeAtIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 472
      syntax:
        content:
          CSharp: public static TypeRef StructGetTypeAtIndex(TypeRef StructTy, uint i)
          VB: Public Shared Function StructGetTypeAtIndex(StructTy As TypeRef, i As UInteger) As TypeRef
        parameters:
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        - id: i
          type: System.UInt32
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.StructGetTypeAtIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsPackedStruct(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.IsPackedStruct(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: IsPackedStruct(TypeRef)
        VB: IsPackedStruct(TypeRef)
      nameWithType:
        CSharp: LLVM.IsPackedStruct(TypeRef)
        VB: LLVM.IsPackedStruct(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsPackedStruct(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.IsPackedStruct(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsPackedStruct
        path: src/swigged.llvm/LLVM.cs
        startLine: 477
      syntax:
        content:
          CSharp: public static bool IsPackedStruct(TypeRef StructTy)
          VB: Public Shared Function IsPackedStruct(StructTy As TypeRef) As Boolean
        parameters:
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsPackedStruct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsOpaqueStruct(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.IsOpaqueStruct(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: IsOpaqueStruct(TypeRef)
        VB: IsOpaqueStruct(TypeRef)
      nameWithType:
        CSharp: LLVM.IsOpaqueStruct(TypeRef)
        VB: LLVM.IsOpaqueStruct(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsOpaqueStruct(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.IsOpaqueStruct(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsOpaqueStruct
        path: src/swigged.llvm/LLVM.cs
        startLine: 482
      syntax:
        content:
          CSharp: public static bool IsOpaqueStruct(TypeRef StructTy)
          VB: Public Shared Function IsOpaqueStruct(StructTy As TypeRef) As Boolean
        parameters:
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsOpaqueStruct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetElementType(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetElementType(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetElementType(TypeRef)
        VB: GetElementType(TypeRef)
      nameWithType:
        CSharp: LLVM.GetElementType(TypeRef)
        VB: LLVM.GetElementType(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetElementType(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetElementType(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetElementType
        path: src/swigged.llvm/LLVM.cs
        startLine: 487
      syntax:
        content:
          CSharp: public static TypeRef GetElementType(TypeRef Ty)
          VB: Public Shared Function GetElementType(Ty As TypeRef) As TypeRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.GetElementType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ArrayType(Swigged.LLVM.TypeRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.ArrayType(Swigged.LLVM.TypeRef,System.UInt32)
      language: CSharp
      name:
        CSharp: ArrayType(TypeRef, UInt32)
        VB: ArrayType(TypeRef, UInt32)
      nameWithType:
        CSharp: LLVM.ArrayType(TypeRef, UInt32)
        VB: LLVM.ArrayType(TypeRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ArrayType(Swigged.LLVM.TypeRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.ArrayType(Swigged.LLVM.TypeRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ArrayType
        path: src/swigged.llvm/LLVM.cs
        startLine: 492
      syntax:
        content:
          CSharp: public static TypeRef ArrayType(TypeRef ElementType, uint ElementCount)
          VB: Public Shared Function ArrayType(ElementType As TypeRef, ElementCount As UInteger) As TypeRef
        parameters:
        - id: ElementType
          type: Swigged.LLVM.TypeRef
        - id: ElementCount
          type: System.UInt32
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.ArrayType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetArrayLength(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetArrayLength(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetArrayLength(TypeRef)
        VB: GetArrayLength(TypeRef)
      nameWithType:
        CSharp: LLVM.GetArrayLength(TypeRef)
        VB: LLVM.GetArrayLength(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetArrayLength(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetArrayLength(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetArrayLength
        path: src/swigged.llvm/LLVM.cs
        startLine: 497
      syntax:
        content:
          CSharp: public static uint GetArrayLength(TypeRef ArrayTy)
          VB: Public Shared Function GetArrayLength(ArrayTy As TypeRef) As UInteger
        parameters:
        - id: ArrayTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetArrayLength*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PointerType(Swigged.LLVM.TypeRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.PointerType(Swigged.LLVM.TypeRef,System.UInt32)
      language: CSharp
      name:
        CSharp: PointerType(TypeRef, UInt32)
        VB: PointerType(TypeRef, UInt32)
      nameWithType:
        CSharp: LLVM.PointerType(TypeRef, UInt32)
        VB: LLVM.PointerType(TypeRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PointerType(Swigged.LLVM.TypeRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.PointerType(Swigged.LLVM.TypeRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PointerType
        path: src/swigged.llvm/LLVM.cs
        startLine: 502
      syntax:
        content:
          CSharp: public static TypeRef PointerType(TypeRef ElementType, uint AddressSpace)
          VB: Public Shared Function PointerType(ElementType As TypeRef, AddressSpace As UInteger) As TypeRef
        parameters:
        - id: ElementType
          type: Swigged.LLVM.TypeRef
        - id: AddressSpace
          type: System.UInt32
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.PointerType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetPointerAddressSpace(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetPointerAddressSpace(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetPointerAddressSpace(TypeRef)
        VB: GetPointerAddressSpace(TypeRef)
      nameWithType:
        CSharp: LLVM.GetPointerAddressSpace(TypeRef)
        VB: LLVM.GetPointerAddressSpace(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetPointerAddressSpace(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetPointerAddressSpace(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetPointerAddressSpace
        path: src/swigged.llvm/LLVM.cs
        startLine: 507
      syntax:
        content:
          CSharp: public static uint GetPointerAddressSpace(TypeRef PointerTy)
          VB: Public Shared Function GetPointerAddressSpace(PointerTy As TypeRef) As UInteger
        parameters:
        - id: PointerTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetPointerAddressSpace*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.VectorType(Swigged.LLVM.TypeRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.VectorType(Swigged.LLVM.TypeRef,System.UInt32)
      language: CSharp
      name:
        CSharp: VectorType(TypeRef, UInt32)
        VB: VectorType(TypeRef, UInt32)
      nameWithType:
        CSharp: LLVM.VectorType(TypeRef, UInt32)
        VB: LLVM.VectorType(TypeRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.VectorType(Swigged.LLVM.TypeRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.VectorType(Swigged.LLVM.TypeRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: VectorType
        path: src/swigged.llvm/LLVM.cs
        startLine: 512
      syntax:
        content:
          CSharp: public static TypeRef VectorType(TypeRef ElementType, uint ElementCount)
          VB: Public Shared Function VectorType(ElementType As TypeRef, ElementCount As UInteger) As TypeRef
        parameters:
        - id: ElementType
          type: Swigged.LLVM.TypeRef
        - id: ElementCount
          type: System.UInt32
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.VectorType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetVectorSize(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetVectorSize(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetVectorSize(TypeRef)
        VB: GetVectorSize(TypeRef)
      nameWithType:
        CSharp: LLVM.GetVectorSize(TypeRef)
        VB: LLVM.GetVectorSize(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetVectorSize(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetVectorSize(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetVectorSize
        path: src/swigged.llvm/LLVM.cs
        startLine: 517
      syntax:
        content:
          CSharp: public static uint GetVectorSize(TypeRef VectorTy)
          VB: Public Shared Function GetVectorSize(VectorTy As TypeRef) As UInteger
        parameters:
        - id: VectorTy
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetVectorSize*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.VoidTypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.VoidTypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: VoidTypeInContext(ContextRef)
        VB: VoidTypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.VoidTypeInContext(ContextRef)
        VB: LLVM.VoidTypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.VoidTypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.VoidTypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: VoidTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 522
      syntax:
        content:
          CSharp: public static TypeRef VoidTypeInContext(ContextRef C)
          VB: Public Shared Function VoidTypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.VoidTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.LabelTypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.LabelTypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: LabelTypeInContext(ContextRef)
        VB: LabelTypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.LabelTypeInContext(ContextRef)
        VB: LLVM.LabelTypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.LabelTypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.LabelTypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LabelTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 527
      syntax:
        content:
          CSharp: public static TypeRef LabelTypeInContext(ContextRef C)
          VB: Public Shared Function LabelTypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.LabelTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.X86MMXTypeInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.X86MMXTypeInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: X86MMXTypeInContext(ContextRef)
        VB: X86MMXTypeInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.X86MMXTypeInContext(ContextRef)
        VB: LLVM.X86MMXTypeInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.X86MMXTypeInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.X86MMXTypeInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: X86MMXTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 532
      syntax:
        content:
          CSharp: public static TypeRef X86MMXTypeInContext(ContextRef C)
          VB: Public Shared Function X86MMXTypeInContext(C As ContextRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.X86MMXTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.VoidType
      commentId: M:Swigged.LLVM.LLVM.VoidType
      language: CSharp
      name:
        CSharp: VoidType()
        VB: VoidType()
      nameWithType:
        CSharp: LLVM.VoidType()
        VB: LLVM.VoidType()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.VoidType()
        VB: Swigged.LLVM.LLVM.VoidType()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: VoidType
        path: src/swigged.llvm/LLVM.cs
        startLine: 537
      syntax:
        content:
          CSharp: public static TypeRef VoidType()
          VB: Public Shared Function VoidType As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.VoidType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.LabelType
      commentId: M:Swigged.LLVM.LLVM.LabelType
      language: CSharp
      name:
        CSharp: LabelType()
        VB: LabelType()
      nameWithType:
        CSharp: LLVM.LabelType()
        VB: LLVM.LabelType()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.LabelType()
        VB: Swigged.LLVM.LLVM.LabelType()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LabelType
        path: src/swigged.llvm/LLVM.cs
        startLine: 542
      syntax:
        content:
          CSharp: public static TypeRef LabelType()
          VB: Public Shared Function LabelType As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.LabelType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.X86MMXType
      commentId: M:Swigged.LLVM.LLVM.X86MMXType
      language: CSharp
      name:
        CSharp: X86MMXType()
        VB: X86MMXType()
      nameWithType:
        CSharp: LLVM.X86MMXType()
        VB: LLVM.X86MMXType()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.X86MMXType()
        VB: Swigged.LLVM.LLVM.X86MMXType()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: X86MMXType
        path: src/swigged.llvm/LLVM.cs
        startLine: 547
      syntax:
        content:
          CSharp: public static TypeRef X86MMXType()
          VB: Public Shared Function X86MMXType As TypeRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.X86MMXType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.TypeOf(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.TypeOf(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: TypeOf(ValueRef)
        VB: TypeOf(ValueRef)
      nameWithType:
        CSharp: LLVM.TypeOf(ValueRef)
        VB: LLVM.TypeOf(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.TypeOf(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.TypeOf(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: TypeOf
        path: src/swigged.llvm/LLVM.cs
        startLine: 552
      syntax:
        content:
          CSharp: public static TypeRef TypeOf(ValueRef Val)
          VB: Public Shared Function TypeOf(Val As ValueRef) As TypeRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.TypeOf*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetValueKind(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetValueKind(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetValueKind(ValueRef)
        VB: GetValueKind(ValueRef)
      nameWithType:
        CSharp: LLVM.GetValueKind(ValueRef)
        VB: LLVM.GetValueKind(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetValueKind(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetValueKind(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetValueKind
        path: src/swigged.llvm/LLVM.cs
        startLine: 557
      syntax:
        content:
          CSharp: public static ValueKind GetValueKind(ValueRef Val)
          VB: Public Shared Function GetValueKind(Val As ValueRef) As ValueKind
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueKind
      overload: Swigged.LLVM.LLVM.GetValueKind*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetValueName(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetValueName(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetValueName(ValueRef)
        VB: GetValueName(ValueRef)
      nameWithType:
        CSharp: LLVM.GetValueName(ValueRef)
        VB: LLVM.GetValueName(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetValueName(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetValueName(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetValueName
        path: src/swigged.llvm/LLVM.cs
        startLine: 562
      syntax:
        content:
          CSharp: public static string GetValueName(ValueRef Val)
          VB: Public Shared Function GetValueName(Val As ValueRef) As String
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetValueName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetValueName(Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.SetValueName(Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: SetValueName(ValueRef, String)
        VB: SetValueName(ValueRef, String)
      nameWithType:
        CSharp: LLVM.SetValueName(ValueRef, String)
        VB: LLVM.SetValueName(ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetValueName(Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.SetValueName(Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetValueName
        path: src/swigged.llvm/LLVM.cs
        startLine: 567
      syntax:
        content:
          CSharp: public static void SetValueName(ValueRef Val, string Name)
          VB: Public Shared Sub SetValueName(Val As ValueRef, Name As String)
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
      overload: Swigged.LLVM.LLVM.SetValueName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DumpValue(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.DumpValue(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: DumpValue(ValueRef)
        VB: DumpValue(ValueRef)
      nameWithType:
        CSharp: LLVM.DumpValue(ValueRef)
        VB: LLVM.DumpValue(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DumpValue(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.DumpValue(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DumpValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 571
      syntax:
        content:
          CSharp: public static void DumpValue(ValueRef Val)
          VB: Public Shared Sub DumpValue(Val As ValueRef)
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.DumpValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PrintValueToString(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.PrintValueToString(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: PrintValueToString(ValueRef)
        VB: PrintValueToString(ValueRef)
      nameWithType:
        CSharp: LLVM.PrintValueToString(ValueRef)
        VB: LLVM.PrintValueToString(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PrintValueToString(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.PrintValueToString(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PrintValueToString
        path: src/swigged.llvm/LLVM.cs
        startLine: 575
      syntax:
        content:
          CSharp: public static string PrintValueToString(ValueRef Val)
          VB: Public Shared Function PrintValueToString(Val As ValueRef) As String
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.PrintValueToString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ReplaceAllUsesWith(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ReplaceAllUsesWith(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ReplaceAllUsesWith(ValueRef, ValueRef)
        VB: ReplaceAllUsesWith(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ReplaceAllUsesWith(ValueRef, ValueRef)
        VB: LLVM.ReplaceAllUsesWith(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ReplaceAllUsesWith(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ReplaceAllUsesWith(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ReplaceAllUsesWith
        path: src/swigged.llvm/LLVM.cs
        startLine: 580
      syntax:
        content:
          CSharp: public static void ReplaceAllUsesWith(ValueRef OldVal, ValueRef NewVal)
          VB: Public Shared Sub ReplaceAllUsesWith(OldVal As ValueRef, NewVal As ValueRef)
        parameters:
        - id: OldVal
          type: Swigged.LLVM.ValueRef
        - id: NewVal
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ReplaceAllUsesWith*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsConstant(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsConstant(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsConstant(ValueRef)
        VB: IsConstant(ValueRef)
      nameWithType:
        CSharp: LLVM.IsConstant(ValueRef)
        VB: LLVM.IsConstant(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsConstant(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsConstant(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsConstant
        path: src/swigged.llvm/LLVM.cs
        startLine: 584
      syntax:
        content:
          CSharp: public static bool IsConstant(ValueRef Val)
          VB: Public Shared Function IsConstant(Val As ValueRef) As Boolean
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsConstant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsUndef(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsUndef(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsUndef(ValueRef)
        VB: IsUndef(ValueRef)
      nameWithType:
        CSharp: LLVM.IsUndef(ValueRef)
        VB: LLVM.IsUndef(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsUndef(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsUndef(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsUndef
        path: src/swigged.llvm/LLVM.cs
        startLine: 589
      syntax:
        content:
          CSharp: public static bool IsUndef(ValueRef Val)
          VB: Public Shared Function IsUndef(Val As ValueRef) As Boolean
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsUndef*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAArgument(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAArgument(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAArgument(ValueRef)
        VB: IsAArgument(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAArgument(ValueRef)
        VB: LLVM.IsAArgument(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAArgument(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAArgument(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAArgument
        path: src/swigged.llvm/LLVM.cs
        startLine: 594
      syntax:
        content:
          CSharp: public static ValueRef IsAArgument(ValueRef Val)
          VB: Public Shared Function IsAArgument(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAArgument*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsABasicBlock(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsABasicBlock(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsABasicBlock(ValueRef)
        VB: IsABasicBlock(ValueRef)
      nameWithType:
        CSharp: LLVM.IsABasicBlock(ValueRef)
        VB: LLVM.IsABasicBlock(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsABasicBlock(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsABasicBlock(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsABasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 599
      syntax:
        content:
          CSharp: public static ValueRef IsABasicBlock(ValueRef Val)
          VB: Public Shared Function IsABasicBlock(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsABasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAInlineAsm(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAInlineAsm(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAInlineAsm(ValueRef)
        VB: IsAInlineAsm(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAInlineAsm(ValueRef)
        VB: LLVM.IsAInlineAsm(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAInlineAsm(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAInlineAsm(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAInlineAsm
        path: src/swigged.llvm/LLVM.cs
        startLine: 604
      syntax:
        content:
          CSharp: public static ValueRef IsAInlineAsm(ValueRef Val)
          VB: Public Shared Function IsAInlineAsm(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAInlineAsm*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAUser(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAUser(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAUser(ValueRef)
        VB: IsAUser(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAUser(ValueRef)
        VB: LLVM.IsAUser(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAUser(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAUser(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAUser
        path: src/swigged.llvm/LLVM.cs
        startLine: 609
      syntax:
        content:
          CSharp: public static ValueRef IsAUser(ValueRef Val)
          VB: Public Shared Function IsAUser(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAUser*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstant(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstant(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstant(ValueRef)
        VB: IsAConstant(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstant(ValueRef)
        VB: LLVM.IsAConstant(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstant(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstant(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstant
        path: src/swigged.llvm/LLVM.cs
        startLine: 614
      syntax:
        content:
          CSharp: public static ValueRef IsAConstant(ValueRef Val)
          VB: Public Shared Function IsAConstant(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsABlockAddress(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsABlockAddress(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsABlockAddress(ValueRef)
        VB: IsABlockAddress(ValueRef)
      nameWithType:
        CSharp: LLVM.IsABlockAddress(ValueRef)
        VB: LLVM.IsABlockAddress(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsABlockAddress(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsABlockAddress(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsABlockAddress
        path: src/swigged.llvm/LLVM.cs
        startLine: 619
      syntax:
        content:
          CSharp: public static ValueRef IsABlockAddress(ValueRef Val)
          VB: Public Shared Function IsABlockAddress(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsABlockAddress*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantAggregateZero(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantAggregateZero(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantAggregateZero(ValueRef)
        VB: IsAConstantAggregateZero(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantAggregateZero(ValueRef)
        VB: LLVM.IsAConstantAggregateZero(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantAggregateZero(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantAggregateZero(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantAggregateZero
        path: src/swigged.llvm/LLVM.cs
        startLine: 624
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantAggregateZero(ValueRef Val)
          VB: Public Shared Function IsAConstantAggregateZero(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantAggregateZero*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantArray(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantArray(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantArray(ValueRef)
        VB: IsAConstantArray(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantArray(ValueRef)
        VB: LLVM.IsAConstantArray(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantArray(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantArray(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantArray
        path: src/swigged.llvm/LLVM.cs
        startLine: 629
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantArray(ValueRef Val)
          VB: Public Shared Function IsAConstantArray(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantArray*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantDataSequential(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantDataSequential(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantDataSequential(ValueRef)
        VB: IsAConstantDataSequential(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantDataSequential(ValueRef)
        VB: LLVM.IsAConstantDataSequential(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantDataSequential(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantDataSequential(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantDataSequential
        path: src/swigged.llvm/LLVM.cs
        startLine: 634
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantDataSequential(ValueRef Val)
          VB: Public Shared Function IsAConstantDataSequential(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantDataSequential*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantDataArray(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantDataArray(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantDataArray(ValueRef)
        VB: IsAConstantDataArray(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantDataArray(ValueRef)
        VB: LLVM.IsAConstantDataArray(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantDataArray(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantDataArray(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantDataArray
        path: src/swigged.llvm/LLVM.cs
        startLine: 639
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantDataArray(ValueRef Val)
          VB: Public Shared Function IsAConstantDataArray(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantDataArray*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantDataVector(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantDataVector(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantDataVector(ValueRef)
        VB: IsAConstantDataVector(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantDataVector(ValueRef)
        VB: LLVM.IsAConstantDataVector(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantDataVector(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantDataVector(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantDataVector
        path: src/swigged.llvm/LLVM.cs
        startLine: 644
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantDataVector(ValueRef Val)
          VB: Public Shared Function IsAConstantDataVector(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantDataVector*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantExpr(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantExpr(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantExpr(ValueRef)
        VB: IsAConstantExpr(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantExpr(ValueRef)
        VB: LLVM.IsAConstantExpr(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantExpr(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantExpr(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantExpr
        path: src/swigged.llvm/LLVM.cs
        startLine: 649
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantExpr(ValueRef Val)
          VB: Public Shared Function IsAConstantExpr(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantExpr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantFP(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantFP(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantFP(ValueRef)
        VB: IsAConstantFP(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantFP(ValueRef)
        VB: LLVM.IsAConstantFP(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantFP(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantFP(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantFP
        path: src/swigged.llvm/LLVM.cs
        startLine: 654
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantFP(ValueRef Val)
          VB: Public Shared Function IsAConstantFP(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantFP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantInt(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantInt(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantInt(ValueRef)
        VB: IsAConstantInt(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantInt(ValueRef)
        VB: LLVM.IsAConstantInt(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantInt(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantInt(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantInt
        path: src/swigged.llvm/LLVM.cs
        startLine: 659
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantInt(ValueRef Val)
          VB: Public Shared Function IsAConstantInt(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantPointerNull(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantPointerNull(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantPointerNull(ValueRef)
        VB: IsAConstantPointerNull(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantPointerNull(ValueRef)
        VB: LLVM.IsAConstantPointerNull(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantPointerNull(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantPointerNull(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantPointerNull
        path: src/swigged.llvm/LLVM.cs
        startLine: 664
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantPointerNull(ValueRef Val)
          VB: Public Shared Function IsAConstantPointerNull(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantPointerNull*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantStruct(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantStruct(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantStruct(ValueRef)
        VB: IsAConstantStruct(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantStruct(ValueRef)
        VB: LLVM.IsAConstantStruct(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantStruct(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantStruct(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantStruct
        path: src/swigged.llvm/LLVM.cs
        startLine: 669
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantStruct(ValueRef Val)
          VB: Public Shared Function IsAConstantStruct(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantStruct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantTokenNone(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantTokenNone(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantTokenNone(ValueRef)
        VB: IsAConstantTokenNone(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantTokenNone(ValueRef)
        VB: LLVM.IsAConstantTokenNone(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantTokenNone(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantTokenNone(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantTokenNone
        path: src/swigged.llvm/LLVM.cs
        startLine: 674
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantTokenNone(ValueRef Val)
          VB: Public Shared Function IsAConstantTokenNone(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantTokenNone*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAConstantVector(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAConstantVector(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAConstantVector(ValueRef)
        VB: IsAConstantVector(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAConstantVector(ValueRef)
        VB: LLVM.IsAConstantVector(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAConstantVector(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAConstantVector(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAConstantVector
        path: src/swigged.llvm/LLVM.cs
        startLine: 679
      syntax:
        content:
          CSharp: public static ValueRef IsAConstantVector(ValueRef Val)
          VB: Public Shared Function IsAConstantVector(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAConstantVector*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAGlobalValue(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAGlobalValue(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAGlobalValue(ValueRef)
        VB: IsAGlobalValue(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAGlobalValue(ValueRef)
        VB: LLVM.IsAGlobalValue(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAGlobalValue(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAGlobalValue(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAGlobalValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 684
      syntax:
        content:
          CSharp: public static ValueRef IsAGlobalValue(ValueRef Val)
          VB: Public Shared Function IsAGlobalValue(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAGlobalValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAGlobalAlias(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAGlobalAlias(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAGlobalAlias(ValueRef)
        VB: IsAGlobalAlias(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAGlobalAlias(ValueRef)
        VB: LLVM.IsAGlobalAlias(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAGlobalAlias(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAGlobalAlias(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAGlobalAlias
        path: src/swigged.llvm/LLVM.cs
        startLine: 689
      syntax:
        content:
          CSharp: public static ValueRef IsAGlobalAlias(ValueRef Val)
          VB: Public Shared Function IsAGlobalAlias(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAGlobalAlias*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAGlobalObject(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAGlobalObject(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAGlobalObject(ValueRef)
        VB: IsAGlobalObject(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAGlobalObject(ValueRef)
        VB: LLVM.IsAGlobalObject(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAGlobalObject(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAGlobalObject(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAGlobalObject
        path: src/swigged.llvm/LLVM.cs
        startLine: 694
      syntax:
        content:
          CSharp: public static ValueRef IsAGlobalObject(ValueRef Val)
          VB: Public Shared Function IsAGlobalObject(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAGlobalObject*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAFunction(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAFunction(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAFunction(ValueRef)
        VB: IsAFunction(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAFunction(ValueRef)
        VB: LLVM.IsAFunction(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAFunction(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAFunction(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 699
      syntax:
        content:
          CSharp: public static ValueRef IsAFunction(ValueRef Val)
          VB: Public Shared Function IsAFunction(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAGlobalVariable(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAGlobalVariable(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAGlobalVariable(ValueRef)
        VB: IsAGlobalVariable(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAGlobalVariable(ValueRef)
        VB: LLVM.IsAGlobalVariable(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAGlobalVariable(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAGlobalVariable(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAGlobalVariable
        path: src/swigged.llvm/LLVM.cs
        startLine: 704
      syntax:
        content:
          CSharp: public static ValueRef IsAGlobalVariable(ValueRef Val)
          VB: Public Shared Function IsAGlobalVariable(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAGlobalVariable*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAUndefValue(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAUndefValue(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAUndefValue(ValueRef)
        VB: IsAUndefValue(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAUndefValue(ValueRef)
        VB: LLVM.IsAUndefValue(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAUndefValue(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAUndefValue(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAUndefValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 709
      syntax:
        content:
          CSharp: public static ValueRef IsAUndefValue(ValueRef Val)
          VB: Public Shared Function IsAUndefValue(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAUndefValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAInstruction(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAInstruction(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAInstruction(ValueRef)
        VB: IsAInstruction(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAInstruction(ValueRef)
        VB: LLVM.IsAInstruction(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAInstruction(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAInstruction(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAInstruction
        path: src/swigged.llvm/LLVM.cs
        startLine: 714
      syntax:
        content:
          CSharp: public static ValueRef IsAInstruction(ValueRef Val)
          VB: Public Shared Function IsAInstruction(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAInstruction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsABinaryOperator(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsABinaryOperator(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsABinaryOperator(ValueRef)
        VB: IsABinaryOperator(ValueRef)
      nameWithType:
        CSharp: LLVM.IsABinaryOperator(ValueRef)
        VB: LLVM.IsABinaryOperator(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsABinaryOperator(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsABinaryOperator(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsABinaryOperator
        path: src/swigged.llvm/LLVM.cs
        startLine: 719
      syntax:
        content:
          CSharp: public static ValueRef IsABinaryOperator(ValueRef Val)
          VB: Public Shared Function IsABinaryOperator(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsABinaryOperator*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsACallInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsACallInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsACallInst(ValueRef)
        VB: IsACallInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsACallInst(ValueRef)
        VB: LLVM.IsACallInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsACallInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsACallInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsACallInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 724
      syntax:
        content:
          CSharp: public static ValueRef IsACallInst(ValueRef Val)
          VB: Public Shared Function IsACallInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsACallInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAIntrinsicInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAIntrinsicInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAIntrinsicInst(ValueRef)
        VB: IsAIntrinsicInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAIntrinsicInst(ValueRef)
        VB: LLVM.IsAIntrinsicInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAIntrinsicInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAIntrinsicInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAIntrinsicInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 729
      syntax:
        content:
          CSharp: public static ValueRef IsAIntrinsicInst(ValueRef Val)
          VB: Public Shared Function IsAIntrinsicInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAIntrinsicInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsADbgInfoIntrinsic(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsADbgInfoIntrinsic(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsADbgInfoIntrinsic(ValueRef)
        VB: IsADbgInfoIntrinsic(ValueRef)
      nameWithType:
        CSharp: LLVM.IsADbgInfoIntrinsic(ValueRef)
        VB: LLVM.IsADbgInfoIntrinsic(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsADbgInfoIntrinsic(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsADbgInfoIntrinsic(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsADbgInfoIntrinsic
        path: src/swigged.llvm/LLVM.cs
        startLine: 734
      syntax:
        content:
          CSharp: public static ValueRef IsADbgInfoIntrinsic(ValueRef Val)
          VB: Public Shared Function IsADbgInfoIntrinsic(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsADbgInfoIntrinsic*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsADbgDeclareInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsADbgDeclareInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsADbgDeclareInst(ValueRef)
        VB: IsADbgDeclareInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsADbgDeclareInst(ValueRef)
        VB: LLVM.IsADbgDeclareInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsADbgDeclareInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsADbgDeclareInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsADbgDeclareInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 739
      syntax:
        content:
          CSharp: public static ValueRef IsADbgDeclareInst(ValueRef Val)
          VB: Public Shared Function IsADbgDeclareInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsADbgDeclareInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAMemIntrinsic(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAMemIntrinsic(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAMemIntrinsic(ValueRef)
        VB: IsAMemIntrinsic(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAMemIntrinsic(ValueRef)
        VB: LLVM.IsAMemIntrinsic(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAMemIntrinsic(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAMemIntrinsic(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAMemIntrinsic
        path: src/swigged.llvm/LLVM.cs
        startLine: 744
      syntax:
        content:
          CSharp: public static ValueRef IsAMemIntrinsic(ValueRef Val)
          VB: Public Shared Function IsAMemIntrinsic(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAMemIntrinsic*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAMemCpyInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAMemCpyInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAMemCpyInst(ValueRef)
        VB: IsAMemCpyInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAMemCpyInst(ValueRef)
        VB: LLVM.IsAMemCpyInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAMemCpyInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAMemCpyInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAMemCpyInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 749
      syntax:
        content:
          CSharp: public static ValueRef IsAMemCpyInst(ValueRef Val)
          VB: Public Shared Function IsAMemCpyInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAMemCpyInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAMemMoveInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAMemMoveInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAMemMoveInst(ValueRef)
        VB: IsAMemMoveInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAMemMoveInst(ValueRef)
        VB: LLVM.IsAMemMoveInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAMemMoveInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAMemMoveInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAMemMoveInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 754
      syntax:
        content:
          CSharp: public static ValueRef IsAMemMoveInst(ValueRef Val)
          VB: Public Shared Function IsAMemMoveInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAMemMoveInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAMemSetInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAMemSetInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAMemSetInst(ValueRef)
        VB: IsAMemSetInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAMemSetInst(ValueRef)
        VB: LLVM.IsAMemSetInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAMemSetInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAMemSetInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAMemSetInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 759
      syntax:
        content:
          CSharp: public static ValueRef IsAMemSetInst(ValueRef Val)
          VB: Public Shared Function IsAMemSetInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAMemSetInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsACmpInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsACmpInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsACmpInst(ValueRef)
        VB: IsACmpInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsACmpInst(ValueRef)
        VB: LLVM.IsACmpInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsACmpInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsACmpInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsACmpInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 764
      syntax:
        content:
          CSharp: public static ValueRef IsACmpInst(ValueRef Val)
          VB: Public Shared Function IsACmpInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsACmpInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAFCmpInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAFCmpInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAFCmpInst(ValueRef)
        VB: IsAFCmpInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAFCmpInst(ValueRef)
        VB: LLVM.IsAFCmpInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAFCmpInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAFCmpInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAFCmpInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 769
      syntax:
        content:
          CSharp: public static ValueRef IsAFCmpInst(ValueRef Val)
          VB: Public Shared Function IsAFCmpInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAFCmpInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAICmpInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAICmpInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAICmpInst(ValueRef)
        VB: IsAICmpInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAICmpInst(ValueRef)
        VB: LLVM.IsAICmpInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAICmpInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAICmpInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAICmpInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 774
      syntax:
        content:
          CSharp: public static ValueRef IsAICmpInst(ValueRef Val)
          VB: Public Shared Function IsAICmpInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAICmpInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAExtractElementInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAExtractElementInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAExtractElementInst(ValueRef)
        VB: IsAExtractElementInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAExtractElementInst(ValueRef)
        VB: LLVM.IsAExtractElementInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAExtractElementInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAExtractElementInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAExtractElementInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 779
      syntax:
        content:
          CSharp: public static ValueRef IsAExtractElementInst(ValueRef Val)
          VB: Public Shared Function IsAExtractElementInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAExtractElementInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAGetElementPtrInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAGetElementPtrInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAGetElementPtrInst(ValueRef)
        VB: IsAGetElementPtrInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAGetElementPtrInst(ValueRef)
        VB: LLVM.IsAGetElementPtrInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAGetElementPtrInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAGetElementPtrInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAGetElementPtrInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 784
      syntax:
        content:
          CSharp: public static ValueRef IsAGetElementPtrInst(ValueRef Val)
          VB: Public Shared Function IsAGetElementPtrInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAGetElementPtrInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAInsertElementInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAInsertElementInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAInsertElementInst(ValueRef)
        VB: IsAInsertElementInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAInsertElementInst(ValueRef)
        VB: LLVM.IsAInsertElementInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAInsertElementInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAInsertElementInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAInsertElementInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 789
      syntax:
        content:
          CSharp: public static ValueRef IsAInsertElementInst(ValueRef Val)
          VB: Public Shared Function IsAInsertElementInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAInsertElementInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAInsertValueInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAInsertValueInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAInsertValueInst(ValueRef)
        VB: IsAInsertValueInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAInsertValueInst(ValueRef)
        VB: LLVM.IsAInsertValueInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAInsertValueInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAInsertValueInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAInsertValueInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 794
      syntax:
        content:
          CSharp: public static ValueRef IsAInsertValueInst(ValueRef Val)
          VB: Public Shared Function IsAInsertValueInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAInsertValueInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsALandingPadInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsALandingPadInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsALandingPadInst(ValueRef)
        VB: IsALandingPadInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsALandingPadInst(ValueRef)
        VB: LLVM.IsALandingPadInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsALandingPadInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsALandingPadInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsALandingPadInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 799
      syntax:
        content:
          CSharp: public static ValueRef IsALandingPadInst(ValueRef Val)
          VB: Public Shared Function IsALandingPadInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsALandingPadInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAPHINode(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAPHINode(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAPHINode(ValueRef)
        VB: IsAPHINode(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAPHINode(ValueRef)
        VB: LLVM.IsAPHINode(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAPHINode(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAPHINode(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAPHINode
        path: src/swigged.llvm/LLVM.cs
        startLine: 804
      syntax:
        content:
          CSharp: public static ValueRef IsAPHINode(ValueRef Val)
          VB: Public Shared Function IsAPHINode(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAPHINode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsASelectInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsASelectInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsASelectInst(ValueRef)
        VB: IsASelectInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsASelectInst(ValueRef)
        VB: LLVM.IsASelectInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsASelectInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsASelectInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsASelectInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 809
      syntax:
        content:
          CSharp: public static ValueRef IsASelectInst(ValueRef Val)
          VB: Public Shared Function IsASelectInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsASelectInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAShuffleVectorInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAShuffleVectorInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAShuffleVectorInst(ValueRef)
        VB: IsAShuffleVectorInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAShuffleVectorInst(ValueRef)
        VB: LLVM.IsAShuffleVectorInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAShuffleVectorInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAShuffleVectorInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAShuffleVectorInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 814
      syntax:
        content:
          CSharp: public static ValueRef IsAShuffleVectorInst(ValueRef Val)
          VB: Public Shared Function IsAShuffleVectorInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAShuffleVectorInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAStoreInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAStoreInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAStoreInst(ValueRef)
        VB: IsAStoreInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAStoreInst(ValueRef)
        VB: LLVM.IsAStoreInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAStoreInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAStoreInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAStoreInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 819
      syntax:
        content:
          CSharp: public static ValueRef IsAStoreInst(ValueRef Val)
          VB: Public Shared Function IsAStoreInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAStoreInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsATerminatorInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsATerminatorInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsATerminatorInst(ValueRef)
        VB: IsATerminatorInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsATerminatorInst(ValueRef)
        VB: LLVM.IsATerminatorInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsATerminatorInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsATerminatorInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsATerminatorInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 824
      syntax:
        content:
          CSharp: public static ValueRef IsATerminatorInst(ValueRef Val)
          VB: Public Shared Function IsATerminatorInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsATerminatorInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsABranchInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsABranchInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsABranchInst(ValueRef)
        VB: IsABranchInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsABranchInst(ValueRef)
        VB: LLVM.IsABranchInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsABranchInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsABranchInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsABranchInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 829
      syntax:
        content:
          CSharp: public static ValueRef IsABranchInst(ValueRef Val)
          VB: Public Shared Function IsABranchInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsABranchInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAIndirectBrInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAIndirectBrInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAIndirectBrInst(ValueRef)
        VB: IsAIndirectBrInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAIndirectBrInst(ValueRef)
        VB: LLVM.IsAIndirectBrInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAIndirectBrInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAIndirectBrInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAIndirectBrInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 834
      syntax:
        content:
          CSharp: public static ValueRef IsAIndirectBrInst(ValueRef Val)
          VB: Public Shared Function IsAIndirectBrInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAIndirectBrInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAInvokeInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAInvokeInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAInvokeInst(ValueRef)
        VB: IsAInvokeInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAInvokeInst(ValueRef)
        VB: LLVM.IsAInvokeInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAInvokeInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAInvokeInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAInvokeInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 839
      syntax:
        content:
          CSharp: public static ValueRef IsAInvokeInst(ValueRef Val)
          VB: Public Shared Function IsAInvokeInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAInvokeInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAReturnInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAReturnInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAReturnInst(ValueRef)
        VB: IsAReturnInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAReturnInst(ValueRef)
        VB: LLVM.IsAReturnInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAReturnInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAReturnInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAReturnInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 844
      syntax:
        content:
          CSharp: public static ValueRef IsAReturnInst(ValueRef Val)
          VB: Public Shared Function IsAReturnInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAReturnInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsASwitchInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsASwitchInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsASwitchInst(ValueRef)
        VB: IsASwitchInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsASwitchInst(ValueRef)
        VB: LLVM.IsASwitchInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsASwitchInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsASwitchInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsASwitchInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 849
      syntax:
        content:
          CSharp: public static ValueRef IsASwitchInst(ValueRef Val)
          VB: Public Shared Function IsASwitchInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsASwitchInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAUnreachableInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAUnreachableInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAUnreachableInst(ValueRef)
        VB: IsAUnreachableInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAUnreachableInst(ValueRef)
        VB: LLVM.IsAUnreachableInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAUnreachableInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAUnreachableInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAUnreachableInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 854
      syntax:
        content:
          CSharp: public static ValueRef IsAUnreachableInst(ValueRef Val)
          VB: Public Shared Function IsAUnreachableInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAUnreachableInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAResumeInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAResumeInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAResumeInst(ValueRef)
        VB: IsAResumeInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAResumeInst(ValueRef)
        VB: LLVM.IsAResumeInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAResumeInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAResumeInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAResumeInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 859
      syntax:
        content:
          CSharp: public static ValueRef IsAResumeInst(ValueRef Val)
          VB: Public Shared Function IsAResumeInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAResumeInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsACleanupReturnInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsACleanupReturnInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsACleanupReturnInst(ValueRef)
        VB: IsACleanupReturnInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsACleanupReturnInst(ValueRef)
        VB: LLVM.IsACleanupReturnInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsACleanupReturnInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsACleanupReturnInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsACleanupReturnInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 864
      syntax:
        content:
          CSharp: public static ValueRef IsACleanupReturnInst(ValueRef Val)
          VB: Public Shared Function IsACleanupReturnInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsACleanupReturnInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsACatchReturnInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsACatchReturnInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsACatchReturnInst(ValueRef)
        VB: IsACatchReturnInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsACatchReturnInst(ValueRef)
        VB: LLVM.IsACatchReturnInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsACatchReturnInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsACatchReturnInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsACatchReturnInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 869
      syntax:
        content:
          CSharp: public static ValueRef IsACatchReturnInst(ValueRef Val)
          VB: Public Shared Function IsACatchReturnInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsACatchReturnInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAFuncletPadInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAFuncletPadInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAFuncletPadInst(ValueRef)
        VB: IsAFuncletPadInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAFuncletPadInst(ValueRef)
        VB: LLVM.IsAFuncletPadInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAFuncletPadInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAFuncletPadInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAFuncletPadInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 874
      syntax:
        content:
          CSharp: public static ValueRef IsAFuncletPadInst(ValueRef Val)
          VB: Public Shared Function IsAFuncletPadInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAFuncletPadInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsACatchPadInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsACatchPadInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsACatchPadInst(ValueRef)
        VB: IsACatchPadInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsACatchPadInst(ValueRef)
        VB: LLVM.IsACatchPadInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsACatchPadInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsACatchPadInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsACatchPadInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 879
      syntax:
        content:
          CSharp: public static ValueRef IsACatchPadInst(ValueRef Val)
          VB: Public Shared Function IsACatchPadInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsACatchPadInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsACleanupPadInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsACleanupPadInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsACleanupPadInst(ValueRef)
        VB: IsACleanupPadInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsACleanupPadInst(ValueRef)
        VB: LLVM.IsACleanupPadInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsACleanupPadInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsACleanupPadInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsACleanupPadInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 884
      syntax:
        content:
          CSharp: public static ValueRef IsACleanupPadInst(ValueRef Val)
          VB: Public Shared Function IsACleanupPadInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsACleanupPadInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAUnaryInstruction(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAUnaryInstruction(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAUnaryInstruction(ValueRef)
        VB: IsAUnaryInstruction(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAUnaryInstruction(ValueRef)
        VB: LLVM.IsAUnaryInstruction(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAUnaryInstruction(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAUnaryInstruction(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAUnaryInstruction
        path: src/swigged.llvm/LLVM.cs
        startLine: 889
      syntax:
        content:
          CSharp: public static ValueRef IsAUnaryInstruction(ValueRef Val)
          VB: Public Shared Function IsAUnaryInstruction(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAUnaryInstruction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAAllocaInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAAllocaInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAAllocaInst(ValueRef)
        VB: IsAAllocaInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAAllocaInst(ValueRef)
        VB: LLVM.IsAAllocaInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAAllocaInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAAllocaInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAAllocaInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 894
      syntax:
        content:
          CSharp: public static ValueRef IsAAllocaInst(ValueRef Val)
          VB: Public Shared Function IsAAllocaInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAAllocaInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsACastInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsACastInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsACastInst(ValueRef)
        VB: IsACastInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsACastInst(ValueRef)
        VB: LLVM.IsACastInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsACastInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsACastInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsACastInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 899
      syntax:
        content:
          CSharp: public static ValueRef IsACastInst(ValueRef Val)
          VB: Public Shared Function IsACastInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsACastInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAAddrSpaceCastInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAAddrSpaceCastInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAAddrSpaceCastInst(ValueRef)
        VB: IsAAddrSpaceCastInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAAddrSpaceCastInst(ValueRef)
        VB: LLVM.IsAAddrSpaceCastInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAAddrSpaceCastInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAAddrSpaceCastInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAAddrSpaceCastInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 904
      syntax:
        content:
          CSharp: public static ValueRef IsAAddrSpaceCastInst(ValueRef Val)
          VB: Public Shared Function IsAAddrSpaceCastInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAAddrSpaceCastInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsABitCastInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsABitCastInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsABitCastInst(ValueRef)
        VB: IsABitCastInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsABitCastInst(ValueRef)
        VB: LLVM.IsABitCastInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsABitCastInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsABitCastInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsABitCastInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 909
      syntax:
        content:
          CSharp: public static ValueRef IsABitCastInst(ValueRef Val)
          VB: Public Shared Function IsABitCastInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsABitCastInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAFPExtInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAFPExtInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAFPExtInst(ValueRef)
        VB: IsAFPExtInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAFPExtInst(ValueRef)
        VB: LLVM.IsAFPExtInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAFPExtInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAFPExtInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAFPExtInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 914
      syntax:
        content:
          CSharp: public static ValueRef IsAFPExtInst(ValueRef Val)
          VB: Public Shared Function IsAFPExtInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAFPExtInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAFPToSIInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAFPToSIInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAFPToSIInst(ValueRef)
        VB: IsAFPToSIInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAFPToSIInst(ValueRef)
        VB: LLVM.IsAFPToSIInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAFPToSIInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAFPToSIInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAFPToSIInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 919
      syntax:
        content:
          CSharp: public static ValueRef IsAFPToSIInst(ValueRef Val)
          VB: Public Shared Function IsAFPToSIInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAFPToSIInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAFPToUIInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAFPToUIInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAFPToUIInst(ValueRef)
        VB: IsAFPToUIInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAFPToUIInst(ValueRef)
        VB: LLVM.IsAFPToUIInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAFPToUIInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAFPToUIInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAFPToUIInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 924
      syntax:
        content:
          CSharp: public static ValueRef IsAFPToUIInst(ValueRef Val)
          VB: Public Shared Function IsAFPToUIInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAFPToUIInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAFPTruncInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAFPTruncInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAFPTruncInst(ValueRef)
        VB: IsAFPTruncInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAFPTruncInst(ValueRef)
        VB: LLVM.IsAFPTruncInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAFPTruncInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAFPTruncInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAFPTruncInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 929
      syntax:
        content:
          CSharp: public static ValueRef IsAFPTruncInst(ValueRef Val)
          VB: Public Shared Function IsAFPTruncInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAFPTruncInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAIntToPtrInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAIntToPtrInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAIntToPtrInst(ValueRef)
        VB: IsAIntToPtrInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAIntToPtrInst(ValueRef)
        VB: LLVM.IsAIntToPtrInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAIntToPtrInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAIntToPtrInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAIntToPtrInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 934
      syntax:
        content:
          CSharp: public static ValueRef IsAIntToPtrInst(ValueRef Val)
          VB: Public Shared Function IsAIntToPtrInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAIntToPtrInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAPtrToIntInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAPtrToIntInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAPtrToIntInst(ValueRef)
        VB: IsAPtrToIntInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAPtrToIntInst(ValueRef)
        VB: LLVM.IsAPtrToIntInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAPtrToIntInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAPtrToIntInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAPtrToIntInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 939
      syntax:
        content:
          CSharp: public static ValueRef IsAPtrToIntInst(ValueRef Val)
          VB: Public Shared Function IsAPtrToIntInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAPtrToIntInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsASExtInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsASExtInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsASExtInst(ValueRef)
        VB: IsASExtInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsASExtInst(ValueRef)
        VB: LLVM.IsASExtInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsASExtInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsASExtInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsASExtInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 944
      syntax:
        content:
          CSharp: public static ValueRef IsASExtInst(ValueRef Val)
          VB: Public Shared Function IsASExtInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsASExtInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsASIToFPInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsASIToFPInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsASIToFPInst(ValueRef)
        VB: IsASIToFPInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsASIToFPInst(ValueRef)
        VB: LLVM.IsASIToFPInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsASIToFPInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsASIToFPInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsASIToFPInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 949
      syntax:
        content:
          CSharp: public static ValueRef IsASIToFPInst(ValueRef Val)
          VB: Public Shared Function IsASIToFPInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsASIToFPInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsATruncInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsATruncInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsATruncInst(ValueRef)
        VB: IsATruncInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsATruncInst(ValueRef)
        VB: LLVM.IsATruncInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsATruncInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsATruncInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsATruncInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 954
      syntax:
        content:
          CSharp: public static ValueRef IsATruncInst(ValueRef Val)
          VB: Public Shared Function IsATruncInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsATruncInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAUIToFPInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAUIToFPInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAUIToFPInst(ValueRef)
        VB: IsAUIToFPInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAUIToFPInst(ValueRef)
        VB: LLVM.IsAUIToFPInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAUIToFPInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAUIToFPInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAUIToFPInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 959
      syntax:
        content:
          CSharp: public static ValueRef IsAUIToFPInst(ValueRef Val)
          VB: Public Shared Function IsAUIToFPInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAUIToFPInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAZExtInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAZExtInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAZExtInst(ValueRef)
        VB: IsAZExtInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAZExtInst(ValueRef)
        VB: LLVM.IsAZExtInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAZExtInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAZExtInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAZExtInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 964
      syntax:
        content:
          CSharp: public static ValueRef IsAZExtInst(ValueRef Val)
          VB: Public Shared Function IsAZExtInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAZExtInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAExtractValueInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAExtractValueInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAExtractValueInst(ValueRef)
        VB: IsAExtractValueInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAExtractValueInst(ValueRef)
        VB: LLVM.IsAExtractValueInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAExtractValueInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAExtractValueInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAExtractValueInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 969
      syntax:
        content:
          CSharp: public static ValueRef IsAExtractValueInst(ValueRef Val)
          VB: Public Shared Function IsAExtractValueInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAExtractValueInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsALoadInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsALoadInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsALoadInst(ValueRef)
        VB: IsALoadInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsALoadInst(ValueRef)
        VB: LLVM.IsALoadInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsALoadInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsALoadInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsALoadInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 974
      syntax:
        content:
          CSharp: public static ValueRef IsALoadInst(ValueRef Val)
          VB: Public Shared Function IsALoadInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsALoadInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAVAArgInst(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAVAArgInst(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAVAArgInst(ValueRef)
        VB: IsAVAArgInst(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAVAArgInst(ValueRef)
        VB: LLVM.IsAVAArgInst(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAVAArgInst(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAVAArgInst(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAVAArgInst
        path: src/swigged.llvm/LLVM.cs
        startLine: 979
      syntax:
        content:
          CSharp: public static ValueRef IsAVAArgInst(ValueRef Val)
          VB: Public Shared Function IsAVAArgInst(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAVAArgInst*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAMDNode(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAMDNode(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAMDNode(ValueRef)
        VB: IsAMDNode(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAMDNode(ValueRef)
        VB: LLVM.IsAMDNode(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAMDNode(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAMDNode(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAMDNode
        path: src/swigged.llvm/LLVM.cs
        startLine: 984
      syntax:
        content:
          CSharp: public static ValueRef IsAMDNode(ValueRef Val)
          VB: Public Shared Function IsAMDNode(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAMDNode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAMDString(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAMDString(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAMDString(ValueRef)
        VB: IsAMDString(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAMDString(ValueRef)
        VB: LLVM.IsAMDString(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAMDString(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAMDString(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAMDString
        path: src/swigged.llvm/LLVM.cs
        startLine: 989
      syntax:
        content:
          CSharp: public static ValueRef IsAMDString(ValueRef Val)
          VB: Public Shared Function IsAMDString(Val As ValueRef) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.IsAMDString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFirstUse(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetFirstUse(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetFirstUse(ValueRef)
        VB: GetFirstUse(ValueRef)
      nameWithType:
        CSharp: LLVM.GetFirstUse(ValueRef)
        VB: LLVM.GetFirstUse(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFirstUse(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetFirstUse(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFirstUse
        path: src/swigged.llvm/LLVM.cs
        startLine: 994
      syntax:
        content:
          CSharp: public static UseRef GetFirstUse(ValueRef Val)
          VB: Public Shared Function GetFirstUse(Val As ValueRef) As UseRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.UseRef
      overload: Swigged.LLVM.LLVM.GetFirstUse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNextUse(Swigged.LLVM.UseRef)
      commentId: M:Swigged.LLVM.LLVM.GetNextUse(Swigged.LLVM.UseRef)
      language: CSharp
      name:
        CSharp: GetNextUse(UseRef)
        VB: GetNextUse(UseRef)
      nameWithType:
        CSharp: LLVM.GetNextUse(UseRef)
        VB: LLVM.GetNextUse(UseRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNextUse(Swigged.LLVM.UseRef)
        VB: Swigged.LLVM.LLVM.GetNextUse(Swigged.LLVM.UseRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNextUse
        path: src/swigged.llvm/LLVM.cs
        startLine: 999
      syntax:
        content:
          CSharp: public static UseRef GetNextUse(UseRef U)
          VB: Public Shared Function GetNextUse(U As UseRef) As UseRef
        parameters:
        - id: U
          type: Swigged.LLVM.UseRef
        return:
          type: Swigged.LLVM.UseRef
      overload: Swigged.LLVM.LLVM.GetNextUse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetUser(Swigged.LLVM.UseRef)
      commentId: M:Swigged.LLVM.LLVM.GetUser(Swigged.LLVM.UseRef)
      language: CSharp
      name:
        CSharp: GetUser(UseRef)
        VB: GetUser(UseRef)
      nameWithType:
        CSharp: LLVM.GetUser(UseRef)
        VB: LLVM.GetUser(UseRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetUser(Swigged.LLVM.UseRef)
        VB: Swigged.LLVM.LLVM.GetUser(Swigged.LLVM.UseRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetUser
        path: src/swigged.llvm/LLVM.cs
        startLine: 1004
      syntax:
        content:
          CSharp: public static ValueRef GetUser(UseRef U)
          VB: Public Shared Function GetUser(U As UseRef) As ValueRef
        parameters:
        - id: U
          type: Swigged.LLVM.UseRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetUser*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetUsedValue(Swigged.LLVM.UseRef)
      commentId: M:Swigged.LLVM.LLVM.GetUsedValue(Swigged.LLVM.UseRef)
      language: CSharp
      name:
        CSharp: GetUsedValue(UseRef)
        VB: GetUsedValue(UseRef)
      nameWithType:
        CSharp: LLVM.GetUsedValue(UseRef)
        VB: LLVM.GetUsedValue(UseRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetUsedValue(Swigged.LLVM.UseRef)
        VB: Swigged.LLVM.LLVM.GetUsedValue(Swigged.LLVM.UseRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetUsedValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 1009
      syntax:
        content:
          CSharp: public static ValueRef GetUsedValue(UseRef U)
          VB: Public Shared Function GetUsedValue(U As UseRef) As ValueRef
        parameters:
        - id: U
          type: Swigged.LLVM.UseRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetUsedValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetOperand(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetOperand(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetOperand(ValueRef, UInt32)
        VB: GetOperand(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetOperand(ValueRef, UInt32)
        VB: LLVM.GetOperand(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetOperand(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetOperand(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetOperand
        path: src/swigged.llvm/LLVM.cs
        startLine: 1014
      syntax:
        content:
          CSharp: public static ValueRef GetOperand(ValueRef Val, uint Index)
          VB: Public Shared Function GetOperand(Val As ValueRef, Index As UInteger) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetOperand*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetOperandUse(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetOperandUse(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetOperandUse(ValueRef, UInt32)
        VB: GetOperandUse(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetOperandUse(ValueRef, UInt32)
        VB: LLVM.GetOperandUse(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetOperandUse(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetOperandUse(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetOperandUse
        path: src/swigged.llvm/LLVM.cs
        startLine: 1019
      syntax:
        content:
          CSharp: public static UseRef GetOperandUse(ValueRef Val, uint Index)
          VB: Public Shared Function GetOperandUse(Val As ValueRef, Index As UInteger) As UseRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: System.UInt32
        return:
          type: Swigged.LLVM.UseRef
      overload: Swigged.LLVM.LLVM.GetOperandUse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetOperand(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.SetOperand(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: SetOperand(ValueRef, UInt32, ValueRef)
        VB: SetOperand(ValueRef, UInt32, ValueRef)
      nameWithType:
        CSharp: LLVM.SetOperand(ValueRef, UInt32, ValueRef)
        VB: LLVM.SetOperand(ValueRef, UInt32, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetOperand(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.SetOperand(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetOperand
        path: src/swigged.llvm/LLVM.cs
        startLine: 1024
      syntax:
        content:
          CSharp: public static void SetOperand(ValueRef User, uint Index, ValueRef Val)
          VB: Public Shared Sub SetOperand(User As ValueRef, Index As UInteger, Val As ValueRef)
        parameters:
        - id: User
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: System.UInt32
        - id: Val
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.SetOperand*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNumOperands(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNumOperands(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNumOperands(ValueRef)
        VB: GetNumOperands(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNumOperands(ValueRef)
        VB: LLVM.GetNumOperands(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNumOperands(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNumOperands(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNumOperands
        path: src/swigged.llvm/LLVM.cs
        startLine: 1028
      syntax:
        content:
          CSharp: public static int GetNumOperands(ValueRef Val)
          VB: Public Shared Function GetNumOperands(Val As ValueRef) As Integer
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Int32
      overload: Swigged.LLVM.LLVM.GetNumOperands*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNull(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNull(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstNull(TypeRef)
        VB: ConstNull(TypeRef)
      nameWithType:
        CSharp: LLVM.ConstNull(TypeRef)
        VB: LLVM.ConstNull(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNull(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstNull(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNull
        path: src/swigged.llvm/LLVM.cs
        startLine: 1033
      syntax:
        content:
          CSharp: public static ValueRef ConstNull(TypeRef Ty)
          VB: Public Shared Function ConstNull(Ty As TypeRef) As ValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNull*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstAllOnes(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstAllOnes(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstAllOnes(TypeRef)
        VB: ConstAllOnes(TypeRef)
      nameWithType:
        CSharp: LLVM.ConstAllOnes(TypeRef)
        VB: LLVM.ConstAllOnes(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstAllOnes(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstAllOnes(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstAllOnes
        path: src/swigged.llvm/LLVM.cs
        startLine: 1038
      syntax:
        content:
          CSharp: public static ValueRef ConstAllOnes(TypeRef Ty)
          VB: Public Shared Function ConstAllOnes(Ty As TypeRef) As ValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstAllOnes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetUndef(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.GetUndef(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: GetUndef(TypeRef)
        VB: GetUndef(TypeRef)
      nameWithType:
        CSharp: LLVM.GetUndef(TypeRef)
        VB: LLVM.GetUndef(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetUndef(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.GetUndef(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetUndef
        path: src/swigged.llvm/LLVM.cs
        startLine: 1043
      syntax:
        content:
          CSharp: public static ValueRef GetUndef(TypeRef Ty)
          VB: Public Shared Function GetUndef(Ty As TypeRef) As ValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetUndef*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsNull(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsNull(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsNull(ValueRef)
        VB: IsNull(ValueRef)
      nameWithType:
        CSharp: LLVM.IsNull(ValueRef)
        VB: LLVM.IsNull(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsNull(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsNull(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsNull
        path: src/swigged.llvm/LLVM.cs
        startLine: 1048
      syntax:
        content:
          CSharp: public static bool IsNull(ValueRef Val)
          VB: Public Shared Function IsNull(Val As ValueRef) As Boolean
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsNull*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstPointerNull(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstPointerNull(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstPointerNull(TypeRef)
        VB: ConstPointerNull(TypeRef)
      nameWithType:
        CSharp: LLVM.ConstPointerNull(TypeRef)
        VB: LLVM.ConstPointerNull(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstPointerNull(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstPointerNull(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstPointerNull
        path: src/swigged.llvm/LLVM.cs
        startLine: 1053
      syntax:
        content:
          CSharp: public static ValueRef ConstPointerNull(TypeRef Ty)
          VB: Public Shared Function ConstPointerNull(Ty As TypeRef) As ValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstPointerNull*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstInt(Swigged.LLVM.TypeRef,System.UInt64,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.ConstInt(Swigged.LLVM.TypeRef,System.UInt64,System.Boolean)
      language: CSharp
      name:
        CSharp: ConstInt(TypeRef, UInt64, Boolean)
        VB: ConstInt(TypeRef, UInt64, Boolean)
      nameWithType:
        CSharp: LLVM.ConstInt(TypeRef, UInt64, Boolean)
        VB: LLVM.ConstInt(TypeRef, UInt64, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstInt(Swigged.LLVM.TypeRef, System.UInt64, System.Boolean)
        VB: Swigged.LLVM.LLVM.ConstInt(Swigged.LLVM.TypeRef, System.UInt64, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstInt
        path: src/swigged.llvm/LLVM.cs
        startLine: 1058
      syntax:
        content:
          CSharp: public static ValueRef ConstInt(TypeRef IntTy, ulong N, bool SignExtend)
          VB: Public Shared Function ConstInt(IntTy As TypeRef, N As ULong, SignExtend As Boolean) As ValueRef
        parameters:
        - id: IntTy
          type: Swigged.LLVM.TypeRef
        - id: N
          type: System.UInt64
        - id: SignExtend
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstIntOfString(Swigged.LLVM.TypeRef,System.String,System.Byte)
      commentId: M:Swigged.LLVM.LLVM.ConstIntOfString(Swigged.LLVM.TypeRef,System.String,System.Byte)
      language: CSharp
      name:
        CSharp: ConstIntOfString(TypeRef, String, Byte)
        VB: ConstIntOfString(TypeRef, String, Byte)
      nameWithType:
        CSharp: LLVM.ConstIntOfString(TypeRef, String, Byte)
        VB: LLVM.ConstIntOfString(TypeRef, String, Byte)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstIntOfString(Swigged.LLVM.TypeRef, System.String, System.Byte)
        VB: Swigged.LLVM.LLVM.ConstIntOfString(Swigged.LLVM.TypeRef, System.String, System.Byte)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstIntOfString
        path: src/swigged.llvm/LLVM.cs
        startLine: 1063
      syntax:
        content:
          CSharp: public static ValueRef ConstIntOfString(TypeRef IntTy, string Text, byte Radix)
          VB: Public Shared Function ConstIntOfString(IntTy As TypeRef, Text As String, Radix As Byte) As ValueRef
        parameters:
        - id: IntTy
          type: Swigged.LLVM.TypeRef
        - id: Text
          type: System.String
        - id: Radix
          type: System.Byte
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstIntOfString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstIntOfStringAndSize(Swigged.LLVM.TypeRef,System.String,System.UInt32,System.Byte)
      commentId: M:Swigged.LLVM.LLVM.ConstIntOfStringAndSize(Swigged.LLVM.TypeRef,System.String,System.UInt32,System.Byte)
      language: CSharp
      name:
        CSharp: ConstIntOfStringAndSize(TypeRef, String, UInt32, Byte)
        VB: ConstIntOfStringAndSize(TypeRef, String, UInt32, Byte)
      nameWithType:
        CSharp: LLVM.ConstIntOfStringAndSize(TypeRef, String, UInt32, Byte)
        VB: LLVM.ConstIntOfStringAndSize(TypeRef, String, UInt32, Byte)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstIntOfStringAndSize(Swigged.LLVM.TypeRef, System.String, System.UInt32, System.Byte)
        VB: Swigged.LLVM.LLVM.ConstIntOfStringAndSize(Swigged.LLVM.TypeRef, System.String, System.UInt32, System.Byte)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstIntOfStringAndSize
        path: src/swigged.llvm/LLVM.cs
        startLine: 1068
      syntax:
        content:
          CSharp: public static ValueRef ConstIntOfStringAndSize(TypeRef IntTy, string Text, uint SLen, byte Radix)
          VB: Public Shared Function ConstIntOfStringAndSize(IntTy As TypeRef, Text As String, SLen As UInteger, Radix As Byte) As ValueRef
        parameters:
        - id: IntTy
          type: Swigged.LLVM.TypeRef
        - id: Text
          type: System.String
        - id: SLen
          type: System.UInt32
        - id: Radix
          type: System.Byte
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstIntOfStringAndSize*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstReal(Swigged.LLVM.TypeRef,System.Double)
      commentId: M:Swigged.LLVM.LLVM.ConstReal(Swigged.LLVM.TypeRef,System.Double)
      language: CSharp
      name:
        CSharp: ConstReal(TypeRef, Double)
        VB: ConstReal(TypeRef, Double)
      nameWithType:
        CSharp: LLVM.ConstReal(TypeRef, Double)
        VB: LLVM.ConstReal(TypeRef, Double)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstReal(Swigged.LLVM.TypeRef, System.Double)
        VB: Swigged.LLVM.LLVM.ConstReal(Swigged.LLVM.TypeRef, System.Double)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstReal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1073
      syntax:
        content:
          CSharp: public static ValueRef ConstReal(TypeRef RealTy, double N)
          VB: Public Shared Function ConstReal(RealTy As TypeRef, N As Double) As ValueRef
        parameters:
        - id: RealTy
          type: Swigged.LLVM.TypeRef
        - id: N
          type: System.Double
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstReal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstRealOfString(Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.ConstRealOfString(Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: ConstRealOfString(TypeRef, String)
        VB: ConstRealOfString(TypeRef, String)
      nameWithType:
        CSharp: LLVM.ConstRealOfString(TypeRef, String)
        VB: LLVM.ConstRealOfString(TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstRealOfString(Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.ConstRealOfString(Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstRealOfString
        path: src/swigged.llvm/LLVM.cs
        startLine: 1078
      syntax:
        content:
          CSharp: public static ValueRef ConstRealOfString(TypeRef RealTy, string Text)
          VB: Public Shared Function ConstRealOfString(RealTy As TypeRef, Text As String) As ValueRef
        parameters:
        - id: RealTy
          type: Swigged.LLVM.TypeRef
        - id: Text
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstRealOfString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstRealOfStringAndSize(Swigged.LLVM.TypeRef,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.ConstRealOfStringAndSize(Swigged.LLVM.TypeRef,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: ConstRealOfStringAndSize(TypeRef, String, UInt32)
        VB: ConstRealOfStringAndSize(TypeRef, String, UInt32)
      nameWithType:
        CSharp: LLVM.ConstRealOfStringAndSize(TypeRef, String, UInt32)
        VB: LLVM.ConstRealOfStringAndSize(TypeRef, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstRealOfStringAndSize(Swigged.LLVM.TypeRef, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.ConstRealOfStringAndSize(Swigged.LLVM.TypeRef, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstRealOfStringAndSize
        path: src/swigged.llvm/LLVM.cs
        startLine: 1083
      syntax:
        content:
          CSharp: public static ValueRef ConstRealOfStringAndSize(TypeRef RealTy, string Text, uint SLen)
          VB: Public Shared Function ConstRealOfStringAndSize(RealTy As TypeRef, Text As String, SLen As UInteger) As ValueRef
        parameters:
        - id: RealTy
          type: Swigged.LLVM.TypeRef
        - id: Text
          type: System.String
        - id: SLen
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstRealOfStringAndSize*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstIntGetZExtValue(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstIntGetZExtValue(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstIntGetZExtValue(ValueRef)
        VB: ConstIntGetZExtValue(ValueRef)
      nameWithType:
        CSharp: LLVM.ConstIntGetZExtValue(ValueRef)
        VB: LLVM.ConstIntGetZExtValue(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstIntGetZExtValue(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstIntGetZExtValue(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstIntGetZExtValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 1088
      syntax:
        content:
          CSharp: public static ulong ConstIntGetZExtValue(ValueRef ConstantVal)
          VB: Public Shared Function ConstIntGetZExtValue(ConstantVal As ValueRef) As ULong
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.ConstIntGetZExtValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstIntGetSExtValue(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstIntGetSExtValue(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstIntGetSExtValue(ValueRef)
        VB: ConstIntGetSExtValue(ValueRef)
      nameWithType:
        CSharp: LLVM.ConstIntGetSExtValue(ValueRef)
        VB: LLVM.ConstIntGetSExtValue(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstIntGetSExtValue(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstIntGetSExtValue(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstIntGetSExtValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 1093
      syntax:
        content:
          CSharp: public static long ConstIntGetSExtValue(ValueRef ConstantVal)
          VB: Public Shared Function ConstIntGetSExtValue(ConstantVal As ValueRef) As Long
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Int64
      overload: Swigged.LLVM.LLVM.ConstIntGetSExtValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstRealGetDouble(Swigged.LLVM.ValueRef,System.Boolean@)
      commentId: M:Swigged.LLVM.LLVM.ConstRealGetDouble(Swigged.LLVM.ValueRef,System.Boolean@)
      language: CSharp
      name:
        CSharp: ConstRealGetDouble(ValueRef, out Boolean)
        VB: ConstRealGetDouble(ValueRef, ByRef Boolean)
      nameWithType:
        CSharp: LLVM.ConstRealGetDouble(ValueRef, out Boolean)
        VB: LLVM.ConstRealGetDouble(ValueRef, ByRef Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstRealGetDouble(Swigged.LLVM.ValueRef, out System.Boolean)
        VB: Swigged.LLVM.LLVM.ConstRealGetDouble(Swigged.LLVM.ValueRef, ByRef System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstRealGetDouble
        path: src/swigged.llvm/LLVM.cs
        startLine: 1098
      syntax:
        content:
          CSharp: public static double ConstRealGetDouble(ValueRef ConstantVal, out bool losesInfo)
          VB: Public Shared Function ConstRealGetDouble(ConstantVal As ValueRef, ByRef losesInfo As Boolean) As Double
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: losesInfo
          type: System.Boolean
        return:
          type: System.Double
      overload: Swigged.LLVM.LLVM.ConstRealGetDouble*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstStringInContext(Swigged.LLVM.ContextRef,System.String,System.UInt32,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.ConstStringInContext(Swigged.LLVM.ContextRef,System.String,System.UInt32,System.Boolean)
      language: CSharp
      name:
        CSharp: ConstStringInContext(ContextRef, String, UInt32, Boolean)
        VB: ConstStringInContext(ContextRef, String, UInt32, Boolean)
      nameWithType:
        CSharp: LLVM.ConstStringInContext(ContextRef, String, UInt32, Boolean)
        VB: LLVM.ConstStringInContext(ContextRef, String, UInt32, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstStringInContext(Swigged.LLVM.ContextRef, System.String, System.UInt32, System.Boolean)
        VB: Swigged.LLVM.LLVM.ConstStringInContext(Swigged.LLVM.ContextRef, System.String, System.UInt32, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstStringInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 1103
      syntax:
        content:
          CSharp: public static ValueRef ConstStringInContext(ContextRef C, string Str, uint Length, bool DontNullTerminate)
          VB: Public Shared Function ConstStringInContext(C As ContextRef, Str As String, Length As UInteger, DontNullTerminate As Boolean) As ValueRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: Str
          type: System.String
        - id: Length
          type: System.UInt32
        - id: DontNullTerminate
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstStringInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstString(System.String,System.UInt32,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.ConstString(System.String,System.UInt32,System.Boolean)
      language: CSharp
      name:
        CSharp: ConstString(String, UInt32, Boolean)
        VB: ConstString(String, UInt32, Boolean)
      nameWithType:
        CSharp: LLVM.ConstString(String, UInt32, Boolean)
        VB: LLVM.ConstString(String, UInt32, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstString(System.String, System.UInt32, System.Boolean)
        VB: Swigged.LLVM.LLVM.ConstString(System.String, System.UInt32, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstString
        path: src/swigged.llvm/LLVM.cs
        startLine: 1108
      syntax:
        content:
          CSharp: public static ValueRef ConstString(string Str, uint Length, bool DontNullTerminate)
          VB: Public Shared Function ConstString(Str As String, Length As UInteger, DontNullTerminate As Boolean) As ValueRef
        parameters:
        - id: Str
          type: System.String
        - id: Length
          type: System.UInt32
        - id: DontNullTerminate
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsConstantString(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsConstantString(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsConstantString(ValueRef)
        VB: IsConstantString(ValueRef)
      nameWithType:
        CSharp: LLVM.IsConstantString(ValueRef)
        VB: LLVM.IsConstantString(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsConstantString(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsConstantString(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsConstantString
        path: src/swigged.llvm/LLVM.cs
        startLine: 1113
      syntax:
        content:
          CSharp: public static bool IsConstantString(ValueRef c)
          VB: Public Shared Function IsConstantString(c As ValueRef) As Boolean
        parameters:
        - id: c
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsConstantString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetAsString(Swigged.LLVM.ValueRef,System.IntPtr@)
      commentId: M:Swigged.LLVM.LLVM.GetAsString(Swigged.LLVM.ValueRef,System.IntPtr@)
      language: CSharp
      name:
        CSharp: GetAsString(ValueRef, out System.IntPtr)
        VB: GetAsString(ValueRef, ByRef System.IntPtr)
      nameWithType:
        CSharp: LLVM.GetAsString(ValueRef, out System.IntPtr)
        VB: LLVM.GetAsString(ValueRef, ByRef System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetAsString(Swigged.LLVM.ValueRef, out System.IntPtr)
        VB: Swigged.LLVM.LLVM.GetAsString(Swigged.LLVM.ValueRef, ByRef System.IntPtr)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetAsString
        path: src/swigged.llvm/LLVM.cs
        startLine: 1118
      syntax:
        content:
          CSharp: public static string GetAsString(ValueRef c, out System.IntPtr Length)
          VB: Public Shared Function GetAsString(c As ValueRef, ByRef Length As System.IntPtr) As String
        parameters:
        - id: c
          type: Swigged.LLVM.ValueRef
        - id: Length
          type: System.IntPtr
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetAsString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstStructInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.ValueRef[],System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.ConstStructInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.ValueRef[],System.Boolean)
      language: CSharp
      name:
        CSharp: ConstStructInContext(ContextRef, ValueRef[], Boolean)
        VB: ConstStructInContext(ContextRef, ValueRef(), Boolean)
      nameWithType:
        CSharp: LLVM.ConstStructInContext(ContextRef, ValueRef[], Boolean)
        VB: LLVM.ConstStructInContext(ContextRef, ValueRef(), Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstStructInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.ValueRef[], System.Boolean)
        VB: Swigged.LLVM.LLVM.ConstStructInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.ValueRef(), System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstStructInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 1123
      syntax:
        content:
          CSharp: public static ValueRef ConstStructInContext(ContextRef C, ValueRef[] ConstantVals, bool Packed)
          VB: Public Shared Function ConstStructInContext(C As ContextRef, ConstantVals As ValueRef(), Packed As Boolean) As ValueRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: ConstantVals
          type: Swigged.LLVM.ValueRef[]
        - id: Packed
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstStructInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstStruct(Swigged.LLVM.ValueRef[],System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.ConstStruct(Swigged.LLVM.ValueRef[],System.Boolean)
      language: CSharp
      name:
        CSharp: ConstStruct(ValueRef[], Boolean)
        VB: ConstStruct(ValueRef(), Boolean)
      nameWithType:
        CSharp: LLVM.ConstStruct(ValueRef[], Boolean)
        VB: LLVM.ConstStruct(ValueRef(), Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstStruct(Swigged.LLVM.ValueRef[], System.Boolean)
        VB: Swigged.LLVM.LLVM.ConstStruct(Swigged.LLVM.ValueRef(), System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstStruct
        path: src/swigged.llvm/LLVM.cs
        startLine: 1131
      syntax:
        content:
          CSharp: public static ValueRef ConstStruct(ValueRef[] ConstantVals, bool Packed)
          VB: Public Shared Function ConstStruct(ConstantVals As ValueRef(), Packed As Boolean) As ValueRef
        parameters:
        - id: ConstantVals
          type: Swigged.LLVM.ValueRef[]
        - id: Packed
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstStruct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstArray(Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef[])
      commentId: M:Swigged.LLVM.LLVM.ConstArray(Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef[])
      language: CSharp
      name:
        CSharp: ConstArray(TypeRef, ValueRef[])
        VB: ConstArray(TypeRef, ValueRef())
      nameWithType:
        CSharp: LLVM.ConstArray(TypeRef, ValueRef[])
        VB: LLVM.ConstArray(TypeRef, ValueRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstArray(Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef[])
        VB: Swigged.LLVM.LLVM.ConstArray(Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstArray
        path: src/swigged.llvm/LLVM.cs
        startLine: 1139
      syntax:
        content:
          CSharp: public static ValueRef ConstArray(TypeRef ElementTy, ValueRef[] ConstantVals)
          VB: Public Shared Function ConstArray(ElementTy As TypeRef, ConstantVals As ValueRef()) As ValueRef
        parameters:
        - id: ElementTy
          type: Swigged.LLVM.TypeRef
        - id: ConstantVals
          type: Swigged.LLVM.ValueRef[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstArray*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNamedStruct(Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef[])
      commentId: M:Swigged.LLVM.LLVM.ConstNamedStruct(Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef[])
      language: CSharp
      name:
        CSharp: ConstNamedStruct(TypeRef, ValueRef[])
        VB: ConstNamedStruct(TypeRef, ValueRef())
      nameWithType:
        CSharp: LLVM.ConstNamedStruct(TypeRef, ValueRef[])
        VB: LLVM.ConstNamedStruct(TypeRef, ValueRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNamedStruct(Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef[])
        VB: Swigged.LLVM.LLVM.ConstNamedStruct(Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNamedStruct
        path: src/swigged.llvm/LLVM.cs
        startLine: 1147
      syntax:
        content:
          CSharp: public static ValueRef ConstNamedStruct(TypeRef StructTy, ValueRef[] ConstantVals)
          VB: Public Shared Function ConstNamedStruct(StructTy As TypeRef, ConstantVals As ValueRef()) As ValueRef
        parameters:
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        - id: ConstantVals
          type: Swigged.LLVM.ValueRef[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNamedStruct*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetElementAsConstant(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetElementAsConstant(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetElementAsConstant(ValueRef, UInt32)
        VB: GetElementAsConstant(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetElementAsConstant(ValueRef, UInt32)
        VB: LLVM.GetElementAsConstant(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetElementAsConstant(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetElementAsConstant(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetElementAsConstant
        path: src/swigged.llvm/LLVM.cs
        startLine: 1155
      syntax:
        content:
          CSharp: public static ValueRef GetElementAsConstant(ValueRef C, uint idx)
          VB: Public Shared Function GetElementAsConstant(C As ValueRef, idx As UInteger) As ValueRef
        parameters:
        - id: C
          type: Swigged.LLVM.ValueRef
        - id: idx
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetElementAsConstant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstVector(Swigged.LLVM.ValueRef[])
      commentId: M:Swigged.LLVM.LLVM.ConstVector(Swigged.LLVM.ValueRef[])
      language: CSharp
      name:
        CSharp: ConstVector(ValueRef[])
        VB: ConstVector(ValueRef())
      nameWithType:
        CSharp: LLVM.ConstVector(ValueRef[])
        VB: LLVM.ConstVector(ValueRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstVector(Swigged.LLVM.ValueRef[])
        VB: Swigged.LLVM.LLVM.ConstVector(Swigged.LLVM.ValueRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstVector
        path: src/swigged.llvm/LLVM.cs
        startLine: 1160
      syntax:
        content:
          CSharp: public static ValueRef ConstVector(ValueRef[] ScalarConstantVals)
          VB: Public Shared Function ConstVector(ScalarConstantVals As ValueRef()) As ValueRef
        parameters:
        - id: ScalarConstantVals
          type: Swigged.LLVM.ValueRef[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstVector*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetConstOpcode(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetConstOpcode(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetConstOpcode(ValueRef)
        VB: GetConstOpcode(ValueRef)
      nameWithType:
        CSharp: LLVM.GetConstOpcode(ValueRef)
        VB: LLVM.GetConstOpcode(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetConstOpcode(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetConstOpcode(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetConstOpcode
        path: src/swigged.llvm/LLVM.cs
        startLine: 1168
      syntax:
        content:
          CSharp: public static Opcode GetConstOpcode(ValueRef ConstantVal)
          VB: Public Shared Function GetConstOpcode(ConstantVal As ValueRef) As Opcode
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.Opcode
      overload: Swigged.LLVM.LLVM.GetConstOpcode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AlignOf(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.AlignOf(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: AlignOf(TypeRef)
        VB: AlignOf(TypeRef)
      nameWithType:
        CSharp: LLVM.AlignOf(TypeRef)
        VB: LLVM.AlignOf(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AlignOf(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.AlignOf(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AlignOf
        path: src/swigged.llvm/LLVM.cs
        startLine: 1173
      syntax:
        content:
          CSharp: public static ValueRef AlignOf(TypeRef Ty)
          VB: Public Shared Function AlignOf(Ty As TypeRef) As ValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.AlignOf*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SizeOf(Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.SizeOf(Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: SizeOf(TypeRef)
        VB: SizeOf(TypeRef)
      nameWithType:
        CSharp: LLVM.SizeOf(TypeRef)
        VB: LLVM.SizeOf(TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SizeOf(Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.SizeOf(Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SizeOf
        path: src/swigged.llvm/LLVM.cs
        startLine: 1178
      syntax:
        content:
          CSharp: public static ValueRef SizeOf(TypeRef Ty)
          VB: Public Shared Function SizeOf(Ty As TypeRef) As ValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.SizeOf*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNeg(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNeg(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNeg(ValueRef)
        VB: ConstNeg(ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNeg(ValueRef)
        VB: LLVM.ConstNeg(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNeg(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNeg(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNeg
        path: src/swigged.llvm/LLVM.cs
        startLine: 1183
      syntax:
        content:
          CSharp: public static ValueRef ConstNeg(ValueRef ConstantVal)
          VB: Public Shared Function ConstNeg(ConstantVal As ValueRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNSWNeg(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNSWNeg(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNSWNeg(ValueRef)
        VB: ConstNSWNeg(ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNSWNeg(ValueRef)
        VB: LLVM.ConstNSWNeg(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNSWNeg(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNSWNeg(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNSWNeg
        path: src/swigged.llvm/LLVM.cs
        startLine: 1188
      syntax:
        content:
          CSharp: public static ValueRef ConstNSWNeg(ValueRef ConstantVal)
          VB: Public Shared Function ConstNSWNeg(ConstantVal As ValueRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNSWNeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNUWNeg(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNUWNeg(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNUWNeg(ValueRef)
        VB: ConstNUWNeg(ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNUWNeg(ValueRef)
        VB: LLVM.ConstNUWNeg(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNUWNeg(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNUWNeg(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNUWNeg
        path: src/swigged.llvm/LLVM.cs
        startLine: 1193
      syntax:
        content:
          CSharp: public static ValueRef ConstNUWNeg(ValueRef ConstantVal)
          VB: Public Shared Function ConstNUWNeg(ConstantVal As ValueRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNUWNeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFNeg(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFNeg(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstFNeg(ValueRef)
        VB: ConstFNeg(ValueRef)
      nameWithType:
        CSharp: LLVM.ConstFNeg(ValueRef)
        VB: LLVM.ConstFNeg(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFNeg(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstFNeg(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFNeg
        path: src/swigged.llvm/LLVM.cs
        startLine: 1198
      syntax:
        content:
          CSharp: public static ValueRef ConstFNeg(ValueRef ConstantVal)
          VB: Public Shared Function ConstFNeg(ConstantVal As ValueRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFNeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNot(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNot(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNot(ValueRef)
        VB: ConstNot(ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNot(ValueRef)
        VB: LLVM.ConstNot(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNot(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNot(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNot
        path: src/swigged.llvm/LLVM.cs
        startLine: 1203
      syntax:
        content:
          CSharp: public static ValueRef ConstNot(ValueRef ConstantVal)
          VB: Public Shared Function ConstNot(ConstantVal As ValueRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstAdd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstAdd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstAdd(ValueRef, ValueRef)
        VB: ConstAdd(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstAdd(ValueRef, ValueRef)
        VB: LLVM.ConstAdd(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstAdd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstAdd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstAdd
        path: src/swigged.llvm/LLVM.cs
        startLine: 1208
      syntax:
        content:
          CSharp: public static ValueRef ConstAdd(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstAdd(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNSWAdd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNSWAdd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNSWAdd(ValueRef, ValueRef)
        VB: ConstNSWAdd(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNSWAdd(ValueRef, ValueRef)
        VB: LLVM.ConstNSWAdd(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNSWAdd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNSWAdd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNSWAdd
        path: src/swigged.llvm/LLVM.cs
        startLine: 1213
      syntax:
        content:
          CSharp: public static ValueRef ConstNSWAdd(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstNSWAdd(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNSWAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNUWAdd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNUWAdd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNUWAdd(ValueRef, ValueRef)
        VB: ConstNUWAdd(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNUWAdd(ValueRef, ValueRef)
        VB: LLVM.ConstNUWAdd(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNUWAdd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNUWAdd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNUWAdd
        path: src/swigged.llvm/LLVM.cs
        startLine: 1218
      syntax:
        content:
          CSharp: public static ValueRef ConstNUWAdd(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstNUWAdd(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNUWAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFAdd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFAdd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstFAdd(ValueRef, ValueRef)
        VB: ConstFAdd(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstFAdd(ValueRef, ValueRef)
        VB: LLVM.ConstFAdd(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFAdd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstFAdd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFAdd
        path: src/swigged.llvm/LLVM.cs
        startLine: 1223
      syntax:
        content:
          CSharp: public static ValueRef ConstFAdd(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstFAdd(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstSub(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstSub(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstSub(ValueRef, ValueRef)
        VB: ConstSub(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstSub(ValueRef, ValueRef)
        VB: LLVM.ConstSub(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstSub(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstSub(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstSub
        path: src/swigged.llvm/LLVM.cs
        startLine: 1228
      syntax:
        content:
          CSharp: public static ValueRef ConstSub(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstSub(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNSWSub(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNSWSub(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNSWSub(ValueRef, ValueRef)
        VB: ConstNSWSub(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNSWSub(ValueRef, ValueRef)
        VB: LLVM.ConstNSWSub(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNSWSub(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNSWSub(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNSWSub
        path: src/swigged.llvm/LLVM.cs
        startLine: 1233
      syntax:
        content:
          CSharp: public static ValueRef ConstNSWSub(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstNSWSub(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNSWSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNUWSub(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNUWSub(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNUWSub(ValueRef, ValueRef)
        VB: ConstNUWSub(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNUWSub(ValueRef, ValueRef)
        VB: LLVM.ConstNUWSub(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNUWSub(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNUWSub(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNUWSub
        path: src/swigged.llvm/LLVM.cs
        startLine: 1238
      syntax:
        content:
          CSharp: public static ValueRef ConstNUWSub(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstNUWSub(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNUWSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFSub(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFSub(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstFSub(ValueRef, ValueRef)
        VB: ConstFSub(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstFSub(ValueRef, ValueRef)
        VB: LLVM.ConstFSub(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFSub(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstFSub(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFSub
        path: src/swigged.llvm/LLVM.cs
        startLine: 1243
      syntax:
        content:
          CSharp: public static ValueRef ConstFSub(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstFSub(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstMul(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstMul(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstMul(ValueRef, ValueRef)
        VB: ConstMul(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstMul(ValueRef, ValueRef)
        VB: LLVM.ConstMul(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstMul(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstMul(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstMul
        path: src/swigged.llvm/LLVM.cs
        startLine: 1248
      syntax:
        content:
          CSharp: public static ValueRef ConstMul(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstMul(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNSWMul(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNSWMul(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNSWMul(ValueRef, ValueRef)
        VB: ConstNSWMul(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNSWMul(ValueRef, ValueRef)
        VB: LLVM.ConstNSWMul(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNSWMul(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNSWMul(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNSWMul
        path: src/swigged.llvm/LLVM.cs
        startLine: 1253
      syntax:
        content:
          CSharp: public static ValueRef ConstNSWMul(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstNSWMul(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNSWMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstNUWMul(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstNUWMul(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstNUWMul(ValueRef, ValueRef)
        VB: ConstNUWMul(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstNUWMul(ValueRef, ValueRef)
        VB: LLVM.ConstNUWMul(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstNUWMul(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstNUWMul(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstNUWMul
        path: src/swigged.llvm/LLVM.cs
        startLine: 1258
      syntax:
        content:
          CSharp: public static ValueRef ConstNUWMul(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstNUWMul(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstNUWMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFMul(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFMul(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstFMul(ValueRef, ValueRef)
        VB: ConstFMul(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstFMul(ValueRef, ValueRef)
        VB: LLVM.ConstFMul(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFMul(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstFMul(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFMul
        path: src/swigged.llvm/LLVM.cs
        startLine: 1263
      syntax:
        content:
          CSharp: public static ValueRef ConstFMul(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstFMul(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstUDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstUDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstUDiv(ValueRef, ValueRef)
        VB: ConstUDiv(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstUDiv(ValueRef, ValueRef)
        VB: LLVM.ConstUDiv(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstUDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstUDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstUDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1268
      syntax:
        content:
          CSharp: public static ValueRef ConstUDiv(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstUDiv(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstUDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstExactUDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstExactUDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstExactUDiv(ValueRef, ValueRef)
        VB: ConstExactUDiv(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstExactUDiv(ValueRef, ValueRef)
        VB: LLVM.ConstExactUDiv(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstExactUDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstExactUDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstExactUDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1273
      syntax:
        content:
          CSharp: public static ValueRef ConstExactUDiv(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstExactUDiv(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstExactUDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstSDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstSDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstSDiv(ValueRef, ValueRef)
        VB: ConstSDiv(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstSDiv(ValueRef, ValueRef)
        VB: LLVM.ConstSDiv(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstSDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstSDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstSDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1278
      syntax:
        content:
          CSharp: public static ValueRef ConstSDiv(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstSDiv(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstSDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstExactSDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstExactSDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstExactSDiv(ValueRef, ValueRef)
        VB: ConstExactSDiv(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstExactSDiv(ValueRef, ValueRef)
        VB: LLVM.ConstExactSDiv(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstExactSDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstExactSDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstExactSDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1283
      syntax:
        content:
          CSharp: public static ValueRef ConstExactSDiv(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstExactSDiv(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstExactSDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFDiv(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstFDiv(ValueRef, ValueRef)
        VB: ConstFDiv(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstFDiv(ValueRef, ValueRef)
        VB: LLVM.ConstFDiv(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstFDiv(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1288
      syntax:
        content:
          CSharp: public static ValueRef ConstFDiv(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstFDiv(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstURem(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstURem(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstURem(ValueRef, ValueRef)
        VB: ConstURem(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstURem(ValueRef, ValueRef)
        VB: LLVM.ConstURem(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstURem(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstURem(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstURem
        path: src/swigged.llvm/LLVM.cs
        startLine: 1293
      syntax:
        content:
          CSharp: public static ValueRef ConstURem(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstURem(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstURem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstSRem(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstSRem(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstSRem(ValueRef, ValueRef)
        VB: ConstSRem(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstSRem(ValueRef, ValueRef)
        VB: LLVM.ConstSRem(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstSRem(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstSRem(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstSRem
        path: src/swigged.llvm/LLVM.cs
        startLine: 1298
      syntax:
        content:
          CSharp: public static ValueRef ConstSRem(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstSRem(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstSRem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFRem(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFRem(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstFRem(ValueRef, ValueRef)
        VB: ConstFRem(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstFRem(ValueRef, ValueRef)
        VB: LLVM.ConstFRem(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFRem(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstFRem(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFRem
        path: src/swigged.llvm/LLVM.cs
        startLine: 1303
      syntax:
        content:
          CSharp: public static ValueRef ConstFRem(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstFRem(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFRem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstAnd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstAnd(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstAnd(ValueRef, ValueRef)
        VB: ConstAnd(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstAnd(ValueRef, ValueRef)
        VB: LLVM.ConstAnd(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstAnd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstAnd(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstAnd
        path: src/swigged.llvm/LLVM.cs
        startLine: 1308
      syntax:
        content:
          CSharp: public static ValueRef ConstAnd(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstAnd(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstAnd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstOr(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstOr(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstOr(ValueRef, ValueRef)
        VB: ConstOr(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstOr(ValueRef, ValueRef)
        VB: LLVM.ConstOr(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstOr(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstOr(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstOr
        path: src/swigged.llvm/LLVM.cs
        startLine: 1313
      syntax:
        content:
          CSharp: public static ValueRef ConstOr(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstOr(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstOr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstXor(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstXor(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstXor(ValueRef, ValueRef)
        VB: ConstXor(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstXor(ValueRef, ValueRef)
        VB: LLVM.ConstXor(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstXor(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstXor(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstXor
        path: src/swigged.llvm/LLVM.cs
        startLine: 1318
      syntax:
        content:
          CSharp: public static ValueRef ConstXor(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstXor(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstXor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstICmp(Swigged.LLVM.IntPredicate,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstICmp(Swigged.LLVM.IntPredicate,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstICmp(IntPredicate, ValueRef, ValueRef)
        VB: ConstICmp(IntPredicate, ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstICmp(IntPredicate, ValueRef, ValueRef)
        VB: LLVM.ConstICmp(IntPredicate, ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstICmp(Swigged.LLVM.IntPredicate, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstICmp(Swigged.LLVM.IntPredicate, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstICmp
        path: src/swigged.llvm/LLVM.cs
        startLine: 1323
      syntax:
        content:
          CSharp: public static ValueRef ConstICmp(IntPredicate Predicate, ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstICmp(Predicate As IntPredicate, LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: Predicate
          type: Swigged.LLVM.IntPredicate
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstICmp*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFCmp(Swigged.LLVM.RealPredicate,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFCmp(Swigged.LLVM.RealPredicate,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstFCmp(RealPredicate, ValueRef, ValueRef)
        VB: ConstFCmp(RealPredicate, ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstFCmp(RealPredicate, ValueRef, ValueRef)
        VB: LLVM.ConstFCmp(RealPredicate, ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFCmp(Swigged.LLVM.RealPredicate, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstFCmp(Swigged.LLVM.RealPredicate, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFCmp
        path: src/swigged.llvm/LLVM.cs
        startLine: 1328
      syntax:
        content:
          CSharp: public static ValueRef ConstFCmp(RealPredicate Predicate, ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstFCmp(Predicate As RealPredicate, LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: Predicate
          type: Swigged.LLVM.RealPredicate
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFCmp*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstShl(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstShl(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstShl(ValueRef, ValueRef)
        VB: ConstShl(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstShl(ValueRef, ValueRef)
        VB: LLVM.ConstShl(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstShl(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstShl(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstShl
        path: src/swigged.llvm/LLVM.cs
        startLine: 1333
      syntax:
        content:
          CSharp: public static ValueRef ConstShl(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstShl(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstShl*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstLShr(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstLShr(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstLShr(ValueRef, ValueRef)
        VB: ConstLShr(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstLShr(ValueRef, ValueRef)
        VB: LLVM.ConstLShr(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstLShr(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstLShr(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstLShr
        path: src/swigged.llvm/LLVM.cs
        startLine: 1338
      syntax:
        content:
          CSharp: public static ValueRef ConstLShr(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstLShr(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstLShr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstAShr(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstAShr(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstAShr(ValueRef, ValueRef)
        VB: ConstAShr(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstAShr(ValueRef, ValueRef)
        VB: LLVM.ConstAShr(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstAShr(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstAShr(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstAShr
        path: src/swigged.llvm/LLVM.cs
        startLine: 1343
      syntax:
        content:
          CSharp: public static ValueRef ConstAShr(ValueRef LHSConstant, ValueRef RHSConstant)
          VB: Public Shared Function ConstAShr(LHSConstant As ValueRef, RHSConstant As ValueRef) As ValueRef
        parameters:
        - id: LHSConstant
          type: Swigged.LLVM.ValueRef
        - id: RHSConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstAShr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstGEP(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[])
      commentId: M:Swigged.LLVM.LLVM.ConstGEP(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[])
      language: CSharp
      name:
        CSharp: ConstGEP(ValueRef, ValueRef[])
        VB: ConstGEP(ValueRef, ValueRef())
      nameWithType:
        CSharp: LLVM.ConstGEP(ValueRef, ValueRef[])
        VB: LLVM.ConstGEP(ValueRef, ValueRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstGEP(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef[])
        VB: Swigged.LLVM.LLVM.ConstGEP(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstGEP
        path: src/swigged.llvm/LLVM.cs
        startLine: 1348
      syntax:
        content:
          CSharp: public static ValueRef ConstGEP(ValueRef ConstantVal, ValueRef[] ConstantIndices)
          VB: Public Shared Function ConstGEP(ConstantVal As ValueRef, ConstantIndices As ValueRef()) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ConstantIndices
          type: Swigged.LLVM.ValueRef[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstGEP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstInBoundsGEP(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[])
      commentId: M:Swigged.LLVM.LLVM.ConstInBoundsGEP(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[])
      language: CSharp
      name:
        CSharp: ConstInBoundsGEP(ValueRef, ValueRef[])
        VB: ConstInBoundsGEP(ValueRef, ValueRef())
      nameWithType:
        CSharp: LLVM.ConstInBoundsGEP(ValueRef, ValueRef[])
        VB: LLVM.ConstInBoundsGEP(ValueRef, ValueRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstInBoundsGEP(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef[])
        VB: Swigged.LLVM.LLVM.ConstInBoundsGEP(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstInBoundsGEP
        path: src/swigged.llvm/LLVM.cs
        startLine: 1356
      syntax:
        content:
          CSharp: public static ValueRef ConstInBoundsGEP(ValueRef ConstantVal, ValueRef[] ConstantIndices)
          VB: Public Shared Function ConstInBoundsGEP(ConstantVal As ValueRef, ConstantIndices As ValueRef()) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ConstantIndices
          type: Swigged.LLVM.ValueRef[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstInBoundsGEP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstTrunc(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstTrunc(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstTrunc(ValueRef, TypeRef)
        VB: ConstTrunc(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstTrunc(ValueRef, TypeRef)
        VB: LLVM.ConstTrunc(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstTrunc(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstTrunc(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstTrunc
        path: src/swigged.llvm/LLVM.cs
        startLine: 1364
      syntax:
        content:
          CSharp: public static ValueRef ConstTrunc(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstTrunc(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstTrunc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstSExt(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstSExt(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstSExt(ValueRef, TypeRef)
        VB: ConstSExt(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstSExt(ValueRef, TypeRef)
        VB: LLVM.ConstSExt(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstSExt(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstSExt(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstSExt
        path: src/swigged.llvm/LLVM.cs
        startLine: 1369
      syntax:
        content:
          CSharp: public static ValueRef ConstSExt(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstSExt(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstSExt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstZExt(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstZExt(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstZExt(ValueRef, TypeRef)
        VB: ConstZExt(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstZExt(ValueRef, TypeRef)
        VB: LLVM.ConstZExt(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstZExt(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstZExt(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstZExt
        path: src/swigged.llvm/LLVM.cs
        startLine: 1374
      syntax:
        content:
          CSharp: public static ValueRef ConstZExt(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstZExt(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstZExt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFPTrunc(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFPTrunc(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstFPTrunc(ValueRef, TypeRef)
        VB: ConstFPTrunc(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstFPTrunc(ValueRef, TypeRef)
        VB: LLVM.ConstFPTrunc(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFPTrunc(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstFPTrunc(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFPTrunc
        path: src/swigged.llvm/LLVM.cs
        startLine: 1379
      syntax:
        content:
          CSharp: public static ValueRef ConstFPTrunc(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstFPTrunc(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFPTrunc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFPExt(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFPExt(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstFPExt(ValueRef, TypeRef)
        VB: ConstFPExt(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstFPExt(ValueRef, TypeRef)
        VB: LLVM.ConstFPExt(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFPExt(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstFPExt(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFPExt
        path: src/swigged.llvm/LLVM.cs
        startLine: 1384
      syntax:
        content:
          CSharp: public static ValueRef ConstFPExt(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstFPExt(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFPExt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstUIToFP(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstUIToFP(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstUIToFP(ValueRef, TypeRef)
        VB: ConstUIToFP(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstUIToFP(ValueRef, TypeRef)
        VB: LLVM.ConstUIToFP(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstUIToFP(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstUIToFP(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstUIToFP
        path: src/swigged.llvm/LLVM.cs
        startLine: 1389
      syntax:
        content:
          CSharp: public static ValueRef ConstUIToFP(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstUIToFP(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstUIToFP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstSIToFP(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstSIToFP(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstSIToFP(ValueRef, TypeRef)
        VB: ConstSIToFP(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstSIToFP(ValueRef, TypeRef)
        VB: LLVM.ConstSIToFP(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstSIToFP(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstSIToFP(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstSIToFP
        path: src/swigged.llvm/LLVM.cs
        startLine: 1394
      syntax:
        content:
          CSharp: public static ValueRef ConstSIToFP(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstSIToFP(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstSIToFP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFPToUI(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFPToUI(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstFPToUI(ValueRef, TypeRef)
        VB: ConstFPToUI(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstFPToUI(ValueRef, TypeRef)
        VB: LLVM.ConstFPToUI(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFPToUI(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstFPToUI(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFPToUI
        path: src/swigged.llvm/LLVM.cs
        startLine: 1399
      syntax:
        content:
          CSharp: public static ValueRef ConstFPToUI(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstFPToUI(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFPToUI*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFPToSI(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFPToSI(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstFPToSI(ValueRef, TypeRef)
        VB: ConstFPToSI(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstFPToSI(ValueRef, TypeRef)
        VB: LLVM.ConstFPToSI(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFPToSI(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstFPToSI(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFPToSI
        path: src/swigged.llvm/LLVM.cs
        startLine: 1404
      syntax:
        content:
          CSharp: public static ValueRef ConstFPToSI(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstFPToSI(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFPToSI*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstPtrToInt(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstPtrToInt(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstPtrToInt(ValueRef, TypeRef)
        VB: ConstPtrToInt(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstPtrToInt(ValueRef, TypeRef)
        VB: LLVM.ConstPtrToInt(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstPtrToInt(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstPtrToInt(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstPtrToInt
        path: src/swigged.llvm/LLVM.cs
        startLine: 1409
      syntax:
        content:
          CSharp: public static ValueRef ConstPtrToInt(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstPtrToInt(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstPtrToInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstIntToPtr(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstIntToPtr(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstIntToPtr(ValueRef, TypeRef)
        VB: ConstIntToPtr(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstIntToPtr(ValueRef, TypeRef)
        VB: LLVM.ConstIntToPtr(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstIntToPtr(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstIntToPtr(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstIntToPtr
        path: src/swigged.llvm/LLVM.cs
        startLine: 1414
      syntax:
        content:
          CSharp: public static ValueRef ConstIntToPtr(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstIntToPtr(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstIntToPtr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstBitCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstBitCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstBitCast(ValueRef, TypeRef)
        VB: ConstBitCast(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstBitCast(ValueRef, TypeRef)
        VB: LLVM.ConstBitCast(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstBitCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstBitCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstBitCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 1419
      syntax:
        content:
          CSharp: public static ValueRef ConstBitCast(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstBitCast(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstBitCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstAddrSpaceCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstAddrSpaceCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstAddrSpaceCast(ValueRef, TypeRef)
        VB: ConstAddrSpaceCast(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstAddrSpaceCast(ValueRef, TypeRef)
        VB: LLVM.ConstAddrSpaceCast(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstAddrSpaceCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstAddrSpaceCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstAddrSpaceCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 1424
      syntax:
        content:
          CSharp: public static ValueRef ConstAddrSpaceCast(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstAddrSpaceCast(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstAddrSpaceCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstZExtOrBitCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstZExtOrBitCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstZExtOrBitCast(ValueRef, TypeRef)
        VB: ConstZExtOrBitCast(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstZExtOrBitCast(ValueRef, TypeRef)
        VB: LLVM.ConstZExtOrBitCast(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstZExtOrBitCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstZExtOrBitCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstZExtOrBitCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 1429
      syntax:
        content:
          CSharp: public static ValueRef ConstZExtOrBitCast(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstZExtOrBitCast(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstZExtOrBitCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstSExtOrBitCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstSExtOrBitCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstSExtOrBitCast(ValueRef, TypeRef)
        VB: ConstSExtOrBitCast(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstSExtOrBitCast(ValueRef, TypeRef)
        VB: LLVM.ConstSExtOrBitCast(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstSExtOrBitCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstSExtOrBitCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstSExtOrBitCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 1434
      syntax:
        content:
          CSharp: public static ValueRef ConstSExtOrBitCast(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstSExtOrBitCast(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstSExtOrBitCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstTruncOrBitCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstTruncOrBitCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstTruncOrBitCast(ValueRef, TypeRef)
        VB: ConstTruncOrBitCast(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstTruncOrBitCast(ValueRef, TypeRef)
        VB: LLVM.ConstTruncOrBitCast(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstTruncOrBitCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstTruncOrBitCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstTruncOrBitCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 1439
      syntax:
        content:
          CSharp: public static ValueRef ConstTruncOrBitCast(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstTruncOrBitCast(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstTruncOrBitCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstPointerCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstPointerCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstPointerCast(ValueRef, TypeRef)
        VB: ConstPointerCast(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstPointerCast(ValueRef, TypeRef)
        VB: LLVM.ConstPointerCast(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstPointerCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstPointerCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstPointerCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 1444
      syntax:
        content:
          CSharp: public static ValueRef ConstPointerCast(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstPointerCast(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstPointerCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstIntCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.ConstIntCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.Boolean)
      language: CSharp
      name:
        CSharp: ConstIntCast(ValueRef, TypeRef, Boolean)
        VB: ConstIntCast(ValueRef, TypeRef, Boolean)
      nameWithType:
        CSharp: LLVM.ConstIntCast(ValueRef, TypeRef, Boolean)
        VB: LLVM.ConstIntCast(ValueRef, TypeRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstIntCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.ConstIntCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstIntCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 1449
      syntax:
        content:
          CSharp: public static ValueRef ConstIntCast(ValueRef ConstantVal, TypeRef ToType, bool isSigned)
          VB: Public Shared Function ConstIntCast(ConstantVal As ValueRef, ToType As TypeRef, isSigned As Boolean) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        - id: isSigned
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstIntCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstFPCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ConstFPCast(Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ConstFPCast(ValueRef, TypeRef)
        VB: ConstFPCast(ValueRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ConstFPCast(ValueRef, TypeRef)
        VB: LLVM.ConstFPCast(ValueRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstFPCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ConstFPCast(Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstFPCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 1454
      syntax:
        content:
          CSharp: public static ValueRef ConstFPCast(ValueRef ConstantVal, TypeRef ToType)
          VB: Public Shared Function ConstFPCast(ConstantVal As ValueRef, ToType As TypeRef) As ValueRef
        parameters:
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
        - id: ToType
          type: Swigged.LLVM.TypeRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstFPCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstSelect(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstSelect(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstSelect(ValueRef, ValueRef, ValueRef)
        VB: ConstSelect(ValueRef, ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstSelect(ValueRef, ValueRef, ValueRef)
        VB: LLVM.ConstSelect(ValueRef, ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstSelect(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstSelect(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstSelect
        path: src/swigged.llvm/LLVM.cs
        startLine: 1459
      syntax:
        content:
          CSharp: public static ValueRef ConstSelect(ValueRef ConstantCondition, ValueRef ConstantIfTrue, ValueRef ConstantIfFalse)
          VB: Public Shared Function ConstSelect(ConstantCondition As ValueRef, ConstantIfTrue As ValueRef, ConstantIfFalse As ValueRef) As ValueRef
        parameters:
        - id: ConstantCondition
          type: Swigged.LLVM.ValueRef
        - id: ConstantIfTrue
          type: Swigged.LLVM.ValueRef
        - id: ConstantIfFalse
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstSelect*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstExtractElement(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstExtractElement(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstExtractElement(ValueRef, ValueRef)
        VB: ConstExtractElement(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstExtractElement(ValueRef, ValueRef)
        VB: LLVM.ConstExtractElement(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstExtractElement(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstExtractElement(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstExtractElement
        path: src/swigged.llvm/LLVM.cs
        startLine: 1464
      syntax:
        content:
          CSharp: public static ValueRef ConstExtractElement(ValueRef VectorConstant, ValueRef IndexConstant)
          VB: Public Shared Function ConstExtractElement(VectorConstant As ValueRef, IndexConstant As ValueRef) As ValueRef
        parameters:
        - id: VectorConstant
          type: Swigged.LLVM.ValueRef
        - id: IndexConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstExtractElement*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstInsertElement(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstInsertElement(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstInsertElement(ValueRef, ValueRef, ValueRef)
        VB: ConstInsertElement(ValueRef, ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstInsertElement(ValueRef, ValueRef, ValueRef)
        VB: LLVM.ConstInsertElement(ValueRef, ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstInsertElement(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstInsertElement(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstInsertElement
        path: src/swigged.llvm/LLVM.cs
        startLine: 1469
      syntax:
        content:
          CSharp: public static ValueRef ConstInsertElement(ValueRef VectorConstant, ValueRef ElementValueConstant, ValueRef IndexConstant)
          VB: Public Shared Function ConstInsertElement(VectorConstant As ValueRef, ElementValueConstant As ValueRef, IndexConstant As ValueRef) As ValueRef
        parameters:
        - id: VectorConstant
          type: Swigged.LLVM.ValueRef
        - id: ElementValueConstant
          type: Swigged.LLVM.ValueRef
        - id: IndexConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstInsertElement*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstShuffleVector(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ConstShuffleVector(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ConstShuffleVector(ValueRef, ValueRef, ValueRef)
        VB: ConstShuffleVector(ValueRef, ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.ConstShuffleVector(ValueRef, ValueRef, ValueRef)
        VB: LLVM.ConstShuffleVector(ValueRef, ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstShuffleVector(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ConstShuffleVector(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstShuffleVector
        path: src/swigged.llvm/LLVM.cs
        startLine: 1474
      syntax:
        content:
          CSharp: public static ValueRef ConstShuffleVector(ValueRef VectorAConstant, ValueRef VectorBConstant, ValueRef MaskConstant)
          VB: Public Shared Function ConstShuffleVector(VectorAConstant As ValueRef, VectorBConstant As ValueRef, MaskConstant As ValueRef) As ValueRef
        parameters:
        - id: VectorAConstant
          type: Swigged.LLVM.ValueRef
        - id: VectorBConstant
          type: Swigged.LLVM.ValueRef
        - id: MaskConstant
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstShuffleVector*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstExtractValue(Swigged.LLVM.ValueRef,System.UInt32[])
      commentId: M:Swigged.LLVM.LLVM.ConstExtractValue(Swigged.LLVM.ValueRef,System.UInt32[])
      language: CSharp
      name:
        CSharp: ConstExtractValue(ValueRef, UInt32[])
        VB: ConstExtractValue(ValueRef, UInt32())
      nameWithType:
        CSharp: LLVM.ConstExtractValue(ValueRef, UInt32[])
        VB: LLVM.ConstExtractValue(ValueRef, UInt32())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstExtractValue(Swigged.LLVM.ValueRef, System.UInt32[])
        VB: Swigged.LLVM.LLVM.ConstExtractValue(Swigged.LLVM.ValueRef, System.UInt32())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstExtractValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 1479
      syntax:
        content:
          CSharp: public static ValueRef ConstExtractValue(ValueRef AggConstant, uint[] IdxList)
          VB: Public Shared Function ConstExtractValue(AggConstant As ValueRef, IdxList As UInteger()) As ValueRef
        parameters:
        - id: AggConstant
          type: Swigged.LLVM.ValueRef
        - id: IdxList
          type: System.UInt32[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstExtractValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstInsertValue(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.UInt32[])
      commentId: M:Swigged.LLVM.LLVM.ConstInsertValue(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.UInt32[])
      language: CSharp
      name:
        CSharp: ConstInsertValue(ValueRef, ValueRef, UInt32[])
        VB: ConstInsertValue(ValueRef, ValueRef, UInt32())
      nameWithType:
        CSharp: LLVM.ConstInsertValue(ValueRef, ValueRef, UInt32[])
        VB: LLVM.ConstInsertValue(ValueRef, ValueRef, UInt32())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstInsertValue(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.UInt32[])
        VB: Swigged.LLVM.LLVM.ConstInsertValue(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.UInt32())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstInsertValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 1487
      syntax:
        content:
          CSharp: public static ValueRef ConstInsertValue(ValueRef AggConstant, ValueRef ElementValueConstant, uint[] IdxList)
          VB: Public Shared Function ConstInsertValue(AggConstant As ValueRef, ElementValueConstant As ValueRef, IdxList As UInteger()) As ValueRef
        parameters:
        - id: AggConstant
          type: Swigged.LLVM.ValueRef
        - id: ElementValueConstant
          type: Swigged.LLVM.ValueRef
        - id: IdxList
          type: System.UInt32[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstInsertValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ConstInlineAsm(Swigged.LLVM.TypeRef,System.String,System.String,System.Boolean,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.ConstInlineAsm(Swigged.LLVM.TypeRef,System.String,System.String,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: ConstInlineAsm(TypeRef, String, String, Boolean, Boolean)
        VB: ConstInlineAsm(TypeRef, String, String, Boolean, Boolean)
      nameWithType:
        CSharp: LLVM.ConstInlineAsm(TypeRef, String, String, Boolean, Boolean)
        VB: LLVM.ConstInlineAsm(TypeRef, String, String, Boolean, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ConstInlineAsm(Swigged.LLVM.TypeRef, System.String, System.String, System.Boolean, System.Boolean)
        VB: Swigged.LLVM.LLVM.ConstInlineAsm(Swigged.LLVM.TypeRef, System.String, System.String, System.Boolean, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ConstInlineAsm
        path: src/swigged.llvm/LLVM.cs
        startLine: 1495
      syntax:
        content:
          CSharp: public static ValueRef ConstInlineAsm(TypeRef Ty, string AsmString, string Constraints, bool HasSideEffects, bool IsAlignStack)
          VB: Public Shared Function ConstInlineAsm(Ty As TypeRef, AsmString As String, Constraints As String, HasSideEffects As Boolean, IsAlignStack As Boolean) As ValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: AsmString
          type: System.String
        - id: Constraints
          type: System.String
        - id: HasSideEffects
          type: System.Boolean
        - id: IsAlignStack
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.ConstInlineAsm*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BlockAddress(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.BlockAddress(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: BlockAddress(ValueRef, BasicBlockRef)
        VB: BlockAddress(ValueRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.BlockAddress(ValueRef, BasicBlockRef)
        VB: LLVM.BlockAddress(ValueRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BlockAddress(Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.BlockAddress(Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BlockAddress
        path: src/swigged.llvm/LLVM.cs
        startLine: 1500
      syntax:
        content:
          CSharp: public static ValueRef BlockAddress(ValueRef F, BasicBlockRef BB)
          VB: Public Shared Function BlockAddress(F As ValueRef, BB As BasicBlockRef) As ValueRef
        parameters:
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BlockAddress*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetGlobalParent(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetGlobalParent(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetGlobalParent(ValueRef)
        VB: GetGlobalParent(ValueRef)
      nameWithType:
        CSharp: LLVM.GetGlobalParent(ValueRef)
        VB: LLVM.GetGlobalParent(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetGlobalParent(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetGlobalParent(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetGlobalParent
        path: src/swigged.llvm/LLVM.cs
        startLine: 1505
      syntax:
        content:
          CSharp: public static ModuleRef GetGlobalParent(ValueRef Global)
          VB: Public Shared Function GetGlobalParent(Global As ValueRef) As ModuleRef
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ModuleRef
      overload: Swigged.LLVM.LLVM.GetGlobalParent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsDeclaration(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsDeclaration(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsDeclaration(ValueRef)
        VB: IsDeclaration(ValueRef)
      nameWithType:
        CSharp: LLVM.IsDeclaration(ValueRef)
        VB: LLVM.IsDeclaration(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsDeclaration(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsDeclaration(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsDeclaration
        path: src/swigged.llvm/LLVM.cs
        startLine: 1510
      syntax:
        content:
          CSharp: public static bool IsDeclaration(ValueRef Global)
          VB: Public Shared Function IsDeclaration(Global As ValueRef) As Boolean
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsDeclaration*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetLinkage(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetLinkage(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetLinkage(ValueRef)
        VB: GetLinkage(ValueRef)
      nameWithType:
        CSharp: LLVM.GetLinkage(ValueRef)
        VB: LLVM.GetLinkage(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetLinkage(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetLinkage(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetLinkage
        path: src/swigged.llvm/LLVM.cs
        startLine: 1515
      syntax:
        content:
          CSharp: public static Linkage GetLinkage(ValueRef Global)
          VB: Public Shared Function GetLinkage(Global As ValueRef) As Linkage
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.Linkage
      overload: Swigged.LLVM.LLVM.GetLinkage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetLinkage(Swigged.LLVM.ValueRef,Swigged.LLVM.Linkage)
      commentId: M:Swigged.LLVM.LLVM.SetLinkage(Swigged.LLVM.ValueRef,Swigged.LLVM.Linkage)
      language: CSharp
      name:
        CSharp: SetLinkage(ValueRef, Linkage)
        VB: SetLinkage(ValueRef, Linkage)
      nameWithType:
        CSharp: LLVM.SetLinkage(ValueRef, Linkage)
        VB: LLVM.SetLinkage(ValueRef, Linkage)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetLinkage(Swigged.LLVM.ValueRef, Swigged.LLVM.Linkage)
        VB: Swigged.LLVM.LLVM.SetLinkage(Swigged.LLVM.ValueRef, Swigged.LLVM.Linkage)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetLinkage
        path: src/swigged.llvm/LLVM.cs
        startLine: 1520
      syntax:
        content:
          CSharp: public static void SetLinkage(ValueRef Global, Linkage Linkage)
          VB: Public Shared Sub SetLinkage(Global As ValueRef, Linkage As Linkage)
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        - id: Linkage
          type: Swigged.LLVM.Linkage
      overload: Swigged.LLVM.LLVM.SetLinkage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetSection(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetSection(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetSection(ValueRef)
        VB: GetSection(ValueRef)
      nameWithType:
        CSharp: LLVM.GetSection(ValueRef)
        VB: LLVM.GetSection(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetSection(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetSection(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetSection
        path: src/swigged.llvm/LLVM.cs
        startLine: 1524
      syntax:
        content:
          CSharp: public static string GetSection(ValueRef Global)
          VB: Public Shared Function GetSection(Global As ValueRef) As String
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetSection*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetSection(Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.SetSection(Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: SetSection(ValueRef, String)
        VB: SetSection(ValueRef, String)
      nameWithType:
        CSharp: LLVM.SetSection(ValueRef, String)
        VB: LLVM.SetSection(ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetSection(Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.SetSection(Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetSection
        path: src/swigged.llvm/LLVM.cs
        startLine: 1529
      syntax:
        content:
          CSharp: public static void SetSection(ValueRef Global, string Section)
          VB: Public Shared Sub SetSection(Global As ValueRef, Section As String)
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        - id: Section
          type: System.String
      overload: Swigged.LLVM.LLVM.SetSection*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetVisibility(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetVisibility(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetVisibility(ValueRef)
        VB: GetVisibility(ValueRef)
      nameWithType:
        CSharp: LLVM.GetVisibility(ValueRef)
        VB: LLVM.GetVisibility(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetVisibility(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetVisibility(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetVisibility
        path: src/swigged.llvm/LLVM.cs
        startLine: 1533
      syntax:
        content:
          CSharp: public static Visibility GetVisibility(ValueRef Global)
          VB: Public Shared Function GetVisibility(Global As ValueRef) As Visibility
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.Visibility
      overload: Swigged.LLVM.LLVM.GetVisibility*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetVisibility(Swigged.LLVM.ValueRef,Swigged.LLVM.Visibility)
      commentId: M:Swigged.LLVM.LLVM.SetVisibility(Swigged.LLVM.ValueRef,Swigged.LLVM.Visibility)
      language: CSharp
      name:
        CSharp: SetVisibility(ValueRef, Visibility)
        VB: SetVisibility(ValueRef, Visibility)
      nameWithType:
        CSharp: LLVM.SetVisibility(ValueRef, Visibility)
        VB: LLVM.SetVisibility(ValueRef, Visibility)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetVisibility(Swigged.LLVM.ValueRef, Swigged.LLVM.Visibility)
        VB: Swigged.LLVM.LLVM.SetVisibility(Swigged.LLVM.ValueRef, Swigged.LLVM.Visibility)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetVisibility
        path: src/swigged.llvm/LLVM.cs
        startLine: 1538
      syntax:
        content:
          CSharp: public static void SetVisibility(ValueRef Global, Visibility Viz)
          VB: Public Shared Sub SetVisibility(Global As ValueRef, Viz As Visibility)
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        - id: Viz
          type: Swigged.LLVM.Visibility
      overload: Swigged.LLVM.LLVM.SetVisibility*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetDLLStorageClass(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetDLLStorageClass(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetDLLStorageClass(ValueRef)
        VB: GetDLLStorageClass(ValueRef)
      nameWithType:
        CSharp: LLVM.GetDLLStorageClass(ValueRef)
        VB: LLVM.GetDLLStorageClass(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetDLLStorageClass(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetDLLStorageClass(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetDLLStorageClass
        path: src/swigged.llvm/LLVM.cs
        startLine: 1542
      syntax:
        content:
          CSharp: public static DLLStorageClass GetDLLStorageClass(ValueRef Global)
          VB: Public Shared Function GetDLLStorageClass(Global As ValueRef) As DLLStorageClass
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.DLLStorageClass
      overload: Swigged.LLVM.LLVM.GetDLLStorageClass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetDLLStorageClass(Swigged.LLVM.ValueRef,Swigged.LLVM.DLLStorageClass)
      commentId: M:Swigged.LLVM.LLVM.SetDLLStorageClass(Swigged.LLVM.ValueRef,Swigged.LLVM.DLLStorageClass)
      language: CSharp
      name:
        CSharp: SetDLLStorageClass(ValueRef, DLLStorageClass)
        VB: SetDLLStorageClass(ValueRef, DLLStorageClass)
      nameWithType:
        CSharp: LLVM.SetDLLStorageClass(ValueRef, DLLStorageClass)
        VB: LLVM.SetDLLStorageClass(ValueRef, DLLStorageClass)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetDLLStorageClass(Swigged.LLVM.ValueRef, Swigged.LLVM.DLLStorageClass)
        VB: Swigged.LLVM.LLVM.SetDLLStorageClass(Swigged.LLVM.ValueRef, Swigged.LLVM.DLLStorageClass)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetDLLStorageClass
        path: src/swigged.llvm/LLVM.cs
        startLine: 1547
      syntax:
        content:
          CSharp: public static void SetDLLStorageClass(ValueRef Global, DLLStorageClass Class)
          VB: Public Shared Sub SetDLLStorageClass(Global As ValueRef, Class As DLLStorageClass)
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        - id: Class
          type: Swigged.LLVM.DLLStorageClass
      overload: Swigged.LLVM.LLVM.SetDLLStorageClass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.HasUnnamedAddr(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.HasUnnamedAddr(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: HasUnnamedAddr(ValueRef)
        VB: HasUnnamedAddr(ValueRef)
      nameWithType:
        CSharp: LLVM.HasUnnamedAddr(ValueRef)
        VB: LLVM.HasUnnamedAddr(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.HasUnnamedAddr(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.HasUnnamedAddr(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: HasUnnamedAddr
        path: src/swigged.llvm/LLVM.cs
        startLine: 1551
      syntax:
        content:
          CSharp: public static bool HasUnnamedAddr(ValueRef Global)
          VB: Public Shared Function HasUnnamedAddr(Global As ValueRef) As Boolean
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.HasUnnamedAddr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetUnnamedAddr(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetUnnamedAddr(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetUnnamedAddr(ValueRef, Boolean)
        VB: SetUnnamedAddr(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetUnnamedAddr(ValueRef, Boolean)
        VB: LLVM.SetUnnamedAddr(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetUnnamedAddr(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetUnnamedAddr(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetUnnamedAddr
        path: src/swigged.llvm/LLVM.cs
        startLine: 1556
      syntax:
        content:
          CSharp: public static void SetUnnamedAddr(ValueRef Global, bool HasUnnamedAddr)
          VB: Public Shared Sub SetUnnamedAddr(Global As ValueRef, HasUnnamedAddr As Boolean)
        parameters:
        - id: Global
          type: Swigged.LLVM.ValueRef
        - id: HasUnnamedAddr
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetUnnamedAddr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetAlignment(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetAlignment(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetAlignment(ValueRef)
        VB: GetAlignment(ValueRef)
      nameWithType:
        CSharp: LLVM.GetAlignment(ValueRef)
        VB: LLVM.GetAlignment(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetAlignment(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetAlignment(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetAlignment
        path: src/swigged.llvm/LLVM.cs
        startLine: 1560
      syntax:
        content:
          CSharp: public static uint GetAlignment(ValueRef V)
          VB: Public Shared Function GetAlignment(V As ValueRef) As UInteger
        parameters:
        - id: V
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetAlignment*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetAlignment(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.SetAlignment(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: SetAlignment(ValueRef, UInt32)
        VB: SetAlignment(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.SetAlignment(ValueRef, UInt32)
        VB: LLVM.SetAlignment(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetAlignment(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.SetAlignment(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetAlignment
        path: src/swigged.llvm/LLVM.cs
        startLine: 1565
      syntax:
        content:
          CSharp: public static void SetAlignment(ValueRef V, uint Bytes)
          VB: Public Shared Sub SetAlignment(V As ValueRef, Bytes As UInteger)
        parameters:
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Bytes
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.SetAlignment*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddGlobal(Swigged.LLVM.ModuleRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.AddGlobal(Swigged.LLVM.ModuleRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: AddGlobal(ModuleRef, TypeRef, String)
        VB: AddGlobal(ModuleRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.AddGlobal(ModuleRef, TypeRef, String)
        VB: LLVM.AddGlobal(ModuleRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddGlobal(Swigged.LLVM.ModuleRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.AddGlobal(Swigged.LLVM.ModuleRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1569
      syntax:
        content:
          CSharp: public static ValueRef AddGlobal(ModuleRef M, TypeRef Ty, string Name)
          VB: Public Shared Function AddGlobal(M As ModuleRef, Ty As TypeRef, Name As String) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.AddGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddGlobalInAddressSpace(Swigged.LLVM.ModuleRef,Swigged.LLVM.TypeRef,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.AddGlobalInAddressSpace(Swigged.LLVM.ModuleRef,Swigged.LLVM.TypeRef,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: AddGlobalInAddressSpace(ModuleRef, TypeRef, String, UInt32)
        VB: AddGlobalInAddressSpace(ModuleRef, TypeRef, String, UInt32)
      nameWithType:
        CSharp: LLVM.AddGlobalInAddressSpace(ModuleRef, TypeRef, String, UInt32)
        VB: LLVM.AddGlobalInAddressSpace(ModuleRef, TypeRef, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddGlobalInAddressSpace(Swigged.LLVM.ModuleRef, Swigged.LLVM.TypeRef, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.AddGlobalInAddressSpace(Swigged.LLVM.ModuleRef, Swigged.LLVM.TypeRef, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddGlobalInAddressSpace
        path: src/swigged.llvm/LLVM.cs
        startLine: 1574
      syntax:
        content:
          CSharp: public static ValueRef AddGlobalInAddressSpace(ModuleRef M, TypeRef Ty, string Name, uint AddressSpace)
          VB: Public Shared Function AddGlobalInAddressSpace(M As ModuleRef, Ty As TypeRef, Name As String, AddressSpace As UInteger) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        - id: AddressSpace
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.AddGlobalInAddressSpace*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNamedGlobal(Swigged.LLVM.ModuleRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.GetNamedGlobal(Swigged.LLVM.ModuleRef,System.String)
      language: CSharp
      name:
        CSharp: GetNamedGlobal(ModuleRef, String)
        VB: GetNamedGlobal(ModuleRef, String)
      nameWithType:
        CSharp: LLVM.GetNamedGlobal(ModuleRef, String)
        VB: LLVM.GetNamedGlobal(ModuleRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNamedGlobal(Swigged.LLVM.ModuleRef, System.String)
        VB: Swigged.LLVM.LLVM.GetNamedGlobal(Swigged.LLVM.ModuleRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNamedGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1579
      syntax:
        content:
          CSharp: public static ValueRef GetNamedGlobal(ModuleRef M, string Name)
          VB: Public Shared Function GetNamedGlobal(M As ModuleRef, Name As String) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetNamedGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFirstGlobal(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetFirstGlobal(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetFirstGlobal(ModuleRef)
        VB: GetFirstGlobal(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetFirstGlobal(ModuleRef)
        VB: LLVM.GetFirstGlobal(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFirstGlobal(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetFirstGlobal(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFirstGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1584
      syntax:
        content:
          CSharp: public static ValueRef GetFirstGlobal(ModuleRef M)
          VB: Public Shared Function GetFirstGlobal(M As ModuleRef) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetFirstGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetLastGlobal(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetLastGlobal(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetLastGlobal(ModuleRef)
        VB: GetLastGlobal(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetLastGlobal(ModuleRef)
        VB: LLVM.GetLastGlobal(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetLastGlobal(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetLastGlobal(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetLastGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1589
      syntax:
        content:
          CSharp: public static ValueRef GetLastGlobal(ModuleRef M)
          VB: Public Shared Function GetLastGlobal(M As ModuleRef) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetLastGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNextGlobal(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNextGlobal(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNextGlobal(ValueRef)
        VB: GetNextGlobal(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNextGlobal(ValueRef)
        VB: LLVM.GetNextGlobal(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNextGlobal(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNextGlobal(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNextGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1594
      syntax:
        content:
          CSharp: public static ValueRef GetNextGlobal(ValueRef GlobalVar)
          VB: Public Shared Function GetNextGlobal(GlobalVar As ValueRef) As ValueRef
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetNextGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetPreviousGlobal(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetPreviousGlobal(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetPreviousGlobal(ValueRef)
        VB: GetPreviousGlobal(ValueRef)
      nameWithType:
        CSharp: LLVM.GetPreviousGlobal(ValueRef)
        VB: LLVM.GetPreviousGlobal(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetPreviousGlobal(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetPreviousGlobal(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetPreviousGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1599
      syntax:
        content:
          CSharp: public static ValueRef GetPreviousGlobal(ValueRef GlobalVar)
          VB: Public Shared Function GetPreviousGlobal(GlobalVar As ValueRef) As ValueRef
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetPreviousGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DeleteGlobal(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.DeleteGlobal(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: DeleteGlobal(ValueRef)
        VB: DeleteGlobal(ValueRef)
      nameWithType:
        CSharp: LLVM.DeleteGlobal(ValueRef)
        VB: LLVM.DeleteGlobal(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DeleteGlobal(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.DeleteGlobal(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DeleteGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1604
      syntax:
        content:
          CSharp: public static void DeleteGlobal(ValueRef GlobalVar)
          VB: Public Shared Sub DeleteGlobal(GlobalVar As ValueRef)
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.DeleteGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetInitializer(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetInitializer(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetInitializer(ValueRef)
        VB: GetInitializer(ValueRef)
      nameWithType:
        CSharp: LLVM.GetInitializer(ValueRef)
        VB: LLVM.GetInitializer(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetInitializer(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetInitializer(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetInitializer
        path: src/swigged.llvm/LLVM.cs
        startLine: 1608
      syntax:
        content:
          CSharp: public static ValueRef GetInitializer(ValueRef GlobalVar)
          VB: Public Shared Function GetInitializer(GlobalVar As ValueRef) As ValueRef
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetInitializer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetInitializer(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.SetInitializer(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: SetInitializer(ValueRef, ValueRef)
        VB: SetInitializer(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.SetInitializer(ValueRef, ValueRef)
        VB: LLVM.SetInitializer(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetInitializer(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.SetInitializer(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetInitializer
        path: src/swigged.llvm/LLVM.cs
        startLine: 1613
      syntax:
        content:
          CSharp: public static void SetInitializer(ValueRef GlobalVar, ValueRef ConstantVal)
          VB: Public Shared Sub SetInitializer(GlobalVar As ValueRef, ConstantVal As ValueRef)
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        - id: ConstantVal
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.SetInitializer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsThreadLocal(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsThreadLocal(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsThreadLocal(ValueRef)
        VB: IsThreadLocal(ValueRef)
      nameWithType:
        CSharp: LLVM.IsThreadLocal(ValueRef)
        VB: LLVM.IsThreadLocal(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsThreadLocal(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsThreadLocal(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsThreadLocal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1617
      syntax:
        content:
          CSharp: public static bool IsThreadLocal(ValueRef GlobalVar)
          VB: Public Shared Function IsThreadLocal(GlobalVar As ValueRef) As Boolean
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsThreadLocal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetThreadLocal(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetThreadLocal(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetThreadLocal(ValueRef, Boolean)
        VB: SetThreadLocal(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetThreadLocal(ValueRef, Boolean)
        VB: LLVM.SetThreadLocal(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetThreadLocal(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetThreadLocal(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetThreadLocal
        path: src/swigged.llvm/LLVM.cs
        startLine: 1622
      syntax:
        content:
          CSharp: public static void SetThreadLocal(ValueRef GlobalVar, bool IsThreadLocal)
          VB: Public Shared Sub SetThreadLocal(GlobalVar As ValueRef, IsThreadLocal As Boolean)
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        - id: IsThreadLocal
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetThreadLocal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsGlobalConstant(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsGlobalConstant(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsGlobalConstant(ValueRef)
        VB: IsGlobalConstant(ValueRef)
      nameWithType:
        CSharp: LLVM.IsGlobalConstant(ValueRef)
        VB: LLVM.IsGlobalConstant(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsGlobalConstant(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsGlobalConstant(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsGlobalConstant
        path: src/swigged.llvm/LLVM.cs
        startLine: 1626
      syntax:
        content:
          CSharp: public static bool IsGlobalConstant(ValueRef GlobalVar)
          VB: Public Shared Function IsGlobalConstant(GlobalVar As ValueRef) As Boolean
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsGlobalConstant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetGlobalConstant(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetGlobalConstant(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetGlobalConstant(ValueRef, Boolean)
        VB: SetGlobalConstant(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetGlobalConstant(ValueRef, Boolean)
        VB: LLVM.SetGlobalConstant(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetGlobalConstant(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetGlobalConstant(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetGlobalConstant
        path: src/swigged.llvm/LLVM.cs
        startLine: 1631
      syntax:
        content:
          CSharp: public static void SetGlobalConstant(ValueRef GlobalVar, bool IsConstant)
          VB: Public Shared Sub SetGlobalConstant(GlobalVar As ValueRef, IsConstant As Boolean)
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        - id: IsConstant
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetGlobalConstant*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetThreadLocalMode(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetThreadLocalMode(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetThreadLocalMode(ValueRef)
        VB: GetThreadLocalMode(ValueRef)
      nameWithType:
        CSharp: LLVM.GetThreadLocalMode(ValueRef)
        VB: LLVM.GetThreadLocalMode(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetThreadLocalMode(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetThreadLocalMode(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetThreadLocalMode
        path: src/swigged.llvm/LLVM.cs
        startLine: 1635
      syntax:
        content:
          CSharp: public static ThreadLocalMode GetThreadLocalMode(ValueRef GlobalVar)
          VB: Public Shared Function GetThreadLocalMode(GlobalVar As ValueRef) As ThreadLocalMode
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ThreadLocalMode
      overload: Swigged.LLVM.LLVM.GetThreadLocalMode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetThreadLocalMode(Swigged.LLVM.ValueRef,Swigged.LLVM.ThreadLocalMode)
      commentId: M:Swigged.LLVM.LLVM.SetThreadLocalMode(Swigged.LLVM.ValueRef,Swigged.LLVM.ThreadLocalMode)
      language: CSharp
      name:
        CSharp: SetThreadLocalMode(ValueRef, ThreadLocalMode)
        VB: SetThreadLocalMode(ValueRef, ThreadLocalMode)
      nameWithType:
        CSharp: LLVM.SetThreadLocalMode(ValueRef, ThreadLocalMode)
        VB: LLVM.SetThreadLocalMode(ValueRef, ThreadLocalMode)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetThreadLocalMode(Swigged.LLVM.ValueRef, Swigged.LLVM.ThreadLocalMode)
        VB: Swigged.LLVM.LLVM.SetThreadLocalMode(Swigged.LLVM.ValueRef, Swigged.LLVM.ThreadLocalMode)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetThreadLocalMode
        path: src/swigged.llvm/LLVM.cs
        startLine: 1640
      syntax:
        content:
          CSharp: public static void SetThreadLocalMode(ValueRef GlobalVar, ThreadLocalMode Mode)
          VB: Public Shared Sub SetThreadLocalMode(GlobalVar As ValueRef, Mode As ThreadLocalMode)
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        - id: Mode
          type: Swigged.LLVM.ThreadLocalMode
      overload: Swigged.LLVM.LLVM.SetThreadLocalMode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsExternallyInitialized(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsExternallyInitialized(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsExternallyInitialized(ValueRef)
        VB: IsExternallyInitialized(ValueRef)
      nameWithType:
        CSharp: LLVM.IsExternallyInitialized(ValueRef)
        VB: LLVM.IsExternallyInitialized(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsExternallyInitialized(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsExternallyInitialized(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsExternallyInitialized
        path: src/swigged.llvm/LLVM.cs
        startLine: 1644
      syntax:
        content:
          CSharp: public static bool IsExternallyInitialized(ValueRef GlobalVar)
          VB: Public Shared Function IsExternallyInitialized(GlobalVar As ValueRef) As Boolean
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsExternallyInitialized*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetExternallyInitialized(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetExternallyInitialized(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetExternallyInitialized(ValueRef, Boolean)
        VB: SetExternallyInitialized(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetExternallyInitialized(ValueRef, Boolean)
        VB: LLVM.SetExternallyInitialized(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetExternallyInitialized(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetExternallyInitialized(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetExternallyInitialized
        path: src/swigged.llvm/LLVM.cs
        startLine: 1649
      syntax:
        content:
          CSharp: public static void SetExternallyInitialized(ValueRef GlobalVar, bool IsExtInit)
          VB: Public Shared Sub SetExternallyInitialized(GlobalVar As ValueRef, IsExtInit As Boolean)
        parameters:
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        - id: IsExtInit
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetExternallyInitialized*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddAlias(Swigged.LLVM.ModuleRef,Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.AddAlias(Swigged.LLVM.ModuleRef,Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: AddAlias(ModuleRef, TypeRef, ValueRef, String)
        VB: AddAlias(ModuleRef, TypeRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.AddAlias(ModuleRef, TypeRef, ValueRef, String)
        VB: LLVM.AddAlias(ModuleRef, TypeRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddAlias(Swigged.LLVM.ModuleRef, Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.AddAlias(Swigged.LLVM.ModuleRef, Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddAlias
        path: src/swigged.llvm/LLVM.cs
        startLine: 1653
      syntax:
        content:
          CSharp: public static ValueRef AddAlias(ModuleRef M, TypeRef Ty, ValueRef Aliasee, string Name)
          VB: Public Shared Function AddAlias(M As ModuleRef, Ty As TypeRef, Aliasee As ValueRef, Name As String) As ValueRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Aliasee
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.AddAlias*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DeleteFunction(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.DeleteFunction(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: DeleteFunction(ValueRef)
        VB: DeleteFunction(ValueRef)
      nameWithType:
        CSharp: LLVM.DeleteFunction(ValueRef)
        VB: LLVM.DeleteFunction(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DeleteFunction(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.DeleteFunction(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DeleteFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 1658
      syntax:
        content:
          CSharp: public static void DeleteFunction(ValueRef Fn)
          VB: Public Shared Sub DeleteFunction(Fn As ValueRef)
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.DeleteFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.HasPersonalityFn(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.HasPersonalityFn(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: HasPersonalityFn(ValueRef)
        VB: HasPersonalityFn(ValueRef)
      nameWithType:
        CSharp: LLVM.HasPersonalityFn(ValueRef)
        VB: LLVM.HasPersonalityFn(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.HasPersonalityFn(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.HasPersonalityFn(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: HasPersonalityFn
        path: src/swigged.llvm/LLVM.cs
        startLine: 1662
      syntax:
        content:
          CSharp: public static bool HasPersonalityFn(ValueRef Fn)
          VB: Public Shared Function HasPersonalityFn(Fn As ValueRef) As Boolean
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.HasPersonalityFn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetPersonalityFn(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetPersonalityFn(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetPersonalityFn(ValueRef)
        VB: GetPersonalityFn(ValueRef)
      nameWithType:
        CSharp: LLVM.GetPersonalityFn(ValueRef)
        VB: LLVM.GetPersonalityFn(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetPersonalityFn(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetPersonalityFn(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetPersonalityFn
        path: src/swigged.llvm/LLVM.cs
        startLine: 1667
      syntax:
        content:
          CSharp: public static ValueRef GetPersonalityFn(ValueRef Fn)
          VB: Public Shared Function GetPersonalityFn(Fn As ValueRef) As ValueRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetPersonalityFn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetPersonalityFn(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.SetPersonalityFn(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: SetPersonalityFn(ValueRef, ValueRef)
        VB: SetPersonalityFn(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.SetPersonalityFn(ValueRef, ValueRef)
        VB: LLVM.SetPersonalityFn(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetPersonalityFn(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.SetPersonalityFn(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetPersonalityFn
        path: src/swigged.llvm/LLVM.cs
        startLine: 1672
      syntax:
        content:
          CSharp: public static void SetPersonalityFn(ValueRef Fn, ValueRef PersonalityFn)
          VB: Public Shared Sub SetPersonalityFn(Fn As ValueRef, PersonalityFn As ValueRef)
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: PersonalityFn
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.SetPersonalityFn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetIntrinsicID(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetIntrinsicID(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetIntrinsicID(ValueRef)
        VB: GetIntrinsicID(ValueRef)
      nameWithType:
        CSharp: LLVM.GetIntrinsicID(ValueRef)
        VB: LLVM.GetIntrinsicID(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetIntrinsicID(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetIntrinsicID(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetIntrinsicID
        path: src/swigged.llvm/LLVM.cs
        startLine: 1676
      syntax:
        content:
          CSharp: public static uint GetIntrinsicID(ValueRef Fn)
          VB: Public Shared Function GetIntrinsicID(Fn As ValueRef) As UInteger
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetIntrinsicID*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFunctionCallConv(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetFunctionCallConv(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetFunctionCallConv(ValueRef)
        VB: GetFunctionCallConv(ValueRef)
      nameWithType:
        CSharp: LLVM.GetFunctionCallConv(ValueRef)
        VB: LLVM.GetFunctionCallConv(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFunctionCallConv(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetFunctionCallConv(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFunctionCallConv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1681
      syntax:
        content:
          CSharp: public static uint GetFunctionCallConv(ValueRef Fn)
          VB: Public Shared Function GetFunctionCallConv(Fn As ValueRef) As UInteger
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetFunctionCallConv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetFunctionCallConv(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.SetFunctionCallConv(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: SetFunctionCallConv(ValueRef, UInt32)
        VB: SetFunctionCallConv(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.SetFunctionCallConv(ValueRef, UInt32)
        VB: LLVM.SetFunctionCallConv(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetFunctionCallConv(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.SetFunctionCallConv(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetFunctionCallConv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1686
      syntax:
        content:
          CSharp: public static void SetFunctionCallConv(ValueRef Fn, uint CC)
          VB: Public Shared Sub SetFunctionCallConv(Fn As ValueRef, CC As UInteger)
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: CC
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.SetFunctionCallConv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetGC(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetGC(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetGC(ValueRef)
        VB: GetGC(ValueRef)
      nameWithType:
        CSharp: LLVM.GetGC(ValueRef)
        VB: LLVM.GetGC(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetGC(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetGC(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetGC
        path: src/swigged.llvm/LLVM.cs
        startLine: 1690
      syntax:
        content:
          CSharp: public static string GetGC(ValueRef Fn)
          VB: Public Shared Function GetGC(Fn As ValueRef) As String
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetGC*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetGC(Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.SetGC(Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: SetGC(ValueRef, String)
        VB: SetGC(ValueRef, String)
      nameWithType:
        CSharp: LLVM.SetGC(ValueRef, String)
        VB: LLVM.SetGC(ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetGC(Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.SetGC(Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetGC
        path: src/swigged.llvm/LLVM.cs
        startLine: 1695
      syntax:
        content:
          CSharp: public static void SetGC(ValueRef Fn, string Name)
          VB: Public Shared Sub SetGC(Fn As ValueRef, Name As String)
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
      overload: Swigged.LLVM.LLVM.SetGC*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.LLVM.AddAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: AddAttributeAtIndex(ValueRef, UInt32, AttributeRef)
        VB: AddAttributeAtIndex(ValueRef, UInt32, AttributeRef)
      nameWithType:
        CSharp: LLVM.AddAttributeAtIndex(ValueRef, UInt32, AttributeRef)
        VB: LLVM.AddAttributeAtIndex(ValueRef, UInt32, AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.LLVM.AddAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddAttributeAtIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 1699
      syntax:
        content:
          CSharp: public static void AddAttributeAtIndex(ValueRef F, uint Idx, AttributeRef A)
          VB: Public Shared Sub AddAttributeAtIndex(F As ValueRef, Idx As UInteger, A As AttributeRef)
        parameters:
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: A
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.AddAttributeAtIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetAttributeCountAtIndex(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetAttributeCountAtIndex(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetAttributeCountAtIndex(ValueRef, UInt32)
        VB: GetAttributeCountAtIndex(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetAttributeCountAtIndex(ValueRef, UInt32)
        VB: LLVM.GetAttributeCountAtIndex(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetAttributeCountAtIndex(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetAttributeCountAtIndex(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetAttributeCountAtIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 1703
      syntax:
        content:
          CSharp: public static uint GetAttributeCountAtIndex(ValueRef F, uint Idx)
          VB: Public Shared Function GetAttributeCountAtIndex(F As ValueRef, Idx As UInteger) As UInteger
        parameters:
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetAttributeCountAtIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetAttributesAtIndex(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.AttributeRef@)
      commentId: M:Swigged.LLVM.LLVM.GetAttributesAtIndex(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.AttributeRef@)
      language: CSharp
      name:
        CSharp: GetAttributesAtIndex(ValueRef, UInt32, out AttributeRef)
        VB: GetAttributesAtIndex(ValueRef, UInt32, ByRef AttributeRef)
      nameWithType:
        CSharp: LLVM.GetAttributesAtIndex(ValueRef, UInt32, out AttributeRef)
        VB: LLVM.GetAttributesAtIndex(ValueRef, UInt32, ByRef AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetAttributesAtIndex(Swigged.LLVM.ValueRef, System.UInt32, out Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.LLVM.GetAttributesAtIndex(Swigged.LLVM.ValueRef, System.UInt32, ByRef Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetAttributesAtIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 1708
      syntax:
        content:
          CSharp: public static void GetAttributesAtIndex(ValueRef F, uint Idx, out AttributeRef Attrs)
          VB: Public Shared Sub GetAttributesAtIndex(F As ValueRef, Idx As UInteger, ByRef Attrs As AttributeRef)
        parameters:
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: Attrs
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.GetAttributesAtIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetEnumAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetEnumAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: GetEnumAttributeAtIndex(ValueRef, UInt32, UInt32)
        VB: GetEnumAttributeAtIndex(ValueRef, UInt32, UInt32)
      nameWithType:
        CSharp: LLVM.GetEnumAttributeAtIndex(ValueRef, UInt32, UInt32)
        VB: LLVM.GetEnumAttributeAtIndex(ValueRef, UInt32, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetEnumAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetEnumAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetEnumAttributeAtIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 1712
      syntax:
        content:
          CSharp: public static AttributeRef GetEnumAttributeAtIndex(ValueRef F, uint Idx, uint KindID)
          VB: Public Shared Function GetEnumAttributeAtIndex(F As ValueRef, Idx As UInteger, KindID As UInteger) As AttributeRef
        parameters:
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: KindID
          type: System.UInt32
        return:
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.GetEnumAttributeAtIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetStringAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetStringAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: GetStringAttributeAtIndex(ValueRef, UInt32, String, UInt32)
        VB: GetStringAttributeAtIndex(ValueRef, UInt32, String, UInt32)
      nameWithType:
        CSharp: LLVM.GetStringAttributeAtIndex(ValueRef, UInt32, String, UInt32)
        VB: LLVM.GetStringAttributeAtIndex(ValueRef, UInt32, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetStringAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetStringAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetStringAttributeAtIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 1717
      syntax:
        content:
          CSharp: public static AttributeRef GetStringAttributeAtIndex(ValueRef F, uint Idx, string K, uint KLen)
          VB: Public Shared Function GetStringAttributeAtIndex(F As ValueRef, Idx As UInteger, K As String, KLen As UInteger) As AttributeRef
        parameters:
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: K
          type: System.String
        - id: KLen
          type: System.UInt32
        return:
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.GetStringAttributeAtIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: RemoveEnumAttributeAtIndex(ValueRef, UInt32, UInt32)
        VB: RemoveEnumAttributeAtIndex(ValueRef, UInt32, UInt32)
      nameWithType:
        CSharp: LLVM.RemoveEnumAttributeAtIndex(ValueRef, UInt32, UInt32)
        VB: LLVM.RemoveEnumAttributeAtIndex(ValueRef, UInt32, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
        VB: Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RemoveEnumAttributeAtIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 1722
      syntax:
        content:
          CSharp: public static void RemoveEnumAttributeAtIndex(ValueRef F, uint Idx, uint KindID)
          VB: Public Shared Sub RemoveEnumAttributeAtIndex(F As ValueRef, Idx As UInteger, KindID As UInteger)
        parameters:
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: KindID
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex(Swigged.LLVM.ValueRef,System.UInt32,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: RemoveStringAttributeAtIndex(ValueRef, UInt32, String, UInt32)
        VB: RemoveStringAttributeAtIndex(ValueRef, UInt32, String, UInt32)
      nameWithType:
        CSharp: LLVM.RemoveStringAttributeAtIndex(ValueRef, UInt32, String, UInt32)
        VB: LLVM.RemoveStringAttributeAtIndex(ValueRef, UInt32, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex(Swigged.LLVM.ValueRef, System.UInt32, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RemoveStringAttributeAtIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 1726
      syntax:
        content:
          CSharp: public static void RemoveStringAttributeAtIndex(ValueRef F, uint Idx, string K, uint KLen)
          VB: Public Shared Sub RemoveStringAttributeAtIndex(F As ValueRef, Idx As UInteger, K As String, KLen As UInteger)
        parameters:
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: K
          type: System.String
        - id: KLen
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr(Swigged.LLVM.ValueRef,System.String,System.String)
      commentId: M:Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr(Swigged.LLVM.ValueRef,System.String,System.String)
      language: CSharp
      name:
        CSharp: AddTargetDependentFunctionAttr(ValueRef, String, String)
        VB: AddTargetDependentFunctionAttr(ValueRef, String, String)
      nameWithType:
        CSharp: LLVM.AddTargetDependentFunctionAttr(ValueRef, String, String)
        VB: LLVM.AddTargetDependentFunctionAttr(ValueRef, String, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr(Swigged.LLVM.ValueRef, System.String, System.String)
        VB: Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr(Swigged.LLVM.ValueRef, System.String, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddTargetDependentFunctionAttr
        path: src/swigged.llvm/LLVM.cs
        startLine: 1730
      syntax:
        content:
          CSharp: public static void AddTargetDependentFunctionAttr(ValueRef Fn, string A, string V)
          VB: Public Shared Sub AddTargetDependentFunctionAttr(Fn As ValueRef, A As String, V As String)
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: A
          type: System.String
        - id: V
          type: System.String
      overload: Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CountParams(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.CountParams(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: CountParams(ValueRef)
        VB: CountParams(ValueRef)
      nameWithType:
        CSharp: LLVM.CountParams(ValueRef)
        VB: LLVM.CountParams(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CountParams(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.CountParams(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CountParams
        path: src/swigged.llvm/LLVM.cs
        startLine: 1734
      syntax:
        content:
          CSharp: public static uint CountParams(ValueRef Fn)
          VB: Public Shared Function CountParams(Fn As ValueRef) As UInteger
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.CountParams*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetParams(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef@)
      commentId: M:Swigged.LLVM.LLVM.GetParams(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef@)
      language: CSharp
      name:
        CSharp: GetParams(ValueRef, out ValueRef)
        VB: GetParams(ValueRef, ByRef ValueRef)
      nameWithType:
        CSharp: LLVM.GetParams(ValueRef, out ValueRef)
        VB: LLVM.GetParams(ValueRef, ByRef ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetParams(Swigged.LLVM.ValueRef, out Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetParams(Swigged.LLVM.ValueRef, ByRef Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetParams
        path: src/swigged.llvm/LLVM.cs
        startLine: 1739
      syntax:
        content:
          CSharp: public static void GetParams(ValueRef Fn, out ValueRef Params)
          VB: Public Shared Sub GetParams(Fn As ValueRef, ByRef Params As ValueRef)
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: Params
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetParams*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetParam(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetParam(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetParam(ValueRef, UInt32)
        VB: GetParam(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetParam(ValueRef, UInt32)
        VB: LLVM.GetParam(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetParam(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetParam(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetParam
        path: src/swigged.llvm/LLVM.cs
        startLine: 1743
      syntax:
        content:
          CSharp: public static ValueRef GetParam(ValueRef Fn, uint Index)
          VB: Public Shared Function GetParam(Fn As ValueRef, Index As UInteger) As ValueRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetParam*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetParamParent(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetParamParent(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetParamParent(ValueRef)
        VB: GetParamParent(ValueRef)
      nameWithType:
        CSharp: LLVM.GetParamParent(ValueRef)
        VB: LLVM.GetParamParent(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetParamParent(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetParamParent(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetParamParent
        path: src/swigged.llvm/LLVM.cs
        startLine: 1748
      syntax:
        content:
          CSharp: public static ValueRef GetParamParent(ValueRef Inst)
          VB: Public Shared Function GetParamParent(Inst As ValueRef) As ValueRef
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetParamParent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFirstParam(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetFirstParam(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetFirstParam(ValueRef)
        VB: GetFirstParam(ValueRef)
      nameWithType:
        CSharp: LLVM.GetFirstParam(ValueRef)
        VB: LLVM.GetFirstParam(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFirstParam(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetFirstParam(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFirstParam
        path: src/swigged.llvm/LLVM.cs
        startLine: 1753
      syntax:
        content:
          CSharp: public static ValueRef GetFirstParam(ValueRef Fn)
          VB: Public Shared Function GetFirstParam(Fn As ValueRef) As ValueRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetFirstParam*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetLastParam(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetLastParam(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetLastParam(ValueRef)
        VB: GetLastParam(ValueRef)
      nameWithType:
        CSharp: LLVM.GetLastParam(ValueRef)
        VB: LLVM.GetLastParam(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetLastParam(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetLastParam(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetLastParam
        path: src/swigged.llvm/LLVM.cs
        startLine: 1758
      syntax:
        content:
          CSharp: public static ValueRef GetLastParam(ValueRef Fn)
          VB: Public Shared Function GetLastParam(Fn As ValueRef) As ValueRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetLastParam*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNextParam(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNextParam(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNextParam(ValueRef)
        VB: GetNextParam(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNextParam(ValueRef)
        VB: LLVM.GetNextParam(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNextParam(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNextParam(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNextParam
        path: src/swigged.llvm/LLVM.cs
        startLine: 1763
      syntax:
        content:
          CSharp: public static ValueRef GetNextParam(ValueRef Arg)
          VB: Public Shared Function GetNextParam(Arg As ValueRef) As ValueRef
        parameters:
        - id: Arg
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetNextParam*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetPreviousParam(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetPreviousParam(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetPreviousParam(ValueRef)
        VB: GetPreviousParam(ValueRef)
      nameWithType:
        CSharp: LLVM.GetPreviousParam(ValueRef)
        VB: LLVM.GetPreviousParam(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetPreviousParam(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetPreviousParam(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetPreviousParam
        path: src/swigged.llvm/LLVM.cs
        startLine: 1768
      syntax:
        content:
          CSharp: public static ValueRef GetPreviousParam(ValueRef Arg)
          VB: Public Shared Function GetPreviousParam(Arg As ValueRef) As ValueRef
        parameters:
        - id: Arg
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetPreviousParam*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetParamAlignment(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.SetParamAlignment(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: SetParamAlignment(ValueRef, UInt32)
        VB: SetParamAlignment(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.SetParamAlignment(ValueRef, UInt32)
        VB: LLVM.SetParamAlignment(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetParamAlignment(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.SetParamAlignment(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetParamAlignment
        path: src/swigged.llvm/LLVM.cs
        startLine: 1773
      syntax:
        content:
          CSharp: public static void SetParamAlignment(ValueRef Arg, uint Align)
          VB: Public Shared Sub SetParamAlignment(Arg As ValueRef, Align As UInteger)
        parameters:
        - id: Arg
          type: Swigged.LLVM.ValueRef
        - id: Align
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.SetParamAlignment*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.MDStringInContext(Swigged.LLVM.ContextRef,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.MDStringInContext(Swigged.LLVM.ContextRef,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: MDStringInContext(ContextRef, String, UInt32)
        VB: MDStringInContext(ContextRef, String, UInt32)
      nameWithType:
        CSharp: LLVM.MDStringInContext(ContextRef, String, UInt32)
        VB: LLVM.MDStringInContext(ContextRef, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.MDStringInContext(Swigged.LLVM.ContextRef, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.MDStringInContext(Swigged.LLVM.ContextRef, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MDStringInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 1777
      syntax:
        content:
          CSharp: public static ValueRef MDStringInContext(ContextRef C, string Str, uint SLen)
          VB: Public Shared Function MDStringInContext(C As ContextRef, Str As String, SLen As UInteger) As ValueRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: Str
          type: System.String
        - id: SLen
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.MDStringInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.MDString(System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.MDString(System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: MDString(String, UInt32)
        VB: MDString(String, UInt32)
      nameWithType:
        CSharp: LLVM.MDString(String, UInt32)
        VB: LLVM.MDString(String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.MDString(System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.MDString(System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MDString
        path: src/swigged.llvm/LLVM.cs
        startLine: 1782
      syntax:
        content:
          CSharp: public static ValueRef MDString(string Str, uint SLen)
          VB: Public Shared Function MDString(Str As String, SLen As UInteger) As ValueRef
        parameters:
        - id: Str
          type: System.String
        - id: SLen
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.MDString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.MDNodeInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.ValueRef[])
      commentId: M:Swigged.LLVM.LLVM.MDNodeInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.ValueRef[])
      language: CSharp
      name:
        CSharp: MDNodeInContext(ContextRef, ValueRef[])
        VB: MDNodeInContext(ContextRef, ValueRef())
      nameWithType:
        CSharp: LLVM.MDNodeInContext(ContextRef, ValueRef[])
        VB: LLVM.MDNodeInContext(ContextRef, ValueRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.MDNodeInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.ValueRef[])
        VB: Swigged.LLVM.LLVM.MDNodeInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.ValueRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MDNodeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 1787
      syntax:
        content:
          CSharp: public static ValueRef MDNodeInContext(ContextRef C, ValueRef[] Vals)
          VB: Public Shared Function MDNodeInContext(C As ContextRef, Vals As ValueRef()) As ValueRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: Vals
          type: Swigged.LLVM.ValueRef[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.MDNodeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.MDNode(Swigged.LLVM.ValueRef[])
      commentId: M:Swigged.LLVM.LLVM.MDNode(Swigged.LLVM.ValueRef[])
      language: CSharp
      name:
        CSharp: MDNode(ValueRef[])
        VB: MDNode(ValueRef())
      nameWithType:
        CSharp: LLVM.MDNode(ValueRef[])
        VB: LLVM.MDNode(ValueRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.MDNode(Swigged.LLVM.ValueRef[])
        VB: Swigged.LLVM.LLVM.MDNode(Swigged.LLVM.ValueRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MDNode
        path: src/swigged.llvm/LLVM.cs
        startLine: 1795
      syntax:
        content:
          CSharp: public static ValueRef MDNode(ValueRef[] Vals)
          VB: Public Shared Function MDNode(Vals As ValueRef()) As ValueRef
        parameters:
        - id: Vals
          type: Swigged.LLVM.ValueRef[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.MDNode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetMDString(Swigged.LLVM.ValueRef,System.UInt32@)
      commentId: M:Swigged.LLVM.LLVM.GetMDString(Swigged.LLVM.ValueRef,System.UInt32@)
      language: CSharp
      name:
        CSharp: GetMDString(ValueRef, out UInt32)
        VB: GetMDString(ValueRef, ByRef UInt32)
      nameWithType:
        CSharp: LLVM.GetMDString(ValueRef, out UInt32)
        VB: LLVM.GetMDString(ValueRef, ByRef UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetMDString(Swigged.LLVM.ValueRef, out System.UInt32)
        VB: Swigged.LLVM.LLVM.GetMDString(Swigged.LLVM.ValueRef, ByRef System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetMDString
        path: src/swigged.llvm/LLVM.cs
        startLine: 1803
      syntax:
        content:
          CSharp: public static string GetMDString(ValueRef V, out uint Length)
          VB: Public Shared Function GetMDString(V As ValueRef, ByRef Length As UInteger) As String
        parameters:
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Length
          type: System.UInt32
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetMDString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetMDNodeNumOperands(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetMDNodeNumOperands(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetMDNodeNumOperands(ValueRef)
        VB: GetMDNodeNumOperands(ValueRef)
      nameWithType:
        CSharp: LLVM.GetMDNodeNumOperands(ValueRef)
        VB: LLVM.GetMDNodeNumOperands(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetMDNodeNumOperands(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetMDNodeNumOperands(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetMDNodeNumOperands
        path: src/swigged.llvm/LLVM.cs
        startLine: 1808
      syntax:
        content:
          CSharp: public static uint GetMDNodeNumOperands(ValueRef V)
          VB: Public Shared Function GetMDNodeNumOperands(V As ValueRef) As UInteger
        parameters:
        - id: V
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetMDNodeNumOperands*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetMDNodeOperands(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef@)
      commentId: M:Swigged.LLVM.LLVM.GetMDNodeOperands(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef@)
      language: CSharp
      name:
        CSharp: GetMDNodeOperands(ValueRef, out ValueRef)
        VB: GetMDNodeOperands(ValueRef, ByRef ValueRef)
      nameWithType:
        CSharp: LLVM.GetMDNodeOperands(ValueRef, out ValueRef)
        VB: LLVM.GetMDNodeOperands(ValueRef, ByRef ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetMDNodeOperands(Swigged.LLVM.ValueRef, out Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetMDNodeOperands(Swigged.LLVM.ValueRef, ByRef Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetMDNodeOperands
        path: src/swigged.llvm/LLVM.cs
        startLine: 1813
      syntax:
        content:
          CSharp: public static void GetMDNodeOperands(ValueRef V, out ValueRef Dest)
          VB: Public Shared Sub GetMDNodeOperands(V As ValueRef, ByRef Dest As ValueRef)
        parameters:
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Dest
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetMDNodeOperands*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BasicBlockAsValue(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.BasicBlockAsValue(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: BasicBlockAsValue(BasicBlockRef)
        VB: BasicBlockAsValue(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.BasicBlockAsValue(BasicBlockRef)
        VB: LLVM.BasicBlockAsValue(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BasicBlockAsValue(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.BasicBlockAsValue(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BasicBlockAsValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 1817
      syntax:
        content:
          CSharp: public static ValueRef BasicBlockAsValue(BasicBlockRef BB)
          VB: Public Shared Function BasicBlockAsValue(BB As BasicBlockRef) As ValueRef
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BasicBlockAsValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ValueIsBasicBlock(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ValueIsBasicBlock(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ValueIsBasicBlock(ValueRef)
        VB: ValueIsBasicBlock(ValueRef)
      nameWithType:
        CSharp: LLVM.ValueIsBasicBlock(ValueRef)
        VB: LLVM.ValueIsBasicBlock(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ValueIsBasicBlock(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ValueIsBasicBlock(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ValueIsBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1822
      syntax:
        content:
          CSharp: public static bool ValueIsBasicBlock(ValueRef Val)
          VB: Public Shared Function ValueIsBasicBlock(Val As ValueRef) As Boolean
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.ValueIsBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ValueAsBasicBlock(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.ValueAsBasicBlock(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: ValueAsBasicBlock(ValueRef)
        VB: ValueAsBasicBlock(ValueRef)
      nameWithType:
        CSharp: LLVM.ValueAsBasicBlock(ValueRef)
        VB: LLVM.ValueAsBasicBlock(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ValueAsBasicBlock(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.ValueAsBasicBlock(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ValueAsBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1827
      syntax:
        content:
          CSharp: public static BasicBlockRef ValueAsBasicBlock(ValueRef Val)
          VB: Public Shared Function ValueAsBasicBlock(Val As ValueRef) As BasicBlockRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.ValueAsBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBasicBlockName(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.GetBasicBlockName(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: GetBasicBlockName(BasicBlockRef)
        VB: GetBasicBlockName(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.GetBasicBlockName(BasicBlockRef)
        VB: LLVM.GetBasicBlockName(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBasicBlockName(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.GetBasicBlockName(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBasicBlockName
        path: src/swigged.llvm/LLVM.cs
        startLine: 1832
      syntax:
        content:
          CSharp: public static string GetBasicBlockName(BasicBlockRef BB)
          VB: Public Shared Function GetBasicBlockName(BB As BasicBlockRef) As String
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetBasicBlockName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBasicBlockParent(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.GetBasicBlockParent(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: GetBasicBlockParent(BasicBlockRef)
        VB: GetBasicBlockParent(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.GetBasicBlockParent(BasicBlockRef)
        VB: LLVM.GetBasicBlockParent(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBasicBlockParent(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.GetBasicBlockParent(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBasicBlockParent
        path: src/swigged.llvm/LLVM.cs
        startLine: 1837
      syntax:
        content:
          CSharp: public static ValueRef GetBasicBlockParent(BasicBlockRef BB)
          VB: Public Shared Function GetBasicBlockParent(BB As BasicBlockRef) As ValueRef
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetBasicBlockParent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBasicBlockTerminator(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.GetBasicBlockTerminator(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: GetBasicBlockTerminator(BasicBlockRef)
        VB: GetBasicBlockTerminator(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.GetBasicBlockTerminator(BasicBlockRef)
        VB: LLVM.GetBasicBlockTerminator(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBasicBlockTerminator(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.GetBasicBlockTerminator(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBasicBlockTerminator
        path: src/swigged.llvm/LLVM.cs
        startLine: 1842
      syntax:
        content:
          CSharp: public static ValueRef GetBasicBlockTerminator(BasicBlockRef BB)
          VB: Public Shared Function GetBasicBlockTerminator(BB As BasicBlockRef) As ValueRef
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetBasicBlockTerminator*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CountBasicBlocks(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.CountBasicBlocks(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: CountBasicBlocks(ValueRef)
        VB: CountBasicBlocks(ValueRef)
      nameWithType:
        CSharp: LLVM.CountBasicBlocks(ValueRef)
        VB: LLVM.CountBasicBlocks(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CountBasicBlocks(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.CountBasicBlocks(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CountBasicBlocks
        path: src/swigged.llvm/LLVM.cs
        startLine: 1847
      syntax:
        content:
          CSharp: public static uint CountBasicBlocks(ValueRef Fn)
          VB: Public Shared Function CountBasicBlocks(Fn As ValueRef) As UInteger
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.CountBasicBlocks*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBasicBlocks(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef@)
      commentId: M:Swigged.LLVM.LLVM.GetBasicBlocks(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef@)
      language: CSharp
      name:
        CSharp: GetBasicBlocks(ValueRef, out BasicBlockRef)
        VB: GetBasicBlocks(ValueRef, ByRef BasicBlockRef)
      nameWithType:
        CSharp: LLVM.GetBasicBlocks(ValueRef, out BasicBlockRef)
        VB: LLVM.GetBasicBlocks(ValueRef, ByRef BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBasicBlocks(Swigged.LLVM.ValueRef, out Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.GetBasicBlocks(Swigged.LLVM.ValueRef, ByRef Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBasicBlocks
        path: src/swigged.llvm/LLVM.cs
        startLine: 1852
      syntax:
        content:
          CSharp: public static void GetBasicBlocks(ValueRef Fn, out BasicBlockRef BasicBlocks)
          VB: Public Shared Sub GetBasicBlocks(Fn As ValueRef, ByRef BasicBlocks As BasicBlockRef)
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: BasicBlocks
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetBasicBlocks*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFirstBasicBlock(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetFirstBasicBlock(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetFirstBasicBlock(ValueRef)
        VB: GetFirstBasicBlock(ValueRef)
      nameWithType:
        CSharp: LLVM.GetFirstBasicBlock(ValueRef)
        VB: LLVM.GetFirstBasicBlock(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFirstBasicBlock(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetFirstBasicBlock(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFirstBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1856
      syntax:
        content:
          CSharp: public static BasicBlockRef GetFirstBasicBlock(ValueRef Fn)
          VB: Public Shared Function GetFirstBasicBlock(Fn As ValueRef) As BasicBlockRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetFirstBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetLastBasicBlock(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetLastBasicBlock(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetLastBasicBlock(ValueRef)
        VB: GetLastBasicBlock(ValueRef)
      nameWithType:
        CSharp: LLVM.GetLastBasicBlock(ValueRef)
        VB: LLVM.GetLastBasicBlock(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetLastBasicBlock(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetLastBasicBlock(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetLastBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1861
      syntax:
        content:
          CSharp: public static BasicBlockRef GetLastBasicBlock(ValueRef Fn)
          VB: Public Shared Function GetLastBasicBlock(Fn As ValueRef) As BasicBlockRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetLastBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNextBasicBlock(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.GetNextBasicBlock(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: GetNextBasicBlock(BasicBlockRef)
        VB: GetNextBasicBlock(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.GetNextBasicBlock(BasicBlockRef)
        VB: LLVM.GetNextBasicBlock(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNextBasicBlock(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.GetNextBasicBlock(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNextBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1866
      syntax:
        content:
          CSharp: public static BasicBlockRef GetNextBasicBlock(BasicBlockRef BB)
          VB: Public Shared Function GetNextBasicBlock(BB As BasicBlockRef) As BasicBlockRef
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetNextBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetPreviousBasicBlock(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.GetPreviousBasicBlock(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: GetPreviousBasicBlock(BasicBlockRef)
        VB: GetPreviousBasicBlock(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.GetPreviousBasicBlock(BasicBlockRef)
        VB: LLVM.GetPreviousBasicBlock(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetPreviousBasicBlock(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.GetPreviousBasicBlock(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetPreviousBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1871
      syntax:
        content:
          CSharp: public static BasicBlockRef GetPreviousBasicBlock(BasicBlockRef BB)
          VB: Public Shared Function GetPreviousBasicBlock(BB As BasicBlockRef) As BasicBlockRef
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetPreviousBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetEntryBasicBlock(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetEntryBasicBlock(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetEntryBasicBlock(ValueRef)
        VB: GetEntryBasicBlock(ValueRef)
      nameWithType:
        CSharp: LLVM.GetEntryBasicBlock(ValueRef)
        VB: LLVM.GetEntryBasicBlock(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetEntryBasicBlock(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetEntryBasicBlock(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetEntryBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1876
      syntax:
        content:
          CSharp: public static BasicBlockRef GetEntryBasicBlock(ValueRef Fn)
          VB: Public Shared Function GetEntryBasicBlock(Fn As ValueRef) As BasicBlockRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetEntryBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AppendBasicBlockInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.AppendBasicBlockInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: AppendBasicBlockInContext(ContextRef, ValueRef, String)
        VB: AppendBasicBlockInContext(ContextRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.AppendBasicBlockInContext(ContextRef, ValueRef, String)
        VB: LLVM.AppendBasicBlockInContext(ContextRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AppendBasicBlockInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.AppendBasicBlockInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AppendBasicBlockInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 1881
      syntax:
        content:
          CSharp: public static BasicBlockRef AppendBasicBlockInContext(ContextRef C, ValueRef Fn, string Name)
          VB: Public Shared Function AppendBasicBlockInContext(C As ContextRef, Fn As ValueRef, Name As String) As BasicBlockRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.AppendBasicBlockInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AppendBasicBlock(Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.AppendBasicBlock(Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: AppendBasicBlock(ValueRef, String)
        VB: AppendBasicBlock(ValueRef, String)
      nameWithType:
        CSharp: LLVM.AppendBasicBlock(ValueRef, String)
        VB: LLVM.AppendBasicBlock(ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AppendBasicBlock(Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.AppendBasicBlock(Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AppendBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1886
      syntax:
        content:
          CSharp: public static BasicBlockRef AppendBasicBlock(ValueRef Fn, string Name)
          VB: Public Shared Function AppendBasicBlock(Fn As ValueRef, Name As String) As BasicBlockRef
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.AppendBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InsertBasicBlockInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.BasicBlockRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.InsertBasicBlockInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.BasicBlockRef,System.String)
      language: CSharp
      name:
        CSharp: InsertBasicBlockInContext(ContextRef, BasicBlockRef, String)
        VB: InsertBasicBlockInContext(ContextRef, BasicBlockRef, String)
      nameWithType:
        CSharp: LLVM.InsertBasicBlockInContext(ContextRef, BasicBlockRef, String)
        VB: LLVM.InsertBasicBlockInContext(ContextRef, BasicBlockRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InsertBasicBlockInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.BasicBlockRef, System.String)
        VB: Swigged.LLVM.LLVM.InsertBasicBlockInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.BasicBlockRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InsertBasicBlockInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 1891
      syntax:
        content:
          CSharp: public static BasicBlockRef InsertBasicBlockInContext(ContextRef C, BasicBlockRef BB, string Name)
          VB: Public Shared Function InsertBasicBlockInContext(C As ContextRef, BB As BasicBlockRef, Name As String) As BasicBlockRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.InsertBasicBlockInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InsertBasicBlock(Swigged.LLVM.BasicBlockRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.InsertBasicBlock(Swigged.LLVM.BasicBlockRef,System.String)
      language: CSharp
      name:
        CSharp: InsertBasicBlock(BasicBlockRef, String)
        VB: InsertBasicBlock(BasicBlockRef, String)
      nameWithType:
        CSharp: LLVM.InsertBasicBlock(BasicBlockRef, String)
        VB: LLVM.InsertBasicBlock(BasicBlockRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InsertBasicBlock(Swigged.LLVM.BasicBlockRef, System.String)
        VB: Swigged.LLVM.LLVM.InsertBasicBlock(Swigged.LLVM.BasicBlockRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InsertBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1896
      syntax:
        content:
          CSharp: public static BasicBlockRef InsertBasicBlock(BasicBlockRef InsertBeforeBB, string Name)
          VB: Public Shared Function InsertBasicBlock(InsertBeforeBB As BasicBlockRef, Name As String) As BasicBlockRef
        parameters:
        - id: InsertBeforeBB
          type: Swigged.LLVM.BasicBlockRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.InsertBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DeleteBasicBlock(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.DeleteBasicBlock(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: DeleteBasicBlock(BasicBlockRef)
        VB: DeleteBasicBlock(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.DeleteBasicBlock(BasicBlockRef)
        VB: LLVM.DeleteBasicBlock(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DeleteBasicBlock(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.DeleteBasicBlock(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DeleteBasicBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 1901
      syntax:
        content:
          CSharp: public static void DeleteBasicBlock(BasicBlockRef BB)
          VB: Public Shared Sub DeleteBasicBlock(BB As BasicBlockRef)
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.DeleteBasicBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RemoveBasicBlockFromParent(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.RemoveBasicBlockFromParent(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: RemoveBasicBlockFromParent(BasicBlockRef)
        VB: RemoveBasicBlockFromParent(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.RemoveBasicBlockFromParent(BasicBlockRef)
        VB: LLVM.RemoveBasicBlockFromParent(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RemoveBasicBlockFromParent(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.RemoveBasicBlockFromParent(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RemoveBasicBlockFromParent
        path: src/swigged.llvm/LLVM.cs
        startLine: 1905
      syntax:
        content:
          CSharp: public static void RemoveBasicBlockFromParent(BasicBlockRef BB)
          VB: Public Shared Sub RemoveBasicBlockFromParent(BB As BasicBlockRef)
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.RemoveBasicBlockFromParent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.MoveBasicBlockBefore(Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.MoveBasicBlockBefore(Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: MoveBasicBlockBefore(BasicBlockRef, BasicBlockRef)
        VB: MoveBasicBlockBefore(BasicBlockRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.MoveBasicBlockBefore(BasicBlockRef, BasicBlockRef)
        VB: LLVM.MoveBasicBlockBefore(BasicBlockRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.MoveBasicBlockBefore(Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.MoveBasicBlockBefore(Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MoveBasicBlockBefore
        path: src/swigged.llvm/LLVM.cs
        startLine: 1909
      syntax:
        content:
          CSharp: public static void MoveBasicBlockBefore(BasicBlockRef BB, BasicBlockRef MovePos)
          VB: Public Shared Sub MoveBasicBlockBefore(BB As BasicBlockRef, MovePos As BasicBlockRef)
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        - id: MovePos
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.MoveBasicBlockBefore*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.MoveBasicBlockAfter(Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.MoveBasicBlockAfter(Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: MoveBasicBlockAfter(BasicBlockRef, BasicBlockRef)
        VB: MoveBasicBlockAfter(BasicBlockRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.MoveBasicBlockAfter(BasicBlockRef, BasicBlockRef)
        VB: LLVM.MoveBasicBlockAfter(BasicBlockRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.MoveBasicBlockAfter(Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.MoveBasicBlockAfter(Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: MoveBasicBlockAfter
        path: src/swigged.llvm/LLVM.cs
        startLine: 1913
      syntax:
        content:
          CSharp: public static void MoveBasicBlockAfter(BasicBlockRef BB, BasicBlockRef MovePos)
          VB: Public Shared Sub MoveBasicBlockAfter(BB As BasicBlockRef, MovePos As BasicBlockRef)
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        - id: MovePos
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.MoveBasicBlockAfter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFirstInstruction(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.GetFirstInstruction(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: GetFirstInstruction(BasicBlockRef)
        VB: GetFirstInstruction(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.GetFirstInstruction(BasicBlockRef)
        VB: LLVM.GetFirstInstruction(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFirstInstruction(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.GetFirstInstruction(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFirstInstruction
        path: src/swigged.llvm/LLVM.cs
        startLine: 1917
      syntax:
        content:
          CSharp: public static ValueRef GetFirstInstruction(BasicBlockRef BB)
          VB: Public Shared Function GetFirstInstruction(BB As BasicBlockRef) As ValueRef
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetFirstInstruction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetLastInstruction(Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.GetLastInstruction(Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: GetLastInstruction(BasicBlockRef)
        VB: GetLastInstruction(BasicBlockRef)
      nameWithType:
        CSharp: LLVM.GetLastInstruction(BasicBlockRef)
        VB: LLVM.GetLastInstruction(BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetLastInstruction(Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.GetLastInstruction(Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetLastInstruction
        path: src/swigged.llvm/LLVM.cs
        startLine: 1922
      syntax:
        content:
          CSharp: public static ValueRef GetLastInstruction(BasicBlockRef BB)
          VB: Public Shared Function GetLastInstruction(BB As BasicBlockRef) As ValueRef
        parameters:
        - id: BB
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetLastInstruction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.HasMetadata(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.HasMetadata(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: HasMetadata(ValueRef)
        VB: HasMetadata(ValueRef)
      nameWithType:
        CSharp: LLVM.HasMetadata(ValueRef)
        VB: LLVM.HasMetadata(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.HasMetadata(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.HasMetadata(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: HasMetadata
        path: src/swigged.llvm/LLVM.cs
        startLine: 1927
      syntax:
        content:
          CSharp: public static int HasMetadata(ValueRef Val)
          VB: Public Shared Function HasMetadata(Val As ValueRef) As Integer
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Int32
      overload: Swigged.LLVM.LLVM.HasMetadata*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetMetadata(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetMetadata(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetMetadata(ValueRef, UInt32)
        VB: GetMetadata(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetMetadata(ValueRef, UInt32)
        VB: LLVM.GetMetadata(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetMetadata(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetMetadata(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetMetadata
        path: src/swigged.llvm/LLVM.cs
        startLine: 1932
      syntax:
        content:
          CSharp: public static ValueRef GetMetadata(ValueRef Val, uint KindID)
          VB: Public Shared Function GetMetadata(Val As ValueRef, KindID As UInteger) As ValueRef
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: KindID
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetMetadata*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetMetadata(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.SetMetadata(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: SetMetadata(ValueRef, UInt32, ValueRef)
        VB: SetMetadata(ValueRef, UInt32, ValueRef)
      nameWithType:
        CSharp: LLVM.SetMetadata(ValueRef, UInt32, ValueRef)
        VB: LLVM.SetMetadata(ValueRef, UInt32, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetMetadata(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.SetMetadata(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetMetadata
        path: src/swigged.llvm/LLVM.cs
        startLine: 1937
      syntax:
        content:
          CSharp: public static void SetMetadata(ValueRef Val, uint KindID, ValueRef Node)
          VB: Public Shared Sub SetMetadata(Val As ValueRef, KindID As UInteger, Node As ValueRef)
        parameters:
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: KindID
          type: System.UInt32
        - id: Node
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.SetMetadata*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetInstructionParent(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetInstructionParent(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetInstructionParent(ValueRef)
        VB: GetInstructionParent(ValueRef)
      nameWithType:
        CSharp: LLVM.GetInstructionParent(ValueRef)
        VB: LLVM.GetInstructionParent(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetInstructionParent(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetInstructionParent(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetInstructionParent
        path: src/swigged.llvm/LLVM.cs
        startLine: 1941
      syntax:
        content:
          CSharp: public static BasicBlockRef GetInstructionParent(ValueRef Inst)
          VB: Public Shared Function GetInstructionParent(Inst As ValueRef) As BasicBlockRef
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetInstructionParent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNextInstruction(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNextInstruction(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNextInstruction(ValueRef)
        VB: GetNextInstruction(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNextInstruction(ValueRef)
        VB: LLVM.GetNextInstruction(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNextInstruction(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNextInstruction(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNextInstruction
        path: src/swigged.llvm/LLVM.cs
        startLine: 1946
      syntax:
        content:
          CSharp: public static ValueRef GetNextInstruction(ValueRef Inst)
          VB: Public Shared Function GetNextInstruction(Inst As ValueRef) As ValueRef
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetNextInstruction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetPreviousInstruction(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetPreviousInstruction(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetPreviousInstruction(ValueRef)
        VB: GetPreviousInstruction(ValueRef)
      nameWithType:
        CSharp: LLVM.GetPreviousInstruction(ValueRef)
        VB: LLVM.GetPreviousInstruction(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetPreviousInstruction(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetPreviousInstruction(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetPreviousInstruction
        path: src/swigged.llvm/LLVM.cs
        startLine: 1951
      syntax:
        content:
          CSharp: public static ValueRef GetPreviousInstruction(ValueRef Inst)
          VB: Public Shared Function GetPreviousInstruction(Inst As ValueRef) As ValueRef
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetPreviousInstruction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InstructionRemoveFromParent(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.InstructionRemoveFromParent(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: InstructionRemoveFromParent(ValueRef)
        VB: InstructionRemoveFromParent(ValueRef)
      nameWithType:
        CSharp: LLVM.InstructionRemoveFromParent(ValueRef)
        VB: LLVM.InstructionRemoveFromParent(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InstructionRemoveFromParent(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.InstructionRemoveFromParent(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InstructionRemoveFromParent
        path: src/swigged.llvm/LLVM.cs
        startLine: 1956
      syntax:
        content:
          CSharp: public static void InstructionRemoveFromParent(ValueRef Inst)
          VB: Public Shared Sub InstructionRemoveFromParent(Inst As ValueRef)
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.InstructionRemoveFromParent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InstructionEraseFromParent(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.InstructionEraseFromParent(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: InstructionEraseFromParent(ValueRef)
        VB: InstructionEraseFromParent(ValueRef)
      nameWithType:
        CSharp: LLVM.InstructionEraseFromParent(ValueRef)
        VB: LLVM.InstructionEraseFromParent(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InstructionEraseFromParent(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.InstructionEraseFromParent(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InstructionEraseFromParent
        path: src/swigged.llvm/LLVM.cs
        startLine: 1960
      syntax:
        content:
          CSharp: public static void InstructionEraseFromParent(ValueRef Inst)
          VB: Public Shared Sub InstructionEraseFromParent(Inst As ValueRef)
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.InstructionEraseFromParent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetInstructionOpcode(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetInstructionOpcode(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetInstructionOpcode(ValueRef)
        VB: GetInstructionOpcode(ValueRef)
      nameWithType:
        CSharp: LLVM.GetInstructionOpcode(ValueRef)
        VB: LLVM.GetInstructionOpcode(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetInstructionOpcode(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetInstructionOpcode(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetInstructionOpcode
        path: src/swigged.llvm/LLVM.cs
        startLine: 1964
      syntax:
        content:
          CSharp: public static Opcode GetInstructionOpcode(ValueRef Inst)
          VB: Public Shared Function GetInstructionOpcode(Inst As ValueRef) As Opcode
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.Opcode
      overload: Swigged.LLVM.LLVM.GetInstructionOpcode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetICmpPredicate(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetICmpPredicate(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetICmpPredicate(ValueRef)
        VB: GetICmpPredicate(ValueRef)
      nameWithType:
        CSharp: LLVM.GetICmpPredicate(ValueRef)
        VB: LLVM.GetICmpPredicate(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetICmpPredicate(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetICmpPredicate(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetICmpPredicate
        path: src/swigged.llvm/LLVM.cs
        startLine: 1969
      syntax:
        content:
          CSharp: public static IntPredicate GetICmpPredicate(ValueRef Inst)
          VB: Public Shared Function GetICmpPredicate(Inst As ValueRef) As IntPredicate
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.IntPredicate
      overload: Swigged.LLVM.LLVM.GetICmpPredicate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFCmpPredicate(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetFCmpPredicate(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetFCmpPredicate(ValueRef)
        VB: GetFCmpPredicate(ValueRef)
      nameWithType:
        CSharp: LLVM.GetFCmpPredicate(ValueRef)
        VB: LLVM.GetFCmpPredicate(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFCmpPredicate(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetFCmpPredicate(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFCmpPredicate
        path: src/swigged.llvm/LLVM.cs
        startLine: 1974
      syntax:
        content:
          CSharp: public static RealPredicate GetFCmpPredicate(ValueRef Inst)
          VB: Public Shared Function GetFCmpPredicate(Inst As ValueRef) As RealPredicate
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.RealPredicate
      overload: Swigged.LLVM.LLVM.GetFCmpPredicate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InstructionClone(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.InstructionClone(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: InstructionClone(ValueRef)
        VB: InstructionClone(ValueRef)
      nameWithType:
        CSharp: LLVM.InstructionClone(ValueRef)
        VB: LLVM.InstructionClone(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InstructionClone(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.InstructionClone(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InstructionClone
        path: src/swigged.llvm/LLVM.cs
        startLine: 1979
      syntax:
        content:
          CSharp: public static ValueRef InstructionClone(ValueRef Inst)
          VB: Public Shared Function InstructionClone(Inst As ValueRef) As ValueRef
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.InstructionClone*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNumArgOperands(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNumArgOperands(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNumArgOperands(ValueRef)
        VB: GetNumArgOperands(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNumArgOperands(ValueRef)
        VB: LLVM.GetNumArgOperands(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNumArgOperands(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNumArgOperands(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNumArgOperands
        path: src/swigged.llvm/LLVM.cs
        startLine: 1984
      syntax:
        content:
          CSharp: public static uint GetNumArgOperands(ValueRef Instr)
          VB: Public Shared Function GetNumArgOperands(Instr As ValueRef) As UInteger
        parameters:
        - id: Instr
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetNumArgOperands*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetInstructionCallConv(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.SetInstructionCallConv(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: SetInstructionCallConv(ValueRef, UInt32)
        VB: SetInstructionCallConv(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.SetInstructionCallConv(ValueRef, UInt32)
        VB: LLVM.SetInstructionCallConv(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetInstructionCallConv(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.SetInstructionCallConv(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetInstructionCallConv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1989
      syntax:
        content:
          CSharp: public static void SetInstructionCallConv(ValueRef Instr, uint CC)
          VB: Public Shared Sub SetInstructionCallConv(Instr As ValueRef, CC As UInteger)
        parameters:
        - id: Instr
          type: Swigged.LLVM.ValueRef
        - id: CC
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.SetInstructionCallConv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetInstructionCallConv(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetInstructionCallConv(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetInstructionCallConv(ValueRef)
        VB: GetInstructionCallConv(ValueRef)
      nameWithType:
        CSharp: LLVM.GetInstructionCallConv(ValueRef)
        VB: LLVM.GetInstructionCallConv(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetInstructionCallConv(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetInstructionCallConv(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetInstructionCallConv
        path: src/swigged.llvm/LLVM.cs
        startLine: 1993
      syntax:
        content:
          CSharp: public static uint GetInstructionCallConv(ValueRef Instr)
          VB: Public Shared Function GetInstructionCallConv(Instr As ValueRef) As UInteger
        parameters:
        - id: Instr
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetInstructionCallConv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetInstrParamAlignment(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.SetInstrParamAlignment(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: SetInstrParamAlignment(ValueRef, UInt32, UInt32)
        VB: SetInstrParamAlignment(ValueRef, UInt32, UInt32)
      nameWithType:
        CSharp: LLVM.SetInstrParamAlignment(ValueRef, UInt32, UInt32)
        VB: LLVM.SetInstrParamAlignment(ValueRef, UInt32, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetInstrParamAlignment(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
        VB: Swigged.LLVM.LLVM.SetInstrParamAlignment(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetInstrParamAlignment
        path: src/swigged.llvm/LLVM.cs
        startLine: 1998
      syntax:
        content:
          CSharp: public static void SetInstrParamAlignment(ValueRef Instr, uint index, uint Align)
          VB: Public Shared Sub SetInstrParamAlignment(Instr As ValueRef, index As UInteger, Align As UInteger)
        parameters:
        - id: Instr
          type: Swigged.LLVM.ValueRef
        - id: index
          type: System.UInt32
        - id: Align
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.SetInstrParamAlignment*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddCallSiteAttribute(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.AttributeRef)
      commentId: M:Swigged.LLVM.LLVM.AddCallSiteAttribute(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.AttributeRef)
      language: CSharp
      name:
        CSharp: AddCallSiteAttribute(ValueRef, UInt32, AttributeRef)
        VB: AddCallSiteAttribute(ValueRef, UInt32, AttributeRef)
      nameWithType:
        CSharp: LLVM.AddCallSiteAttribute(ValueRef, UInt32, AttributeRef)
        VB: LLVM.AddCallSiteAttribute(ValueRef, UInt32, AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddCallSiteAttribute(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.LLVM.AddCallSiteAttribute(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddCallSiteAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 2002
      syntax:
        content:
          CSharp: public static void AddCallSiteAttribute(ValueRef C, uint Idx, AttributeRef A)
          VB: Public Shared Sub AddCallSiteAttribute(C As ValueRef, Idx As UInteger, A As AttributeRef)
        parameters:
        - id: C
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: A
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.AddCallSiteAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCallSiteAttributeCount(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetCallSiteAttributeCount(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetCallSiteAttributeCount(ValueRef, UInt32)
        VB: GetCallSiteAttributeCount(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetCallSiteAttributeCount(ValueRef, UInt32)
        VB: LLVM.GetCallSiteAttributeCount(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCallSiteAttributeCount(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetCallSiteAttributeCount(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCallSiteAttributeCount
        path: src/swigged.llvm/LLVM.cs
        startLine: 2006
      syntax:
        content:
          CSharp: public static uint GetCallSiteAttributeCount(ValueRef C, uint Idx)
          VB: Public Shared Function GetCallSiteAttributeCount(C As ValueRef, Idx As UInteger) As UInteger
        parameters:
        - id: C
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetCallSiteAttributeCount*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCallSiteAttributes(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.AttributeRef@)
      commentId: M:Swigged.LLVM.LLVM.GetCallSiteAttributes(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.AttributeRef@)
      language: CSharp
      name:
        CSharp: GetCallSiteAttributes(ValueRef, UInt32, out AttributeRef)
        VB: GetCallSiteAttributes(ValueRef, UInt32, ByRef AttributeRef)
      nameWithType:
        CSharp: LLVM.GetCallSiteAttributes(ValueRef, UInt32, out AttributeRef)
        VB: LLVM.GetCallSiteAttributes(ValueRef, UInt32, ByRef AttributeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCallSiteAttributes(Swigged.LLVM.ValueRef, System.UInt32, out Swigged.LLVM.AttributeRef)
        VB: Swigged.LLVM.LLVM.GetCallSiteAttributes(Swigged.LLVM.ValueRef, System.UInt32, ByRef Swigged.LLVM.AttributeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCallSiteAttributes
        path: src/swigged.llvm/LLVM.cs
        startLine: 2011
      syntax:
        content:
          CSharp: public static void GetCallSiteAttributes(ValueRef C, uint Idx, out AttributeRef Attrs)
          VB: Public Shared Sub GetCallSiteAttributes(C As ValueRef, Idx As UInteger, ByRef Attrs As AttributeRef)
        parameters:
        - id: C
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: Attrs
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.GetCallSiteAttributes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCallSiteEnumAttribute(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetCallSiteEnumAttribute(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: GetCallSiteEnumAttribute(ValueRef, UInt32, UInt32)
        VB: GetCallSiteEnumAttribute(ValueRef, UInt32, UInt32)
      nameWithType:
        CSharp: LLVM.GetCallSiteEnumAttribute(ValueRef, UInt32, UInt32)
        VB: LLVM.GetCallSiteEnumAttribute(ValueRef, UInt32, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCallSiteEnumAttribute(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetCallSiteEnumAttribute(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCallSiteEnumAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 2015
      syntax:
        content:
          CSharp: public static AttributeRef GetCallSiteEnumAttribute(ValueRef C, uint Idx, uint KindID)
          VB: Public Shared Function GetCallSiteEnumAttribute(C As ValueRef, Idx As UInteger, KindID As UInteger) As AttributeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: KindID
          type: System.UInt32
        return:
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.GetCallSiteEnumAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCallSiteStringAttribute(Swigged.LLVM.ValueRef,System.UInt32,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetCallSiteStringAttribute(Swigged.LLVM.ValueRef,System.UInt32,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: GetCallSiteStringAttribute(ValueRef, UInt32, String, UInt32)
        VB: GetCallSiteStringAttribute(ValueRef, UInt32, String, UInt32)
      nameWithType:
        CSharp: LLVM.GetCallSiteStringAttribute(ValueRef, UInt32, String, UInt32)
        VB: LLVM.GetCallSiteStringAttribute(ValueRef, UInt32, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCallSiteStringAttribute(Swigged.LLVM.ValueRef, System.UInt32, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetCallSiteStringAttribute(Swigged.LLVM.ValueRef, System.UInt32, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCallSiteStringAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 2020
      syntax:
        content:
          CSharp: public static AttributeRef GetCallSiteStringAttribute(ValueRef C, uint Idx, string K, uint KLen)
          VB: Public Shared Function GetCallSiteStringAttribute(C As ValueRef, Idx As UInteger, K As String, KLen As UInteger) As AttributeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: K
          type: System.String
        - id: KLen
          type: System.UInt32
        return:
          type: Swigged.LLVM.AttributeRef
      overload: Swigged.LLVM.LLVM.GetCallSiteStringAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute(Swigged.LLVM.ValueRef,System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: RemoveCallSiteEnumAttribute(ValueRef, UInt32, UInt32)
        VB: RemoveCallSiteEnumAttribute(ValueRef, UInt32, UInt32)
      nameWithType:
        CSharp: LLVM.RemoveCallSiteEnumAttribute(ValueRef, UInt32, UInt32)
        VB: LLVM.RemoveCallSiteEnumAttribute(ValueRef, UInt32, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
        VB: Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute(Swigged.LLVM.ValueRef, System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RemoveCallSiteEnumAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 2025
      syntax:
        content:
          CSharp: public static void RemoveCallSiteEnumAttribute(ValueRef C, uint Idx, uint KindID)
          VB: Public Shared Sub RemoveCallSiteEnumAttribute(C As ValueRef, Idx As UInteger, KindID As UInteger)
        parameters:
        - id: C
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: KindID
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute(Swigged.LLVM.ValueRef,System.UInt32,System.String,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute(Swigged.LLVM.ValueRef,System.UInt32,System.String,System.UInt32)
      language: CSharp
      name:
        CSharp: RemoveCallSiteStringAttribute(ValueRef, UInt32, String, UInt32)
        VB: RemoveCallSiteStringAttribute(ValueRef, UInt32, String, UInt32)
      nameWithType:
        CSharp: LLVM.RemoveCallSiteStringAttribute(ValueRef, UInt32, String, UInt32)
        VB: LLVM.RemoveCallSiteStringAttribute(ValueRef, UInt32, String, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute(Swigged.LLVM.ValueRef, System.UInt32, System.String, System.UInt32)
        VB: Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute(Swigged.LLVM.ValueRef, System.UInt32, System.String, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RemoveCallSiteStringAttribute
        path: src/swigged.llvm/LLVM.cs
        startLine: 2029
      syntax:
        content:
          CSharp: public static void RemoveCallSiteStringAttribute(ValueRef C, uint Idx, string K, uint KLen)
          VB: Public Shared Sub RemoveCallSiteStringAttribute(C As ValueRef, Idx As UInteger, K As String, KLen As UInteger)
        parameters:
        - id: C
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: K
          type: System.String
        - id: KLen
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCalledValue(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetCalledValue(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetCalledValue(ValueRef)
        VB: GetCalledValue(ValueRef)
      nameWithType:
        CSharp: LLVM.GetCalledValue(ValueRef)
        VB: LLVM.GetCalledValue(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCalledValue(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetCalledValue(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCalledValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 2033
      syntax:
        content:
          CSharp: public static ValueRef GetCalledValue(ValueRef Instr)
          VB: Public Shared Function GetCalledValue(Instr As ValueRef) As ValueRef
        parameters:
        - id: Instr
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetCalledValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsTailCall(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsTailCall(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsTailCall(ValueRef)
        VB: IsTailCall(ValueRef)
      nameWithType:
        CSharp: LLVM.IsTailCall(ValueRef)
        VB: LLVM.IsTailCall(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsTailCall(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsTailCall(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsTailCall
        path: src/swigged.llvm/LLVM.cs
        startLine: 2038
      syntax:
        content:
          CSharp: public static bool IsTailCall(ValueRef CallInst)
          VB: Public Shared Function IsTailCall(CallInst As ValueRef) As Boolean
        parameters:
        - id: CallInst
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsTailCall*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetTailCall(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetTailCall(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetTailCall(ValueRef, Boolean)
        VB: SetTailCall(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetTailCall(ValueRef, Boolean)
        VB: LLVM.SetTailCall(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetTailCall(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetTailCall(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetTailCall
        path: src/swigged.llvm/LLVM.cs
        startLine: 2043
      syntax:
        content:
          CSharp: public static void SetTailCall(ValueRef CallInst, bool IsTailCall)
          VB: Public Shared Sub SetTailCall(CallInst As ValueRef, IsTailCall As Boolean)
        parameters:
        - id: CallInst
          type: Swigged.LLVM.ValueRef
        - id: IsTailCall
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetTailCall*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNormalDest(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNormalDest(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNormalDest(ValueRef)
        VB: GetNormalDest(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNormalDest(ValueRef)
        VB: LLVM.GetNormalDest(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNormalDest(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNormalDest(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNormalDest
        path: src/swigged.llvm/LLVM.cs
        startLine: 2047
      syntax:
        content:
          CSharp: public static BasicBlockRef GetNormalDest(ValueRef InvokeInst)
          VB: Public Shared Function GetNormalDest(InvokeInst As ValueRef) As BasicBlockRef
        parameters:
        - id: InvokeInst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetNormalDest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetUnwindDest(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetUnwindDest(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetUnwindDest(ValueRef)
        VB: GetUnwindDest(ValueRef)
      nameWithType:
        CSharp: LLVM.GetUnwindDest(ValueRef)
        VB: LLVM.GetUnwindDest(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetUnwindDest(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetUnwindDest(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetUnwindDest
        path: src/swigged.llvm/LLVM.cs
        startLine: 2052
      syntax:
        content:
          CSharp: public static BasicBlockRef GetUnwindDest(ValueRef InvokeInst)
          VB: Public Shared Function GetUnwindDest(InvokeInst As ValueRef) As BasicBlockRef
        parameters:
        - id: InvokeInst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetUnwindDest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetNormalDest(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.SetNormalDest(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: SetNormalDest(ValueRef, BasicBlockRef)
        VB: SetNormalDest(ValueRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.SetNormalDest(ValueRef, BasicBlockRef)
        VB: LLVM.SetNormalDest(ValueRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetNormalDest(Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.SetNormalDest(Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetNormalDest
        path: src/swigged.llvm/LLVM.cs
        startLine: 2057
      syntax:
        content:
          CSharp: public static void SetNormalDest(ValueRef InvokeInst, BasicBlockRef B)
          VB: Public Shared Sub SetNormalDest(InvokeInst As ValueRef, B As BasicBlockRef)
        parameters:
        - id: InvokeInst
          type: Swigged.LLVM.ValueRef
        - id: B
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.SetNormalDest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetUnwindDest(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.SetUnwindDest(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: SetUnwindDest(ValueRef, BasicBlockRef)
        VB: SetUnwindDest(ValueRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.SetUnwindDest(ValueRef, BasicBlockRef)
        VB: LLVM.SetUnwindDest(ValueRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetUnwindDest(Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.SetUnwindDest(Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetUnwindDest
        path: src/swigged.llvm/LLVM.cs
        startLine: 2061
      syntax:
        content:
          CSharp: public static void SetUnwindDest(ValueRef InvokeInst, BasicBlockRef B)
          VB: Public Shared Sub SetUnwindDest(InvokeInst As ValueRef, B As BasicBlockRef)
        parameters:
        - id: InvokeInst
          type: Swigged.LLVM.ValueRef
        - id: B
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.SetUnwindDest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNumSuccessors(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNumSuccessors(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNumSuccessors(ValueRef)
        VB: GetNumSuccessors(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNumSuccessors(ValueRef)
        VB: LLVM.GetNumSuccessors(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNumSuccessors(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNumSuccessors(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNumSuccessors
        path: src/swigged.llvm/LLVM.cs
        startLine: 2065
      syntax:
        content:
          CSharp: public static uint GetNumSuccessors(ValueRef Term)
          VB: Public Shared Function GetNumSuccessors(Term As ValueRef) As UInteger
        parameters:
        - id: Term
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetNumSuccessors*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetSuccessor(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetSuccessor(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetSuccessor(ValueRef, UInt32)
        VB: GetSuccessor(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetSuccessor(ValueRef, UInt32)
        VB: LLVM.GetSuccessor(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetSuccessor(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetSuccessor(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetSuccessor
        path: src/swigged.llvm/LLVM.cs
        startLine: 2070
      syntax:
        content:
          CSharp: public static BasicBlockRef GetSuccessor(ValueRef Term, uint i)
          VB: Public Shared Function GetSuccessor(Term As ValueRef, i As UInteger) As BasicBlockRef
        parameters:
        - id: Term
          type: Swigged.LLVM.ValueRef
        - id: i
          type: System.UInt32
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetSuccessor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetSuccessor(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.SetSuccessor(Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: SetSuccessor(ValueRef, UInt32, BasicBlockRef)
        VB: SetSuccessor(ValueRef, UInt32, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.SetSuccessor(ValueRef, UInt32, BasicBlockRef)
        VB: LLVM.SetSuccessor(ValueRef, UInt32, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetSuccessor(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.SetSuccessor(Swigged.LLVM.ValueRef, System.UInt32, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetSuccessor
        path: src/swigged.llvm/LLVM.cs
        startLine: 2075
      syntax:
        content:
          CSharp: public static void SetSuccessor(ValueRef Term, uint i, BasicBlockRef block)
          VB: Public Shared Sub SetSuccessor(Term As ValueRef, i As UInteger, block As BasicBlockRef)
        parameters:
        - id: Term
          type: Swigged.LLVM.ValueRef
        - id: i
          type: System.UInt32
        - id: block
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.SetSuccessor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsConditional(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsConditional(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsConditional(ValueRef)
        VB: IsConditional(ValueRef)
      nameWithType:
        CSharp: LLVM.IsConditional(ValueRef)
        VB: LLVM.IsConditional(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsConditional(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsConditional(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsConditional
        path: src/swigged.llvm/LLVM.cs
        startLine: 2079
      syntax:
        content:
          CSharp: public static bool IsConditional(ValueRef Branch)
          VB: Public Shared Function IsConditional(Branch As ValueRef) As Boolean
        parameters:
        - id: Branch
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsConditional*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCondition(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetCondition(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetCondition(ValueRef)
        VB: GetCondition(ValueRef)
      nameWithType:
        CSharp: LLVM.GetCondition(ValueRef)
        VB: LLVM.GetCondition(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCondition(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetCondition(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCondition
        path: src/swigged.llvm/LLVM.cs
        startLine: 2084
      syntax:
        content:
          CSharp: public static ValueRef GetCondition(ValueRef Branch)
          VB: Public Shared Function GetCondition(Branch As ValueRef) As ValueRef
        parameters:
        - id: Branch
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetCondition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetCondition(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.SetCondition(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: SetCondition(ValueRef, ValueRef)
        VB: SetCondition(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.SetCondition(ValueRef, ValueRef)
        VB: LLVM.SetCondition(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetCondition(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.SetCondition(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetCondition
        path: src/swigged.llvm/LLVM.cs
        startLine: 2089
      syntax:
        content:
          CSharp: public static void SetCondition(ValueRef Branch, ValueRef Cond)
          VB: Public Shared Sub SetCondition(Branch As ValueRef, Cond As ValueRef)
        parameters:
        - id: Branch
          type: Swigged.LLVM.ValueRef
        - id: Cond
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.SetCondition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetSwitchDefaultDest(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetSwitchDefaultDest(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetSwitchDefaultDest(ValueRef)
        VB: GetSwitchDefaultDest(ValueRef)
      nameWithType:
        CSharp: LLVM.GetSwitchDefaultDest(ValueRef)
        VB: LLVM.GetSwitchDefaultDest(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetSwitchDefaultDest(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetSwitchDefaultDest(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetSwitchDefaultDest
        path: src/swigged.llvm/LLVM.cs
        startLine: 2093
      syntax:
        content:
          CSharp: public static BasicBlockRef GetSwitchDefaultDest(ValueRef SwitchInstr)
          VB: Public Shared Function GetSwitchDefaultDest(SwitchInstr As ValueRef) As BasicBlockRef
        parameters:
        - id: SwitchInstr
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetSwitchDefaultDest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetAllocatedType(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetAllocatedType(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetAllocatedType(ValueRef)
        VB: GetAllocatedType(ValueRef)
      nameWithType:
        CSharp: LLVM.GetAllocatedType(ValueRef)
        VB: LLVM.GetAllocatedType(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetAllocatedType(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetAllocatedType(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetAllocatedType
        path: src/swigged.llvm/LLVM.cs
        startLine: 2098
      syntax:
        content:
          CSharp: public static TypeRef GetAllocatedType(ValueRef Alloca)
          VB: Public Shared Function GetAllocatedType(Alloca As ValueRef) As TypeRef
        parameters:
        - id: Alloca
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.GetAllocatedType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsInBounds(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsInBounds(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsInBounds(ValueRef)
        VB: IsInBounds(ValueRef)
      nameWithType:
        CSharp: LLVM.IsInBounds(ValueRef)
        VB: LLVM.IsInBounds(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsInBounds(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsInBounds(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsInBounds
        path: src/swigged.llvm/LLVM.cs
        startLine: 2103
      syntax:
        content:
          CSharp: public static bool IsInBounds(ValueRef GEP)
          VB: Public Shared Function IsInBounds(GEP As ValueRef) As Boolean
        parameters:
        - id: GEP
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsInBounds*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetIsInBounds(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetIsInBounds(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetIsInBounds(ValueRef, Boolean)
        VB: SetIsInBounds(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetIsInBounds(ValueRef, Boolean)
        VB: LLVM.SetIsInBounds(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetIsInBounds(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetIsInBounds(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetIsInBounds
        path: src/swigged.llvm/LLVM.cs
        startLine: 2108
      syntax:
        content:
          CSharp: public static void SetIsInBounds(ValueRef GEP, bool InBounds)
          VB: Public Shared Sub SetIsInBounds(GEP As ValueRef, InBounds As Boolean)
        parameters:
        - id: GEP
          type: Swigged.LLVM.ValueRef
        - id: InBounds
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetIsInBounds*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddIncoming(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],Swigged.LLVM.BasicBlockRef[])
      commentId: M:Swigged.LLVM.LLVM.AddIncoming(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],Swigged.LLVM.BasicBlockRef[])
      language: CSharp
      name:
        CSharp: AddIncoming(ValueRef, ValueRef[], BasicBlockRef[])
        VB: AddIncoming(ValueRef, ValueRef(), BasicBlockRef())
      nameWithType:
        CSharp: LLVM.AddIncoming(ValueRef, ValueRef[], BasicBlockRef[])
        VB: LLVM.AddIncoming(ValueRef, ValueRef(), BasicBlockRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddIncoming(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef[], Swigged.LLVM.BasicBlockRef[])
        VB: Swigged.LLVM.LLVM.AddIncoming(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef(), Swigged.LLVM.BasicBlockRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddIncoming
        path: src/swigged.llvm/LLVM.cs
        startLine: 2112
      syntax:
        content:
          CSharp: public static void AddIncoming(ValueRef PhiNode, ValueRef[] IncomingValues, BasicBlockRef[] IncomingBlocks)
          VB: Public Shared Sub AddIncoming(PhiNode As ValueRef, IncomingValues As ValueRef(), IncomingBlocks As BasicBlockRef())
        parameters:
        - id: PhiNode
          type: Swigged.LLVM.ValueRef
        - id: IncomingValues
          type: Swigged.LLVM.ValueRef[]
        - id: IncomingBlocks
          type: Swigged.LLVM.BasicBlockRef[]
      overload: Swigged.LLVM.LLVM.AddIncoming*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CountIncoming(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.CountIncoming(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: CountIncoming(ValueRef)
        VB: CountIncoming(ValueRef)
      nameWithType:
        CSharp: LLVM.CountIncoming(ValueRef)
        VB: LLVM.CountIncoming(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CountIncoming(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.CountIncoming(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CountIncoming
        path: src/swigged.llvm/LLVM.cs
        startLine: 2120
      syntax:
        content:
          CSharp: public static uint CountIncoming(ValueRef PhiNode)
          VB: Public Shared Function CountIncoming(PhiNode As ValueRef) As UInteger
        parameters:
        - id: PhiNode
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.CountIncoming*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetIncomingValue(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetIncomingValue(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetIncomingValue(ValueRef, UInt32)
        VB: GetIncomingValue(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetIncomingValue(ValueRef, UInt32)
        VB: LLVM.GetIncomingValue(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetIncomingValue(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetIncomingValue(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetIncomingValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 2125
      syntax:
        content:
          CSharp: public static ValueRef GetIncomingValue(ValueRef PhiNode, uint Index)
          VB: Public Shared Function GetIncomingValue(PhiNode As ValueRef, Index As UInteger) As ValueRef
        parameters:
        - id: PhiNode
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetIncomingValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetIncomingBlock(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetIncomingBlock(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetIncomingBlock(ValueRef, UInt32)
        VB: GetIncomingBlock(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetIncomingBlock(ValueRef, UInt32)
        VB: LLVM.GetIncomingBlock(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetIncomingBlock(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetIncomingBlock(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetIncomingBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 2130
      syntax:
        content:
          CSharp: public static BasicBlockRef GetIncomingBlock(ValueRef PhiNode, uint Index)
          VB: Public Shared Function GetIncomingBlock(PhiNode As ValueRef, Index As UInteger) As BasicBlockRef
        parameters:
        - id: PhiNode
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: System.UInt32
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetIncomingBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNumIndices(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNumIndices(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNumIndices(ValueRef)
        VB: GetNumIndices(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNumIndices(ValueRef)
        VB: LLVM.GetNumIndices(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNumIndices(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNumIndices(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNumIndices
        path: src/swigged.llvm/LLVM.cs
        startLine: 2135
      syntax:
        content:
          CSharp: public static uint GetNumIndices(ValueRef Inst)
          VB: Public Shared Function GetNumIndices(Inst As ValueRef) As UInteger
        parameters:
        - id: Inst
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetNumIndices*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateBuilderInContext(Swigged.LLVM.ContextRef)
      commentId: M:Swigged.LLVM.LLVM.CreateBuilderInContext(Swigged.LLVM.ContextRef)
      language: CSharp
      name:
        CSharp: CreateBuilderInContext(ContextRef)
        VB: CreateBuilderInContext(ContextRef)
      nameWithType:
        CSharp: LLVM.CreateBuilderInContext(ContextRef)
        VB: LLVM.CreateBuilderInContext(ContextRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateBuilderInContext(Swigged.LLVM.ContextRef)
        VB: Swigged.LLVM.LLVM.CreateBuilderInContext(Swigged.LLVM.ContextRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateBuilderInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 2140
      syntax:
        content:
          CSharp: public static BuilderRef CreateBuilderInContext(ContextRef C)
          VB: Public Shared Function CreateBuilderInContext(C As ContextRef) As BuilderRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        return:
          type: Swigged.LLVM.BuilderRef
      overload: Swigged.LLVM.LLVM.CreateBuilderInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateBuilder
      commentId: M:Swigged.LLVM.LLVM.CreateBuilder
      language: CSharp
      name:
        CSharp: CreateBuilder()
        VB: CreateBuilder()
      nameWithType:
        CSharp: LLVM.CreateBuilder()
        VB: LLVM.CreateBuilder()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateBuilder()
        VB: Swigged.LLVM.LLVM.CreateBuilder()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateBuilder
        path: src/swigged.llvm/LLVM.cs
        startLine: 2145
      syntax:
        content:
          CSharp: public static BuilderRef CreateBuilder()
          VB: Public Shared Function CreateBuilder As BuilderRef
        return:
          type: Swigged.LLVM.BuilderRef
      overload: Swigged.LLVM.LLVM.CreateBuilder*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PositionBuilder(Swigged.LLVM.BuilderRef,Swigged.LLVM.BasicBlockRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.PositionBuilder(Swigged.LLVM.BuilderRef,Swigged.LLVM.BasicBlockRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: PositionBuilder(BuilderRef, BasicBlockRef, ValueRef)
        VB: PositionBuilder(BuilderRef, BasicBlockRef, ValueRef)
      nameWithType:
        CSharp: LLVM.PositionBuilder(BuilderRef, BasicBlockRef, ValueRef)
        VB: LLVM.PositionBuilder(BuilderRef, BasicBlockRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PositionBuilder(Swigged.LLVM.BuilderRef, Swigged.LLVM.BasicBlockRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.PositionBuilder(Swigged.LLVM.BuilderRef, Swigged.LLVM.BasicBlockRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PositionBuilder
        path: src/swigged.llvm/LLVM.cs
        startLine: 2150
      syntax:
        content:
          CSharp: public static void PositionBuilder(BuilderRef Builder, BasicBlockRef Block, ValueRef Instr)
          VB: Public Shared Sub PositionBuilder(Builder As BuilderRef, Block As BasicBlockRef, Instr As ValueRef)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        - id: Block
          type: Swigged.LLVM.BasicBlockRef
        - id: Instr
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.PositionBuilder*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PositionBuilderBefore(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.PositionBuilderBefore(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: PositionBuilderBefore(BuilderRef, ValueRef)
        VB: PositionBuilderBefore(BuilderRef, ValueRef)
      nameWithType:
        CSharp: LLVM.PositionBuilderBefore(BuilderRef, ValueRef)
        VB: LLVM.PositionBuilderBefore(BuilderRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PositionBuilderBefore(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.PositionBuilderBefore(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PositionBuilderBefore
        path: src/swigged.llvm/LLVM.cs
        startLine: 2154
      syntax:
        content:
          CSharp: public static void PositionBuilderBefore(BuilderRef Builder, ValueRef Instr)
          VB: Public Shared Sub PositionBuilderBefore(Builder As BuilderRef, Instr As ValueRef)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        - id: Instr
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.PositionBuilderBefore*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PositionBuilderAtEnd(Swigged.LLVM.BuilderRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.PositionBuilderAtEnd(Swigged.LLVM.BuilderRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: PositionBuilderAtEnd(BuilderRef, BasicBlockRef)
        VB: PositionBuilderAtEnd(BuilderRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.PositionBuilderAtEnd(BuilderRef, BasicBlockRef)
        VB: LLVM.PositionBuilderAtEnd(BuilderRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PositionBuilderAtEnd(Swigged.LLVM.BuilderRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.PositionBuilderAtEnd(Swigged.LLVM.BuilderRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PositionBuilderAtEnd
        path: src/swigged.llvm/LLVM.cs
        startLine: 2158
      syntax:
        content:
          CSharp: public static void PositionBuilderAtEnd(BuilderRef Builder, BasicBlockRef Block)
          VB: Public Shared Sub PositionBuilderAtEnd(Builder As BuilderRef, Block As BasicBlockRef)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        - id: Block
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.PositionBuilderAtEnd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetInsertBlock(Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.LLVM.GetInsertBlock(Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: GetInsertBlock(BuilderRef)
        VB: GetInsertBlock(BuilderRef)
      nameWithType:
        CSharp: LLVM.GetInsertBlock(BuilderRef)
        VB: LLVM.GetInsertBlock(BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetInsertBlock(Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.LLVM.GetInsertBlock(Swigged.LLVM.BuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetInsertBlock
        path: src/swigged.llvm/LLVM.cs
        startLine: 2162
      syntax:
        content:
          CSharp: public static BasicBlockRef GetInsertBlock(BuilderRef Builder)
          VB: Public Shared Function GetInsertBlock(Builder As BuilderRef) As BasicBlockRef
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        return:
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.GetInsertBlock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ClearInsertionPosition(Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.LLVM.ClearInsertionPosition(Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: ClearInsertionPosition(BuilderRef)
        VB: ClearInsertionPosition(BuilderRef)
      nameWithType:
        CSharp: LLVM.ClearInsertionPosition(BuilderRef)
        VB: LLVM.ClearInsertionPosition(BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ClearInsertionPosition(Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.LLVM.ClearInsertionPosition(Swigged.LLVM.BuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ClearInsertionPosition
        path: src/swigged.llvm/LLVM.cs
        startLine: 2167
      syntax:
        content:
          CSharp: public static void ClearInsertionPosition(BuilderRef Builder)
          VB: Public Shared Sub ClearInsertionPosition(Builder As BuilderRef)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
      overload: Swigged.LLVM.LLVM.ClearInsertionPosition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InsertIntoBuilder(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.InsertIntoBuilder(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: InsertIntoBuilder(BuilderRef, ValueRef)
        VB: InsertIntoBuilder(BuilderRef, ValueRef)
      nameWithType:
        CSharp: LLVM.InsertIntoBuilder(BuilderRef, ValueRef)
        VB: LLVM.InsertIntoBuilder(BuilderRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InsertIntoBuilder(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.InsertIntoBuilder(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InsertIntoBuilder
        path: src/swigged.llvm/LLVM.cs
        startLine: 2171
      syntax:
        content:
          CSharp: public static void InsertIntoBuilder(BuilderRef Builder, ValueRef Instr)
          VB: Public Shared Sub InsertIntoBuilder(Builder As BuilderRef, Instr As ValueRef)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        - id: Instr
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.InsertIntoBuilder*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InsertIntoBuilderWithName(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.InsertIntoBuilderWithName(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: InsertIntoBuilderWithName(BuilderRef, ValueRef, String)
        VB: InsertIntoBuilderWithName(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.InsertIntoBuilderWithName(BuilderRef, ValueRef, String)
        VB: LLVM.InsertIntoBuilderWithName(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InsertIntoBuilderWithName(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.InsertIntoBuilderWithName(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InsertIntoBuilderWithName
        path: src/swigged.llvm/LLVM.cs
        startLine: 2175
      syntax:
        content:
          CSharp: public static void InsertIntoBuilderWithName(BuilderRef Builder, ValueRef Instr, string Name)
          VB: Public Shared Sub InsertIntoBuilderWithName(Builder As BuilderRef, Instr As ValueRef, Name As String)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        - id: Instr
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
      overload: Swigged.LLVM.LLVM.InsertIntoBuilderWithName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeBuilder(Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeBuilder(Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: DisposeBuilder(BuilderRef)
        VB: DisposeBuilder(BuilderRef)
      nameWithType:
        CSharp: LLVM.DisposeBuilder(BuilderRef)
        VB: LLVM.DisposeBuilder(BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeBuilder(Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.LLVM.DisposeBuilder(Swigged.LLVM.BuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeBuilder
        path: src/swigged.llvm/LLVM.cs
        startLine: 2179
      syntax:
        content:
          CSharp: public static void DisposeBuilder(BuilderRef Builder)
          VB: Public Shared Sub DisposeBuilder(Builder As BuilderRef)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
      overload: Swigged.LLVM.LLVM.DisposeBuilder*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetCurrentDebugLocation(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.SetCurrentDebugLocation(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: SetCurrentDebugLocation(BuilderRef, ValueRef)
        VB: SetCurrentDebugLocation(BuilderRef, ValueRef)
      nameWithType:
        CSharp: LLVM.SetCurrentDebugLocation(BuilderRef, ValueRef)
        VB: LLVM.SetCurrentDebugLocation(BuilderRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetCurrentDebugLocation(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.SetCurrentDebugLocation(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetCurrentDebugLocation
        path: src/swigged.llvm/LLVM.cs
        startLine: 2183
      syntax:
        content:
          CSharp: public static void SetCurrentDebugLocation(BuilderRef Builder, ValueRef L)
          VB: Public Shared Sub SetCurrentDebugLocation(Builder As BuilderRef, L As ValueRef)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        - id: L
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.SetCurrentDebugLocation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCurrentDebugLocation(Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.LLVM.GetCurrentDebugLocation(Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: GetCurrentDebugLocation(BuilderRef)
        VB: GetCurrentDebugLocation(BuilderRef)
      nameWithType:
        CSharp: LLVM.GetCurrentDebugLocation(BuilderRef)
        VB: LLVM.GetCurrentDebugLocation(BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCurrentDebugLocation(Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.LLVM.GetCurrentDebugLocation(Swigged.LLVM.BuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCurrentDebugLocation
        path: src/swigged.llvm/LLVM.cs
        startLine: 2187
      syntax:
        content:
          CSharp: public static ValueRef GetCurrentDebugLocation(BuilderRef Builder)
          VB: Public Shared Function GetCurrentDebugLocation(Builder As BuilderRef) As ValueRef
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetCurrentDebugLocation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetInstDebugLocation(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.SetInstDebugLocation(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: SetInstDebugLocation(BuilderRef, ValueRef)
        VB: SetInstDebugLocation(BuilderRef, ValueRef)
      nameWithType:
        CSharp: LLVM.SetInstDebugLocation(BuilderRef, ValueRef)
        VB: LLVM.SetInstDebugLocation(BuilderRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetInstDebugLocation(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.SetInstDebugLocation(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetInstDebugLocation
        path: src/swigged.llvm/LLVM.cs
        startLine: 2192
      syntax:
        content:
          CSharp: public static void SetInstDebugLocation(BuilderRef Builder, ValueRef Inst)
          VB: Public Shared Sub SetInstDebugLocation(Builder As BuilderRef, Inst As ValueRef)
        parameters:
        - id: Builder
          type: Swigged.LLVM.BuilderRef
        - id: Inst
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.SetInstDebugLocation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildRetVoid(Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.LLVM.BuildRetVoid(Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: BuildRetVoid(BuilderRef)
        VB: BuildRetVoid(BuilderRef)
      nameWithType:
        CSharp: LLVM.BuildRetVoid(BuilderRef)
        VB: LLVM.BuildRetVoid(BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildRetVoid(Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.LLVM.BuildRetVoid(Swigged.LLVM.BuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildRetVoid
        path: src/swigged.llvm/LLVM.cs
        startLine: 2196
      syntax:
        content:
          CSharp: public static ValueRef BuildRetVoid(BuilderRef arg0)
          VB: Public Shared Function BuildRetVoid(arg0 As BuilderRef) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildRetVoid*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildRet(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.BuildRet(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: BuildRet(BuilderRef, ValueRef)
        VB: BuildRet(BuilderRef, ValueRef)
      nameWithType:
        CSharp: LLVM.BuildRet(BuilderRef, ValueRef)
        VB: LLVM.BuildRet(BuilderRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildRet(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.BuildRet(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildRet
        path: src/swigged.llvm/LLVM.cs
        startLine: 2201
      syntax:
        content:
          CSharp: public static ValueRef BuildRet(BuilderRef arg0, ValueRef V)
          VB: Public Shared Function BuildRet(arg0 As BuilderRef, V As ValueRef) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: V
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildRet*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildAggregateRet(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef[])
      commentId: M:Swigged.LLVM.LLVM.BuildAggregateRet(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef[])
      language: CSharp
      name:
        CSharp: BuildAggregateRet(BuilderRef, ValueRef[])
        VB: BuildAggregateRet(BuilderRef, ValueRef())
      nameWithType:
        CSharp: LLVM.BuildAggregateRet(BuilderRef, ValueRef[])
        VB: LLVM.BuildAggregateRet(BuilderRef, ValueRef())
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildAggregateRet(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef[])
        VB: Swigged.LLVM.LLVM.BuildAggregateRet(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef())
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildAggregateRet
        path: src/swigged.llvm/LLVM.cs
        startLine: 2206
      syntax:
        content:
          CSharp: public static ValueRef BuildAggregateRet(BuilderRef arg0, ValueRef[] RetVals)
          VB: Public Shared Function BuildAggregateRet(arg0 As BuilderRef, RetVals As ValueRef()) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: RetVals
          type: Swigged.LLVM.ValueRef[]
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildAggregateRet*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildBr(Swigged.LLVM.BuilderRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.BuildBr(Swigged.LLVM.BuilderRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: BuildBr(BuilderRef, BasicBlockRef)
        VB: BuildBr(BuilderRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.BuildBr(BuilderRef, BasicBlockRef)
        VB: LLVM.BuildBr(BuilderRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildBr(Swigged.LLVM.BuilderRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.BuildBr(Swigged.LLVM.BuilderRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildBr
        path: src/swigged.llvm/LLVM.cs
        startLine: 2214
      syntax:
        content:
          CSharp: public static ValueRef BuildBr(BuilderRef arg0, BasicBlockRef Dest)
          VB: Public Shared Function BuildBr(arg0 As BuilderRef, Dest As BasicBlockRef) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Dest
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildBr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildCondBr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.BuildCondBr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: BuildCondBr(BuilderRef, ValueRef, BasicBlockRef, BasicBlockRef)
        VB: BuildCondBr(BuilderRef, ValueRef, BasicBlockRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.BuildCondBr(BuilderRef, ValueRef, BasicBlockRef, BasicBlockRef)
        VB: LLVM.BuildCondBr(BuilderRef, ValueRef, BasicBlockRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildCondBr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.BuildCondBr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildCondBr
        path: src/swigged.llvm/LLVM.cs
        startLine: 2219
      syntax:
        content:
          CSharp: public static ValueRef BuildCondBr(BuilderRef arg0, ValueRef If, BasicBlockRef Then, BasicBlockRef Else)
          VB: Public Shared Function BuildCondBr(arg0 As BuilderRef, If As ValueRef, Then As BasicBlockRef, Else As BasicBlockRef) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: If
          type: Swigged.LLVM.ValueRef
        - id: Then
          type: Swigged.LLVM.BasicBlockRef
        - id: Else
          type: Swigged.LLVM.BasicBlockRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildCondBr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildSwitch(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.BuildSwitch(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef,System.UInt32)
      language: CSharp
      name:
        CSharp: BuildSwitch(BuilderRef, ValueRef, BasicBlockRef, UInt32)
        VB: BuildSwitch(BuilderRef, ValueRef, BasicBlockRef, UInt32)
      nameWithType:
        CSharp: LLVM.BuildSwitch(BuilderRef, ValueRef, BasicBlockRef, UInt32)
        VB: LLVM.BuildSwitch(BuilderRef, ValueRef, BasicBlockRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildSwitch(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.BuildSwitch(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildSwitch
        path: src/swigged.llvm/LLVM.cs
        startLine: 2224
      syntax:
        content:
          CSharp: public static ValueRef BuildSwitch(BuilderRef arg0, ValueRef V, BasicBlockRef Else, uint NumCases)
          VB: Public Shared Function BuildSwitch(arg0 As BuilderRef, V As ValueRef, Else As BasicBlockRef, NumCases As UInteger) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Else
          type: Swigged.LLVM.BasicBlockRef
        - id: NumCases
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildSwitch*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildIndirectBr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.BuildIndirectBr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: BuildIndirectBr(BuilderRef, ValueRef, UInt32)
        VB: BuildIndirectBr(BuilderRef, ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.BuildIndirectBr(BuilderRef, ValueRef, UInt32)
        VB: LLVM.BuildIndirectBr(BuilderRef, ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildIndirectBr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.BuildIndirectBr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildIndirectBr
        path: src/swigged.llvm/LLVM.cs
        startLine: 2229
      syntax:
        content:
          CSharp: public static ValueRef BuildIndirectBr(BuilderRef B, ValueRef Addr, uint NumDests)
          VB: Public Shared Function BuildIndirectBr(B As BuilderRef, Addr As ValueRef, NumDests As UInteger) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Addr
          type: Swigged.LLVM.ValueRef
        - id: NumDests
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildIndirectBr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildInvoke(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildInvoke(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],Swigged.LLVM.BasicBlockRef,Swigged.LLVM.BasicBlockRef,System.String)
      language: CSharp
      name:
        CSharp: BuildInvoke(BuilderRef, ValueRef, ValueRef[], BasicBlockRef, BasicBlockRef, String)
        VB: BuildInvoke(BuilderRef, ValueRef, ValueRef(), BasicBlockRef, BasicBlockRef, String)
      nameWithType:
        CSharp: LLVM.BuildInvoke(BuilderRef, ValueRef, ValueRef[], BasicBlockRef, BasicBlockRef, String)
        VB: LLVM.BuildInvoke(BuilderRef, ValueRef, ValueRef(), BasicBlockRef, BasicBlockRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildInvoke(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef[], Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildInvoke(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef(), Swigged.LLVM.BasicBlockRef, Swigged.LLVM.BasicBlockRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildInvoke
        path: src/swigged.llvm/LLVM.cs
        startLine: 2234
      syntax:
        content:
          CSharp: public static ValueRef BuildInvoke(BuilderRef arg0, ValueRef Fn, ValueRef[] Args, BasicBlockRef Then, BasicBlockRef Catch, string Name)
          VB: Public Shared Function BuildInvoke(arg0 As BuilderRef, Fn As ValueRef, Args As ValueRef(), Then As BasicBlockRef, Catch As BasicBlockRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: Args
          type: Swigged.LLVM.ValueRef[]
        - id: Then
          type: Swigged.LLVM.BasicBlockRef
        - id: Catch
          type: Swigged.LLVM.BasicBlockRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildInvoke*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildLandingPad(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef,System.UInt32,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildLandingPad(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef,System.UInt32,System.String)
      language: CSharp
      name:
        CSharp: BuildLandingPad(BuilderRef, TypeRef, ValueRef, UInt32, String)
        VB: BuildLandingPad(BuilderRef, TypeRef, ValueRef, UInt32, String)
      nameWithType:
        CSharp: LLVM.BuildLandingPad(BuilderRef, TypeRef, ValueRef, UInt32, String)
        VB: LLVM.BuildLandingPad(BuilderRef, TypeRef, ValueRef, UInt32, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildLandingPad(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef, System.UInt32, System.String)
        VB: Swigged.LLVM.LLVM.BuildLandingPad(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef, System.UInt32, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildLandingPad
        path: src/swigged.llvm/LLVM.cs
        startLine: 2242
      syntax:
        content:
          CSharp: public static ValueRef BuildLandingPad(BuilderRef B, TypeRef Ty, ValueRef PersFn, uint NumClauses, string Name)
          VB: Public Shared Function BuildLandingPad(B As BuilderRef, Ty As TypeRef, PersFn As ValueRef, NumClauses As UInteger, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: PersFn
          type: Swigged.LLVM.ValueRef
        - id: NumClauses
          type: System.UInt32
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildLandingPad*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildResume(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.BuildResume(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: BuildResume(BuilderRef, ValueRef)
        VB: BuildResume(BuilderRef, ValueRef)
      nameWithType:
        CSharp: LLVM.BuildResume(BuilderRef, ValueRef)
        VB: LLVM.BuildResume(BuilderRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildResume(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.BuildResume(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildResume
        path: src/swigged.llvm/LLVM.cs
        startLine: 2247
      syntax:
        content:
          CSharp: public static ValueRef BuildResume(BuilderRef B, ValueRef Exn)
          VB: Public Shared Function BuildResume(B As BuilderRef, Exn As ValueRef) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Exn
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildResume*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildUnreachable(Swigged.LLVM.BuilderRef)
      commentId: M:Swigged.LLVM.LLVM.BuildUnreachable(Swigged.LLVM.BuilderRef)
      language: CSharp
      name:
        CSharp: BuildUnreachable(BuilderRef)
        VB: BuildUnreachable(BuilderRef)
      nameWithType:
        CSharp: LLVM.BuildUnreachable(BuilderRef)
        VB: LLVM.BuildUnreachable(BuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildUnreachable(Swigged.LLVM.BuilderRef)
        VB: Swigged.LLVM.LLVM.BuildUnreachable(Swigged.LLVM.BuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildUnreachable
        path: src/swigged.llvm/LLVM.cs
        startLine: 2252
      syntax:
        content:
          CSharp: public static ValueRef BuildUnreachable(BuilderRef arg0)
          VB: Public Shared Function BuildUnreachable(arg0 As BuilderRef) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildUnreachable*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddCase(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.AddCase(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: AddCase(ValueRef, ValueRef, BasicBlockRef)
        VB: AddCase(ValueRef, ValueRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.AddCase(ValueRef, ValueRef, BasicBlockRef)
        VB: LLVM.AddCase(ValueRef, ValueRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddCase(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.AddCase(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddCase
        path: src/swigged.llvm/LLVM.cs
        startLine: 2257
      syntax:
        content:
          CSharp: public static void AddCase(ValueRef Switch, ValueRef OnVal, BasicBlockRef Dest)
          VB: Public Shared Sub AddCase(Switch As ValueRef, OnVal As ValueRef, Dest As BasicBlockRef)
        parameters:
        - id: Switch
          type: Swigged.LLVM.ValueRef
        - id: OnVal
          type: Swigged.LLVM.ValueRef
        - id: Dest
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.AddCase*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddDestination(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      commentId: M:Swigged.LLVM.LLVM.AddDestination(Swigged.LLVM.ValueRef,Swigged.LLVM.BasicBlockRef)
      language: CSharp
      name:
        CSharp: AddDestination(ValueRef, BasicBlockRef)
        VB: AddDestination(ValueRef, BasicBlockRef)
      nameWithType:
        CSharp: LLVM.AddDestination(ValueRef, BasicBlockRef)
        VB: LLVM.AddDestination(ValueRef, BasicBlockRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddDestination(Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
        VB: Swigged.LLVM.LLVM.AddDestination(Swigged.LLVM.ValueRef, Swigged.LLVM.BasicBlockRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddDestination
        path: src/swigged.llvm/LLVM.cs
        startLine: 2261
      syntax:
        content:
          CSharp: public static void AddDestination(ValueRef IndirectBr, BasicBlockRef Dest)
          VB: Public Shared Sub AddDestination(IndirectBr As ValueRef, Dest As BasicBlockRef)
        parameters:
        - id: IndirectBr
          type: Swigged.LLVM.ValueRef
        - id: Dest
          type: Swigged.LLVM.BasicBlockRef
      overload: Swigged.LLVM.LLVM.AddDestination*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNumClauses(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetNumClauses(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetNumClauses(ValueRef)
        VB: GetNumClauses(ValueRef)
      nameWithType:
        CSharp: LLVM.GetNumClauses(ValueRef)
        VB: LLVM.GetNumClauses(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNumClauses(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetNumClauses(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNumClauses
        path: src/swigged.llvm/LLVM.cs
        startLine: 2265
      syntax:
        content:
          CSharp: public static uint GetNumClauses(ValueRef LandingPad)
          VB: Public Shared Function GetNumClauses(LandingPad As ValueRef) As UInteger
        parameters:
        - id: LandingPad
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetNumClauses*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetClause(Swigged.LLVM.ValueRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.GetClause(Swigged.LLVM.ValueRef,System.UInt32)
      language: CSharp
      name:
        CSharp: GetClause(ValueRef, UInt32)
        VB: GetClause(ValueRef, UInt32)
      nameWithType:
        CSharp: LLVM.GetClause(ValueRef, UInt32)
        VB: LLVM.GetClause(ValueRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetClause(Swigged.LLVM.ValueRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.GetClause(Swigged.LLVM.ValueRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetClause
        path: src/swigged.llvm/LLVM.cs
        startLine: 2270
      syntax:
        content:
          CSharp: public static ValueRef GetClause(ValueRef LandingPad, uint Idx)
          VB: Public Shared Function GetClause(LandingPad As ValueRef, Idx As UInteger) As ValueRef
        parameters:
        - id: LandingPad
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.GetClause*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddClause(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.AddClause(Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: AddClause(ValueRef, ValueRef)
        VB: AddClause(ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.AddClause(ValueRef, ValueRef)
        VB: LLVM.AddClause(ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddClause(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.AddClause(Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddClause
        path: src/swigged.llvm/LLVM.cs
        startLine: 2275
      syntax:
        content:
          CSharp: public static void AddClause(ValueRef LandingPad, ValueRef ClauseVal)
          VB: Public Shared Sub AddClause(LandingPad As ValueRef, ClauseVal As ValueRef)
        parameters:
        - id: LandingPad
          type: Swigged.LLVM.ValueRef
        - id: ClauseVal
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.AddClause*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsCleanup(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsCleanup(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsCleanup(ValueRef)
        VB: IsCleanup(ValueRef)
      nameWithType:
        CSharp: LLVM.IsCleanup(ValueRef)
        VB: LLVM.IsCleanup(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsCleanup(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsCleanup(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsCleanup
        path: src/swigged.llvm/LLVM.cs
        startLine: 2279
      syntax:
        content:
          CSharp: public static bool IsCleanup(ValueRef LandingPad)
          VB: Public Shared Function IsCleanup(LandingPad As ValueRef) As Boolean
        parameters:
        - id: LandingPad
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsCleanup*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetCleanup(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetCleanup(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetCleanup(ValueRef, Boolean)
        VB: SetCleanup(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetCleanup(ValueRef, Boolean)
        VB: LLVM.SetCleanup(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetCleanup(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetCleanup(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetCleanup
        path: src/swigged.llvm/LLVM.cs
        startLine: 2284
      syntax:
        content:
          CSharp: public static void SetCleanup(ValueRef LandingPad, bool Val)
          VB: Public Shared Sub SetCleanup(LandingPad As ValueRef, Val As Boolean)
        parameters:
        - id: LandingPad
          type: Swigged.LLVM.ValueRef
        - id: Val
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetCleanup*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildAdd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildAdd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildAdd(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildAdd(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildAdd(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildAdd(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildAdd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildAdd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildAdd
        path: src/swigged.llvm/LLVM.cs
        startLine: 2288
      syntax:
        content:
          CSharp: public static ValueRef BuildAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildAdd(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNSWAdd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNSWAdd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNSWAdd(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildNSWAdd(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNSWAdd(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildNSWAdd(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNSWAdd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNSWAdd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNSWAdd
        path: src/swigged.llvm/LLVM.cs
        startLine: 2293
      syntax:
        content:
          CSharp: public static ValueRef BuildNSWAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildNSWAdd(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNSWAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNUWAdd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNUWAdd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNUWAdd(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildNUWAdd(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNUWAdd(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildNUWAdd(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNUWAdd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNUWAdd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNUWAdd
        path: src/swigged.llvm/LLVM.cs
        startLine: 2298
      syntax:
        content:
          CSharp: public static ValueRef BuildNUWAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildNUWAdd(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNUWAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFAdd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFAdd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFAdd(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildFAdd(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildFAdd(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildFAdd(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFAdd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFAdd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFAdd
        path: src/swigged.llvm/LLVM.cs
        startLine: 2303
      syntax:
        content:
          CSharp: public static ValueRef BuildFAdd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildFAdd(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildSub(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildSub(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildSub(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildSub(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildSub(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildSub(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildSub(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildSub(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildSub
        path: src/swigged.llvm/LLVM.cs
        startLine: 2308
      syntax:
        content:
          CSharp: public static ValueRef BuildSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildSub(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNSWSub(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNSWSub(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNSWSub(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildNSWSub(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNSWSub(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildNSWSub(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNSWSub(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNSWSub(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNSWSub
        path: src/swigged.llvm/LLVM.cs
        startLine: 2313
      syntax:
        content:
          CSharp: public static ValueRef BuildNSWSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildNSWSub(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNSWSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNUWSub(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNUWSub(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNUWSub(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildNUWSub(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNUWSub(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildNUWSub(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNUWSub(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNUWSub(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNUWSub
        path: src/swigged.llvm/LLVM.cs
        startLine: 2318
      syntax:
        content:
          CSharp: public static ValueRef BuildNUWSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildNUWSub(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNUWSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFSub(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFSub(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFSub(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildFSub(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildFSub(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildFSub(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFSub(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFSub(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFSub
        path: src/swigged.llvm/LLVM.cs
        startLine: 2323
      syntax:
        content:
          CSharp: public static ValueRef BuildFSub(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildFSub(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildMul(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildMul(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildMul(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildMul(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildMul(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildMul(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildMul(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildMul(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildMul
        path: src/swigged.llvm/LLVM.cs
        startLine: 2328
      syntax:
        content:
          CSharp: public static ValueRef BuildMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildMul(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNSWMul(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNSWMul(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNSWMul(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildNSWMul(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNSWMul(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildNSWMul(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNSWMul(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNSWMul(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNSWMul
        path: src/swigged.llvm/LLVM.cs
        startLine: 2333
      syntax:
        content:
          CSharp: public static ValueRef BuildNSWMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildNSWMul(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNSWMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNUWMul(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNUWMul(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNUWMul(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildNUWMul(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNUWMul(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildNUWMul(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNUWMul(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNUWMul(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNUWMul
        path: src/swigged.llvm/LLVM.cs
        startLine: 2338
      syntax:
        content:
          CSharp: public static ValueRef BuildNUWMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildNUWMul(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNUWMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFMul(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFMul(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFMul(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildFMul(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildFMul(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildFMul(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFMul(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFMul(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFMul
        path: src/swigged.llvm/LLVM.cs
        startLine: 2343
      syntax:
        content:
          CSharp: public static ValueRef BuildFMul(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildFMul(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildUDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildUDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildUDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildUDiv(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildUDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildUDiv(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildUDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildUDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildUDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 2348
      syntax:
        content:
          CSharp: public static ValueRef BuildUDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildUDiv(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildUDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildExactUDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildExactUDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildExactUDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildExactUDiv(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildExactUDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildExactUDiv(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildExactUDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildExactUDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildExactUDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 2353
      syntax:
        content:
          CSharp: public static ValueRef BuildExactUDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildExactUDiv(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildExactUDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildSDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildSDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildSDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildSDiv(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildSDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildSDiv(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildSDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildSDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildSDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 2358
      syntax:
        content:
          CSharp: public static ValueRef BuildSDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildSDiv(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildSDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildExactSDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildExactSDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildExactSDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildExactSDiv(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildExactSDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildExactSDiv(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildExactSDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildExactSDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildExactSDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 2363
      syntax:
        content:
          CSharp: public static ValueRef BuildExactSDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildExactSDiv(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildExactSDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFDiv(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildFDiv(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildFDiv(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildFDiv(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFDiv(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFDiv
        path: src/swigged.llvm/LLVM.cs
        startLine: 2368
      syntax:
        content:
          CSharp: public static ValueRef BuildFDiv(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildFDiv(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildURem(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildURem(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildURem(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildURem(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildURem(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildURem(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildURem(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildURem(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildURem
        path: src/swigged.llvm/LLVM.cs
        startLine: 2373
      syntax:
        content:
          CSharp: public static ValueRef BuildURem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildURem(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildURem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildSRem(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildSRem(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildSRem(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildSRem(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildSRem(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildSRem(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildSRem(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildSRem(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildSRem
        path: src/swigged.llvm/LLVM.cs
        startLine: 2378
      syntax:
        content:
          CSharp: public static ValueRef BuildSRem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildSRem(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildSRem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFRem(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFRem(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFRem(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildFRem(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildFRem(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildFRem(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFRem(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFRem(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFRem
        path: src/swigged.llvm/LLVM.cs
        startLine: 2383
      syntax:
        content:
          CSharp: public static ValueRef BuildFRem(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildFRem(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFRem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildShl(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildShl(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildShl(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildShl(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildShl(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildShl(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildShl(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildShl(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildShl
        path: src/swigged.llvm/LLVM.cs
        startLine: 2388
      syntax:
        content:
          CSharp: public static ValueRef BuildShl(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildShl(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildShl*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildLShr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildLShr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildLShr(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildLShr(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildLShr(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildLShr(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildLShr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildLShr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildLShr
        path: src/swigged.llvm/LLVM.cs
        startLine: 2393
      syntax:
        content:
          CSharp: public static ValueRef BuildLShr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildLShr(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildLShr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildAShr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildAShr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildAShr(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildAShr(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildAShr(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildAShr(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildAShr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildAShr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildAShr
        path: src/swigged.llvm/LLVM.cs
        startLine: 2398
      syntax:
        content:
          CSharp: public static ValueRef BuildAShr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildAShr(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildAShr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildAnd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildAnd(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildAnd(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildAnd(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildAnd(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildAnd(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildAnd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildAnd(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildAnd
        path: src/swigged.llvm/LLVM.cs
        startLine: 2403
      syntax:
        content:
          CSharp: public static ValueRef BuildAnd(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildAnd(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildAnd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildOr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildOr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildOr(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildOr(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildOr(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildOr(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildOr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildOr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildOr
        path: src/swigged.llvm/LLVM.cs
        startLine: 2408
      syntax:
        content:
          CSharp: public static ValueRef BuildOr(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildOr(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildOr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildXor(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildXor(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildXor(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildXor(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildXor(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildXor(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildXor(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildXor(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildXor
        path: src/swigged.llvm/LLVM.cs
        startLine: 2413
      syntax:
        content:
          CSharp: public static ValueRef BuildXor(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildXor(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildXor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildBinOp(Swigged.LLVM.BuilderRef,Swigged.LLVM.Opcode,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildBinOp(Swigged.LLVM.BuilderRef,Swigged.LLVM.Opcode,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildBinOp(BuilderRef, Opcode, ValueRef, ValueRef, String)
        VB: BuildBinOp(BuilderRef, Opcode, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildBinOp(BuilderRef, Opcode, ValueRef, ValueRef, String)
        VB: LLVM.BuildBinOp(BuilderRef, Opcode, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildBinOp(Swigged.LLVM.BuilderRef, Swigged.LLVM.Opcode, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildBinOp(Swigged.LLVM.BuilderRef, Swigged.LLVM.Opcode, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildBinOp
        path: src/swigged.llvm/LLVM.cs
        startLine: 2418
      syntax:
        content:
          CSharp: public static ValueRef BuildBinOp(BuilderRef B, Opcode Op, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildBinOp(B As BuilderRef, Op As Opcode, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Op
          type: Swigged.LLVM.Opcode
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildBinOp*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNeg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNeg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNeg(BuilderRef, ValueRef, String)
        VB: BuildNeg(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNeg(BuilderRef, ValueRef, String)
        VB: LLVM.BuildNeg(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNeg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNeg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNeg
        path: src/swigged.llvm/LLVM.cs
        startLine: 2423
      syntax:
        content:
          CSharp: public static ValueRef BuildNeg(BuilderRef arg0, ValueRef V, string Name)
          VB: Public Shared Function BuildNeg(arg0 As BuilderRef, V As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNSWNeg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNSWNeg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNSWNeg(BuilderRef, ValueRef, String)
        VB: BuildNSWNeg(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNSWNeg(BuilderRef, ValueRef, String)
        VB: LLVM.BuildNSWNeg(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNSWNeg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNSWNeg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNSWNeg
        path: src/swigged.llvm/LLVM.cs
        startLine: 2428
      syntax:
        content:
          CSharp: public static ValueRef BuildNSWNeg(BuilderRef B, ValueRef V, string Name)
          VB: Public Shared Function BuildNSWNeg(B As BuilderRef, V As ValueRef, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNSWNeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNUWNeg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNUWNeg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNUWNeg(BuilderRef, ValueRef, String)
        VB: BuildNUWNeg(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNUWNeg(BuilderRef, ValueRef, String)
        VB: LLVM.BuildNUWNeg(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNUWNeg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNUWNeg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNUWNeg
        path: src/swigged.llvm/LLVM.cs
        startLine: 2433
      syntax:
        content:
          CSharp: public static ValueRef BuildNUWNeg(BuilderRef B, ValueRef V, string Name)
          VB: Public Shared Function BuildNUWNeg(B As BuilderRef, V As ValueRef, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNUWNeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFNeg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFNeg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFNeg(BuilderRef, ValueRef, String)
        VB: BuildFNeg(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildFNeg(BuilderRef, ValueRef, String)
        VB: LLVM.BuildFNeg(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFNeg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFNeg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFNeg
        path: src/swigged.llvm/LLVM.cs
        startLine: 2438
      syntax:
        content:
          CSharp: public static ValueRef BuildFNeg(BuilderRef arg0, ValueRef V, string Name)
          VB: Public Shared Function BuildFNeg(arg0 As BuilderRef, V As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFNeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildNot(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildNot(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildNot(BuilderRef, ValueRef, String)
        VB: BuildNot(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildNot(BuilderRef, ValueRef, String)
        VB: LLVM.BuildNot(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildNot(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildNot(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildNot
        path: src/swigged.llvm/LLVM.cs
        startLine: 2443
      syntax:
        content:
          CSharp: public static ValueRef BuildNot(BuilderRef arg0, ValueRef V, string Name)
          VB: Public Shared Function BuildNot(arg0 As BuilderRef, V As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: V
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildNot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildMalloc(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildMalloc(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildMalloc(BuilderRef, TypeRef, String)
        VB: BuildMalloc(BuilderRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildMalloc(BuilderRef, TypeRef, String)
        VB: LLVM.BuildMalloc(BuilderRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildMalloc(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildMalloc(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildMalloc
        path: src/swigged.llvm/LLVM.cs
        startLine: 2448
      syntax:
        content:
          CSharp: public static ValueRef BuildMalloc(BuilderRef arg0, TypeRef Ty, string Name)
          VB: Public Shared Function BuildMalloc(arg0 As BuilderRef, Ty As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildMalloc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildArrayMalloc(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildArrayMalloc(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildArrayMalloc(BuilderRef, TypeRef, ValueRef, String)
        VB: BuildArrayMalloc(BuilderRef, TypeRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildArrayMalloc(BuilderRef, TypeRef, ValueRef, String)
        VB: LLVM.BuildArrayMalloc(BuilderRef, TypeRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildArrayMalloc(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildArrayMalloc(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildArrayMalloc
        path: src/swigged.llvm/LLVM.cs
        startLine: 2453
      syntax:
        content:
          CSharp: public static ValueRef BuildArrayMalloc(BuilderRef arg0, TypeRef Ty, ValueRef Val, string Name)
          VB: Public Shared Function BuildArrayMalloc(arg0 As BuilderRef, Ty As TypeRef, Val As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildArrayMalloc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildAlloca(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildAlloca(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildAlloca(BuilderRef, TypeRef, String)
        VB: BuildAlloca(BuilderRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildAlloca(BuilderRef, TypeRef, String)
        VB: LLVM.BuildAlloca(BuilderRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildAlloca(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildAlloca(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildAlloca
        path: src/swigged.llvm/LLVM.cs
        startLine: 2458
      syntax:
        content:
          CSharp: public static ValueRef BuildAlloca(BuilderRef arg0, TypeRef Ty, string Name)
          VB: Public Shared Function BuildAlloca(arg0 As BuilderRef, Ty As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildAlloca*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildArrayAlloca(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildArrayAlloca(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildArrayAlloca(BuilderRef, TypeRef, ValueRef, String)
        VB: BuildArrayAlloca(BuilderRef, TypeRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildArrayAlloca(BuilderRef, TypeRef, ValueRef, String)
        VB: LLVM.BuildArrayAlloca(BuilderRef, TypeRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildArrayAlloca(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildArrayAlloca(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildArrayAlloca
        path: src/swigged.llvm/LLVM.cs
        startLine: 2463
      syntax:
        content:
          CSharp: public static ValueRef BuildArrayAlloca(BuilderRef arg0, TypeRef Ty, ValueRef Val, string Name)
          VB: Public Shared Function BuildArrayAlloca(arg0 As BuilderRef, Ty As TypeRef, Val As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildArrayAlloca*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFree(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.BuildFree(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: BuildFree(BuilderRef, ValueRef)
        VB: BuildFree(BuilderRef, ValueRef)
      nameWithType:
        CSharp: LLVM.BuildFree(BuilderRef, ValueRef)
        VB: LLVM.BuildFree(BuilderRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFree(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.BuildFree(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFree
        path: src/swigged.llvm/LLVM.cs
        startLine: 2468
      syntax:
        content:
          CSharp: public static ValueRef BuildFree(BuilderRef arg0, ValueRef PointerVal)
          VB: Public Shared Function BuildFree(arg0 As BuilderRef, PointerVal As ValueRef) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: PointerVal
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFree*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildLoad(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildLoad(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildLoad(BuilderRef, ValueRef, String)
        VB: BuildLoad(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildLoad(BuilderRef, ValueRef, String)
        VB: LLVM.BuildLoad(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildLoad(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildLoad(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildLoad
        path: src/swigged.llvm/LLVM.cs
        startLine: 2473
      syntax:
        content:
          CSharp: public static ValueRef BuildLoad(BuilderRef arg0, ValueRef PointerVal, string Name)
          VB: Public Shared Function BuildLoad(arg0 As BuilderRef, PointerVal As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: PointerVal
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildLoad*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildStore(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.BuildStore(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: BuildStore(BuilderRef, ValueRef, ValueRef)
        VB: BuildStore(BuilderRef, ValueRef, ValueRef)
      nameWithType:
        CSharp: LLVM.BuildStore(BuilderRef, ValueRef, ValueRef)
        VB: LLVM.BuildStore(BuilderRef, ValueRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildStore(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.BuildStore(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildStore
        path: src/swigged.llvm/LLVM.cs
        startLine: 2478
      syntax:
        content:
          CSharp: public static ValueRef BuildStore(BuilderRef arg0, ValueRef Val, ValueRef Ptr)
          VB: Public Shared Function BuildStore(arg0 As BuilderRef, Val As ValueRef, Ptr As ValueRef) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: Ptr
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildStore*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildGEP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildGEP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],System.String)
      language: CSharp
      name:
        CSharp: BuildGEP(BuilderRef, ValueRef, ValueRef[], String)
        VB: BuildGEP(BuilderRef, ValueRef, ValueRef(), String)
      nameWithType:
        CSharp: LLVM.BuildGEP(BuilderRef, ValueRef, ValueRef[], String)
        VB: LLVM.BuildGEP(BuilderRef, ValueRef, ValueRef(), String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildGEP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef[], System.String)
        VB: Swigged.LLVM.LLVM.BuildGEP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef(), System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildGEP
        path: src/swigged.llvm/LLVM.cs
        startLine: 2483
      syntax:
        content:
          CSharp: public static ValueRef BuildGEP(BuilderRef B, ValueRef Pointer, ValueRef[] Indices, string Name)
          VB: Public Shared Function BuildGEP(B As BuilderRef, Pointer As ValueRef, Indices As ValueRef(), Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Pointer
          type: Swigged.LLVM.ValueRef
        - id: Indices
          type: Swigged.LLVM.ValueRef[]
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildGEP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildInBoundsGEP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildInBoundsGEP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],System.String)
      language: CSharp
      name:
        CSharp: BuildInBoundsGEP(BuilderRef, ValueRef, ValueRef[], String)
        VB: BuildInBoundsGEP(BuilderRef, ValueRef, ValueRef(), String)
      nameWithType:
        CSharp: LLVM.BuildInBoundsGEP(BuilderRef, ValueRef, ValueRef[], String)
        VB: LLVM.BuildInBoundsGEP(BuilderRef, ValueRef, ValueRef(), String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildInBoundsGEP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef[], System.String)
        VB: Swigged.LLVM.LLVM.BuildInBoundsGEP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef(), System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildInBoundsGEP
        path: src/swigged.llvm/LLVM.cs
        startLine: 2491
      syntax:
        content:
          CSharp: public static ValueRef BuildInBoundsGEP(BuilderRef B, ValueRef Pointer, ValueRef[] Indices, string Name)
          VB: Public Shared Function BuildInBoundsGEP(B As BuilderRef, Pointer As ValueRef, Indices As ValueRef(), Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Pointer
          type: Swigged.LLVM.ValueRef
        - id: Indices
          type: Swigged.LLVM.ValueRef[]
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildInBoundsGEP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildStructGEP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.UInt32,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildStructGEP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.UInt32,System.String)
      language: CSharp
      name:
        CSharp: BuildStructGEP(BuilderRef, ValueRef, UInt32, String)
        VB: BuildStructGEP(BuilderRef, ValueRef, UInt32, String)
      nameWithType:
        CSharp: LLVM.BuildStructGEP(BuilderRef, ValueRef, UInt32, String)
        VB: LLVM.BuildStructGEP(BuilderRef, ValueRef, UInt32, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildStructGEP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.UInt32, System.String)
        VB: Swigged.LLVM.LLVM.BuildStructGEP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.UInt32, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildStructGEP
        path: src/swigged.llvm/LLVM.cs
        startLine: 2499
      syntax:
        content:
          CSharp: public static ValueRef BuildStructGEP(BuilderRef B, ValueRef Pointer, uint Idx, string Name)
          VB: Public Shared Function BuildStructGEP(B As BuilderRef, Pointer As ValueRef, Idx As UInteger, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Pointer
          type: Swigged.LLVM.ValueRef
        - id: Idx
          type: System.UInt32
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildStructGEP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildGlobalString(Swigged.LLVM.BuilderRef,System.String,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildGlobalString(Swigged.LLVM.BuilderRef,System.String,System.String)
      language: CSharp
      name:
        CSharp: BuildGlobalString(BuilderRef, String, String)
        VB: BuildGlobalString(BuilderRef, String, String)
      nameWithType:
        CSharp: LLVM.BuildGlobalString(BuilderRef, String, String)
        VB: LLVM.BuildGlobalString(BuilderRef, String, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildGlobalString(Swigged.LLVM.BuilderRef, System.String, System.String)
        VB: Swigged.LLVM.LLVM.BuildGlobalString(Swigged.LLVM.BuilderRef, System.String, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildGlobalString
        path: src/swigged.llvm/LLVM.cs
        startLine: 2504
      syntax:
        content:
          CSharp: public static ValueRef BuildGlobalString(BuilderRef B, string Str, string Name)
          VB: Public Shared Function BuildGlobalString(B As BuilderRef, Str As String, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Str
          type: System.String
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildGlobalString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildGlobalStringPtr(Swigged.LLVM.BuilderRef,System.String,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildGlobalStringPtr(Swigged.LLVM.BuilderRef,System.String,System.String)
      language: CSharp
      name:
        CSharp: BuildGlobalStringPtr(BuilderRef, String, String)
        VB: BuildGlobalStringPtr(BuilderRef, String, String)
      nameWithType:
        CSharp: LLVM.BuildGlobalStringPtr(BuilderRef, String, String)
        VB: LLVM.BuildGlobalStringPtr(BuilderRef, String, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildGlobalStringPtr(Swigged.LLVM.BuilderRef, System.String, System.String)
        VB: Swigged.LLVM.LLVM.BuildGlobalStringPtr(Swigged.LLVM.BuilderRef, System.String, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildGlobalStringPtr
        path: src/swigged.llvm/LLVM.cs
        startLine: 2509
      syntax:
        content:
          CSharp: public static ValueRef BuildGlobalStringPtr(BuilderRef B, string Str, string Name)
          VB: Public Shared Function BuildGlobalStringPtr(B As BuilderRef, Str As String, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Str
          type: System.String
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildGlobalStringPtr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetVolatile(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetVolatile(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetVolatile(ValueRef)
        VB: GetVolatile(ValueRef)
      nameWithType:
        CSharp: LLVM.GetVolatile(ValueRef)
        VB: LLVM.GetVolatile(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetVolatile(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetVolatile(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetVolatile
        path: src/swigged.llvm/LLVM.cs
        startLine: 2514
      syntax:
        content:
          CSharp: public static bool GetVolatile(ValueRef MemoryAccessInst)
          VB: Public Shared Function GetVolatile(MemoryAccessInst As ValueRef) As Boolean
        parameters:
        - id: MemoryAccessInst
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.GetVolatile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetVolatile(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetVolatile(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetVolatile(ValueRef, Boolean)
        VB: SetVolatile(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetVolatile(ValueRef, Boolean)
        VB: LLVM.SetVolatile(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetVolatile(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetVolatile(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetVolatile
        path: src/swigged.llvm/LLVM.cs
        startLine: 2519
      syntax:
        content:
          CSharp: public static void SetVolatile(ValueRef MemoryAccessInst, bool IsVolatile)
          VB: Public Shared Sub SetVolatile(MemoryAccessInst As ValueRef, IsVolatile As Boolean)
        parameters:
        - id: MemoryAccessInst
          type: Swigged.LLVM.ValueRef
        - id: IsVolatile
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetVolatile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetOrdering(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetOrdering(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetOrdering(ValueRef)
        VB: GetOrdering(ValueRef)
      nameWithType:
        CSharp: LLVM.GetOrdering(ValueRef)
        VB: LLVM.GetOrdering(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetOrdering(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetOrdering(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetOrdering
        path: src/swigged.llvm/LLVM.cs
        startLine: 2523
      syntax:
        content:
          CSharp: public static AtomicOrdering GetOrdering(ValueRef MemoryAccessInst)
          VB: Public Shared Function GetOrdering(MemoryAccessInst As ValueRef) As AtomicOrdering
        parameters:
        - id: MemoryAccessInst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.AtomicOrdering
      overload: Swigged.LLVM.LLVM.GetOrdering*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetOrdering(Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering)
      commentId: M:Swigged.LLVM.LLVM.SetOrdering(Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering)
      language: CSharp
      name:
        CSharp: SetOrdering(ValueRef, AtomicOrdering)
        VB: SetOrdering(ValueRef, AtomicOrdering)
      nameWithType:
        CSharp: LLVM.SetOrdering(ValueRef, AtomicOrdering)
        VB: LLVM.SetOrdering(ValueRef, AtomicOrdering)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetOrdering(Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering)
        VB: Swigged.LLVM.LLVM.SetOrdering(Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetOrdering
        path: src/swigged.llvm/LLVM.cs
        startLine: 2528
      syntax:
        content:
          CSharp: public static void SetOrdering(ValueRef MemoryAccessInst, AtomicOrdering Ordering)
          VB: Public Shared Sub SetOrdering(MemoryAccessInst As ValueRef, Ordering As AtomicOrdering)
        parameters:
        - id: MemoryAccessInst
          type: Swigged.LLVM.ValueRef
        - id: Ordering
          type: Swigged.LLVM.AtomicOrdering
      overload: Swigged.LLVM.LLVM.SetOrdering*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildTrunc(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildTrunc(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildTrunc(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildTrunc(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildTrunc(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildTrunc(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildTrunc(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildTrunc(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildTrunc
        path: src/swigged.llvm/LLVM.cs
        startLine: 2532
      syntax:
        content:
          CSharp: public static ValueRef BuildTrunc(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildTrunc(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildTrunc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildZExt(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildZExt(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildZExt(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildZExt(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildZExt(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildZExt(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildZExt(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildZExt(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildZExt
        path: src/swigged.llvm/LLVM.cs
        startLine: 2537
      syntax:
        content:
          CSharp: public static ValueRef BuildZExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildZExt(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildZExt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildSExt(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildSExt(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildSExt(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildSExt(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildSExt(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildSExt(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildSExt(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildSExt(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildSExt
        path: src/swigged.llvm/LLVM.cs
        startLine: 2542
      syntax:
        content:
          CSharp: public static ValueRef BuildSExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildSExt(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildSExt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFPToUI(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFPToUI(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFPToUI(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildFPToUI(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildFPToUI(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildFPToUI(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFPToUI(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFPToUI(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFPToUI
        path: src/swigged.llvm/LLVM.cs
        startLine: 2547
      syntax:
        content:
          CSharp: public static ValueRef BuildFPToUI(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildFPToUI(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFPToUI*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFPToSI(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFPToSI(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFPToSI(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildFPToSI(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildFPToSI(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildFPToSI(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFPToSI(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFPToSI(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFPToSI
        path: src/swigged.llvm/LLVM.cs
        startLine: 2552
      syntax:
        content:
          CSharp: public static ValueRef BuildFPToSI(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildFPToSI(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFPToSI*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildUIToFP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildUIToFP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildUIToFP(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildUIToFP(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildUIToFP(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildUIToFP(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildUIToFP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildUIToFP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildUIToFP
        path: src/swigged.llvm/LLVM.cs
        startLine: 2557
      syntax:
        content:
          CSharp: public static ValueRef BuildUIToFP(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildUIToFP(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildUIToFP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildSIToFP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildSIToFP(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildSIToFP(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildSIToFP(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildSIToFP(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildSIToFP(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildSIToFP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildSIToFP(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildSIToFP
        path: src/swigged.llvm/LLVM.cs
        startLine: 2562
      syntax:
        content:
          CSharp: public static ValueRef BuildSIToFP(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildSIToFP(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildSIToFP*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFPTrunc(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFPTrunc(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFPTrunc(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildFPTrunc(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildFPTrunc(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildFPTrunc(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFPTrunc(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFPTrunc(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFPTrunc
        path: src/swigged.llvm/LLVM.cs
        startLine: 2567
      syntax:
        content:
          CSharp: public static ValueRef BuildFPTrunc(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildFPTrunc(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFPTrunc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFPExt(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFPExt(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFPExt(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildFPExt(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildFPExt(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildFPExt(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFPExt(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFPExt(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFPExt
        path: src/swigged.llvm/LLVM.cs
        startLine: 2572
      syntax:
        content:
          CSharp: public static ValueRef BuildFPExt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildFPExt(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFPExt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildPtrToInt(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildPtrToInt(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildPtrToInt(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildPtrToInt(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildPtrToInt(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildPtrToInt(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildPtrToInt(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildPtrToInt(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildPtrToInt
        path: src/swigged.llvm/LLVM.cs
        startLine: 2577
      syntax:
        content:
          CSharp: public static ValueRef BuildPtrToInt(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildPtrToInt(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildPtrToInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildIntToPtr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildIntToPtr(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildIntToPtr(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildIntToPtr(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildIntToPtr(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildIntToPtr(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildIntToPtr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildIntToPtr(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildIntToPtr
        path: src/swigged.llvm/LLVM.cs
        startLine: 2582
      syntax:
        content:
          CSharp: public static ValueRef BuildIntToPtr(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildIntToPtr(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildIntToPtr*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildBitCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildBitCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildBitCast(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildBitCast(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildBitCast(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildBitCast(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildBitCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildBitCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildBitCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2587
      syntax:
        content:
          CSharp: public static ValueRef BuildBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildBitCast(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildBitCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildAddrSpaceCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildAddrSpaceCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildAddrSpaceCast(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildAddrSpaceCast(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildAddrSpaceCast(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildAddrSpaceCast(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildAddrSpaceCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildAddrSpaceCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildAddrSpaceCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2592
      syntax:
        content:
          CSharp: public static ValueRef BuildAddrSpaceCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildAddrSpaceCast(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildAddrSpaceCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildZExtOrBitCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildZExtOrBitCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildZExtOrBitCast(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildZExtOrBitCast(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildZExtOrBitCast(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildZExtOrBitCast(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildZExtOrBitCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildZExtOrBitCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildZExtOrBitCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2597
      syntax:
        content:
          CSharp: public static ValueRef BuildZExtOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildZExtOrBitCast(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildZExtOrBitCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildSExtOrBitCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildSExtOrBitCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildSExtOrBitCast(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildSExtOrBitCast(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildSExtOrBitCast(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildSExtOrBitCast(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildSExtOrBitCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildSExtOrBitCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildSExtOrBitCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2602
      syntax:
        content:
          CSharp: public static ValueRef BuildSExtOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildSExtOrBitCast(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildSExtOrBitCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildTruncOrBitCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildTruncOrBitCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildTruncOrBitCast(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildTruncOrBitCast(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildTruncOrBitCast(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildTruncOrBitCast(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildTruncOrBitCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildTruncOrBitCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildTruncOrBitCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2607
      syntax:
        content:
          CSharp: public static ValueRef BuildTruncOrBitCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildTruncOrBitCast(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildTruncOrBitCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.Opcode,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.Opcode,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildCast(BuilderRef, Opcode, ValueRef, TypeRef, String)
        VB: BuildCast(BuilderRef, Opcode, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildCast(BuilderRef, Opcode, ValueRef, TypeRef, String)
        VB: LLVM.BuildCast(BuilderRef, Opcode, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.Opcode, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.Opcode, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2612
      syntax:
        content:
          CSharp: public static ValueRef BuildCast(BuilderRef B, Opcode Op, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildCast(B As BuilderRef, Op As Opcode, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Op
          type: Swigged.LLVM.Opcode
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildPointerCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildPointerCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildPointerCast(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildPointerCast(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildPointerCast(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildPointerCast(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildPointerCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildPointerCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildPointerCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2617
      syntax:
        content:
          CSharp: public static ValueRef BuildPointerCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildPointerCast(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildPointerCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildIntCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildIntCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildIntCast(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildIntCast(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildIntCast(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildIntCast(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildIntCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildIntCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildIntCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2622
      syntax:
        content:
          CSharp: public static ValueRef BuildIntCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildIntCast(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildIntCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFPCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFPCast(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFPCast(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildFPCast(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildFPCast(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildFPCast(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFPCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFPCast(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFPCast
        path: src/swigged.llvm/LLVM.cs
        startLine: 2627
      syntax:
        content:
          CSharp: public static ValueRef BuildFPCast(BuilderRef arg0, ValueRef Val, TypeRef DestTy, string Name)
          VB: Public Shared Function BuildFPCast(arg0 As BuilderRef, Val As ValueRef, DestTy As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: DestTy
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFPCast*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildICmp(Swigged.LLVM.BuilderRef,Swigged.LLVM.IntPredicate,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildICmp(Swigged.LLVM.BuilderRef,Swigged.LLVM.IntPredicate,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildICmp(BuilderRef, IntPredicate, ValueRef, ValueRef, String)
        VB: BuildICmp(BuilderRef, IntPredicate, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildICmp(BuilderRef, IntPredicate, ValueRef, ValueRef, String)
        VB: LLVM.BuildICmp(BuilderRef, IntPredicate, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildICmp(Swigged.LLVM.BuilderRef, Swigged.LLVM.IntPredicate, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildICmp(Swigged.LLVM.BuilderRef, Swigged.LLVM.IntPredicate, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildICmp
        path: src/swigged.llvm/LLVM.cs
        startLine: 2632
      syntax:
        content:
          CSharp: public static ValueRef BuildICmp(BuilderRef arg0, IntPredicate Op, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildICmp(arg0 As BuilderRef, Op As IntPredicate, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Op
          type: Swigged.LLVM.IntPredicate
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildICmp*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFCmp(Swigged.LLVM.BuilderRef,Swigged.LLVM.RealPredicate,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFCmp(Swigged.LLVM.BuilderRef,Swigged.LLVM.RealPredicate,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildFCmp(BuilderRef, RealPredicate, ValueRef, ValueRef, String)
        VB: BuildFCmp(BuilderRef, RealPredicate, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildFCmp(BuilderRef, RealPredicate, ValueRef, ValueRef, String)
        VB: LLVM.BuildFCmp(BuilderRef, RealPredicate, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFCmp(Swigged.LLVM.BuilderRef, Swigged.LLVM.RealPredicate, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildFCmp(Swigged.LLVM.BuilderRef, Swigged.LLVM.RealPredicate, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFCmp
        path: src/swigged.llvm/LLVM.cs
        startLine: 2637
      syntax:
        content:
          CSharp: public static ValueRef BuildFCmp(BuilderRef arg0, RealPredicate Op, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildFCmp(arg0 As BuilderRef, Op As RealPredicate, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Op
          type: Swigged.LLVM.RealPredicate
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFCmp*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildPhi(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildPhi(Swigged.LLVM.BuilderRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildPhi(BuilderRef, TypeRef, String)
        VB: BuildPhi(BuilderRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildPhi(BuilderRef, TypeRef, String)
        VB: LLVM.BuildPhi(BuilderRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildPhi(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildPhi(Swigged.LLVM.BuilderRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildPhi
        path: src/swigged.llvm/LLVM.cs
        startLine: 2642
      syntax:
        content:
          CSharp: public static ValueRef BuildPhi(BuilderRef arg0, TypeRef Ty, string Name)
          VB: Public Shared Function BuildPhi(arg0 As BuilderRef, Ty As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildPhi*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildCall(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildCall(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef[],System.String)
      language: CSharp
      name:
        CSharp: BuildCall(BuilderRef, ValueRef, ValueRef[], String)
        VB: BuildCall(BuilderRef, ValueRef, ValueRef(), String)
      nameWithType:
        CSharp: LLVM.BuildCall(BuilderRef, ValueRef, ValueRef[], String)
        VB: LLVM.BuildCall(BuilderRef, ValueRef, ValueRef(), String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildCall(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef[], System.String)
        VB: Swigged.LLVM.LLVM.BuildCall(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef(), System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildCall
        path: src/swigged.llvm/LLVM.cs
        startLine: 2647
      syntax:
        content:
          CSharp: public static ValueRef BuildCall(BuilderRef arg0, ValueRef Fn, ValueRef[] Args, string Name)
          VB: Public Shared Function BuildCall(arg0 As BuilderRef, Fn As ValueRef, Args As ValueRef(), Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: Args
          type: Swigged.LLVM.ValueRef[]
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildCall*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildSelect(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildSelect(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildSelect(BuilderRef, ValueRef, ValueRef, ValueRef, String)
        VB: BuildSelect(BuilderRef, ValueRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildSelect(BuilderRef, ValueRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildSelect(BuilderRef, ValueRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildSelect(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildSelect(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildSelect
        path: src/swigged.llvm/LLVM.cs
        startLine: 2655
      syntax:
        content:
          CSharp: public static ValueRef BuildSelect(BuilderRef arg0, ValueRef If, ValueRef Then, ValueRef Else, string Name)
          VB: Public Shared Function BuildSelect(arg0 As BuilderRef, If As ValueRef, Then As ValueRef, Else As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: If
          type: Swigged.LLVM.ValueRef
        - id: Then
          type: Swigged.LLVM.ValueRef
        - id: Else
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildSelect*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildVAArg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildVAArg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.TypeRef,System.String)
      language: CSharp
      name:
        CSharp: BuildVAArg(BuilderRef, ValueRef, TypeRef, String)
        VB: BuildVAArg(BuilderRef, ValueRef, TypeRef, String)
      nameWithType:
        CSharp: LLVM.BuildVAArg(BuilderRef, ValueRef, TypeRef, String)
        VB: LLVM.BuildVAArg(BuilderRef, ValueRef, TypeRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildVAArg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildVAArg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.TypeRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildVAArg
        path: src/swigged.llvm/LLVM.cs
        startLine: 2660
      syntax:
        content:
          CSharp: public static ValueRef BuildVAArg(BuilderRef arg0, ValueRef List, TypeRef Ty, string Name)
          VB: Public Shared Function BuildVAArg(arg0 As BuilderRef, List As ValueRef, Ty As TypeRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: List
          type: Swigged.LLVM.ValueRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildVAArg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildExtractElement(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildExtractElement(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildExtractElement(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildExtractElement(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildExtractElement(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildExtractElement(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildExtractElement(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildExtractElement(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildExtractElement
        path: src/swigged.llvm/LLVM.cs
        startLine: 2665
      syntax:
        content:
          CSharp: public static ValueRef BuildExtractElement(BuilderRef arg0, ValueRef VecVal, ValueRef Index, string Name)
          VB: Public Shared Function BuildExtractElement(arg0 As BuilderRef, VecVal As ValueRef, Index As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: VecVal
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildExtractElement*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildInsertElement(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildInsertElement(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildInsertElement(BuilderRef, ValueRef, ValueRef, ValueRef, String)
        VB: BuildInsertElement(BuilderRef, ValueRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildInsertElement(BuilderRef, ValueRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildInsertElement(BuilderRef, ValueRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildInsertElement(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildInsertElement(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildInsertElement
        path: src/swigged.llvm/LLVM.cs
        startLine: 2670
      syntax:
        content:
          CSharp: public static ValueRef BuildInsertElement(BuilderRef arg0, ValueRef VecVal, ValueRef EltVal, ValueRef Index, string Name)
          VB: Public Shared Function BuildInsertElement(arg0 As BuilderRef, VecVal As ValueRef, EltVal As ValueRef, Index As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: VecVal
          type: Swigged.LLVM.ValueRef
        - id: EltVal
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildInsertElement*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildShuffleVector(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildShuffleVector(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildShuffleVector(BuilderRef, ValueRef, ValueRef, ValueRef, String)
        VB: BuildShuffleVector(BuilderRef, ValueRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildShuffleVector(BuilderRef, ValueRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildShuffleVector(BuilderRef, ValueRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildShuffleVector(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildShuffleVector(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildShuffleVector
        path: src/swigged.llvm/LLVM.cs
        startLine: 2675
      syntax:
        content:
          CSharp: public static ValueRef BuildShuffleVector(BuilderRef arg0, ValueRef V1, ValueRef V2, ValueRef Mask, string Name)
          VB: Public Shared Function BuildShuffleVector(arg0 As BuilderRef, V1 As ValueRef, V2 As ValueRef, Mask As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: V1
          type: Swigged.LLVM.ValueRef
        - id: V2
          type: Swigged.LLVM.ValueRef
        - id: Mask
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildShuffleVector*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildExtractValue(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.UInt32,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildExtractValue(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.UInt32,System.String)
      language: CSharp
      name:
        CSharp: BuildExtractValue(BuilderRef, ValueRef, UInt32, String)
        VB: BuildExtractValue(BuilderRef, ValueRef, UInt32, String)
      nameWithType:
        CSharp: LLVM.BuildExtractValue(BuilderRef, ValueRef, UInt32, String)
        VB: LLVM.BuildExtractValue(BuilderRef, ValueRef, UInt32, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildExtractValue(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.UInt32, System.String)
        VB: Swigged.LLVM.LLVM.BuildExtractValue(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.UInt32, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildExtractValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 2680
      syntax:
        content:
          CSharp: public static ValueRef BuildExtractValue(BuilderRef arg0, ValueRef AggVal, uint Index, string Name)
          VB: Public Shared Function BuildExtractValue(arg0 As BuilderRef, AggVal As ValueRef, Index As UInteger, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: AggVal
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: System.UInt32
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildExtractValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildInsertValue(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.UInt32,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildInsertValue(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.UInt32,System.String)
      language: CSharp
      name:
        CSharp: BuildInsertValue(BuilderRef, ValueRef, ValueRef, UInt32, String)
        VB: BuildInsertValue(BuilderRef, ValueRef, ValueRef, UInt32, String)
      nameWithType:
        CSharp: LLVM.BuildInsertValue(BuilderRef, ValueRef, ValueRef, UInt32, String)
        VB: LLVM.BuildInsertValue(BuilderRef, ValueRef, ValueRef, UInt32, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildInsertValue(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.UInt32, System.String)
        VB: Swigged.LLVM.LLVM.BuildInsertValue(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.UInt32, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildInsertValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 2685
      syntax:
        content:
          CSharp: public static ValueRef BuildInsertValue(BuilderRef arg0, ValueRef AggVal, ValueRef EltVal, uint Index, string Name)
          VB: Public Shared Function BuildInsertValue(arg0 As BuilderRef, AggVal As ValueRef, EltVal As ValueRef, Index As UInteger, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: AggVal
          type: Swigged.LLVM.ValueRef
        - id: EltVal
          type: Swigged.LLVM.ValueRef
        - id: Index
          type: System.UInt32
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildInsertValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildIsNull(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildIsNull(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildIsNull(BuilderRef, ValueRef, String)
        VB: BuildIsNull(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildIsNull(BuilderRef, ValueRef, String)
        VB: LLVM.BuildIsNull(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildIsNull(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildIsNull(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildIsNull
        path: src/swigged.llvm/LLVM.cs
        startLine: 2690
      syntax:
        content:
          CSharp: public static ValueRef BuildIsNull(BuilderRef arg0, ValueRef Val, string Name)
          VB: Public Shared Function BuildIsNull(arg0 As BuilderRef, Val As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildIsNull*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildIsNotNull(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildIsNotNull(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildIsNotNull(BuilderRef, ValueRef, String)
        VB: BuildIsNotNull(BuilderRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildIsNotNull(BuilderRef, ValueRef, String)
        VB: LLVM.BuildIsNotNull(BuilderRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildIsNotNull(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildIsNotNull(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildIsNotNull
        path: src/swigged.llvm/LLVM.cs
        startLine: 2695
      syntax:
        content:
          CSharp: public static ValueRef BuildIsNotNull(BuilderRef arg0, ValueRef Val, string Name)
          VB: Public Shared Function BuildIsNotNull(arg0 As BuilderRef, Val As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildIsNotNull*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildPtrDiff(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildPtrDiff(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,System.String)
      language: CSharp
      name:
        CSharp: BuildPtrDiff(BuilderRef, ValueRef, ValueRef, String)
        VB: BuildPtrDiff(BuilderRef, ValueRef, ValueRef, String)
      nameWithType:
        CSharp: LLVM.BuildPtrDiff(BuilderRef, ValueRef, ValueRef, String)
        VB: LLVM.BuildPtrDiff(BuilderRef, ValueRef, ValueRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildPtrDiff(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
        VB: Swigged.LLVM.LLVM.BuildPtrDiff(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildPtrDiff
        path: src/swigged.llvm/LLVM.cs
        startLine: 2700
      syntax:
        content:
          CSharp: public static ValueRef BuildPtrDiff(BuilderRef arg0, ValueRef LHS, ValueRef RHS, string Name)
          VB: Public Shared Function BuildPtrDiff(arg0 As BuilderRef, LHS As ValueRef, RHS As ValueRef, Name As String) As ValueRef
        parameters:
        - id: arg0
          type: Swigged.LLVM.BuilderRef
        - id: LHS
          type: Swigged.LLVM.ValueRef
        - id: RHS
          type: Swigged.LLVM.ValueRef
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildPtrDiff*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildFence(Swigged.LLVM.BuilderRef,Swigged.LLVM.AtomicOrdering,System.Boolean,System.String)
      commentId: M:Swigged.LLVM.LLVM.BuildFence(Swigged.LLVM.BuilderRef,Swigged.LLVM.AtomicOrdering,System.Boolean,System.String)
      language: CSharp
      name:
        CSharp: BuildFence(BuilderRef, AtomicOrdering, Boolean, String)
        VB: BuildFence(BuilderRef, AtomicOrdering, Boolean, String)
      nameWithType:
        CSharp: LLVM.BuildFence(BuilderRef, AtomicOrdering, Boolean, String)
        VB: LLVM.BuildFence(BuilderRef, AtomicOrdering, Boolean, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildFence(Swigged.LLVM.BuilderRef, Swigged.LLVM.AtomicOrdering, System.Boolean, System.String)
        VB: Swigged.LLVM.LLVM.BuildFence(Swigged.LLVM.BuilderRef, Swigged.LLVM.AtomicOrdering, System.Boolean, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildFence
        path: src/swigged.llvm/LLVM.cs
        startLine: 2705
      syntax:
        content:
          CSharp: public static ValueRef BuildFence(BuilderRef B, AtomicOrdering ordering, bool singleThread, string Name)
          VB: Public Shared Function BuildFence(B As BuilderRef, ordering As AtomicOrdering, singleThread As Boolean, Name As String) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: ordering
          type: Swigged.LLVM.AtomicOrdering
        - id: singleThread
          type: System.Boolean
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildFence*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildAtomicRMW(Swigged.LLVM.BuilderRef,Swigged.LLVM.AtomicRMWBinOp,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.BuildAtomicRMW(Swigged.LLVM.BuilderRef,Swigged.LLVM.AtomicRMWBinOp,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering,System.Boolean)
      language: CSharp
      name:
        CSharp: BuildAtomicRMW(BuilderRef, AtomicRMWBinOp, ValueRef, ValueRef, AtomicOrdering, Boolean)
        VB: BuildAtomicRMW(BuilderRef, AtomicRMWBinOp, ValueRef, ValueRef, AtomicOrdering, Boolean)
      nameWithType:
        CSharp: LLVM.BuildAtomicRMW(BuilderRef, AtomicRMWBinOp, ValueRef, ValueRef, AtomicOrdering, Boolean)
        VB: LLVM.BuildAtomicRMW(BuilderRef, AtomicRMWBinOp, ValueRef, ValueRef, AtomicOrdering, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildAtomicRMW(Swigged.LLVM.BuilderRef, Swigged.LLVM.AtomicRMWBinOp, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering, System.Boolean)
        VB: Swigged.LLVM.LLVM.BuildAtomicRMW(Swigged.LLVM.BuilderRef, Swigged.LLVM.AtomicRMWBinOp, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildAtomicRMW
        path: src/swigged.llvm/LLVM.cs
        startLine: 2710
      syntax:
        content:
          CSharp: public static ValueRef BuildAtomicRMW(BuilderRef B, AtomicRMWBinOp op, ValueRef PTR, ValueRef Val, AtomicOrdering ordering, bool singleThread)
          VB: Public Shared Function BuildAtomicRMW(B As BuilderRef, op As AtomicRMWBinOp, PTR As ValueRef, Val As ValueRef, ordering As AtomicOrdering, singleThread As Boolean) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: op
          type: Swigged.LLVM.AtomicRMWBinOp
        - id: PTR
          type: Swigged.LLVM.ValueRef
        - id: Val
          type: Swigged.LLVM.ValueRef
        - id: ordering
          type: Swigged.LLVM.AtomicOrdering
        - id: singleThread
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildAtomicRMW*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.BuildAtomicCmpXchg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering,Swigged.LLVM.AtomicOrdering,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.BuildAtomicCmpXchg(Swigged.LLVM.BuilderRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering,Swigged.LLVM.AtomicOrdering,System.Boolean)
      language: CSharp
      name:
        CSharp: BuildAtomicCmpXchg(BuilderRef, ValueRef, ValueRef, ValueRef, AtomicOrdering, AtomicOrdering, Boolean)
        VB: BuildAtomicCmpXchg(BuilderRef, ValueRef, ValueRef, ValueRef, AtomicOrdering, AtomicOrdering, Boolean)
      nameWithType:
        CSharp: LLVM.BuildAtomicCmpXchg(BuilderRef, ValueRef, ValueRef, ValueRef, AtomicOrdering, AtomicOrdering, Boolean)
        VB: LLVM.BuildAtomicCmpXchg(BuilderRef, ValueRef, ValueRef, ValueRef, AtomicOrdering, AtomicOrdering, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.BuildAtomicCmpXchg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering, Swigged.LLVM.AtomicOrdering, System.Boolean)
        VB: Swigged.LLVM.LLVM.BuildAtomicCmpXchg(Swigged.LLVM.BuilderRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering, Swigged.LLVM.AtomicOrdering, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: BuildAtomicCmpXchg
        path: src/swigged.llvm/LLVM.cs
        startLine: 2715
      syntax:
        content:
          CSharp: public static ValueRef BuildAtomicCmpXchg(BuilderRef B, ValueRef Ptr, ValueRef Cmp, ValueRef New, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, bool SingleThread)
          VB: Public Shared Function BuildAtomicCmpXchg(B As BuilderRef, Ptr As ValueRef, Cmp As ValueRef, New As ValueRef, SuccessOrdering As AtomicOrdering, FailureOrdering As AtomicOrdering, SingleThread As Boolean) As ValueRef
        parameters:
        - id: B
          type: Swigged.LLVM.BuilderRef
        - id: Ptr
          type: Swigged.LLVM.ValueRef
        - id: Cmp
          type: Swigged.LLVM.ValueRef
        - id: New
          type: Swigged.LLVM.ValueRef
        - id: SuccessOrdering
          type: Swigged.LLVM.AtomicOrdering
        - id: FailureOrdering
          type: Swigged.LLVM.AtomicOrdering
        - id: SingleThread
          type: System.Boolean
        return:
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.BuildAtomicCmpXchg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsAtomicSingleThread(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.IsAtomicSingleThread(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: IsAtomicSingleThread(ValueRef)
        VB: IsAtomicSingleThread(ValueRef)
      nameWithType:
        CSharp: LLVM.IsAtomicSingleThread(ValueRef)
        VB: LLVM.IsAtomicSingleThread(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsAtomicSingleThread(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.IsAtomicSingleThread(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsAtomicSingleThread
        path: src/swigged.llvm/LLVM.cs
        startLine: 2720
      syntax:
        content:
          CSharp: public static bool IsAtomicSingleThread(ValueRef AtomicInst)
          VB: Public Shared Function IsAtomicSingleThread(AtomicInst As ValueRef) As Boolean
        parameters:
        - id: AtomicInst
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsAtomicSingleThread*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetAtomicSingleThread(Swigged.LLVM.ValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetAtomicSingleThread(Swigged.LLVM.ValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetAtomicSingleThread(ValueRef, Boolean)
        VB: SetAtomicSingleThread(ValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetAtomicSingleThread(ValueRef, Boolean)
        VB: LLVM.SetAtomicSingleThread(ValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetAtomicSingleThread(Swigged.LLVM.ValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetAtomicSingleThread(Swigged.LLVM.ValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetAtomicSingleThread
        path: src/swigged.llvm/LLVM.cs
        startLine: 2725
      syntax:
        content:
          CSharp: public static void SetAtomicSingleThread(ValueRef AtomicInst, bool SingleThread)
          VB: Public Shared Sub SetAtomicSingleThread(AtomicInst As ValueRef, SingleThread As Boolean)
        parameters:
        - id: AtomicInst
          type: Swigged.LLVM.ValueRef
        - id: SingleThread
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetAtomicSingleThread*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetCmpXchgSuccessOrdering(ValueRef)
        VB: GetCmpXchgSuccessOrdering(ValueRef)
      nameWithType:
        CSharp: LLVM.GetCmpXchgSuccessOrdering(ValueRef)
        VB: LLVM.GetCmpXchgSuccessOrdering(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCmpXchgSuccessOrdering
        path: src/swigged.llvm/LLVM.cs
        startLine: 2729
      syntax:
        content:
          CSharp: public static AtomicOrdering GetCmpXchgSuccessOrdering(ValueRef CmpXchgInst)
          VB: Public Shared Function GetCmpXchgSuccessOrdering(CmpXchgInst As ValueRef) As AtomicOrdering
        parameters:
        - id: CmpXchgInst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.AtomicOrdering
      overload: Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering(Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering)
      commentId: M:Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering(Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering)
      language: CSharp
      name:
        CSharp: SetCmpXchgSuccessOrdering(ValueRef, AtomicOrdering)
        VB: SetCmpXchgSuccessOrdering(ValueRef, AtomicOrdering)
      nameWithType:
        CSharp: LLVM.SetCmpXchgSuccessOrdering(ValueRef, AtomicOrdering)
        VB: LLVM.SetCmpXchgSuccessOrdering(ValueRef, AtomicOrdering)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering(Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering)
        VB: Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering(Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetCmpXchgSuccessOrdering
        path: src/swigged.llvm/LLVM.cs
        startLine: 2734
      syntax:
        content:
          CSharp: public static void SetCmpXchgSuccessOrdering(ValueRef CmpXchgInst, AtomicOrdering Ordering)
          VB: Public Shared Sub SetCmpXchgSuccessOrdering(CmpXchgInst As ValueRef, Ordering As AtomicOrdering)
        parameters:
        - id: CmpXchgInst
          type: Swigged.LLVM.ValueRef
        - id: Ordering
          type: Swigged.LLVM.AtomicOrdering
      overload: Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering(Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering(Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetCmpXchgFailureOrdering(ValueRef)
        VB: GetCmpXchgFailureOrdering(ValueRef)
      nameWithType:
        CSharp: LLVM.GetCmpXchgFailureOrdering(ValueRef)
        VB: LLVM.GetCmpXchgFailureOrdering(ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering(Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering(Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetCmpXchgFailureOrdering
        path: src/swigged.llvm/LLVM.cs
        startLine: 2738
      syntax:
        content:
          CSharp: public static AtomicOrdering GetCmpXchgFailureOrdering(ValueRef CmpXchgInst)
          VB: Public Shared Function GetCmpXchgFailureOrdering(CmpXchgInst As ValueRef) As AtomicOrdering
        parameters:
        - id: CmpXchgInst
          type: Swigged.LLVM.ValueRef
        return:
          type: Swigged.LLVM.AtomicOrdering
      overload: Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering(Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering)
      commentId: M:Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering(Swigged.LLVM.ValueRef,Swigged.LLVM.AtomicOrdering)
      language: CSharp
      name:
        CSharp: SetCmpXchgFailureOrdering(ValueRef, AtomicOrdering)
        VB: SetCmpXchgFailureOrdering(ValueRef, AtomicOrdering)
      nameWithType:
        CSharp: LLVM.SetCmpXchgFailureOrdering(ValueRef, AtomicOrdering)
        VB: LLVM.SetCmpXchgFailureOrdering(ValueRef, AtomicOrdering)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering(Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering)
        VB: Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering(Swigged.LLVM.ValueRef, Swigged.LLVM.AtomicOrdering)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetCmpXchgFailureOrdering
        path: src/swigged.llvm/LLVM.cs
        startLine: 2743
      syntax:
        content:
          CSharp: public static void SetCmpXchgFailureOrdering(ValueRef CmpXchgInst, AtomicOrdering Ordering)
          VB: Public Shared Sub SetCmpXchgFailureOrdering(CmpXchgInst As ValueRef, Ordering As AtomicOrdering)
        parameters:
        - id: CmpXchgInst
          type: Swigged.LLVM.ValueRef
        - id: Ordering
          type: Swigged.LLVM.AtomicOrdering
      overload: Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: CreateModuleProviderForExistingModule(ModuleRef)
        VB: CreateModuleProviderForExistingModule(ModuleRef)
      nameWithType:
        CSharp: LLVM.CreateModuleProviderForExistingModule(ModuleRef)
        VB: LLVM.CreateModuleProviderForExistingModule(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateModuleProviderForExistingModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 2747
      syntax:
        content:
          CSharp: public static ModuleProviderRef CreateModuleProviderForExistingModule(ModuleRef M)
          VB: Public Shared Function CreateModuleProviderForExistingModule(M As ModuleRef) As ModuleProviderRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.ModuleProviderRef
      overload: Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeModuleProvider(Swigged.LLVM.ModuleProviderRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeModuleProvider(Swigged.LLVM.ModuleProviderRef)
      language: CSharp
      name:
        CSharp: DisposeModuleProvider(ModuleProviderRef)
        VB: DisposeModuleProvider(ModuleProviderRef)
      nameWithType:
        CSharp: LLVM.DisposeModuleProvider(ModuleProviderRef)
        VB: LLVM.DisposeModuleProvider(ModuleProviderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeModuleProvider(Swigged.LLVM.ModuleProviderRef)
        VB: Swigged.LLVM.LLVM.DisposeModuleProvider(Swigged.LLVM.ModuleProviderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeModuleProvider
        path: src/swigged.llvm/LLVM.cs
        startLine: 2752
      syntax:
        content:
          CSharp: public static void DisposeModuleProvider(ModuleProviderRef M)
          VB: Public Shared Sub DisposeModuleProvider(M As ModuleProviderRef)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleProviderRef
      overload: Swigged.LLVM.LLVM.DisposeModuleProvider*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile(System.String,Swigged.LLVM.MemoryBufferRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile(System.String,Swigged.LLVM.MemoryBufferRef@,System.String@)
      language: CSharp
      name:
        CSharp: CreateMemoryBufferWithContentsOfFile(String, out MemoryBufferRef, out String)
        VB: CreateMemoryBufferWithContentsOfFile(String, ByRef MemoryBufferRef, ByRef String)
      nameWithType:
        CSharp: LLVM.CreateMemoryBufferWithContentsOfFile(String, out MemoryBufferRef, out String)
        VB: LLVM.CreateMemoryBufferWithContentsOfFile(String, ByRef MemoryBufferRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile(System.String, out Swigged.LLVM.MemoryBufferRef, out System.String)
        VB: Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile(System.String, ByRef Swigged.LLVM.MemoryBufferRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateMemoryBufferWithContentsOfFile
        path: src/swigged.llvm/LLVM.cs
        startLine: 2756
      syntax:
        content:
          CSharp: public static bool CreateMemoryBufferWithContentsOfFile(string Path, out MemoryBufferRef OutMemBuf, out string OutMessage)
          VB: Public Shared Function CreateMemoryBufferWithContentsOfFile(Path As String, ByRef OutMemBuf As MemoryBufferRef, ByRef OutMessage As String) As Boolean
        parameters:
        - id: Path
          type: System.String
        - id: OutMemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN(Swigged.LLVM.MemoryBufferRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN(Swigged.LLVM.MemoryBufferRef@,System.String@)
      language: CSharp
      name:
        CSharp: CreateMemoryBufferWithSTDIN(out MemoryBufferRef, out String)
        VB: CreateMemoryBufferWithSTDIN(ByRef MemoryBufferRef, ByRef String)
      nameWithType:
        CSharp: LLVM.CreateMemoryBufferWithSTDIN(out MemoryBufferRef, out String)
        VB: LLVM.CreateMemoryBufferWithSTDIN(ByRef MemoryBufferRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN(out Swigged.LLVM.MemoryBufferRef, out System.String)
        VB: Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN(ByRef Swigged.LLVM.MemoryBufferRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateMemoryBufferWithSTDIN
        path: src/swigged.llvm/LLVM.cs
        startLine: 2761
      syntax:
        content:
          CSharp: public static bool CreateMemoryBufferWithSTDIN(out MemoryBufferRef OutMemBuf, out string OutMessage)
          VB: Public Shared Function CreateMemoryBufferWithSTDIN(ByRef OutMemBuf As MemoryBufferRef, ByRef OutMessage As String) As Boolean
        parameters:
        - id: OutMemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange(System.String,System.UInt32,System.String,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange(System.String,System.UInt32,System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: CreateMemoryBufferWithMemoryRange(String, UInt32, String, Boolean)
        VB: CreateMemoryBufferWithMemoryRange(String, UInt32, String, Boolean)
      nameWithType:
        CSharp: LLVM.CreateMemoryBufferWithMemoryRange(String, UInt32, String, Boolean)
        VB: LLVM.CreateMemoryBufferWithMemoryRange(String, UInt32, String, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange(System.String, System.UInt32, System.String, System.Boolean)
        VB: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange(System.String, System.UInt32, System.String, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateMemoryBufferWithMemoryRange
        path: src/swigged.llvm/LLVM.cs
        startLine: 2766
      syntax:
        content:
          CSharp: public static MemoryBufferRef CreateMemoryBufferWithMemoryRange(string InputData, uint InputDataLength, string BufferName, bool RequiresNullTerminator)
          VB: Public Shared Function CreateMemoryBufferWithMemoryRange(InputData As String, InputDataLength As UInteger, BufferName As String, RequiresNullTerminator As Boolean) As MemoryBufferRef
        parameters:
        - id: InputData
          type: System.String
        - id: InputDataLength
          type: System.UInt32
        - id: BufferName
          type: System.String
        - id: RequiresNullTerminator
          type: System.Boolean
        return:
          type: Swigged.LLVM.MemoryBufferRef
      overload: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy(System.String,System.UInt32,System.String)
      commentId: M:Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy(System.String,System.UInt32,System.String)
      language: CSharp
      name:
        CSharp: CreateMemoryBufferWithMemoryRangeCopy(String, UInt32, String)
        VB: CreateMemoryBufferWithMemoryRangeCopy(String, UInt32, String)
      nameWithType:
        CSharp: LLVM.CreateMemoryBufferWithMemoryRangeCopy(String, UInt32, String)
        VB: LLVM.CreateMemoryBufferWithMemoryRangeCopy(String, UInt32, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy(System.String, System.UInt32, System.String)
        VB: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy(System.String, System.UInt32, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateMemoryBufferWithMemoryRangeCopy
        path: src/swigged.llvm/LLVM.cs
        startLine: 2771
      syntax:
        content:
          CSharp: public static MemoryBufferRef CreateMemoryBufferWithMemoryRangeCopy(string InputData, uint InputDataLength, string BufferName)
          VB: Public Shared Function CreateMemoryBufferWithMemoryRangeCopy(InputData As String, InputDataLength As UInteger, BufferName As String) As MemoryBufferRef
        parameters:
        - id: InputData
          type: System.String
        - id: InputDataLength
          type: System.UInt32
        - id: BufferName
          type: System.String
        return:
          type: Swigged.LLVM.MemoryBufferRef
      overload: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBufferStart(Swigged.LLVM.MemoryBufferRef)
      commentId: M:Swigged.LLVM.LLVM.GetBufferStart(Swigged.LLVM.MemoryBufferRef)
      language: CSharp
      name:
        CSharp: GetBufferStart(MemoryBufferRef)
        VB: GetBufferStart(MemoryBufferRef)
      nameWithType:
        CSharp: LLVM.GetBufferStart(MemoryBufferRef)
        VB: LLVM.GetBufferStart(MemoryBufferRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBufferStart(Swigged.LLVM.MemoryBufferRef)
        VB: Swigged.LLVM.LLVM.GetBufferStart(Swigged.LLVM.MemoryBufferRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBufferStart
        path: src/swigged.llvm/LLVM.cs
        startLine: 2776
      syntax:
        content:
          CSharp: public static string GetBufferStart(MemoryBufferRef MemBuf)
          VB: Public Shared Function GetBufferStart(MemBuf As MemoryBufferRef) As String
        parameters:
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetBufferStart*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBufferSize(Swigged.LLVM.MemoryBufferRef)
      commentId: M:Swigged.LLVM.LLVM.GetBufferSize(Swigged.LLVM.MemoryBufferRef)
      language: CSharp
      name:
        CSharp: GetBufferSize(MemoryBufferRef)
        VB: GetBufferSize(MemoryBufferRef)
      nameWithType:
        CSharp: LLVM.GetBufferSize(MemoryBufferRef)
        VB: LLVM.GetBufferSize(MemoryBufferRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBufferSize(Swigged.LLVM.MemoryBufferRef)
        VB: Swigged.LLVM.LLVM.GetBufferSize(Swigged.LLVM.MemoryBufferRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBufferSize
        path: src/swigged.llvm/LLVM.cs
        startLine: 2781
      syntax:
        content:
          CSharp: public static uint GetBufferSize(MemoryBufferRef MemBuf)
          VB: Public Shared Function GetBufferSize(MemBuf As MemoryBufferRef) As UInteger
        parameters:
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GetBufferSize*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeMemoryBuffer(Swigged.LLVM.MemoryBufferRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeMemoryBuffer(Swigged.LLVM.MemoryBufferRef)
      language: CSharp
      name:
        CSharp: DisposeMemoryBuffer(MemoryBufferRef)
        VB: DisposeMemoryBuffer(MemoryBufferRef)
      nameWithType:
        CSharp: LLVM.DisposeMemoryBuffer(MemoryBufferRef)
        VB: LLVM.DisposeMemoryBuffer(MemoryBufferRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeMemoryBuffer(Swigged.LLVM.MemoryBufferRef)
        VB: Swigged.LLVM.LLVM.DisposeMemoryBuffer(Swigged.LLVM.MemoryBufferRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeMemoryBuffer
        path: src/swigged.llvm/LLVM.cs
        startLine: 2786
      syntax:
        content:
          CSharp: public static void DisposeMemoryBuffer(MemoryBufferRef MemBuf)
          VB: Public Shared Sub DisposeMemoryBuffer(MemBuf As MemoryBufferRef)
        parameters:
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
      overload: Swigged.LLVM.LLVM.DisposeMemoryBuffer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetGlobalPassRegistry
      commentId: M:Swigged.LLVM.LLVM.GetGlobalPassRegistry
      language: CSharp
      name:
        CSharp: GetGlobalPassRegistry()
        VB: GetGlobalPassRegistry()
      nameWithType:
        CSharp: LLVM.GetGlobalPassRegistry()
        VB: LLVM.GetGlobalPassRegistry()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetGlobalPassRegistry()
        VB: Swigged.LLVM.LLVM.GetGlobalPassRegistry()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetGlobalPassRegistry
        path: src/swigged.llvm/LLVM.cs
        startLine: 2790
      syntax:
        content:
          CSharp: public static PassRegistryRef GetGlobalPassRegistry()
          VB: Public Shared Function GetGlobalPassRegistry As PassRegistryRef
        return:
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.GetGlobalPassRegistry*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreatePassManager
      commentId: M:Swigged.LLVM.LLVM.CreatePassManager
      language: CSharp
      name:
        CSharp: CreatePassManager()
        VB: CreatePassManager()
      nameWithType:
        CSharp: LLVM.CreatePassManager()
        VB: LLVM.CreatePassManager()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreatePassManager()
        VB: Swigged.LLVM.LLVM.CreatePassManager()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreatePassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 2795
      syntax:
        content:
          CSharp: public static PassManagerRef CreatePassManager()
          VB: Public Shared Function CreatePassManager As PassManagerRef
        return:
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.CreatePassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: CreateFunctionPassManagerForModule(ModuleRef)
        VB: CreateFunctionPassManagerForModule(ModuleRef)
      nameWithType:
        CSharp: LLVM.CreateFunctionPassManagerForModule(ModuleRef)
        VB: LLVM.CreateFunctionPassManagerForModule(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateFunctionPassManagerForModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 2800
      syntax:
        content:
          CSharp: public static PassManagerRef CreateFunctionPassManagerForModule(ModuleRef M)
          VB: Public Shared Function CreateFunctionPassManagerForModule(M As ModuleRef) As PassManagerRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateFunctionPassManager(Swigged.LLVM.ModuleProviderRef)
      commentId: M:Swigged.LLVM.LLVM.CreateFunctionPassManager(Swigged.LLVM.ModuleProviderRef)
      language: CSharp
      name:
        CSharp: CreateFunctionPassManager(ModuleProviderRef)
        VB: CreateFunctionPassManager(ModuleProviderRef)
      nameWithType:
        CSharp: LLVM.CreateFunctionPassManager(ModuleProviderRef)
        VB: LLVM.CreateFunctionPassManager(ModuleProviderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateFunctionPassManager(Swigged.LLVM.ModuleProviderRef)
        VB: Swigged.LLVM.LLVM.CreateFunctionPassManager(Swigged.LLVM.ModuleProviderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateFunctionPassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 2805
      syntax:
        content:
          CSharp: public static PassManagerRef CreateFunctionPassManager(ModuleProviderRef MP)
          VB: Public Shared Function CreateFunctionPassManager(MP As ModuleProviderRef) As PassManagerRef
        parameters:
        - id: MP
          type: Swigged.LLVM.ModuleProviderRef
        return:
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.CreateFunctionPassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RunPassManager(Swigged.LLVM.PassManagerRef,Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.RunPassManager(Swigged.LLVM.PassManagerRef,Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: RunPassManager(PassManagerRef, ModuleRef)
        VB: RunPassManager(PassManagerRef, ModuleRef)
      nameWithType:
        CSharp: LLVM.RunPassManager(PassManagerRef, ModuleRef)
        VB: LLVM.RunPassManager(PassManagerRef, ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RunPassManager(Swigged.LLVM.PassManagerRef, Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.RunPassManager(Swigged.LLVM.PassManagerRef, Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RunPassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 2810
      syntax:
        content:
          CSharp: public static bool RunPassManager(PassManagerRef PM, ModuleRef M)
          VB: Public Shared Function RunPassManager(PM As PassManagerRef, M As ModuleRef) As Boolean
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.RunPassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeFunctionPassManager(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeFunctionPassManager(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: InitializeFunctionPassManager(PassManagerRef)
        VB: InitializeFunctionPassManager(PassManagerRef)
      nameWithType:
        CSharp: LLVM.InitializeFunctionPassManager(PassManagerRef)
        VB: LLVM.InitializeFunctionPassManager(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeFunctionPassManager(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.InitializeFunctionPassManager(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeFunctionPassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 2815
      syntax:
        content:
          CSharp: public static bool InitializeFunctionPassManager(PassManagerRef FPM)
          VB: Public Shared Function InitializeFunctionPassManager(FPM As PassManagerRef) As Boolean
        parameters:
        - id: FPM
          type: Swigged.LLVM.PassManagerRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.InitializeFunctionPassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RunFunctionPassManager(Swigged.LLVM.PassManagerRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.RunFunctionPassManager(Swigged.LLVM.PassManagerRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: RunFunctionPassManager(PassManagerRef, ValueRef)
        VB: RunFunctionPassManager(PassManagerRef, ValueRef)
      nameWithType:
        CSharp: LLVM.RunFunctionPassManager(PassManagerRef, ValueRef)
        VB: LLVM.RunFunctionPassManager(PassManagerRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RunFunctionPassManager(Swigged.LLVM.PassManagerRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.RunFunctionPassManager(Swigged.LLVM.PassManagerRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RunFunctionPassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 2820
      syntax:
        content:
          CSharp: public static bool RunFunctionPassManager(PassManagerRef FPM, ValueRef F)
          VB: Public Shared Function RunFunctionPassManager(FPM As PassManagerRef, F As ValueRef) As Boolean
        parameters:
        - id: FPM
          type: Swigged.LLVM.PassManagerRef
        - id: F
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.RunFunctionPassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.FinalizeFunctionPassManager(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.FinalizeFunctionPassManager(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: FinalizeFunctionPassManager(PassManagerRef)
        VB: FinalizeFunctionPassManager(PassManagerRef)
      nameWithType:
        CSharp: LLVM.FinalizeFunctionPassManager(PassManagerRef)
        VB: LLVM.FinalizeFunctionPassManager(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.FinalizeFunctionPassManager(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.FinalizeFunctionPassManager(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FinalizeFunctionPassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 2825
      syntax:
        content:
          CSharp: public static bool FinalizeFunctionPassManager(PassManagerRef FPM)
          VB: Public Shared Function FinalizeFunctionPassManager(FPM As PassManagerRef) As Boolean
        parameters:
        - id: FPM
          type: Swigged.LLVM.PassManagerRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.FinalizeFunctionPassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposePassManager(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.DisposePassManager(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: DisposePassManager(PassManagerRef)
        VB: DisposePassManager(PassManagerRef)
      nameWithType:
        CSharp: LLVM.DisposePassManager(PassManagerRef)
        VB: LLVM.DisposePassManager(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposePassManager(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.DisposePassManager(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposePassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 2830
      syntax:
        content:
          CSharp: public static void DisposePassManager(PassManagerRef PM)
          VB: Public Shared Sub DisposePassManager(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.DisposePassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.StartMultithreaded
      commentId: M:Swigged.LLVM.LLVM.StartMultithreaded
      language: CSharp
      name:
        CSharp: StartMultithreaded()
        VB: StartMultithreaded()
      nameWithType:
        CSharp: LLVM.StartMultithreaded()
        VB: LLVM.StartMultithreaded()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.StartMultithreaded()
        VB: Swigged.LLVM.LLVM.StartMultithreaded()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StartMultithreaded
        path: src/swigged.llvm/LLVM.cs
        startLine: 2834
      syntax:
        content:
          CSharp: public static bool StartMultithreaded()
          VB: Public Shared Function StartMultithreaded As Boolean
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.StartMultithreaded*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.StopMultithreaded
      commentId: M:Swigged.LLVM.LLVM.StopMultithreaded
      language: CSharp
      name:
        CSharp: StopMultithreaded()
        VB: StopMultithreaded()
      nameWithType:
        CSharp: LLVM.StopMultithreaded()
        VB: LLVM.StopMultithreaded()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.StopMultithreaded()
        VB: Swigged.LLVM.LLVM.StopMultithreaded()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StopMultithreaded
        path: src/swigged.llvm/LLVM.cs
        startLine: 2839
      syntax:
        content:
          CSharp: public static void StopMultithreaded()
          VB: Public Shared Sub StopMultithreaded
      overload: Swigged.LLVM.LLVM.StopMultithreaded*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IsMultithreaded
      commentId: M:Swigged.LLVM.LLVM.IsMultithreaded
      language: CSharp
      name:
        CSharp: IsMultithreaded()
        VB: IsMultithreaded()
      nameWithType:
        CSharp: LLVM.IsMultithreaded()
        VB: LLVM.IsMultithreaded()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IsMultithreaded()
        VB: Swigged.LLVM.LLVM.IsMultithreaded()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IsMultithreaded
        path: src/swigged.llvm/LLVM.cs
        startLine: 2843
      syntax:
        content:
          CSharp: public static bool IsMultithreaded()
          VB: Public Shared Function IsMultithreaded As Boolean
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.IsMultithreaded*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.VerifyModule(Swigged.LLVM.ModuleRef,Swigged.LLVM.VerifierFailureAction,System.String@)
      commentId: M:Swigged.LLVM.LLVM.VerifyModule(Swigged.LLVM.ModuleRef,Swigged.LLVM.VerifierFailureAction,System.String@)
      language: CSharp
      name:
        CSharp: VerifyModule(ModuleRef, VerifierFailureAction, out String)
        VB: VerifyModule(ModuleRef, VerifierFailureAction, ByRef String)
      nameWithType:
        CSharp: LLVM.VerifyModule(ModuleRef, VerifierFailureAction, out String)
        VB: LLVM.VerifyModule(ModuleRef, VerifierFailureAction, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.VerifyModule(Swigged.LLVM.ModuleRef, Swigged.LLVM.VerifierFailureAction, out System.String)
        VB: Swigged.LLVM.LLVM.VerifyModule(Swigged.LLVM.ModuleRef, Swigged.LLVM.VerifierFailureAction, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: VerifyModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 2848
      syntax:
        content:
          CSharp: public static bool VerifyModule(ModuleRef M, VerifierFailureAction Action, out string OutMessage)
          VB: Public Shared Function VerifyModule(M As ModuleRef, Action As VerifierFailureAction, ByRef OutMessage As String) As Boolean
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Action
          type: Swigged.LLVM.VerifierFailureAction
        - id: OutMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.VerifyModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.VerifyFunction(Swigged.LLVM.ValueRef,Swigged.LLVM.VerifierFailureAction)
      commentId: M:Swigged.LLVM.LLVM.VerifyFunction(Swigged.LLVM.ValueRef,Swigged.LLVM.VerifierFailureAction)
      language: CSharp
      name:
        CSharp: VerifyFunction(ValueRef, VerifierFailureAction)
        VB: VerifyFunction(ValueRef, VerifierFailureAction)
      nameWithType:
        CSharp: LLVM.VerifyFunction(ValueRef, VerifierFailureAction)
        VB: LLVM.VerifyFunction(ValueRef, VerifierFailureAction)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.VerifyFunction(Swigged.LLVM.ValueRef, Swigged.LLVM.VerifierFailureAction)
        VB: Swigged.LLVM.LLVM.VerifyFunction(Swigged.LLVM.ValueRef, Swigged.LLVM.VerifierFailureAction)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: VerifyFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 2853
      syntax:
        content:
          CSharp: public static bool VerifyFunction(ValueRef Fn, VerifierFailureAction Action)
          VB: Public Shared Function VerifyFunction(Fn As ValueRef, Action As VerifierFailureAction) As Boolean
        parameters:
        - id: Fn
          type: Swigged.LLVM.ValueRef
        - id: Action
          type: Swigged.LLVM.VerifierFailureAction
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.VerifyFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ParseBitcode(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.ParseBitcode(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      language: CSharp
      name:
        CSharp: ParseBitcode(MemoryBufferRef, out ModuleRef, out String)
        VB: ParseBitcode(MemoryBufferRef, ByRef ModuleRef, ByRef String)
      nameWithType:
        CSharp: LLVM.ParseBitcode(MemoryBufferRef, out ModuleRef, out String)
        VB: LLVM.ParseBitcode(MemoryBufferRef, ByRef ModuleRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ParseBitcode(Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef, out System.String)
        VB: Swigged.LLVM.LLVM.ParseBitcode(Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ParseBitcode
        path: src/swigged.llvm/LLVM.cs
        startLine: 2858
      syntax:
        content:
          CSharp: public static bool ParseBitcode(MemoryBufferRef MemBuf, out ModuleRef OutModule, out string OutMessage)
          VB: Public Shared Function ParseBitcode(MemBuf As MemoryBufferRef, ByRef OutModule As ModuleRef, ByRef OutMessage As String) As Boolean
        parameters:
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutModule
          type: Swigged.LLVM.ModuleRef
        - id: OutMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.ParseBitcode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ParseBitcode2(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@)
      commentId: M:Swigged.LLVM.LLVM.ParseBitcode2(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@)
      language: CSharp
      name:
        CSharp: ParseBitcode2(MemoryBufferRef, out ModuleRef)
        VB: ParseBitcode2(MemoryBufferRef, ByRef ModuleRef)
      nameWithType:
        CSharp: LLVM.ParseBitcode2(MemoryBufferRef, out ModuleRef)
        VB: LLVM.ParseBitcode2(MemoryBufferRef, ByRef ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ParseBitcode2(Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.ParseBitcode2(Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ParseBitcode2
        path: src/swigged.llvm/LLVM.cs
        startLine: 2863
      syntax:
        content:
          CSharp: public static bool ParseBitcode2(MemoryBufferRef MemBuf, out ModuleRef OutModule)
          VB: Public Shared Function ParseBitcode2(MemBuf As MemoryBufferRef, ByRef OutModule As ModuleRef) As Boolean
        parameters:
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutModule
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.ParseBitcode2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ParseBitcodeInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.ParseBitcodeInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      language: CSharp
      name:
        CSharp: ParseBitcodeInContext(ContextRef, MemoryBufferRef, out ModuleRef, out String)
        VB: ParseBitcodeInContext(ContextRef, MemoryBufferRef, ByRef ModuleRef, ByRef String)
      nameWithType:
        CSharp: LLVM.ParseBitcodeInContext(ContextRef, MemoryBufferRef, out ModuleRef, out String)
        VB: LLVM.ParseBitcodeInContext(ContextRef, MemoryBufferRef, ByRef ModuleRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ParseBitcodeInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef, out System.String)
        VB: Swigged.LLVM.LLVM.ParseBitcodeInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ParseBitcodeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 2868
      syntax:
        content:
          CSharp: public static bool ParseBitcodeInContext(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutModule, out string OutMessage)
          VB: Public Shared Function ParseBitcodeInContext(ContextRef As ContextRef, MemBuf As MemoryBufferRef, ByRef OutModule As ModuleRef, ByRef OutMessage As String) As Boolean
        parameters:
        - id: ContextRef
          type: Swigged.LLVM.ContextRef
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutModule
          type: Swigged.LLVM.ModuleRef
        - id: OutMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.ParseBitcodeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ParseBitcodeInContext2(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@)
      commentId: M:Swigged.LLVM.LLVM.ParseBitcodeInContext2(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@)
      language: CSharp
      name:
        CSharp: ParseBitcodeInContext2(ContextRef, MemoryBufferRef, out ModuleRef)
        VB: ParseBitcodeInContext2(ContextRef, MemoryBufferRef, ByRef ModuleRef)
      nameWithType:
        CSharp: LLVM.ParseBitcodeInContext2(ContextRef, MemoryBufferRef, out ModuleRef)
        VB: LLVM.ParseBitcodeInContext2(ContextRef, MemoryBufferRef, ByRef ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ParseBitcodeInContext2(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.ParseBitcodeInContext2(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ParseBitcodeInContext2
        path: src/swigged.llvm/LLVM.cs
        startLine: 2873
      syntax:
        content:
          CSharp: public static bool ParseBitcodeInContext2(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutModule)
          VB: Public Shared Function ParseBitcodeInContext2(ContextRef As ContextRef, MemBuf As MemoryBufferRef, ByRef OutModule As ModuleRef) As Boolean
        parameters:
        - id: ContextRef
          type: Swigged.LLVM.ContextRef
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutModule
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.ParseBitcodeInContext2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBitcodeModuleInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.GetBitcodeModuleInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      language: CSharp
      name:
        CSharp: GetBitcodeModuleInContext(ContextRef, MemoryBufferRef, out ModuleRef, out String)
        VB: GetBitcodeModuleInContext(ContextRef, MemoryBufferRef, ByRef ModuleRef, ByRef String)
      nameWithType:
        CSharp: LLVM.GetBitcodeModuleInContext(ContextRef, MemoryBufferRef, out ModuleRef, out String)
        VB: LLVM.GetBitcodeModuleInContext(ContextRef, MemoryBufferRef, ByRef ModuleRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBitcodeModuleInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef, out System.String)
        VB: Swigged.LLVM.LLVM.GetBitcodeModuleInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBitcodeModuleInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 2878
      syntax:
        content:
          CSharp: public static bool GetBitcodeModuleInContext(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutM, out string OutMessage)
          VB: Public Shared Function GetBitcodeModuleInContext(ContextRef As ContextRef, MemBuf As MemoryBufferRef, ByRef OutM As ModuleRef, ByRef OutMessage As String) As Boolean
        parameters:
        - id: ContextRef
          type: Swigged.LLVM.ContextRef
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutM
          type: Swigged.LLVM.ModuleRef
        - id: OutMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.GetBitcodeModuleInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBitcodeModuleInContext2(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@)
      commentId: M:Swigged.LLVM.LLVM.GetBitcodeModuleInContext2(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@)
      language: CSharp
      name:
        CSharp: GetBitcodeModuleInContext2(ContextRef, MemoryBufferRef, out ModuleRef)
        VB: GetBitcodeModuleInContext2(ContextRef, MemoryBufferRef, ByRef ModuleRef)
      nameWithType:
        CSharp: LLVM.GetBitcodeModuleInContext2(ContextRef, MemoryBufferRef, out ModuleRef)
        VB: LLVM.GetBitcodeModuleInContext2(ContextRef, MemoryBufferRef, ByRef ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBitcodeModuleInContext2(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetBitcodeModuleInContext2(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBitcodeModuleInContext2
        path: src/swigged.llvm/LLVM.cs
        startLine: 2883
      syntax:
        content:
          CSharp: public static bool GetBitcodeModuleInContext2(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutM)
          VB: Public Shared Function GetBitcodeModuleInContext2(ContextRef As ContextRef, MemBuf As MemoryBufferRef, ByRef OutM As ModuleRef) As Boolean
        parameters:
        - id: ContextRef
          type: Swigged.LLVM.ContextRef
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutM
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.GetBitcodeModuleInContext2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBitcodeModule(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.GetBitcodeModule(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      language: CSharp
      name:
        CSharp: GetBitcodeModule(MemoryBufferRef, out ModuleRef, out String)
        VB: GetBitcodeModule(MemoryBufferRef, ByRef ModuleRef, ByRef String)
      nameWithType:
        CSharp: LLVM.GetBitcodeModule(MemoryBufferRef, out ModuleRef, out String)
        VB: LLVM.GetBitcodeModule(MemoryBufferRef, ByRef ModuleRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBitcodeModule(Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef, out System.String)
        VB: Swigged.LLVM.LLVM.GetBitcodeModule(Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBitcodeModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 2888
      syntax:
        content:
          CSharp: public static bool GetBitcodeModule(MemoryBufferRef MemBuf, out ModuleRef OutM, out string OutMessage)
          VB: Public Shared Function GetBitcodeModule(MemBuf As MemoryBufferRef, ByRef OutM As ModuleRef, ByRef OutMessage As String) As Boolean
        parameters:
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutM
          type: Swigged.LLVM.ModuleRef
        - id: OutMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.GetBitcodeModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetBitcodeModule2(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@)
      commentId: M:Swigged.LLVM.LLVM.GetBitcodeModule2(Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@)
      language: CSharp
      name:
        CSharp: GetBitcodeModule2(MemoryBufferRef, out ModuleRef)
        VB: GetBitcodeModule2(MemoryBufferRef, ByRef ModuleRef)
      nameWithType:
        CSharp: LLVM.GetBitcodeModule2(MemoryBufferRef, out ModuleRef)
        VB: LLVM.GetBitcodeModule2(MemoryBufferRef, ByRef ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetBitcodeModule2(Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetBitcodeModule2(Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetBitcodeModule2
        path: src/swigged.llvm/LLVM.cs
        startLine: 2893
      syntax:
        content:
          CSharp: public static bool GetBitcodeModule2(MemoryBufferRef MemBuf, out ModuleRef OutM)
          VB: Public Shared Function GetBitcodeModule2(MemBuf As MemoryBufferRef, ByRef OutM As ModuleRef) As Boolean
        parameters:
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutM
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.GetBitcodeModule2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.WriteBitcodeToFile(Swigged.LLVM.ModuleRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.WriteBitcodeToFile(Swigged.LLVM.ModuleRef,System.String)
      language: CSharp
      name:
        CSharp: WriteBitcodeToFile(ModuleRef, String)
        VB: WriteBitcodeToFile(ModuleRef, String)
      nameWithType:
        CSharp: LLVM.WriteBitcodeToFile(ModuleRef, String)
        VB: LLVM.WriteBitcodeToFile(ModuleRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.WriteBitcodeToFile(Swigged.LLVM.ModuleRef, System.String)
        VB: Swigged.LLVM.LLVM.WriteBitcodeToFile(Swigged.LLVM.ModuleRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: WriteBitcodeToFile
        path: src/swigged.llvm/LLVM.cs
        startLine: 2898
      syntax:
        content:
          CSharp: public static int WriteBitcodeToFile(ModuleRef M, string Path)
          VB: Public Shared Function WriteBitcodeToFile(M As ModuleRef, Path As String) As Integer
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Path
          type: System.String
        return:
          type: System.Int32
      overload: Swigged.LLVM.LLVM.WriteBitcodeToFile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.WriteBitcodeToFD(Swigged.LLVM.ModuleRef,System.Int32,System.Int32,System.Int32)
      commentId: M:Swigged.LLVM.LLVM.WriteBitcodeToFD(Swigged.LLVM.ModuleRef,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: WriteBitcodeToFD(ModuleRef, Int32, Int32, Int32)
        VB: WriteBitcodeToFD(ModuleRef, Int32, Int32, Int32)
      nameWithType:
        CSharp: LLVM.WriteBitcodeToFD(ModuleRef, Int32, Int32, Int32)
        VB: LLVM.WriteBitcodeToFD(ModuleRef, Int32, Int32, Int32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.WriteBitcodeToFD(Swigged.LLVM.ModuleRef, System.Int32, System.Int32, System.Int32)
        VB: Swigged.LLVM.LLVM.WriteBitcodeToFD(Swigged.LLVM.ModuleRef, System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: WriteBitcodeToFD
        path: src/swigged.llvm/LLVM.cs
        startLine: 2903
      syntax:
        content:
          CSharp: public static int WriteBitcodeToFD(ModuleRef M, int FD, int ShouldClose, int Unbuffered)
          VB: Public Shared Function WriteBitcodeToFD(M As ModuleRef, FD As Integer, ShouldClose As Integer, Unbuffered As Integer) As Integer
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: FD
          type: System.Int32
        - id: ShouldClose
          type: System.Int32
        - id: Unbuffered
          type: System.Int32
        return:
          type: System.Int32
      overload: Swigged.LLVM.LLVM.WriteBitcodeToFD*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.WriteBitcodeToFileHandle(Swigged.LLVM.ModuleRef,System.Int32)
      commentId: M:Swigged.LLVM.LLVM.WriteBitcodeToFileHandle(Swigged.LLVM.ModuleRef,System.Int32)
      language: CSharp
      name:
        CSharp: WriteBitcodeToFileHandle(ModuleRef, Int32)
        VB: WriteBitcodeToFileHandle(ModuleRef, Int32)
      nameWithType:
        CSharp: LLVM.WriteBitcodeToFileHandle(ModuleRef, Int32)
        VB: LLVM.WriteBitcodeToFileHandle(ModuleRef, Int32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.WriteBitcodeToFileHandle(Swigged.LLVM.ModuleRef, System.Int32)
        VB: Swigged.LLVM.LLVM.WriteBitcodeToFileHandle(Swigged.LLVM.ModuleRef, System.Int32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: WriteBitcodeToFileHandle
        path: src/swigged.llvm/LLVM.cs
        startLine: 2908
      syntax:
        content:
          CSharp: public static int WriteBitcodeToFileHandle(ModuleRef M, int Handle)
          VB: Public Shared Function WriteBitcodeToFileHandle(M As ModuleRef, Handle As Integer) As Integer
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Handle
          type: System.Int32
        return:
          type: System.Int32
      overload: Swigged.LLVM.LLVM.WriteBitcodeToFileHandle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: WriteBitcodeToMemoryBuffer(ModuleRef)
        VB: WriteBitcodeToMemoryBuffer(ModuleRef)
      nameWithType:
        CSharp: LLVM.WriteBitcodeToMemoryBuffer(ModuleRef)
        VB: LLVM.WriteBitcodeToMemoryBuffer(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: WriteBitcodeToMemoryBuffer
        path: src/swigged.llvm/LLVM.cs
        startLine: 2913
      syntax:
        content:
          CSharp: public static MemoryBufferRef WriteBitcodeToMemoryBuffer(ModuleRef M)
          VB: Public Shared Function WriteBitcodeToMemoryBuffer(M As ModuleRef) As MemoryBufferRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.MemoryBufferRef
      overload: Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetDisasmOptions(System.IntPtr,System.UInt64)
      commentId: M:Swigged.LLVM.LLVM.SetDisasmOptions(System.IntPtr,System.UInt64)
      language: CSharp
      name:
        CSharp: SetDisasmOptions(System.IntPtr, UInt64)
        VB: SetDisasmOptions(System.IntPtr, UInt64)
      nameWithType:
        CSharp: LLVM.SetDisasmOptions(System.IntPtr, UInt64)
        VB: LLVM.SetDisasmOptions(System.IntPtr, UInt64)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetDisasmOptions(System.IntPtr, System.UInt64)
        VB: Swigged.LLVM.LLVM.SetDisasmOptions(System.IntPtr, System.UInt64)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetDisasmOptions
        path: src/swigged.llvm/LLVM.cs
        startLine: 2918
      syntax:
        content:
          CSharp: public static int SetDisasmOptions(System.IntPtr DC, ulong Options)
          VB: Public Shared Function SetDisasmOptions(DC As System.IntPtr, Options As ULong) As Integer
        parameters:
        - id: DC
          type: System.IntPtr
        - id: Options
          type: System.UInt64
        return:
          type: System.Int32
      overload: Swigged.LLVM.LLVM.SetDisasmOptions*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisasmDispose(System.IntPtr)
      commentId: M:Swigged.LLVM.LLVM.DisasmDispose(System.IntPtr)
      language: CSharp
      name:
        CSharp: DisasmDispose(System.IntPtr)
        VB: DisasmDispose(System.IntPtr)
      nameWithType:
        CSharp: LLVM.DisasmDispose(System.IntPtr)
        VB: LLVM.DisasmDispose(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisasmDispose(System.IntPtr)
        VB: Swigged.LLVM.LLVM.DisasmDispose(System.IntPtr)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisasmDispose
        path: src/swigged.llvm/LLVM.cs
        startLine: 2923
      syntax:
        content:
          CSharp: public static void DisasmDispose(System.IntPtr DC)
          VB: Public Shared Sub DisasmDispose(DC As System.IntPtr)
        parameters:
        - id: DC
          type: System.IntPtr
      overload: Swigged.LLVM.LLVM.DisasmDispose*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ResetFatalErrorHandler
      commentId: M:Swigged.LLVM.LLVM.ResetFatalErrorHandler
      language: CSharp
      name:
        CSharp: ResetFatalErrorHandler()
        VB: ResetFatalErrorHandler()
      nameWithType:
        CSharp: LLVM.ResetFatalErrorHandler()
        VB: LLVM.ResetFatalErrorHandler()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ResetFatalErrorHandler()
        VB: Swigged.LLVM.LLVM.ResetFatalErrorHandler()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ResetFatalErrorHandler
        path: src/swigged.llvm/LLVM.cs
        startLine: 2927
      syntax:
        content:
          CSharp: public static void ResetFatalErrorHandler()
          VB: Public Shared Sub ResetFatalErrorHandler
      overload: Swigged.LLVM.LLVM.ResetFatalErrorHandler*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.EnablePrettyStackTrace
      commentId: M:Swigged.LLVM.LLVM.EnablePrettyStackTrace
      language: CSharp
      name:
        CSharp: EnablePrettyStackTrace()
        VB: EnablePrettyStackTrace()
      nameWithType:
        CSharp: LLVM.EnablePrettyStackTrace()
        VB: LLVM.EnablePrettyStackTrace()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.EnablePrettyStackTrace()
        VB: Swigged.LLVM.LLVM.EnablePrettyStackTrace()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: EnablePrettyStackTrace
        path: src/swigged.llvm/LLVM.cs
        startLine: 2931
      syntax:
        content:
          CSharp: public static void EnablePrettyStackTrace()
          VB: Public Shared Sub EnablePrettyStackTrace
      overload: Swigged.LLVM.LLVM.EnablePrettyStackTrace*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.LinkInMCJIT
      commentId: M:Swigged.LLVM.LLVM.LinkInMCJIT
      language: CSharp
      name:
        CSharp: LinkInMCJIT()
        VB: LinkInMCJIT()
      nameWithType:
        CSharp: LLVM.LinkInMCJIT()
        VB: LLVM.LinkInMCJIT()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.LinkInMCJIT()
        VB: Swigged.LLVM.LLVM.LinkInMCJIT()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkInMCJIT
        path: src/swigged.llvm/LLVM.cs
        startLine: 2935
      syntax:
        content:
          CSharp: public static void LinkInMCJIT()
          VB: Public Shared Sub LinkInMCJIT
      overload: Swigged.LLVM.LLVM.LinkInMCJIT*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.LinkInInterpreter
      commentId: M:Swigged.LLVM.LLVM.LinkInInterpreter
      language: CSharp
      name:
        CSharp: LinkInInterpreter()
        VB: LinkInInterpreter()
      nameWithType:
        CSharp: LLVM.LinkInInterpreter()
        VB: LLVM.LinkInInterpreter()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.LinkInInterpreter()
        VB: Swigged.LLVM.LLVM.LinkInInterpreter()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkInInterpreter
        path: src/swigged.llvm/LLVM.cs
        startLine: 2939
      syntax:
        content:
          CSharp: public static void LinkInInterpreter()
          VB: Public Shared Sub LinkInInterpreter
      overload: Swigged.LLVM.LLVM.LinkInInterpreter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateGenericValueOfInt(Swigged.LLVM.TypeRef,System.UInt64,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.CreateGenericValueOfInt(Swigged.LLVM.TypeRef,System.UInt64,System.Boolean)
      language: CSharp
      name:
        CSharp: CreateGenericValueOfInt(TypeRef, UInt64, Boolean)
        VB: CreateGenericValueOfInt(TypeRef, UInt64, Boolean)
      nameWithType:
        CSharp: LLVM.CreateGenericValueOfInt(TypeRef, UInt64, Boolean)
        VB: LLVM.CreateGenericValueOfInt(TypeRef, UInt64, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateGenericValueOfInt(Swigged.LLVM.TypeRef, System.UInt64, System.Boolean)
        VB: Swigged.LLVM.LLVM.CreateGenericValueOfInt(Swigged.LLVM.TypeRef, System.UInt64, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateGenericValueOfInt
        path: src/swigged.llvm/LLVM.cs
        startLine: 2943
      syntax:
        content:
          CSharp: public static GenericValueRef CreateGenericValueOfInt(TypeRef Ty, ulong N, bool IsSigned)
          VB: Public Shared Function CreateGenericValueOfInt(Ty As TypeRef, N As ULong, IsSigned As Boolean) As GenericValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: N
          type: System.UInt64
        - id: IsSigned
          type: System.Boolean
        return:
          type: Swigged.LLVM.GenericValueRef
      overload: Swigged.LLVM.LLVM.CreateGenericValueOfInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateGenericValueOfPointer(System.IntPtr)
      commentId: M:Swigged.LLVM.LLVM.CreateGenericValueOfPointer(System.IntPtr)
      language: CSharp
      name:
        CSharp: CreateGenericValueOfPointer(System.IntPtr)
        VB: CreateGenericValueOfPointer(System.IntPtr)
      nameWithType:
        CSharp: LLVM.CreateGenericValueOfPointer(System.IntPtr)
        VB: LLVM.CreateGenericValueOfPointer(System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateGenericValueOfPointer(System.IntPtr)
        VB: Swigged.LLVM.LLVM.CreateGenericValueOfPointer(System.IntPtr)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateGenericValueOfPointer
        path: src/swigged.llvm/LLVM.cs
        startLine: 2948
      syntax:
        content:
          CSharp: public static GenericValueRef CreateGenericValueOfPointer(System.IntPtr P)
          VB: Public Shared Function CreateGenericValueOfPointer(P As System.IntPtr) As GenericValueRef
        parameters:
        - id: P
          type: System.IntPtr
        return:
          type: Swigged.LLVM.GenericValueRef
      overload: Swigged.LLVM.LLVM.CreateGenericValueOfPointer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateGenericValueOfFloat(Swigged.LLVM.TypeRef,System.Double)
      commentId: M:Swigged.LLVM.LLVM.CreateGenericValueOfFloat(Swigged.LLVM.TypeRef,System.Double)
      language: CSharp
      name:
        CSharp: CreateGenericValueOfFloat(TypeRef, Double)
        VB: CreateGenericValueOfFloat(TypeRef, Double)
      nameWithType:
        CSharp: LLVM.CreateGenericValueOfFloat(TypeRef, Double)
        VB: LLVM.CreateGenericValueOfFloat(TypeRef, Double)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateGenericValueOfFloat(Swigged.LLVM.TypeRef, System.Double)
        VB: Swigged.LLVM.LLVM.CreateGenericValueOfFloat(Swigged.LLVM.TypeRef, System.Double)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateGenericValueOfFloat
        path: src/swigged.llvm/LLVM.cs
        startLine: 2953
      syntax:
        content:
          CSharp: public static GenericValueRef CreateGenericValueOfFloat(TypeRef Ty, double N)
          VB: Public Shared Function CreateGenericValueOfFloat(Ty As TypeRef, N As Double) As GenericValueRef
        parameters:
        - id: Ty
          type: Swigged.LLVM.TypeRef
        - id: N
          type: System.Double
        return:
          type: Swigged.LLVM.GenericValueRef
      overload: Swigged.LLVM.LLVM.CreateGenericValueOfFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GenericValueIntWidth(Swigged.LLVM.GenericValueRef)
      commentId: M:Swigged.LLVM.LLVM.GenericValueIntWidth(Swigged.LLVM.GenericValueRef)
      language: CSharp
      name:
        CSharp: GenericValueIntWidth(GenericValueRef)
        VB: GenericValueIntWidth(GenericValueRef)
      nameWithType:
        CSharp: LLVM.GenericValueIntWidth(GenericValueRef)
        VB: LLVM.GenericValueIntWidth(GenericValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GenericValueIntWidth(Swigged.LLVM.GenericValueRef)
        VB: Swigged.LLVM.LLVM.GenericValueIntWidth(Swigged.LLVM.GenericValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GenericValueIntWidth
        path: src/swigged.llvm/LLVM.cs
        startLine: 2958
      syntax:
        content:
          CSharp: public static uint GenericValueIntWidth(GenericValueRef GenValRef)
          VB: Public Shared Function GenericValueIntWidth(GenValRef As GenericValueRef) As UInteger
        parameters:
        - id: GenValRef
          type: Swigged.LLVM.GenericValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.GenericValueIntWidth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GenericValueToInt(Swigged.LLVM.GenericValueRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.GenericValueToInt(Swigged.LLVM.GenericValueRef,System.Boolean)
      language: CSharp
      name:
        CSharp: GenericValueToInt(GenericValueRef, Boolean)
        VB: GenericValueToInt(GenericValueRef, Boolean)
      nameWithType:
        CSharp: LLVM.GenericValueToInt(GenericValueRef, Boolean)
        VB: LLVM.GenericValueToInt(GenericValueRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GenericValueToInt(Swigged.LLVM.GenericValueRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.GenericValueToInt(Swigged.LLVM.GenericValueRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GenericValueToInt
        path: src/swigged.llvm/LLVM.cs
        startLine: 2963
      syntax:
        content:
          CSharp: public static ulong GenericValueToInt(GenericValueRef GenVal, bool IsSigned)
          VB: Public Shared Function GenericValueToInt(GenVal As GenericValueRef, IsSigned As Boolean) As ULong
        parameters:
        - id: GenVal
          type: Swigged.LLVM.GenericValueRef
        - id: IsSigned
          type: System.Boolean
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.GenericValueToInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GenericValueToPointer(Swigged.LLVM.GenericValueRef)
      commentId: M:Swigged.LLVM.LLVM.GenericValueToPointer(Swigged.LLVM.GenericValueRef)
      language: CSharp
      name:
        CSharp: GenericValueToPointer(GenericValueRef)
        VB: GenericValueToPointer(GenericValueRef)
      nameWithType:
        CSharp: LLVM.GenericValueToPointer(GenericValueRef)
        VB: LLVM.GenericValueToPointer(GenericValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GenericValueToPointer(Swigged.LLVM.GenericValueRef)
        VB: Swigged.LLVM.LLVM.GenericValueToPointer(Swigged.LLVM.GenericValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GenericValueToPointer
        path: src/swigged.llvm/LLVM.cs
        startLine: 2968
      syntax:
        content:
          CSharp: public static System.IntPtr GenericValueToPointer(GenericValueRef GenVal)
          VB: Public Shared Function GenericValueToPointer(GenVal As GenericValueRef) As System.IntPtr
        parameters:
        - id: GenVal
          type: Swigged.LLVM.GenericValueRef
        return:
          type: System.IntPtr
      overload: Swigged.LLVM.LLVM.GenericValueToPointer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GenericValueToFloat(Swigged.LLVM.TypeRef,Swigged.LLVM.GenericValueRef)
      commentId: M:Swigged.LLVM.LLVM.GenericValueToFloat(Swigged.LLVM.TypeRef,Swigged.LLVM.GenericValueRef)
      language: CSharp
      name:
        CSharp: GenericValueToFloat(TypeRef, GenericValueRef)
        VB: GenericValueToFloat(TypeRef, GenericValueRef)
      nameWithType:
        CSharp: LLVM.GenericValueToFloat(TypeRef, GenericValueRef)
        VB: LLVM.GenericValueToFloat(TypeRef, GenericValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GenericValueToFloat(Swigged.LLVM.TypeRef, Swigged.LLVM.GenericValueRef)
        VB: Swigged.LLVM.LLVM.GenericValueToFloat(Swigged.LLVM.TypeRef, Swigged.LLVM.GenericValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GenericValueToFloat
        path: src/swigged.llvm/LLVM.cs
        startLine: 2970
      syntax:
        content:
          CSharp: public static double GenericValueToFloat(TypeRef TyRef, GenericValueRef GenVal)
          VB: Public Shared Function GenericValueToFloat(TyRef As TypeRef, GenVal As GenericValueRef) As Double
        parameters:
        - id: TyRef
          type: Swigged.LLVM.TypeRef
        - id: GenVal
          type: Swigged.LLVM.GenericValueRef
        return:
          type: System.Double
      overload: Swigged.LLVM.LLVM.GenericValueToFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeGenericValue(Swigged.LLVM.GenericValueRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeGenericValue(Swigged.LLVM.GenericValueRef)
      language: CSharp
      name:
        CSharp: DisposeGenericValue(GenericValueRef)
        VB: DisposeGenericValue(GenericValueRef)
      nameWithType:
        CSharp: LLVM.DisposeGenericValue(GenericValueRef)
        VB: LLVM.DisposeGenericValue(GenericValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeGenericValue(Swigged.LLVM.GenericValueRef)
        VB: Swigged.LLVM.LLVM.DisposeGenericValue(Swigged.LLVM.GenericValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeGenericValue
        path: src/swigged.llvm/LLVM.cs
        startLine: 2975
      syntax:
        content:
          CSharp: public static void DisposeGenericValue(GenericValueRef GenVal)
          VB: Public Shared Sub DisposeGenericValue(GenVal As GenericValueRef)
        parameters:
        - id: GenVal
          type: Swigged.LLVM.GenericValueRef
      overload: Swigged.LLVM.LLVM.DisposeGenericValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateExecutionEngineForModule(Swigged.LLVM.ExecutionEngineRef@,Swigged.LLVM.ModuleRef,System.String@)
      commentId: M:Swigged.LLVM.LLVM.CreateExecutionEngineForModule(Swigged.LLVM.ExecutionEngineRef@,Swigged.LLVM.ModuleRef,System.String@)
      language: CSharp
      name:
        CSharp: CreateExecutionEngineForModule(out ExecutionEngineRef, ModuleRef, out String)
        VB: CreateExecutionEngineForModule(ByRef ExecutionEngineRef, ModuleRef, ByRef String)
      nameWithType:
        CSharp: LLVM.CreateExecutionEngineForModule(out ExecutionEngineRef, ModuleRef, out String)
        VB: LLVM.CreateExecutionEngineForModule(ByRef ExecutionEngineRef, ModuleRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateExecutionEngineForModule(out Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, out System.String)
        VB: Swigged.LLVM.LLVM.CreateExecutionEngineForModule(ByRef Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateExecutionEngineForModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 2979
      syntax:
        content:
          CSharp: public static bool CreateExecutionEngineForModule(out ExecutionEngineRef OutEE, ModuleRef M, out string OutError)
          VB: Public Shared Function CreateExecutionEngineForModule(ByRef OutEE As ExecutionEngineRef, M As ModuleRef, ByRef OutError As String) As Boolean
        parameters:
        - id: OutEE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: OutError
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.CreateExecutionEngineForModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateInterpreterForModule(Swigged.LLVM.ExecutionEngineRef@,Swigged.LLVM.ModuleRef,System.String@)
      commentId: M:Swigged.LLVM.LLVM.CreateInterpreterForModule(Swigged.LLVM.ExecutionEngineRef@,Swigged.LLVM.ModuleRef,System.String@)
      language: CSharp
      name:
        CSharp: CreateInterpreterForModule(out ExecutionEngineRef, ModuleRef, out String)
        VB: CreateInterpreterForModule(ByRef ExecutionEngineRef, ModuleRef, ByRef String)
      nameWithType:
        CSharp: LLVM.CreateInterpreterForModule(out ExecutionEngineRef, ModuleRef, out String)
        VB: LLVM.CreateInterpreterForModule(ByRef ExecutionEngineRef, ModuleRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateInterpreterForModule(out Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, out System.String)
        VB: Swigged.LLVM.LLVM.CreateInterpreterForModule(ByRef Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateInterpreterForModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 2984
      syntax:
        content:
          CSharp: public static bool CreateInterpreterForModule(out ExecutionEngineRef OutInterp, ModuleRef M, out string OutError)
          VB: Public Shared Function CreateInterpreterForModule(ByRef OutInterp As ExecutionEngineRef, M As ModuleRef, ByRef OutError As String) As Boolean
        parameters:
        - id: OutInterp
          type: Swigged.LLVM.ExecutionEngineRef
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: OutError
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.CreateInterpreterForModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateJITCompilerForModule(Swigged.LLVM.ExecutionEngineRef@,Swigged.LLVM.ModuleRef,System.UInt32,System.String@)
      commentId: M:Swigged.LLVM.LLVM.CreateJITCompilerForModule(Swigged.LLVM.ExecutionEngineRef@,Swigged.LLVM.ModuleRef,System.UInt32,System.String@)
      language: CSharp
      name:
        CSharp: CreateJITCompilerForModule(out ExecutionEngineRef, ModuleRef, UInt32, out String)
        VB: CreateJITCompilerForModule(ByRef ExecutionEngineRef, ModuleRef, UInt32, ByRef String)
      nameWithType:
        CSharp: LLVM.CreateJITCompilerForModule(out ExecutionEngineRef, ModuleRef, UInt32, out String)
        VB: LLVM.CreateJITCompilerForModule(ByRef ExecutionEngineRef, ModuleRef, UInt32, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateJITCompilerForModule(out Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, System.UInt32, out System.String)
        VB: Swigged.LLVM.LLVM.CreateJITCompilerForModule(ByRef Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, System.UInt32, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateJITCompilerForModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 2989
      syntax:
        content:
          CSharp: public static bool CreateJITCompilerForModule(out ExecutionEngineRef OutJIT, ModuleRef M, uint OptLevel, out string OutError)
          VB: Public Shared Function CreateJITCompilerForModule(ByRef OutJIT As ExecutionEngineRef, M As ModuleRef, OptLevel As UInteger, ByRef OutError As String) As Boolean
        parameters:
        - id: OutJIT
          type: Swigged.LLVM.ExecutionEngineRef
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: OptLevel
          type: System.UInt32
        - id: OutError
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.CreateJITCompilerForModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions(Swigged.LLVM.MCJITCompilerOptions@,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions(Swigged.LLVM.MCJITCompilerOptions@,System.UInt32)
      language: CSharp
      name:
        CSharp: InitializeMCJITCompilerOptions(out MCJITCompilerOptions, UInt32)
        VB: InitializeMCJITCompilerOptions(ByRef MCJITCompilerOptions, UInt32)
      nameWithType:
        CSharp: LLVM.InitializeMCJITCompilerOptions(out MCJITCompilerOptions, UInt32)
        VB: LLVM.InitializeMCJITCompilerOptions(ByRef MCJITCompilerOptions, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions(out Swigged.LLVM.MCJITCompilerOptions, System.UInt32)
        VB: Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions(ByRef Swigged.LLVM.MCJITCompilerOptions, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeMCJITCompilerOptions
        path: src/swigged.llvm/LLVM.cs
        startLine: 2994
      syntax:
        content:
          CSharp: public static void InitializeMCJITCompilerOptions(out MCJITCompilerOptions Options, uint SizeOfOptions)
          VB: Public Shared Sub InitializeMCJITCompilerOptions(ByRef Options As MCJITCompilerOptions, SizeOfOptions As UInteger)
        parameters:
        - id: Options
          type: Swigged.LLVM.MCJITCompilerOptions
        - id: SizeOfOptions
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateMCJITCompilerForModule(Swigged.LLVM.ExecutionEngineRef@,Swigged.LLVM.ModuleRef,Swigged.LLVM.MCJITCompilerOptions@,System.UInt32,System.String@)
      commentId: M:Swigged.LLVM.LLVM.CreateMCJITCompilerForModule(Swigged.LLVM.ExecutionEngineRef@,Swigged.LLVM.ModuleRef,Swigged.LLVM.MCJITCompilerOptions@,System.UInt32,System.String@)
      language: CSharp
      name:
        CSharp: CreateMCJITCompilerForModule(out ExecutionEngineRef, ModuleRef, out MCJITCompilerOptions, UInt32, out String)
        VB: CreateMCJITCompilerForModule(ByRef ExecutionEngineRef, ModuleRef, ByRef MCJITCompilerOptions, UInt32, ByRef String)
      nameWithType:
        CSharp: LLVM.CreateMCJITCompilerForModule(out ExecutionEngineRef, ModuleRef, out MCJITCompilerOptions, UInt32, out String)
        VB: LLVM.CreateMCJITCompilerForModule(ByRef ExecutionEngineRef, ModuleRef, ByRef MCJITCompilerOptions, UInt32, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateMCJITCompilerForModule(out Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, out Swigged.LLVM.MCJITCompilerOptions, System.UInt32, out System.String)
        VB: Swigged.LLVM.LLVM.CreateMCJITCompilerForModule(ByRef Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, ByRef Swigged.LLVM.MCJITCompilerOptions, System.UInt32, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateMCJITCompilerForModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 2998
      syntax:
        content:
          CSharp: public static bool CreateMCJITCompilerForModule(out ExecutionEngineRef OutJIT, ModuleRef M, out MCJITCompilerOptions Options, uint SizeOfOptions, out string OutError)
          VB: Public Shared Function CreateMCJITCompilerForModule(ByRef OutJIT As ExecutionEngineRef, M As ModuleRef, ByRef Options As MCJITCompilerOptions, SizeOfOptions As UInteger, ByRef OutError As String) As Boolean
        parameters:
        - id: OutJIT
          type: Swigged.LLVM.ExecutionEngineRef
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Options
          type: Swigged.LLVM.MCJITCompilerOptions
        - id: SizeOfOptions
          type: System.UInt32
        - id: OutError
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.CreateMCJITCompilerForModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeExecutionEngine(Swigged.LLVM.ExecutionEngineRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeExecutionEngine(Swigged.LLVM.ExecutionEngineRef)
      language: CSharp
      name:
        CSharp: DisposeExecutionEngine(ExecutionEngineRef)
        VB: DisposeExecutionEngine(ExecutionEngineRef)
      nameWithType:
        CSharp: LLVM.DisposeExecutionEngine(ExecutionEngineRef)
        VB: LLVM.DisposeExecutionEngine(ExecutionEngineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeExecutionEngine(Swigged.LLVM.ExecutionEngineRef)
        VB: Swigged.LLVM.LLVM.DisposeExecutionEngine(Swigged.LLVM.ExecutionEngineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeExecutionEngine
        path: src/swigged.llvm/LLVM.cs
        startLine: 3003
      syntax:
        content:
          CSharp: public static void DisposeExecutionEngine(ExecutionEngineRef EE)
          VB: Public Shared Sub DisposeExecutionEngine(EE As ExecutionEngineRef)
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
      overload: Swigged.LLVM.LLVM.DisposeExecutionEngine*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RunStaticConstructors(Swigged.LLVM.ExecutionEngineRef)
      commentId: M:Swigged.LLVM.LLVM.RunStaticConstructors(Swigged.LLVM.ExecutionEngineRef)
      language: CSharp
      name:
        CSharp: RunStaticConstructors(ExecutionEngineRef)
        VB: RunStaticConstructors(ExecutionEngineRef)
      nameWithType:
        CSharp: LLVM.RunStaticConstructors(ExecutionEngineRef)
        VB: LLVM.RunStaticConstructors(ExecutionEngineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RunStaticConstructors(Swigged.LLVM.ExecutionEngineRef)
        VB: Swigged.LLVM.LLVM.RunStaticConstructors(Swigged.LLVM.ExecutionEngineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RunStaticConstructors
        path: src/swigged.llvm/LLVM.cs
        startLine: 3007
      syntax:
        content:
          CSharp: public static void RunStaticConstructors(ExecutionEngineRef EE)
          VB: Public Shared Sub RunStaticConstructors(EE As ExecutionEngineRef)
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
      overload: Swigged.LLVM.LLVM.RunStaticConstructors*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RunStaticDestructors(Swigged.LLVM.ExecutionEngineRef)
      commentId: M:Swigged.LLVM.LLVM.RunStaticDestructors(Swigged.LLVM.ExecutionEngineRef)
      language: CSharp
      name:
        CSharp: RunStaticDestructors(ExecutionEngineRef)
        VB: RunStaticDestructors(ExecutionEngineRef)
      nameWithType:
        CSharp: LLVM.RunStaticDestructors(ExecutionEngineRef)
        VB: LLVM.RunStaticDestructors(ExecutionEngineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RunStaticDestructors(Swigged.LLVM.ExecutionEngineRef)
        VB: Swigged.LLVM.LLVM.RunStaticDestructors(Swigged.LLVM.ExecutionEngineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RunStaticDestructors
        path: src/swigged.llvm/LLVM.cs
        startLine: 3011
      syntax:
        content:
          CSharp: public static void RunStaticDestructors(ExecutionEngineRef EE)
          VB: Public Shared Sub RunStaticDestructors(EE As ExecutionEngineRef)
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
      overload: Swigged.LLVM.LLVM.RunStaticDestructors*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RunFunctionAsMain(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef,System.UInt32,System.String@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.RunFunctionAsMain(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef,System.UInt32,System.String@,System.String@)
      language: CSharp
      name:
        CSharp: RunFunctionAsMain(ExecutionEngineRef, ValueRef, UInt32, out String, out String)
        VB: RunFunctionAsMain(ExecutionEngineRef, ValueRef, UInt32, ByRef String, ByRef String)
      nameWithType:
        CSharp: LLVM.RunFunctionAsMain(ExecutionEngineRef, ValueRef, UInt32, out String, out String)
        VB: LLVM.RunFunctionAsMain(ExecutionEngineRef, ValueRef, UInt32, ByRef String, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RunFunctionAsMain(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef, System.UInt32, out System.String, out System.String)
        VB: Swigged.LLVM.LLVM.RunFunctionAsMain(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef, System.UInt32, ByRef System.String, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RunFunctionAsMain
        path: src/swigged.llvm/LLVM.cs
        startLine: 3015
      syntax:
        content:
          CSharp: public static int RunFunctionAsMain(ExecutionEngineRef EE, ValueRef F, uint ArgC, out string ArgV, out string EnvP)
          VB: Public Shared Function RunFunctionAsMain(EE As ExecutionEngineRef, F As ValueRef, ArgC As UInteger, ByRef ArgV As String, ByRef EnvP As String) As Integer
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: ArgC
          type: System.UInt32
        - id: ArgV
          type: System.String
        - id: EnvP
          type: System.String
        return:
          type: System.Int32
      overload: Swigged.LLVM.LLVM.RunFunctionAsMain*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RunFunction(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.GenericValueRef@)
      commentId: M:Swigged.LLVM.LLVM.RunFunction(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef,System.UInt32,Swigged.LLVM.GenericValueRef@)
      language: CSharp
      name:
        CSharp: RunFunction(ExecutionEngineRef, ValueRef, UInt32, out GenericValueRef)
        VB: RunFunction(ExecutionEngineRef, ValueRef, UInt32, ByRef GenericValueRef)
      nameWithType:
        CSharp: LLVM.RunFunction(ExecutionEngineRef, ValueRef, UInt32, out GenericValueRef)
        VB: LLVM.RunFunction(ExecutionEngineRef, ValueRef, UInt32, ByRef GenericValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RunFunction(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef, System.UInt32, out Swigged.LLVM.GenericValueRef)
        VB: Swigged.LLVM.LLVM.RunFunction(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef, System.UInt32, ByRef Swigged.LLVM.GenericValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RunFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 3020
      syntax:
        content:
          CSharp: public static GenericValueRef RunFunction(ExecutionEngineRef EE, ValueRef F, uint NumArgs, out GenericValueRef Args)
          VB: Public Shared Function RunFunction(EE As ExecutionEngineRef, F As ValueRef, NumArgs As UInteger, ByRef Args As GenericValueRef) As GenericValueRef
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: F
          type: Swigged.LLVM.ValueRef
        - id: NumArgs
          type: System.UInt32
        - id: Args
          type: Swigged.LLVM.GenericValueRef
        return:
          type: Swigged.LLVM.GenericValueRef
      overload: Swigged.LLVM.LLVM.RunFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.FreeMachineCodeForFunction(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.FreeMachineCodeForFunction(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: FreeMachineCodeForFunction(ExecutionEngineRef, ValueRef)
        VB: FreeMachineCodeForFunction(ExecutionEngineRef, ValueRef)
      nameWithType:
        CSharp: LLVM.FreeMachineCodeForFunction(ExecutionEngineRef, ValueRef)
        VB: LLVM.FreeMachineCodeForFunction(ExecutionEngineRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.FreeMachineCodeForFunction(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.FreeMachineCodeForFunction(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FreeMachineCodeForFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 3025
      syntax:
        content:
          CSharp: public static void FreeMachineCodeForFunction(ExecutionEngineRef EE, ValueRef F)
          VB: Public Shared Sub FreeMachineCodeForFunction(EE As ExecutionEngineRef, F As ValueRef)
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: F
          type: Swigged.LLVM.ValueRef
      overload: Swigged.LLVM.LLVM.FreeMachineCodeForFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddModule(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.AddModule(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: AddModule(ExecutionEngineRef, ModuleRef)
        VB: AddModule(ExecutionEngineRef, ModuleRef)
      nameWithType:
        CSharp: LLVM.AddModule(ExecutionEngineRef, ModuleRef)
        VB: LLVM.AddModule(ExecutionEngineRef, ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddModule(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.AddModule(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 3029
      syntax:
        content:
          CSharp: public static void AddModule(ExecutionEngineRef EE, ModuleRef M)
          VB: Public Shared Sub AddModule(EE As ExecutionEngineRef, M As ModuleRef)
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: M
          type: Swigged.LLVM.ModuleRef
      overload: Swigged.LLVM.LLVM.AddModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RemoveModule(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ModuleRef,Swigged.LLVM.ModuleRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.RemoveModule(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ModuleRef,Swigged.LLVM.ModuleRef@,System.String@)
      language: CSharp
      name:
        CSharp: RemoveModule(ExecutionEngineRef, ModuleRef, out ModuleRef, out String)
        VB: RemoveModule(ExecutionEngineRef, ModuleRef, ByRef ModuleRef, ByRef String)
      nameWithType:
        CSharp: LLVM.RemoveModule(ExecutionEngineRef, ModuleRef, out ModuleRef, out String)
        VB: LLVM.RemoveModule(ExecutionEngineRef, ModuleRef, ByRef ModuleRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RemoveModule(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, out Swigged.LLVM.ModuleRef, out System.String)
        VB: Swigged.LLVM.LLVM.RemoveModule(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ModuleRef, ByRef Swigged.LLVM.ModuleRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RemoveModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 3033
      syntax:
        content:
          CSharp: public static bool RemoveModule(ExecutionEngineRef EE, ModuleRef M, out ModuleRef OutMod, out string OutError)
          VB: Public Shared Function RemoveModule(EE As ExecutionEngineRef, M As ModuleRef, ByRef OutMod As ModuleRef, ByRef OutError As String) As Boolean
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: OutMod
          type: Swigged.LLVM.ModuleRef
        - id: OutError
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.RemoveModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.FindFunction(Swigged.LLVM.ExecutionEngineRef,System.String,Swigged.LLVM.ValueRef@)
      commentId: M:Swigged.LLVM.LLVM.FindFunction(Swigged.LLVM.ExecutionEngineRef,System.String,Swigged.LLVM.ValueRef@)
      language: CSharp
      name:
        CSharp: FindFunction(ExecutionEngineRef, String, out ValueRef)
        VB: FindFunction(ExecutionEngineRef, String, ByRef ValueRef)
      nameWithType:
        CSharp: LLVM.FindFunction(ExecutionEngineRef, String, out ValueRef)
        VB: LLVM.FindFunction(ExecutionEngineRef, String, ByRef ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.FindFunction(Swigged.LLVM.ExecutionEngineRef, System.String, out Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.FindFunction(Swigged.LLVM.ExecutionEngineRef, System.String, ByRef Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: FindFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 3038
      syntax:
        content:
          CSharp: public static bool FindFunction(ExecutionEngineRef EE, string Name, out ValueRef OutFn)
          VB: Public Shared Function FindFunction(EE As ExecutionEngineRef, Name As String, ByRef OutFn As ValueRef) As Boolean
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: Name
          type: System.String
        - id: OutFn
          type: Swigged.LLVM.ValueRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.FindFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.RecompileAndRelinkFunction(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.RecompileAndRelinkFunction(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: RecompileAndRelinkFunction(ExecutionEngineRef, ValueRef)
        VB: RecompileAndRelinkFunction(ExecutionEngineRef, ValueRef)
      nameWithType:
        CSharp: LLVM.RecompileAndRelinkFunction(ExecutionEngineRef, ValueRef)
        VB: LLVM.RecompileAndRelinkFunction(ExecutionEngineRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.RecompileAndRelinkFunction(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.RecompileAndRelinkFunction(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: RecompileAndRelinkFunction
        path: src/swigged.llvm/LLVM.cs
        startLine: 3043
      syntax:
        content:
          CSharp: public static System.IntPtr RecompileAndRelinkFunction(ExecutionEngineRef EE, ValueRef Fn)
          VB: Public Shared Function RecompileAndRelinkFunction(EE As ExecutionEngineRef, Fn As ValueRef) As System.IntPtr
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: Fn
          type: Swigged.LLVM.ValueRef
        return:
          type: System.IntPtr
      overload: Swigged.LLVM.LLVM.RecompileAndRelinkFunction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetExecutionEngineTargetData(Swigged.LLVM.ExecutionEngineRef)
      commentId: M:Swigged.LLVM.LLVM.GetExecutionEngineTargetData(Swigged.LLVM.ExecutionEngineRef)
      language: CSharp
      name:
        CSharp: GetExecutionEngineTargetData(ExecutionEngineRef)
        VB: GetExecutionEngineTargetData(ExecutionEngineRef)
      nameWithType:
        CSharp: LLVM.GetExecutionEngineTargetData(ExecutionEngineRef)
        VB: LLVM.GetExecutionEngineTargetData(ExecutionEngineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetExecutionEngineTargetData(Swigged.LLVM.ExecutionEngineRef)
        VB: Swigged.LLVM.LLVM.GetExecutionEngineTargetData(Swigged.LLVM.ExecutionEngineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetExecutionEngineTargetData
        path: src/swigged.llvm/LLVM.cs
        startLine: 3045
      syntax:
        content:
          CSharp: public static TargetDataRef GetExecutionEngineTargetData(ExecutionEngineRef EE)
          VB: Public Shared Function GetExecutionEngineTargetData(EE As ExecutionEngineRef) As TargetDataRef
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        return:
          type: Swigged.LLVM.TargetDataRef
      overload: Swigged.LLVM.LLVM.GetExecutionEngineTargetData*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine(Swigged.LLVM.ExecutionEngineRef)
      commentId: M:Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine(Swigged.LLVM.ExecutionEngineRef)
      language: CSharp
      name:
        CSharp: GetExecutionEngineTargetMachine(ExecutionEngineRef)
        VB: GetExecutionEngineTargetMachine(ExecutionEngineRef)
      nameWithType:
        CSharp: LLVM.GetExecutionEngineTargetMachine(ExecutionEngineRef)
        VB: LLVM.GetExecutionEngineTargetMachine(ExecutionEngineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine(Swigged.LLVM.ExecutionEngineRef)
        VB: Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine(Swigged.LLVM.ExecutionEngineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetExecutionEngineTargetMachine
        path: src/swigged.llvm/LLVM.cs
        startLine: 3050
      syntax:
        content:
          CSharp: public static TargetMachineRef GetExecutionEngineTargetMachine(ExecutionEngineRef EE)
          VB: Public Shared Function GetExecutionEngineTargetMachine(EE As ExecutionEngineRef) As TargetMachineRef
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        return:
          type: Swigged.LLVM.TargetMachineRef
      overload: Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddGlobalMapping(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef,System.IntPtr)
      commentId: M:Swigged.LLVM.LLVM.AddGlobalMapping(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef,System.IntPtr)
      language: CSharp
      name:
        CSharp: AddGlobalMapping(ExecutionEngineRef, ValueRef, System.IntPtr)
        VB: AddGlobalMapping(ExecutionEngineRef, ValueRef, System.IntPtr)
      nameWithType:
        CSharp: LLVM.AddGlobalMapping(ExecutionEngineRef, ValueRef, System.IntPtr)
        VB: LLVM.AddGlobalMapping(ExecutionEngineRef, ValueRef, System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddGlobalMapping(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef, System.IntPtr)
        VB: Swigged.LLVM.LLVM.AddGlobalMapping(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef, System.IntPtr)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddGlobalMapping
        path: src/swigged.llvm/LLVM.cs
        startLine: 3055
      syntax:
        content:
          CSharp: public static void AddGlobalMapping(ExecutionEngineRef EE, ValueRef Global, System.IntPtr Addr)
          VB: Public Shared Sub AddGlobalMapping(EE As ExecutionEngineRef, Global As ValueRef, Addr As System.IntPtr)
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: Global
          type: Swigged.LLVM.ValueRef
        - id: Addr
          type: System.IntPtr
      overload: Swigged.LLVM.LLVM.AddGlobalMapping*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetPointerToGlobal(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.GetPointerToGlobal(Swigged.LLVM.ExecutionEngineRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: GetPointerToGlobal(ExecutionEngineRef, ValueRef)
        VB: GetPointerToGlobal(ExecutionEngineRef, ValueRef)
      nameWithType:
        CSharp: LLVM.GetPointerToGlobal(ExecutionEngineRef, ValueRef)
        VB: LLVM.GetPointerToGlobal(ExecutionEngineRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetPointerToGlobal(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.GetPointerToGlobal(Swigged.LLVM.ExecutionEngineRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetPointerToGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 3059
      syntax:
        content:
          CSharp: public static System.IntPtr GetPointerToGlobal(ExecutionEngineRef EE, ValueRef Global)
          VB: Public Shared Function GetPointerToGlobal(EE As ExecutionEngineRef, Global As ValueRef) As System.IntPtr
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: Global
          type: Swigged.LLVM.ValueRef
        return:
          type: System.IntPtr
      overload: Swigged.LLVM.LLVM.GetPointerToGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetGlobalValueAddress(Swigged.LLVM.ExecutionEngineRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.GetGlobalValueAddress(Swigged.LLVM.ExecutionEngineRef,System.String)
      language: CSharp
      name:
        CSharp: GetGlobalValueAddress(ExecutionEngineRef, String)
        VB: GetGlobalValueAddress(ExecutionEngineRef, String)
      nameWithType:
        CSharp: LLVM.GetGlobalValueAddress(ExecutionEngineRef, String)
        VB: LLVM.GetGlobalValueAddress(ExecutionEngineRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetGlobalValueAddress(Swigged.LLVM.ExecutionEngineRef, System.String)
        VB: Swigged.LLVM.LLVM.GetGlobalValueAddress(Swigged.LLVM.ExecutionEngineRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetGlobalValueAddress
        path: src/swigged.llvm/LLVM.cs
        startLine: 3061
      syntax:
        content:
          CSharp: public static ulong GetGlobalValueAddress(ExecutionEngineRef EE, string Name)
          VB: Public Shared Function GetGlobalValueAddress(EE As ExecutionEngineRef, Name As String) As ULong
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: Name
          type: System.String
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.GetGlobalValueAddress*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFunctionAddress(Swigged.LLVM.ExecutionEngineRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.GetFunctionAddress(Swigged.LLVM.ExecutionEngineRef,System.String)
      language: CSharp
      name:
        CSharp: GetFunctionAddress(ExecutionEngineRef, String)
        VB: GetFunctionAddress(ExecutionEngineRef, String)
      nameWithType:
        CSharp: LLVM.GetFunctionAddress(ExecutionEngineRef, String)
        VB: LLVM.GetFunctionAddress(ExecutionEngineRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFunctionAddress(Swigged.LLVM.ExecutionEngineRef, System.String)
        VB: Swigged.LLVM.LLVM.GetFunctionAddress(Swigged.LLVM.ExecutionEngineRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFunctionAddress
        path: src/swigged.llvm/LLVM.cs
        startLine: 3066
      syntax:
        content:
          CSharp: public static ulong GetFunctionAddress(ExecutionEngineRef EE, string Name)
          VB: Public Shared Function GetFunctionAddress(EE As ExecutionEngineRef, Name As String) As ULong
        parameters:
        - id: EE
          type: Swigged.LLVM.ExecutionEngineRef
        - id: Name
          type: System.String
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.GetFunctionAddress*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeMCJITMemoryManager(Swigged.LLVM.MCJITMemoryManagerRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeMCJITMemoryManager(Swigged.LLVM.MCJITMemoryManagerRef)
      language: CSharp
      name:
        CSharp: DisposeMCJITMemoryManager(MCJITMemoryManagerRef)
        VB: DisposeMCJITMemoryManager(MCJITMemoryManagerRef)
      nameWithType:
        CSharp: LLVM.DisposeMCJITMemoryManager(MCJITMemoryManagerRef)
        VB: LLVM.DisposeMCJITMemoryManager(MCJITMemoryManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeMCJITMemoryManager(Swigged.LLVM.MCJITMemoryManagerRef)
        VB: Swigged.LLVM.LLVM.DisposeMCJITMemoryManager(Swigged.LLVM.MCJITMemoryManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeMCJITMemoryManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 3071
      syntax:
        content:
          CSharp: public static void DisposeMCJITMemoryManager(MCJITMemoryManagerRef MM)
          VB: Public Shared Sub DisposeMCJITMemoryManager(MM As MCJITMemoryManagerRef)
        parameters:
        - id: MM
          type: Swigged.LLVM.MCJITMemoryManagerRef
      overload: Swigged.LLVM.LLVM.DisposeMCJITMemoryManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeTransformUtils(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeTransformUtils(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeTransformUtils(PassRegistryRef)
        VB: InitializeTransformUtils(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeTransformUtils(PassRegistryRef)
        VB: LLVM.InitializeTransformUtils(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeTransformUtils(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeTransformUtils(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeTransformUtils
        path: src/swigged.llvm/LLVM.cs
        startLine: 3075
      syntax:
        content:
          CSharp: public static void InitializeTransformUtils(PassRegistryRef R)
          VB: Public Shared Sub InitializeTransformUtils(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeTransformUtils*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeScalarOpts(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeScalarOpts(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeScalarOpts(PassRegistryRef)
        VB: InitializeScalarOpts(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeScalarOpts(PassRegistryRef)
        VB: LLVM.InitializeScalarOpts(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeScalarOpts(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeScalarOpts(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeScalarOpts
        path: src/swigged.llvm/LLVM.cs
        startLine: 3079
      syntax:
        content:
          CSharp: public static void InitializeScalarOpts(PassRegistryRef R)
          VB: Public Shared Sub InitializeScalarOpts(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeScalarOpts*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeObjCARCOpts(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeObjCARCOpts(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeObjCARCOpts(PassRegistryRef)
        VB: InitializeObjCARCOpts(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeObjCARCOpts(PassRegistryRef)
        VB: LLVM.InitializeObjCARCOpts(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeObjCARCOpts(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeObjCARCOpts(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeObjCARCOpts
        path: src/swigged.llvm/LLVM.cs
        startLine: 3083
      syntax:
        content:
          CSharp: public static void InitializeObjCARCOpts(PassRegistryRef R)
          VB: Public Shared Sub InitializeObjCARCOpts(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeObjCARCOpts*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeVectorization(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeVectorization(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeVectorization(PassRegistryRef)
        VB: InitializeVectorization(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeVectorization(PassRegistryRef)
        VB: LLVM.InitializeVectorization(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeVectorization(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeVectorization(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeVectorization
        path: src/swigged.llvm/LLVM.cs
        startLine: 3087
      syntax:
        content:
          CSharp: public static void InitializeVectorization(PassRegistryRef R)
          VB: Public Shared Sub InitializeVectorization(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeVectorization*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeInstCombine(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeInstCombine(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeInstCombine(PassRegistryRef)
        VB: InitializeInstCombine(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeInstCombine(PassRegistryRef)
        VB: LLVM.InitializeInstCombine(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeInstCombine(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeInstCombine(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeInstCombine
        path: src/swigged.llvm/LLVM.cs
        startLine: 3091
      syntax:
        content:
          CSharp: public static void InitializeInstCombine(PassRegistryRef R)
          VB: Public Shared Sub InitializeInstCombine(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeInstCombine*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeIPO(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeIPO(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeIPO(PassRegistryRef)
        VB: InitializeIPO(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeIPO(PassRegistryRef)
        VB: LLVM.InitializeIPO(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeIPO(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeIPO(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeIPO
        path: src/swigged.llvm/LLVM.cs
        startLine: 3095
      syntax:
        content:
          CSharp: public static void InitializeIPO(PassRegistryRef R)
          VB: Public Shared Sub InitializeIPO(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeIPO*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeInstrumentation(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeInstrumentation(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeInstrumentation(PassRegistryRef)
        VB: InitializeInstrumentation(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeInstrumentation(PassRegistryRef)
        VB: LLVM.InitializeInstrumentation(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeInstrumentation(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeInstrumentation(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeInstrumentation
        path: src/swigged.llvm/LLVM.cs
        startLine: 3099
      syntax:
        content:
          CSharp: public static void InitializeInstrumentation(PassRegistryRef R)
          VB: Public Shared Sub InitializeInstrumentation(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeInstrumentation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeAnalysis(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeAnalysis(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeAnalysis(PassRegistryRef)
        VB: InitializeAnalysis(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeAnalysis(PassRegistryRef)
        VB: LLVM.InitializeAnalysis(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeAnalysis(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeAnalysis(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeAnalysis
        path: src/swigged.llvm/LLVM.cs
        startLine: 3103
      syntax:
        content:
          CSharp: public static void InitializeAnalysis(PassRegistryRef R)
          VB: Public Shared Sub InitializeAnalysis(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeAnalysis*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeIPA(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeIPA(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeIPA(PassRegistryRef)
        VB: InitializeIPA(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeIPA(PassRegistryRef)
        VB: LLVM.InitializeIPA(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeIPA(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeIPA(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeIPA
        path: src/swigged.llvm/LLVM.cs
        startLine: 3107
      syntax:
        content:
          CSharp: public static void InitializeIPA(PassRegistryRef R)
          VB: Public Shared Sub InitializeIPA(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeIPA*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeCodeGen(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeCodeGen(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeCodeGen(PassRegistryRef)
        VB: InitializeCodeGen(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeCodeGen(PassRegistryRef)
        VB: LLVM.InitializeCodeGen(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeCodeGen(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeCodeGen(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeCodeGen
        path: src/swigged.llvm/LLVM.cs
        startLine: 3111
      syntax:
        content:
          CSharp: public static void InitializeCodeGen(PassRegistryRef R)
          VB: Public Shared Sub InitializeCodeGen(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeCodeGen*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeTarget(Swigged.LLVM.PassRegistryRef)
      commentId: M:Swigged.LLVM.LLVM.InitializeTarget(Swigged.LLVM.PassRegistryRef)
      language: CSharp
      name:
        CSharp: InitializeTarget(PassRegistryRef)
        VB: InitializeTarget(PassRegistryRef)
      nameWithType:
        CSharp: LLVM.InitializeTarget(PassRegistryRef)
        VB: LLVM.InitializeTarget(PassRegistryRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeTarget(Swigged.LLVM.PassRegistryRef)
        VB: Swigged.LLVM.LLVM.InitializeTarget(Swigged.LLVM.PassRegistryRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeTarget
        path: src/swigged.llvm/LLVM.cs
        startLine: 3115
      syntax:
        content:
          CSharp: public static void InitializeTarget(PassRegistryRef R)
          VB: Public Shared Sub InitializeTarget(R As PassRegistryRef)
        parameters:
        - id: R
          type: Swigged.LLVM.PassRegistryRef
      overload: Swigged.LLVM.LLVM.InitializeTarget*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ParseIRInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.ParseIRInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.MemoryBufferRef,Swigged.LLVM.ModuleRef@,System.String@)
      language: CSharp
      name:
        CSharp: ParseIRInContext(ContextRef, MemoryBufferRef, out ModuleRef, out String)
        VB: ParseIRInContext(ContextRef, MemoryBufferRef, ByRef ModuleRef, ByRef String)
      nameWithType:
        CSharp: LLVM.ParseIRInContext(ContextRef, MemoryBufferRef, out ModuleRef, out String)
        VB: LLVM.ParseIRInContext(ContextRef, MemoryBufferRef, ByRef ModuleRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ParseIRInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, out Swigged.LLVM.ModuleRef, out System.String)
        VB: Swigged.LLVM.LLVM.ParseIRInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.MemoryBufferRef, ByRef Swigged.LLVM.ModuleRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ParseIRInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 3119
      syntax:
        content:
          CSharp: public static bool ParseIRInContext(ContextRef ContextRef, MemoryBufferRef MemBuf, out ModuleRef OutM, out string OutMessage)
          VB: Public Shared Function ParseIRInContext(ContextRef As ContextRef, MemBuf As MemoryBufferRef, ByRef OutM As ModuleRef, ByRef OutMessage As String) As Boolean
        parameters:
        - id: ContextRef
          type: Swigged.LLVM.ContextRef
        - id: MemBuf
          type: Swigged.LLVM.MemoryBufferRef
        - id: OutM
          type: Swigged.LLVM.ModuleRef
        - id: OutMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.ParseIRInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.LinkModules2(Swigged.LLVM.ModuleRef,Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.LinkModules2(Swigged.LLVM.ModuleRef,Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: LinkModules2(ModuleRef, ModuleRef)
        VB: LinkModules2(ModuleRef, ModuleRef)
      nameWithType:
        CSharp: LLVM.LinkModules2(ModuleRef, ModuleRef)
        VB: LLVM.LinkModules2(ModuleRef, ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.LinkModules2(Swigged.LLVM.ModuleRef, Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.LinkModules2(Swigged.LLVM.ModuleRef, Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LinkModules2
        path: src/swigged.llvm/LLVM.cs
        startLine: 3124
      syntax:
        content:
          CSharp: public static bool LinkModules2(ModuleRef Dest, ModuleRef Src)
          VB: Public Shared Function LinkModules2(Dest As ModuleRef, Src As ModuleRef) As Boolean
        parameters:
        - id: Dest
          type: Swigged.LLVM.ModuleRef
        - id: Src
          type: Swigged.LLVM.ModuleRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.LinkModules2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcCreateInstance(Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.LLVM.OrcCreateInstance(Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: OrcCreateInstance(TargetMachineRef)
        VB: OrcCreateInstance(TargetMachineRef)
      nameWithType:
        CSharp: LLVM.OrcCreateInstance(TargetMachineRef)
        VB: LLVM.OrcCreateInstance(TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcCreateInstance(Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.LLVM.OrcCreateInstance(Swigged.LLVM.TargetMachineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcCreateInstance
        path: src/swigged.llvm/LLVM.cs
        startLine: 3129
      syntax:
        content:
          CSharp: public static OrcJITStackRef OrcCreateInstance(TargetMachineRef TM)
          VB: Public Shared Function OrcCreateInstance(TM As TargetMachineRef) As OrcJITStackRef
        parameters:
        - id: TM
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: Swigged.LLVM.OrcJITStackRef
      overload: Swigged.LLVM.LLVM.OrcCreateInstance*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcGetErrorMsg(Swigged.LLVM.OrcJITStackRef)
      commentId: M:Swigged.LLVM.LLVM.OrcGetErrorMsg(Swigged.LLVM.OrcJITStackRef)
      language: CSharp
      name:
        CSharp: OrcGetErrorMsg(OrcJITStackRef)
        VB: OrcGetErrorMsg(OrcJITStackRef)
      nameWithType:
        CSharp: LLVM.OrcGetErrorMsg(OrcJITStackRef)
        VB: LLVM.OrcGetErrorMsg(OrcJITStackRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcGetErrorMsg(Swigged.LLVM.OrcJITStackRef)
        VB: Swigged.LLVM.LLVM.OrcGetErrorMsg(Swigged.LLVM.OrcJITStackRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcGetErrorMsg
        path: src/swigged.llvm/LLVM.cs
        startLine: 3134
      syntax:
        content:
          CSharp: public static string OrcGetErrorMsg(OrcJITStackRef JITStack)
          VB: Public Shared Function OrcGetErrorMsg(JITStack As OrcJITStackRef) As String
        parameters:
        - id: JITStack
          type: Swigged.LLVM.OrcJITStackRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.OrcGetErrorMsg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcGetMangledSymbol(Swigged.LLVM.OrcJITStackRef,System.String@,System.String)
      commentId: M:Swigged.LLVM.LLVM.OrcGetMangledSymbol(Swigged.LLVM.OrcJITStackRef,System.String@,System.String)
      language: CSharp
      name:
        CSharp: OrcGetMangledSymbol(OrcJITStackRef, out String, String)
        VB: OrcGetMangledSymbol(OrcJITStackRef, ByRef String, String)
      nameWithType:
        CSharp: LLVM.OrcGetMangledSymbol(OrcJITStackRef, out String, String)
        VB: LLVM.OrcGetMangledSymbol(OrcJITStackRef, ByRef String, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcGetMangledSymbol(Swigged.LLVM.OrcJITStackRef, out System.String, System.String)
        VB: Swigged.LLVM.LLVM.OrcGetMangledSymbol(Swigged.LLVM.OrcJITStackRef, ByRef System.String, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcGetMangledSymbol
        path: src/swigged.llvm/LLVM.cs
        startLine: 3139
      syntax:
        content:
          CSharp: public static void OrcGetMangledSymbol(OrcJITStackRef JITStack, out string MangledSymbol, string Symbol)
          VB: Public Shared Sub OrcGetMangledSymbol(JITStack As OrcJITStackRef, ByRef MangledSymbol As String, Symbol As String)
        parameters:
        - id: JITStack
          type: Swigged.LLVM.OrcJITStackRef
        - id: MangledSymbol
          type: System.String
        - id: Symbol
          type: System.String
      overload: Swigged.LLVM.LLVM.OrcGetMangledSymbol*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcDisposeMangledSymbol(System.String)
      commentId: M:Swigged.LLVM.LLVM.OrcDisposeMangledSymbol(System.String)
      language: CSharp
      name:
        CSharp: OrcDisposeMangledSymbol(String)
        VB: OrcDisposeMangledSymbol(String)
      nameWithType:
        CSharp: LLVM.OrcDisposeMangledSymbol(String)
        VB: LLVM.OrcDisposeMangledSymbol(String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcDisposeMangledSymbol(System.String)
        VB: Swigged.LLVM.LLVM.OrcDisposeMangledSymbol(System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcDisposeMangledSymbol
        path: src/swigged.llvm/LLVM.cs
        startLine: 3143
      syntax:
        content:
          CSharp: public static void OrcDisposeMangledSymbol(string MangledSymbol)
          VB: Public Shared Sub OrcDisposeMangledSymbol(MangledSymbol As String)
        parameters:
        - id: MangledSymbol
          type: System.String
      overload: Swigged.LLVM.LLVM.OrcDisposeMangledSymbol*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcCreateIndirectStub(Swigged.LLVM.OrcJITStackRef,System.String,System.UInt64)
      commentId: M:Swigged.LLVM.LLVM.OrcCreateIndirectStub(Swigged.LLVM.OrcJITStackRef,System.String,System.UInt64)
      language: CSharp
      name:
        CSharp: OrcCreateIndirectStub(OrcJITStackRef, String, UInt64)
        VB: OrcCreateIndirectStub(OrcJITStackRef, String, UInt64)
      nameWithType:
        CSharp: LLVM.OrcCreateIndirectStub(OrcJITStackRef, String, UInt64)
        VB: LLVM.OrcCreateIndirectStub(OrcJITStackRef, String, UInt64)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcCreateIndirectStub(Swigged.LLVM.OrcJITStackRef, System.String, System.UInt64)
        VB: Swigged.LLVM.LLVM.OrcCreateIndirectStub(Swigged.LLVM.OrcJITStackRef, System.String, System.UInt64)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcCreateIndirectStub
        path: src/swigged.llvm/LLVM.cs
        startLine: 3147
      syntax:
        content:
          CSharp: public static OrcErrorCode OrcCreateIndirectStub(OrcJITStackRef JITStack, string StubName, ulong InitAddr)
          VB: Public Shared Function OrcCreateIndirectStub(JITStack As OrcJITStackRef, StubName As String, InitAddr As ULong) As OrcErrorCode
        parameters:
        - id: JITStack
          type: Swigged.LLVM.OrcJITStackRef
        - id: StubName
          type: System.String
        - id: InitAddr
          type: System.UInt64
        return:
          type: Swigged.LLVM.OrcErrorCode
      overload: Swigged.LLVM.LLVM.OrcCreateIndirectStub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcSetIndirectStubPointer(Swigged.LLVM.OrcJITStackRef,System.String,System.UInt64)
      commentId: M:Swigged.LLVM.LLVM.OrcSetIndirectStubPointer(Swigged.LLVM.OrcJITStackRef,System.String,System.UInt64)
      language: CSharp
      name:
        CSharp: OrcSetIndirectStubPointer(OrcJITStackRef, String, UInt64)
        VB: OrcSetIndirectStubPointer(OrcJITStackRef, String, UInt64)
      nameWithType:
        CSharp: LLVM.OrcSetIndirectStubPointer(OrcJITStackRef, String, UInt64)
        VB: LLVM.OrcSetIndirectStubPointer(OrcJITStackRef, String, UInt64)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcSetIndirectStubPointer(Swigged.LLVM.OrcJITStackRef, System.String, System.UInt64)
        VB: Swigged.LLVM.LLVM.OrcSetIndirectStubPointer(Swigged.LLVM.OrcJITStackRef, System.String, System.UInt64)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcSetIndirectStubPointer
        path: src/swigged.llvm/LLVM.cs
        startLine: 3152
      syntax:
        content:
          CSharp: public static OrcErrorCode OrcSetIndirectStubPointer(OrcJITStackRef JITStack, string StubName, ulong NewAddr)
          VB: Public Shared Function OrcSetIndirectStubPointer(JITStack As OrcJITStackRef, StubName As String, NewAddr As ULong) As OrcErrorCode
        parameters:
        - id: JITStack
          type: Swigged.LLVM.OrcJITStackRef
        - id: StubName
          type: System.String
        - id: NewAddr
          type: System.UInt64
        return:
          type: Swigged.LLVM.OrcErrorCode
      overload: Swigged.LLVM.LLVM.OrcSetIndirectStubPointer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcRemoveModule(Swigged.LLVM.OrcJITStackRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.OrcRemoveModule(Swigged.LLVM.OrcJITStackRef,System.UInt32)
      language: CSharp
      name:
        CSharp: OrcRemoveModule(OrcJITStackRef, UInt32)
        VB: OrcRemoveModule(OrcJITStackRef, UInt32)
      nameWithType:
        CSharp: LLVM.OrcRemoveModule(OrcJITStackRef, UInt32)
        VB: LLVM.OrcRemoveModule(OrcJITStackRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcRemoveModule(Swigged.LLVM.OrcJITStackRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.OrcRemoveModule(Swigged.LLVM.OrcJITStackRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcRemoveModule
        path: src/swigged.llvm/LLVM.cs
        startLine: 3157
      syntax:
        content:
          CSharp: public static void OrcRemoveModule(OrcJITStackRef JITStack, uint H)
          VB: Public Shared Sub OrcRemoveModule(JITStack As OrcJITStackRef, H As UInteger)
        parameters:
        - id: JITStack
          type: Swigged.LLVM.OrcJITStackRef
        - id: H
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.OrcRemoveModule*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcGetSymbolAddress(Swigged.LLVM.OrcJITStackRef,System.String)
      commentId: M:Swigged.LLVM.LLVM.OrcGetSymbolAddress(Swigged.LLVM.OrcJITStackRef,System.String)
      language: CSharp
      name:
        CSharp: OrcGetSymbolAddress(OrcJITStackRef, String)
        VB: OrcGetSymbolAddress(OrcJITStackRef, String)
      nameWithType:
        CSharp: LLVM.OrcGetSymbolAddress(OrcJITStackRef, String)
        VB: LLVM.OrcGetSymbolAddress(OrcJITStackRef, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcGetSymbolAddress(Swigged.LLVM.OrcJITStackRef, System.String)
        VB: Swigged.LLVM.LLVM.OrcGetSymbolAddress(Swigged.LLVM.OrcJITStackRef, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcGetSymbolAddress
        path: src/swigged.llvm/LLVM.cs
        startLine: 3161
      syntax:
        content:
          CSharp: public static ulong OrcGetSymbolAddress(OrcJITStackRef JITStack, string SymbolName)
          VB: Public Shared Function OrcGetSymbolAddress(JITStack As OrcJITStackRef, SymbolName As String) As ULong
        parameters:
        - id: JITStack
          type: Swigged.LLVM.OrcJITStackRef
        - id: SymbolName
          type: System.String
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.OrcGetSymbolAddress*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OrcDisposeInstance(Swigged.LLVM.OrcJITStackRef)
      commentId: M:Swigged.LLVM.LLVM.OrcDisposeInstance(Swigged.LLVM.OrcJITStackRef)
      language: CSharp
      name:
        CSharp: OrcDisposeInstance(OrcJITStackRef)
        VB: OrcDisposeInstance(OrcJITStackRef)
      nameWithType:
        CSharp: LLVM.OrcDisposeInstance(OrcJITStackRef)
        VB: LLVM.OrcDisposeInstance(OrcJITStackRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OrcDisposeInstance(Swigged.LLVM.OrcJITStackRef)
        VB: Swigged.LLVM.LLVM.OrcDisposeInstance(Swigged.LLVM.OrcJITStackRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OrcDisposeInstance
        path: src/swigged.llvm/LLVM.cs
        startLine: 3166
      syntax:
        content:
          CSharp: public static void OrcDisposeInstance(OrcJITStackRef JITStack)
          VB: Public Shared Sub OrcDisposeInstance(JITStack As OrcJITStackRef)
        parameters:
        - id: JITStack
          type: Swigged.LLVM.OrcJITStackRef
      overload: Swigged.LLVM.LLVM.OrcDisposeInstance*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.LoadLibraryPermanently(System.String)
      commentId: M:Swigged.LLVM.LLVM.LoadLibraryPermanently(System.String)
      language: CSharp
      name:
        CSharp: LoadLibraryPermanently(String)
        VB: LoadLibraryPermanently(String)
      nameWithType:
        CSharp: LLVM.LoadLibraryPermanently(String)
        VB: LLVM.LoadLibraryPermanently(String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.LoadLibraryPermanently(System.String)
        VB: Swigged.LLVM.LLVM.LoadLibraryPermanently(System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: LoadLibraryPermanently
        path: src/swigged.llvm/LLVM.cs
        startLine: 3170
      syntax:
        content:
          CSharp: public static bool LoadLibraryPermanently(string Filename)
          VB: Public Shared Function LoadLibraryPermanently(Filename As String) As Boolean
        parameters:
        - id: Filename
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.LoadLibraryPermanently*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ParseCommandLineOptions(System.Int32,System.String@,System.String)
      commentId: M:Swigged.LLVM.LLVM.ParseCommandLineOptions(System.Int32,System.String@,System.String)
      language: CSharp
      name:
        CSharp: ParseCommandLineOptions(Int32, out String, String)
        VB: ParseCommandLineOptions(Int32, ByRef String, String)
      nameWithType:
        CSharp: LLVM.ParseCommandLineOptions(Int32, out String, String)
        VB: LLVM.ParseCommandLineOptions(Int32, ByRef String, String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ParseCommandLineOptions(System.Int32, out System.String, System.String)
        VB: Swigged.LLVM.LLVM.ParseCommandLineOptions(System.Int32, ByRef System.String, System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ParseCommandLineOptions
        path: src/swigged.llvm/LLVM.cs
        startLine: 3175
      syntax:
        content:
          CSharp: public static void ParseCommandLineOptions(int argc, out string argv, string Overview)
          VB: Public Shared Sub ParseCommandLineOptions(argc As Integer, ByRef argv As String, Overview As String)
        parameters:
        - id: argc
          type: System.Int32
        - id: argv
          type: System.String
        - id: Overview
          type: System.String
      overload: Swigged.LLVM.LLVM.ParseCommandLineOptions*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SearchForAddressOfSymbol(System.String)
      commentId: M:Swigged.LLVM.LLVM.SearchForAddressOfSymbol(System.String)
      language: CSharp
      name:
        CSharp: SearchForAddressOfSymbol(String)
        VB: SearchForAddressOfSymbol(String)
      nameWithType:
        CSharp: LLVM.SearchForAddressOfSymbol(String)
        VB: LLVM.SearchForAddressOfSymbol(String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SearchForAddressOfSymbol(System.String)
        VB: Swigged.LLVM.LLVM.SearchForAddressOfSymbol(System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SearchForAddressOfSymbol
        path: src/swigged.llvm/LLVM.cs
        startLine: 3179
      syntax:
        content:
          CSharp: public static System.IntPtr SearchForAddressOfSymbol(string symbolName)
          VB: Public Shared Function SearchForAddressOfSymbol(symbolName As String) As System.IntPtr
        parameters:
        - id: symbolName
          type: System.String
        return:
          type: System.IntPtr
      overload: Swigged.LLVM.LLVM.SearchForAddressOfSymbol*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddSymbol(System.String,System.IntPtr)
      commentId: M:Swigged.LLVM.LLVM.AddSymbol(System.String,System.IntPtr)
      language: CSharp
      name:
        CSharp: AddSymbol(String, System.IntPtr)
        VB: AddSymbol(String, System.IntPtr)
      nameWithType:
        CSharp: LLVM.AddSymbol(String, System.IntPtr)
        VB: LLVM.AddSymbol(String, System.IntPtr)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddSymbol(System.String, System.IntPtr)
        VB: Swigged.LLVM.LLVM.AddSymbol(System.String, System.IntPtr)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddSymbol
        path: src/swigged.llvm/LLVM.cs
        startLine: 3181
      syntax:
        content:
          CSharp: public static void AddSymbol(string symbolName, System.IntPtr symbolValue)
          VB: Public Shared Sub AddSymbol(symbolName As String, symbolValue As System.IntPtr)
        parameters:
        - id: symbolName
          type: System.String
        - id: symbolValue
          type: System.IntPtr
      overload: Swigged.LLVM.LLVM.AddSymbol*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeAllTargetInfos
      commentId: M:Swigged.LLVM.LLVM.InitializeAllTargetInfos
      language: CSharp
      name:
        CSharp: InitializeAllTargetInfos()
        VB: InitializeAllTargetInfos()
      nameWithType:
        CSharp: LLVM.InitializeAllTargetInfos()
        VB: LLVM.InitializeAllTargetInfos()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeAllTargetInfos()
        VB: Swigged.LLVM.LLVM.InitializeAllTargetInfos()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeAllTargetInfos
        path: src/swigged.llvm/LLVM.cs
        startLine: 3185
      syntax:
        content:
          CSharp: public static void InitializeAllTargetInfos()
          VB: Public Shared Sub InitializeAllTargetInfos
      overload: Swigged.LLVM.LLVM.InitializeAllTargetInfos*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeAllTargets
      commentId: M:Swigged.LLVM.LLVM.InitializeAllTargets
      language: CSharp
      name:
        CSharp: InitializeAllTargets()
        VB: InitializeAllTargets()
      nameWithType:
        CSharp: LLVM.InitializeAllTargets()
        VB: LLVM.InitializeAllTargets()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeAllTargets()
        VB: Swigged.LLVM.LLVM.InitializeAllTargets()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeAllTargets
        path: src/swigged.llvm/LLVM.cs
        startLine: 3189
      syntax:
        content:
          CSharp: public static void InitializeAllTargets()
          VB: Public Shared Sub InitializeAllTargets
      overload: Swigged.LLVM.LLVM.InitializeAllTargets*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeAllTargetMCs
      commentId: M:Swigged.LLVM.LLVM.InitializeAllTargetMCs
      language: CSharp
      name:
        CSharp: InitializeAllTargetMCs()
        VB: InitializeAllTargetMCs()
      nameWithType:
        CSharp: LLVM.InitializeAllTargetMCs()
        VB: LLVM.InitializeAllTargetMCs()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeAllTargetMCs()
        VB: Swigged.LLVM.LLVM.InitializeAllTargetMCs()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeAllTargetMCs
        path: src/swigged.llvm/LLVM.cs
        startLine: 3193
      syntax:
        content:
          CSharp: public static void InitializeAllTargetMCs()
          VB: Public Shared Sub InitializeAllTargetMCs
      overload: Swigged.LLVM.LLVM.InitializeAllTargetMCs*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeAllAsmPrinters
      commentId: M:Swigged.LLVM.LLVM.InitializeAllAsmPrinters
      language: CSharp
      name:
        CSharp: InitializeAllAsmPrinters()
        VB: InitializeAllAsmPrinters()
      nameWithType:
        CSharp: LLVM.InitializeAllAsmPrinters()
        VB: LLVM.InitializeAllAsmPrinters()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeAllAsmPrinters()
        VB: Swigged.LLVM.LLVM.InitializeAllAsmPrinters()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeAllAsmPrinters
        path: src/swigged.llvm/LLVM.cs
        startLine: 3197
      syntax:
        content:
          CSharp: public static void InitializeAllAsmPrinters()
          VB: Public Shared Sub InitializeAllAsmPrinters
      overload: Swigged.LLVM.LLVM.InitializeAllAsmPrinters*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeAllAsmParsers
      commentId: M:Swigged.LLVM.LLVM.InitializeAllAsmParsers
      language: CSharp
      name:
        CSharp: InitializeAllAsmParsers()
        VB: InitializeAllAsmParsers()
      nameWithType:
        CSharp: LLVM.InitializeAllAsmParsers()
        VB: LLVM.InitializeAllAsmParsers()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeAllAsmParsers()
        VB: Swigged.LLVM.LLVM.InitializeAllAsmParsers()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeAllAsmParsers
        path: src/swigged.llvm/LLVM.cs
        startLine: 3201
      syntax:
        content:
          CSharp: public static void InitializeAllAsmParsers()
          VB: Public Shared Sub InitializeAllAsmParsers
      overload: Swigged.LLVM.LLVM.InitializeAllAsmParsers*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeAllDisassemblers
      commentId: M:Swigged.LLVM.LLVM.InitializeAllDisassemblers
      language: CSharp
      name:
        CSharp: InitializeAllDisassemblers()
        VB: InitializeAllDisassemblers()
      nameWithType:
        CSharp: LLVM.InitializeAllDisassemblers()
        VB: LLVM.InitializeAllDisassemblers()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeAllDisassemblers()
        VB: Swigged.LLVM.LLVM.InitializeAllDisassemblers()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeAllDisassemblers
        path: src/swigged.llvm/LLVM.cs
        startLine: 3205
      syntax:
        content:
          CSharp: public static void InitializeAllDisassemblers()
          VB: Public Shared Sub InitializeAllDisassemblers
      overload: Swigged.LLVM.LLVM.InitializeAllDisassemblers*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeNativeTarget
      commentId: M:Swigged.LLVM.LLVM.InitializeNativeTarget
      language: CSharp
      name:
        CSharp: InitializeNativeTarget()
        VB: InitializeNativeTarget()
      nameWithType:
        CSharp: LLVM.InitializeNativeTarget()
        VB: LLVM.InitializeNativeTarget()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeNativeTarget()
        VB: Swigged.LLVM.LLVM.InitializeNativeTarget()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeNativeTarget
        path: src/swigged.llvm/LLVM.cs
        startLine: 3209
      syntax:
        content:
          CSharp: public static bool InitializeNativeTarget()
          VB: Public Shared Function InitializeNativeTarget As Boolean
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.InitializeNativeTarget*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeNativeAsmParser
      commentId: M:Swigged.LLVM.LLVM.InitializeNativeAsmParser
      language: CSharp
      name:
        CSharp: InitializeNativeAsmParser()
        VB: InitializeNativeAsmParser()
      nameWithType:
        CSharp: LLVM.InitializeNativeAsmParser()
        VB: LLVM.InitializeNativeAsmParser()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeNativeAsmParser()
        VB: Swigged.LLVM.LLVM.InitializeNativeAsmParser()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeNativeAsmParser
        path: src/swigged.llvm/LLVM.cs
        startLine: 3214
      syntax:
        content:
          CSharp: public static bool InitializeNativeAsmParser()
          VB: Public Shared Function InitializeNativeAsmParser As Boolean
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.InitializeNativeAsmParser*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeNativeAsmPrinter
      commentId: M:Swigged.LLVM.LLVM.InitializeNativeAsmPrinter
      language: CSharp
      name:
        CSharp: InitializeNativeAsmPrinter()
        VB: InitializeNativeAsmPrinter()
      nameWithType:
        CSharp: LLVM.InitializeNativeAsmPrinter()
        VB: LLVM.InitializeNativeAsmPrinter()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeNativeAsmPrinter()
        VB: Swigged.LLVM.LLVM.InitializeNativeAsmPrinter()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeNativeAsmPrinter
        path: src/swigged.llvm/LLVM.cs
        startLine: 3219
      syntax:
        content:
          CSharp: public static bool InitializeNativeAsmPrinter()
          VB: Public Shared Function InitializeNativeAsmPrinter As Boolean
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.InitializeNativeAsmPrinter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.InitializeNativeDisassembler
      commentId: M:Swigged.LLVM.LLVM.InitializeNativeDisassembler
      language: CSharp
      name:
        CSharp: InitializeNativeDisassembler()
        VB: InitializeNativeDisassembler()
      nameWithType:
        CSharp: LLVM.InitializeNativeDisassembler()
        VB: LLVM.InitializeNativeDisassembler()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.InitializeNativeDisassembler()
        VB: Swigged.LLVM.LLVM.InitializeNativeDisassembler()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: InitializeNativeDisassembler
        path: src/swigged.llvm/LLVM.cs
        startLine: 3224
      syntax:
        content:
          CSharp: public static bool InitializeNativeDisassembler()
          VB: Public Shared Function InitializeNativeDisassembler As Boolean
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.InitializeNativeDisassembler*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetModuleDataLayout(Swigged.LLVM.ModuleRef)
      commentId: M:Swigged.LLVM.LLVM.GetModuleDataLayout(Swigged.LLVM.ModuleRef)
      language: CSharp
      name:
        CSharp: GetModuleDataLayout(ModuleRef)
        VB: GetModuleDataLayout(ModuleRef)
      nameWithType:
        CSharp: LLVM.GetModuleDataLayout(ModuleRef)
        VB: LLVM.GetModuleDataLayout(ModuleRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetModuleDataLayout(Swigged.LLVM.ModuleRef)
        VB: Swigged.LLVM.LLVM.GetModuleDataLayout(Swigged.LLVM.ModuleRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetModuleDataLayout
        path: src/swigged.llvm/LLVM.cs
        startLine: 3229
      syntax:
        content:
          CSharp: public static TargetDataRef GetModuleDataLayout(ModuleRef M)
          VB: Public Shared Function GetModuleDataLayout(M As ModuleRef) As TargetDataRef
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        return:
          type: Swigged.LLVM.TargetDataRef
      overload: Swigged.LLVM.LLVM.GetModuleDataLayout*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetModuleDataLayout(Swigged.LLVM.ModuleRef,Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.LLVM.SetModuleDataLayout(Swigged.LLVM.ModuleRef,Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: SetModuleDataLayout(ModuleRef, TargetDataRef)
        VB: SetModuleDataLayout(ModuleRef, TargetDataRef)
      nameWithType:
        CSharp: LLVM.SetModuleDataLayout(ModuleRef, TargetDataRef)
        VB: LLVM.SetModuleDataLayout(ModuleRef, TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetModuleDataLayout(Swigged.LLVM.ModuleRef, Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.LLVM.SetModuleDataLayout(Swigged.LLVM.ModuleRef, Swigged.LLVM.TargetDataRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetModuleDataLayout
        path: src/swigged.llvm/LLVM.cs
        startLine: 3234
      syntax:
        content:
          CSharp: public static void SetModuleDataLayout(ModuleRef M, TargetDataRef DL)
          VB: Public Shared Sub SetModuleDataLayout(M As ModuleRef, DL As TargetDataRef)
        parameters:
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: DL
          type: Swigged.LLVM.TargetDataRef
      overload: Swigged.LLVM.LLVM.SetModuleDataLayout*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateTargetData(System.String)
      commentId: M:Swigged.LLVM.LLVM.CreateTargetData(System.String)
      language: CSharp
      name:
        CSharp: CreateTargetData(String)
        VB: CreateTargetData(String)
      nameWithType:
        CSharp: LLVM.CreateTargetData(String)
        VB: LLVM.CreateTargetData(String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateTargetData(System.String)
        VB: Swigged.LLVM.LLVM.CreateTargetData(System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateTargetData
        path: src/swigged.llvm/LLVM.cs
        startLine: 3238
      syntax:
        content:
          CSharp: public static TargetDataRef CreateTargetData(string StringRep)
          VB: Public Shared Function CreateTargetData(StringRep As String) As TargetDataRef
        parameters:
        - id: StringRep
          type: System.String
        return:
          type: Swigged.LLVM.TargetDataRef
      overload: Swigged.LLVM.LLVM.CreateTargetData*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeTargetData(Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeTargetData(Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: DisposeTargetData(TargetDataRef)
        VB: DisposeTargetData(TargetDataRef)
      nameWithType:
        CSharp: LLVM.DisposeTargetData(TargetDataRef)
        VB: LLVM.DisposeTargetData(TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeTargetData(Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.LLVM.DisposeTargetData(Swigged.LLVM.TargetDataRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeTargetData
        path: src/swigged.llvm/LLVM.cs
        startLine: 3243
      syntax:
        content:
          CSharp: public static void DisposeTargetData(TargetDataRef TD)
          VB: Public Shared Sub DisposeTargetData(TD As TargetDataRef)
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
      overload: Swigged.LLVM.LLVM.DisposeTargetData*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddTargetLibraryInfo(Swigged.LLVM.TargetLibraryInfoRef,Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddTargetLibraryInfo(Swigged.LLVM.TargetLibraryInfoRef,Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddTargetLibraryInfo(TargetLibraryInfoRef, PassManagerRef)
        VB: AddTargetLibraryInfo(TargetLibraryInfoRef, PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddTargetLibraryInfo(TargetLibraryInfoRef, PassManagerRef)
        VB: LLVM.AddTargetLibraryInfo(TargetLibraryInfoRef, PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddTargetLibraryInfo(Swigged.LLVM.TargetLibraryInfoRef, Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddTargetLibraryInfo(Swigged.LLVM.TargetLibraryInfoRef, Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddTargetLibraryInfo
        path: src/swigged.llvm/LLVM.cs
        startLine: 3247
      syntax:
        content:
          CSharp: public static void AddTargetLibraryInfo(TargetLibraryInfoRef TLI, PassManagerRef PM)
          VB: Public Shared Sub AddTargetLibraryInfo(TLI As TargetLibraryInfoRef, PM As PassManagerRef)
        parameters:
        - id: TLI
          type: Swigged.LLVM.TargetLibraryInfoRef
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddTargetLibraryInfo*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CopyStringRepOfTargetData(Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.LLVM.CopyStringRepOfTargetData(Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: CopyStringRepOfTargetData(TargetDataRef)
        VB: CopyStringRepOfTargetData(TargetDataRef)
      nameWithType:
        CSharp: LLVM.CopyStringRepOfTargetData(TargetDataRef)
        VB: LLVM.CopyStringRepOfTargetData(TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CopyStringRepOfTargetData(Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.LLVM.CopyStringRepOfTargetData(Swigged.LLVM.TargetDataRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CopyStringRepOfTargetData
        path: src/swigged.llvm/LLVM.cs
        startLine: 3251
      syntax:
        content:
          CSharp: public static string CopyStringRepOfTargetData(TargetDataRef TD)
          VB: Public Shared Function CopyStringRepOfTargetData(TD As TargetDataRef) As String
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.CopyStringRepOfTargetData*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ByteOrder(Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.LLVM.ByteOrder(Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: ByteOrder(TargetDataRef)
        VB: ByteOrder(TargetDataRef)
      nameWithType:
        CSharp: LLVM.ByteOrder(TargetDataRef)
        VB: LLVM.ByteOrder(TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ByteOrder(Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.LLVM.ByteOrder(Swigged.LLVM.TargetDataRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ByteOrder
        path: src/swigged.llvm/LLVM.cs
        startLine: 3256
      syntax:
        content:
          CSharp: public static ByteOrdering ByteOrder(TargetDataRef TD)
          VB: Public Shared Function ByteOrder(TD As TargetDataRef) As ByteOrdering
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        return:
          type: Swigged.LLVM.ByteOrdering
      overload: Swigged.LLVM.LLVM.ByteOrder*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PointerSize(Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.LLVM.PointerSize(Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: PointerSize(TargetDataRef)
        VB: PointerSize(TargetDataRef)
      nameWithType:
        CSharp: LLVM.PointerSize(TargetDataRef)
        VB: LLVM.PointerSize(TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PointerSize(Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.LLVM.PointerSize(Swigged.LLVM.TargetDataRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PointerSize
        path: src/swigged.llvm/LLVM.cs
        startLine: 3261
      syntax:
        content:
          CSharp: public static uint PointerSize(TargetDataRef TD)
          VB: Public Shared Function PointerSize(TD As TargetDataRef) As UInteger
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.PointerSize*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PointerSizeForAS(Swigged.LLVM.TargetDataRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.PointerSizeForAS(Swigged.LLVM.TargetDataRef,System.UInt32)
      language: CSharp
      name:
        CSharp: PointerSizeForAS(TargetDataRef, UInt32)
        VB: PointerSizeForAS(TargetDataRef, UInt32)
      nameWithType:
        CSharp: LLVM.PointerSizeForAS(TargetDataRef, UInt32)
        VB: LLVM.PointerSizeForAS(TargetDataRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PointerSizeForAS(Swigged.LLVM.TargetDataRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.PointerSizeForAS(Swigged.LLVM.TargetDataRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PointerSizeForAS
        path: src/swigged.llvm/LLVM.cs
        startLine: 3266
      syntax:
        content:
          CSharp: public static uint PointerSizeForAS(TargetDataRef TD, uint AS)
          VB: Public Shared Function PointerSizeForAS(TD As TargetDataRef, AS As UInteger) As UInteger
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: AS
          type: System.UInt32
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.PointerSizeForAS*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IntPtrType(Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.LLVM.IntPtrType(Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: IntPtrType(TargetDataRef)
        VB: IntPtrType(TargetDataRef)
      nameWithType:
        CSharp: LLVM.IntPtrType(TargetDataRef)
        VB: LLVM.IntPtrType(TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IntPtrType(Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.LLVM.IntPtrType(Swigged.LLVM.TargetDataRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntPtrType
        path: src/swigged.llvm/LLVM.cs
        startLine: 3271
      syntax:
        content:
          CSharp: public static TypeRef IntPtrType(TargetDataRef TD)
          VB: Public Shared Function IntPtrType(TD As TargetDataRef) As TypeRef
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.IntPtrType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IntPtrTypeForAS(Swigged.LLVM.TargetDataRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.IntPtrTypeForAS(Swigged.LLVM.TargetDataRef,System.UInt32)
      language: CSharp
      name:
        CSharp: IntPtrTypeForAS(TargetDataRef, UInt32)
        VB: IntPtrTypeForAS(TargetDataRef, UInt32)
      nameWithType:
        CSharp: LLVM.IntPtrTypeForAS(TargetDataRef, UInt32)
        VB: LLVM.IntPtrTypeForAS(TargetDataRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IntPtrTypeForAS(Swigged.LLVM.TargetDataRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.IntPtrTypeForAS(Swigged.LLVM.TargetDataRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntPtrTypeForAS
        path: src/swigged.llvm/LLVM.cs
        startLine: 3276
      syntax:
        content:
          CSharp: public static TypeRef IntPtrTypeForAS(TargetDataRef TD, uint AS)
          VB: Public Shared Function IntPtrTypeForAS(TD As TargetDataRef, AS As UInteger) As TypeRef
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: AS
          type: System.UInt32
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.IntPtrTypeForAS*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IntPtrTypeInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.TargetDataRef)
      commentId: M:Swigged.LLVM.LLVM.IntPtrTypeInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.TargetDataRef)
      language: CSharp
      name:
        CSharp: IntPtrTypeInContext(ContextRef, TargetDataRef)
        VB: IntPtrTypeInContext(ContextRef, TargetDataRef)
      nameWithType:
        CSharp: LLVM.IntPtrTypeInContext(ContextRef, TargetDataRef)
        VB: LLVM.IntPtrTypeInContext(ContextRef, TargetDataRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IntPtrTypeInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.TargetDataRef)
        VB: Swigged.LLVM.LLVM.IntPtrTypeInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.TargetDataRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntPtrTypeInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 3281
      syntax:
        content:
          CSharp: public static TypeRef IntPtrTypeInContext(ContextRef C, TargetDataRef TD)
          VB: Public Shared Function IntPtrTypeInContext(C As ContextRef, TD As TargetDataRef) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.IntPtrTypeInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.IntPtrTypeForASInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.TargetDataRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.IntPtrTypeForASInContext(Swigged.LLVM.ContextRef,Swigged.LLVM.TargetDataRef,System.UInt32)
      language: CSharp
      name:
        CSharp: IntPtrTypeForASInContext(ContextRef, TargetDataRef, UInt32)
        VB: IntPtrTypeForASInContext(ContextRef, TargetDataRef, UInt32)
      nameWithType:
        CSharp: LLVM.IntPtrTypeForASInContext(ContextRef, TargetDataRef, UInt32)
        VB: LLVM.IntPtrTypeForASInContext(ContextRef, TargetDataRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.IntPtrTypeForASInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.TargetDataRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.IntPtrTypeForASInContext(Swigged.LLVM.ContextRef, Swigged.LLVM.TargetDataRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: IntPtrTypeForASInContext
        path: src/swigged.llvm/LLVM.cs
        startLine: 3286
      syntax:
        content:
          CSharp: public static TypeRef IntPtrTypeForASInContext(ContextRef C, TargetDataRef TD, uint AS)
          VB: Public Shared Function IntPtrTypeForASInContext(C As ContextRef, TD As TargetDataRef, AS As UInteger) As TypeRef
        parameters:
        - id: C
          type: Swigged.LLVM.ContextRef
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: AS
          type: System.UInt32
        return:
          type: Swigged.LLVM.TypeRef
      overload: Swigged.LLVM.LLVM.IntPtrTypeForASInContext*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SizeOfTypeInBits(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.SizeOfTypeInBits(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: SizeOfTypeInBits(TargetDataRef, TypeRef)
        VB: SizeOfTypeInBits(TargetDataRef, TypeRef)
      nameWithType:
        CSharp: LLVM.SizeOfTypeInBits(TargetDataRef, TypeRef)
        VB: LLVM.SizeOfTypeInBits(TargetDataRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SizeOfTypeInBits(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.SizeOfTypeInBits(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SizeOfTypeInBits
        path: src/swigged.llvm/LLVM.cs
        startLine: 3291
      syntax:
        content:
          CSharp: public static ulong SizeOfTypeInBits(TargetDataRef TD, TypeRef Ty)
          VB: Public Shared Function SizeOfTypeInBits(TD As TargetDataRef, Ty As TypeRef) As ULong
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.SizeOfTypeInBits*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.StoreSizeOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.StoreSizeOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: StoreSizeOfType(TargetDataRef, TypeRef)
        VB: StoreSizeOfType(TargetDataRef, TypeRef)
      nameWithType:
        CSharp: LLVM.StoreSizeOfType(TargetDataRef, TypeRef)
        VB: LLVM.StoreSizeOfType(TargetDataRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.StoreSizeOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.StoreSizeOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: StoreSizeOfType
        path: src/swigged.llvm/LLVM.cs
        startLine: 3296
      syntax:
        content:
          CSharp: public static ulong StoreSizeOfType(TargetDataRef TD, TypeRef Ty)
          VB: Public Shared Function StoreSizeOfType(TD As TargetDataRef, Ty As TypeRef) As ULong
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.StoreSizeOfType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ABISizeOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ABISizeOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ABISizeOfType(TargetDataRef, TypeRef)
        VB: ABISizeOfType(TargetDataRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ABISizeOfType(TargetDataRef, TypeRef)
        VB: LLVM.ABISizeOfType(TargetDataRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ABISizeOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ABISizeOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ABISizeOfType
        path: src/swigged.llvm/LLVM.cs
        startLine: 3301
      syntax:
        content:
          CSharp: public static ulong ABISizeOfType(TargetDataRef TD, TypeRef Ty)
          VB: Public Shared Function ABISizeOfType(TD As TargetDataRef, Ty As TypeRef) As ULong
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.ABISizeOfType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ABIAlignmentOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.ABIAlignmentOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: ABIAlignmentOfType(TargetDataRef, TypeRef)
        VB: ABIAlignmentOfType(TargetDataRef, TypeRef)
      nameWithType:
        CSharp: LLVM.ABIAlignmentOfType(TargetDataRef, TypeRef)
        VB: LLVM.ABIAlignmentOfType(TargetDataRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ABIAlignmentOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.ABIAlignmentOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ABIAlignmentOfType
        path: src/swigged.llvm/LLVM.cs
        startLine: 3306
      syntax:
        content:
          CSharp: public static uint ABIAlignmentOfType(TargetDataRef TD, TypeRef Ty)
          VB: Public Shared Function ABIAlignmentOfType(TD As TargetDataRef, Ty As TypeRef) As UInteger
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.ABIAlignmentOfType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CallFrameAlignmentOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.CallFrameAlignmentOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: CallFrameAlignmentOfType(TargetDataRef, TypeRef)
        VB: CallFrameAlignmentOfType(TargetDataRef, TypeRef)
      nameWithType:
        CSharp: LLVM.CallFrameAlignmentOfType(TargetDataRef, TypeRef)
        VB: LLVM.CallFrameAlignmentOfType(TargetDataRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CallFrameAlignmentOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.CallFrameAlignmentOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CallFrameAlignmentOfType
        path: src/swigged.llvm/LLVM.cs
        startLine: 3311
      syntax:
        content:
          CSharp: public static uint CallFrameAlignmentOfType(TargetDataRef TD, TypeRef Ty)
          VB: Public Shared Function CallFrameAlignmentOfType(TD As TargetDataRef, Ty As TypeRef) As UInteger
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.CallFrameAlignmentOfType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PreferredAlignmentOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      commentId: M:Swigged.LLVM.LLVM.PreferredAlignmentOfType(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef)
      language: CSharp
      name:
        CSharp: PreferredAlignmentOfType(TargetDataRef, TypeRef)
        VB: PreferredAlignmentOfType(TargetDataRef, TypeRef)
      nameWithType:
        CSharp: LLVM.PreferredAlignmentOfType(TargetDataRef, TypeRef)
        VB: LLVM.PreferredAlignmentOfType(TargetDataRef, TypeRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PreferredAlignmentOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
        VB: Swigged.LLVM.LLVM.PreferredAlignmentOfType(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PreferredAlignmentOfType
        path: src/swigged.llvm/LLVM.cs
        startLine: 3316
      syntax:
        content:
          CSharp: public static uint PreferredAlignmentOfType(TargetDataRef TD, TypeRef Ty)
          VB: Public Shared Function PreferredAlignmentOfType(TD As TargetDataRef, Ty As TypeRef) As UInteger
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: Ty
          type: Swigged.LLVM.TypeRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.PreferredAlignmentOfType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal(Swigged.LLVM.TargetDataRef,Swigged.LLVM.ValueRef)
      commentId: M:Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal(Swigged.LLVM.TargetDataRef,Swigged.LLVM.ValueRef)
      language: CSharp
      name:
        CSharp: PreferredAlignmentOfGlobal(TargetDataRef, ValueRef)
        VB: PreferredAlignmentOfGlobal(TargetDataRef, ValueRef)
      nameWithType:
        CSharp: LLVM.PreferredAlignmentOfGlobal(TargetDataRef, ValueRef)
        VB: LLVM.PreferredAlignmentOfGlobal(TargetDataRef, ValueRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal(Swigged.LLVM.TargetDataRef, Swigged.LLVM.ValueRef)
        VB: Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal(Swigged.LLVM.TargetDataRef, Swigged.LLVM.ValueRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PreferredAlignmentOfGlobal
        path: src/swigged.llvm/LLVM.cs
        startLine: 3321
      syntax:
        content:
          CSharp: public static uint PreferredAlignmentOfGlobal(TargetDataRef TD, ValueRef GlobalVar)
          VB: Public Shared Function PreferredAlignmentOfGlobal(TD As TargetDataRef, GlobalVar As ValueRef) As UInteger
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: GlobalVar
          type: Swigged.LLVM.ValueRef
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.ElementAtOffset(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef,System.UInt64)
      commentId: M:Swigged.LLVM.LLVM.ElementAtOffset(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef,System.UInt64)
      language: CSharp
      name:
        CSharp: ElementAtOffset(TargetDataRef, TypeRef, UInt64)
        VB: ElementAtOffset(TargetDataRef, TypeRef, UInt64)
      nameWithType:
        CSharp: LLVM.ElementAtOffset(TargetDataRef, TypeRef, UInt64)
        VB: LLVM.ElementAtOffset(TargetDataRef, TypeRef, UInt64)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.ElementAtOffset(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef, System.UInt64)
        VB: Swigged.LLVM.LLVM.ElementAtOffset(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef, System.UInt64)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: ElementAtOffset
        path: src/swigged.llvm/LLVM.cs
        startLine: 3326
      syntax:
        content:
          CSharp: public static uint ElementAtOffset(TargetDataRef TD, TypeRef StructTy, ulong Offset)
          VB: Public Shared Function ElementAtOffset(TD As TargetDataRef, StructTy As TypeRef, Offset As ULong) As UInteger
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        - id: Offset
          type: System.UInt64
        return:
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.ElementAtOffset*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.OffsetOfElement(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.OffsetOfElement(Swigged.LLVM.TargetDataRef,Swigged.LLVM.TypeRef,System.UInt32)
      language: CSharp
      name:
        CSharp: OffsetOfElement(TargetDataRef, TypeRef, UInt32)
        VB: OffsetOfElement(TargetDataRef, TypeRef, UInt32)
      nameWithType:
        CSharp: LLVM.OffsetOfElement(TargetDataRef, TypeRef, UInt32)
        VB: LLVM.OffsetOfElement(TargetDataRef, TypeRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.OffsetOfElement(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.OffsetOfElement(Swigged.LLVM.TargetDataRef, Swigged.LLVM.TypeRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: OffsetOfElement
        path: src/swigged.llvm/LLVM.cs
        startLine: 3331
      syntax:
        content:
          CSharp: public static ulong OffsetOfElement(TargetDataRef TD, TypeRef StructTy, uint Element)
          VB: Public Shared Function OffsetOfElement(TD As TargetDataRef, StructTy As TypeRef, Element As UInteger) As ULong
        parameters:
        - id: TD
          type: Swigged.LLVM.TargetDataRef
        - id: StructTy
          type: Swigged.LLVM.TypeRef
        - id: Element
          type: System.UInt32
        return:
          type: System.UInt64
      overload: Swigged.LLVM.LLVM.OffsetOfElement*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetFirstTarget
      commentId: M:Swigged.LLVM.LLVM.GetFirstTarget
      language: CSharp
      name:
        CSharp: GetFirstTarget()
        VB: GetFirstTarget()
      nameWithType:
        CSharp: LLVM.GetFirstTarget()
        VB: LLVM.GetFirstTarget()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetFirstTarget()
        VB: Swigged.LLVM.LLVM.GetFirstTarget()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetFirstTarget
        path: src/swigged.llvm/LLVM.cs
        startLine: 3336
      syntax:
        content:
          CSharp: public static TargetRef GetFirstTarget()
          VB: Public Shared Function GetFirstTarget As TargetRef
        return:
          type: Swigged.LLVM.TargetRef
      overload: Swigged.LLVM.LLVM.GetFirstTarget*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetNextTarget(Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.LLVM.GetNextTarget(Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: GetNextTarget(TargetRef)
        VB: GetNextTarget(TargetRef)
      nameWithType:
        CSharp: LLVM.GetNextTarget(TargetRef)
        VB: LLVM.GetNextTarget(TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetNextTarget(Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.LLVM.GetNextTarget(Swigged.LLVM.TargetRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetNextTarget
        path: src/swigged.llvm/LLVM.cs
        startLine: 3341
      syntax:
        content:
          CSharp: public static TargetRef GetNextTarget(TargetRef T)
          VB: Public Shared Function GetNextTarget(T As TargetRef) As TargetRef
        parameters:
        - id: T
          type: Swigged.LLVM.TargetRef
        return:
          type: Swigged.LLVM.TargetRef
      overload: Swigged.LLVM.LLVM.GetNextTarget*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTargetFromName(System.String)
      commentId: M:Swigged.LLVM.LLVM.GetTargetFromName(System.String)
      language: CSharp
      name:
        CSharp: GetTargetFromName(String)
        VB: GetTargetFromName(String)
      nameWithType:
        CSharp: LLVM.GetTargetFromName(String)
        VB: LLVM.GetTargetFromName(String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTargetFromName(System.String)
        VB: Swigged.LLVM.LLVM.GetTargetFromName(System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTargetFromName
        path: src/swigged.llvm/LLVM.cs
        startLine: 3346
      syntax:
        content:
          CSharp: public static TargetRef GetTargetFromName(string Name)
          VB: Public Shared Function GetTargetFromName(Name As String) As TargetRef
        parameters:
        - id: Name
          type: System.String
        return:
          type: Swigged.LLVM.TargetRef
      overload: Swigged.LLVM.LLVM.GetTargetFromName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTargetFromTriple(System.String,Swigged.LLVM.TargetRef@,System.String@)
      commentId: M:Swigged.LLVM.LLVM.GetTargetFromTriple(System.String,Swigged.LLVM.TargetRef@,System.String@)
      language: CSharp
      name:
        CSharp: GetTargetFromTriple(String, out TargetRef, out String)
        VB: GetTargetFromTriple(String, ByRef TargetRef, ByRef String)
      nameWithType:
        CSharp: LLVM.GetTargetFromTriple(String, out TargetRef, out String)
        VB: LLVM.GetTargetFromTriple(String, ByRef TargetRef, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTargetFromTriple(System.String, out Swigged.LLVM.TargetRef, out System.String)
        VB: Swigged.LLVM.LLVM.GetTargetFromTriple(System.String, ByRef Swigged.LLVM.TargetRef, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTargetFromTriple
        path: src/swigged.llvm/LLVM.cs
        startLine: 3351
      syntax:
        content:
          CSharp: public static bool GetTargetFromTriple(string Triple, out TargetRef T, out string ErrorMessage)
          VB: Public Shared Function GetTargetFromTriple(Triple As String, ByRef T As TargetRef, ByRef ErrorMessage As String) As Boolean
        parameters:
        - id: Triple
          type: System.String
        - id: T
          type: Swigged.LLVM.TargetRef
        - id: ErrorMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.GetTargetFromTriple*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTargetName(Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.LLVM.GetTargetName(Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: GetTargetName(TargetRef)
        VB: GetTargetName(TargetRef)
      nameWithType:
        CSharp: LLVM.GetTargetName(TargetRef)
        VB: LLVM.GetTargetName(TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTargetName(Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.LLVM.GetTargetName(Swigged.LLVM.TargetRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTargetName
        path: src/swigged.llvm/LLVM.cs
        startLine: 3356
      syntax:
        content:
          CSharp: public static string GetTargetName(TargetRef T)
          VB: Public Shared Function GetTargetName(T As TargetRef) As String
        parameters:
        - id: T
          type: Swigged.LLVM.TargetRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetTargetName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTargetDescription(Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.LLVM.GetTargetDescription(Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: GetTargetDescription(TargetRef)
        VB: GetTargetDescription(TargetRef)
      nameWithType:
        CSharp: LLVM.GetTargetDescription(TargetRef)
        VB: LLVM.GetTargetDescription(TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTargetDescription(Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.LLVM.GetTargetDescription(Swigged.LLVM.TargetRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTargetDescription
        path: src/swigged.llvm/LLVM.cs
        startLine: 3361
      syntax:
        content:
          CSharp: public static string GetTargetDescription(TargetRef T)
          VB: Public Shared Function GetTargetDescription(T As TargetRef) As String
        parameters:
        - id: T
          type: Swigged.LLVM.TargetRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetTargetDescription*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.TargetHasJIT(Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.LLVM.TargetHasJIT(Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: TargetHasJIT(TargetRef)
        VB: TargetHasJIT(TargetRef)
      nameWithType:
        CSharp: LLVM.TargetHasJIT(TargetRef)
        VB: LLVM.TargetHasJIT(TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.TargetHasJIT(Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.LLVM.TargetHasJIT(Swigged.LLVM.TargetRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: TargetHasJIT
        path: src/swigged.llvm/LLVM.cs
        startLine: 3366
      syntax:
        content:
          CSharp: public static bool TargetHasJIT(TargetRef T)
          VB: Public Shared Function TargetHasJIT(T As TargetRef) As Boolean
        parameters:
        - id: T
          type: Swigged.LLVM.TargetRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.TargetHasJIT*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.TargetHasTargetMachine(Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.LLVM.TargetHasTargetMachine(Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: TargetHasTargetMachine(TargetRef)
        VB: TargetHasTargetMachine(TargetRef)
      nameWithType:
        CSharp: LLVM.TargetHasTargetMachine(TargetRef)
        VB: LLVM.TargetHasTargetMachine(TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.TargetHasTargetMachine(Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.LLVM.TargetHasTargetMachine(Swigged.LLVM.TargetRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: TargetHasTargetMachine
        path: src/swigged.llvm/LLVM.cs
        startLine: 3371
      syntax:
        content:
          CSharp: public static bool TargetHasTargetMachine(TargetRef T)
          VB: Public Shared Function TargetHasTargetMachine(T As TargetRef) As Boolean
        parameters:
        - id: T
          type: Swigged.LLVM.TargetRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.TargetHasTargetMachine*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.TargetHasAsmBackend(Swigged.LLVM.TargetRef)
      commentId: M:Swigged.LLVM.LLVM.TargetHasAsmBackend(Swigged.LLVM.TargetRef)
      language: CSharp
      name:
        CSharp: TargetHasAsmBackend(TargetRef)
        VB: TargetHasAsmBackend(TargetRef)
      nameWithType:
        CSharp: LLVM.TargetHasAsmBackend(TargetRef)
        VB: LLVM.TargetHasAsmBackend(TargetRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.TargetHasAsmBackend(Swigged.LLVM.TargetRef)
        VB: Swigged.LLVM.LLVM.TargetHasAsmBackend(Swigged.LLVM.TargetRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: TargetHasAsmBackend
        path: src/swigged.llvm/LLVM.cs
        startLine: 3376
      syntax:
        content:
          CSharp: public static bool TargetHasAsmBackend(TargetRef T)
          VB: Public Shared Function TargetHasAsmBackend(T As TargetRef) As Boolean
        parameters:
        - id: T
          type: Swigged.LLVM.TargetRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.TargetHasAsmBackend*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateTargetMachine(Swigged.LLVM.TargetRef,System.String,System.String,System.String,Swigged.LLVM.CodeGenOptLevel,Swigged.LLVM.RelocMode,Swigged.LLVM.CodeModel)
      commentId: M:Swigged.LLVM.LLVM.CreateTargetMachine(Swigged.LLVM.TargetRef,System.String,System.String,System.String,Swigged.LLVM.CodeGenOptLevel,Swigged.LLVM.RelocMode,Swigged.LLVM.CodeModel)
      language: CSharp
      name:
        CSharp: CreateTargetMachine(TargetRef, String, String, String, CodeGenOptLevel, RelocMode, CodeModel)
        VB: CreateTargetMachine(TargetRef, String, String, String, CodeGenOptLevel, RelocMode, CodeModel)
      nameWithType:
        CSharp: LLVM.CreateTargetMachine(TargetRef, String, String, String, CodeGenOptLevel, RelocMode, CodeModel)
        VB: LLVM.CreateTargetMachine(TargetRef, String, String, String, CodeGenOptLevel, RelocMode, CodeModel)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateTargetMachine(Swigged.LLVM.TargetRef, System.String, System.String, System.String, Swigged.LLVM.CodeGenOptLevel, Swigged.LLVM.RelocMode, Swigged.LLVM.CodeModel)
        VB: Swigged.LLVM.LLVM.CreateTargetMachine(Swigged.LLVM.TargetRef, System.String, System.String, System.String, Swigged.LLVM.CodeGenOptLevel, Swigged.LLVM.RelocMode, Swigged.LLVM.CodeModel)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateTargetMachine
        path: src/swigged.llvm/LLVM.cs
        startLine: 3381
      syntax:
        content:
          CSharp: public static TargetMachineRef CreateTargetMachine(TargetRef T, string Triple, string CPU, string Features, CodeGenOptLevel Level, RelocMode Reloc, CodeModel CodeModel)
          VB: Public Shared Function CreateTargetMachine(T As TargetRef, Triple As String, CPU As String, Features As String, Level As CodeGenOptLevel, Reloc As RelocMode, CodeModel As CodeModel) As TargetMachineRef
        parameters:
        - id: T
          type: Swigged.LLVM.TargetRef
        - id: Triple
          type: System.String
        - id: CPU
          type: System.String
        - id: Features
          type: System.String
        - id: Level
          type: Swigged.LLVM.CodeGenOptLevel
        - id: Reloc
          type: Swigged.LLVM.RelocMode
        - id: CodeModel
          type: Swigged.LLVM.CodeModel
        return:
          type: Swigged.LLVM.TargetMachineRef
      overload: Swigged.LLVM.LLVM.CreateTargetMachine*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.DisposeTargetMachine(Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.LLVM.DisposeTargetMachine(Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: DisposeTargetMachine(TargetMachineRef)
        VB: DisposeTargetMachine(TargetMachineRef)
      nameWithType:
        CSharp: LLVM.DisposeTargetMachine(TargetMachineRef)
        VB: LLVM.DisposeTargetMachine(TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.DisposeTargetMachine(Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.LLVM.DisposeTargetMachine(Swigged.LLVM.TargetMachineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: DisposeTargetMachine
        path: src/swigged.llvm/LLVM.cs
        startLine: 3386
      syntax:
        content:
          CSharp: public static void DisposeTargetMachine(TargetMachineRef T)
          VB: Public Shared Sub DisposeTargetMachine(T As TargetMachineRef)
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
      overload: Swigged.LLVM.LLVM.DisposeTargetMachine*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTargetMachineTarget(Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.LLVM.GetTargetMachineTarget(Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: GetTargetMachineTarget(TargetMachineRef)
        VB: GetTargetMachineTarget(TargetMachineRef)
      nameWithType:
        CSharp: LLVM.GetTargetMachineTarget(TargetMachineRef)
        VB: LLVM.GetTargetMachineTarget(TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTargetMachineTarget(Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.LLVM.GetTargetMachineTarget(Swigged.LLVM.TargetMachineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTargetMachineTarget
        path: src/swigged.llvm/LLVM.cs
        startLine: 3390
      syntax:
        content:
          CSharp: public static TargetRef GetTargetMachineTarget(TargetMachineRef T)
          VB: Public Shared Function GetTargetMachineTarget(T As TargetMachineRef) As TargetRef
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: Swigged.LLVM.TargetRef
      overload: Swigged.LLVM.LLVM.GetTargetMachineTarget*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTargetMachineTriple(Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.LLVM.GetTargetMachineTriple(Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: GetTargetMachineTriple(TargetMachineRef)
        VB: GetTargetMachineTriple(TargetMachineRef)
      nameWithType:
        CSharp: LLVM.GetTargetMachineTriple(TargetMachineRef)
        VB: LLVM.GetTargetMachineTriple(TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTargetMachineTriple(Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.LLVM.GetTargetMachineTriple(Swigged.LLVM.TargetMachineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTargetMachineTriple
        path: src/swigged.llvm/LLVM.cs
        startLine: 3395
      syntax:
        content:
          CSharp: public static string GetTargetMachineTriple(TargetMachineRef T)
          VB: Public Shared Function GetTargetMachineTriple(T As TargetMachineRef) As String
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetTargetMachineTriple*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTargetMachineCPU(Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.LLVM.GetTargetMachineCPU(Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: GetTargetMachineCPU(TargetMachineRef)
        VB: GetTargetMachineCPU(TargetMachineRef)
      nameWithType:
        CSharp: LLVM.GetTargetMachineCPU(TargetMachineRef)
        VB: LLVM.GetTargetMachineCPU(TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTargetMachineCPU(Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.LLVM.GetTargetMachineCPU(Swigged.LLVM.TargetMachineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTargetMachineCPU
        path: src/swigged.llvm/LLVM.cs
        startLine: 3400
      syntax:
        content:
          CSharp: public static string GetTargetMachineCPU(TargetMachineRef T)
          VB: Public Shared Function GetTargetMachineCPU(T As TargetMachineRef) As String
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetTargetMachineCPU*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetTargetMachineFeatureString(Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.LLVM.GetTargetMachineFeatureString(Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: GetTargetMachineFeatureString(TargetMachineRef)
        VB: GetTargetMachineFeatureString(TargetMachineRef)
      nameWithType:
        CSharp: LLVM.GetTargetMachineFeatureString(TargetMachineRef)
        VB: LLVM.GetTargetMachineFeatureString(TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetTargetMachineFeatureString(Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.LLVM.GetTargetMachineFeatureString(Swigged.LLVM.TargetMachineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetTargetMachineFeatureString
        path: src/swigged.llvm/LLVM.cs
        startLine: 3405
      syntax:
        content:
          CSharp: public static string GetTargetMachineFeatureString(TargetMachineRef T)
          VB: Public Shared Function GetTargetMachineFeatureString(T As TargetMachineRef) As String
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetTargetMachineFeatureString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.CreateTargetDataLayout(Swigged.LLVM.TargetMachineRef)
      commentId: M:Swigged.LLVM.LLVM.CreateTargetDataLayout(Swigged.LLVM.TargetMachineRef)
      language: CSharp
      name:
        CSharp: CreateTargetDataLayout(TargetMachineRef)
        VB: CreateTargetDataLayout(TargetMachineRef)
      nameWithType:
        CSharp: LLVM.CreateTargetDataLayout(TargetMachineRef)
        VB: LLVM.CreateTargetDataLayout(TargetMachineRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.CreateTargetDataLayout(Swigged.LLVM.TargetMachineRef)
        VB: Swigged.LLVM.LLVM.CreateTargetDataLayout(Swigged.LLVM.TargetMachineRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: CreateTargetDataLayout
        path: src/swigged.llvm/LLVM.cs
        startLine: 3410
      syntax:
        content:
          CSharp: public static TargetDataRef CreateTargetDataLayout(TargetMachineRef T)
          VB: Public Shared Function CreateTargetDataLayout(T As TargetMachineRef) As TargetDataRef
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        return:
          type: Swigged.LLVM.TargetDataRef
      overload: Swigged.LLVM.LLVM.CreateTargetDataLayout*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity(Swigged.LLVM.TargetMachineRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity(Swigged.LLVM.TargetMachineRef,System.Boolean)
      language: CSharp
      name:
        CSharp: SetTargetMachineAsmVerbosity(TargetMachineRef, Boolean)
        VB: SetTargetMachineAsmVerbosity(TargetMachineRef, Boolean)
      nameWithType:
        CSharp: LLVM.SetTargetMachineAsmVerbosity(TargetMachineRef, Boolean)
        VB: LLVM.SetTargetMachineAsmVerbosity(TargetMachineRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity(Swigged.LLVM.TargetMachineRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity(Swigged.LLVM.TargetMachineRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: SetTargetMachineAsmVerbosity
        path: src/swigged.llvm/LLVM.cs
        startLine: 3415
      syntax:
        content:
          CSharp: public static void SetTargetMachineAsmVerbosity(TargetMachineRef T, bool VerboseAsm)
          VB: Public Shared Sub SetTargetMachineAsmVerbosity(T As TargetMachineRef, VerboseAsm As Boolean)
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        - id: VerboseAsm
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.TargetMachineEmitToFile(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.ModuleRef,System.String,Swigged.LLVM.CodeGenFileType,System.String@)
      commentId: M:Swigged.LLVM.LLVM.TargetMachineEmitToFile(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.ModuleRef,System.String,Swigged.LLVM.CodeGenFileType,System.String@)
      language: CSharp
      name:
        CSharp: TargetMachineEmitToFile(TargetMachineRef, ModuleRef, String, CodeGenFileType, out String)
        VB: TargetMachineEmitToFile(TargetMachineRef, ModuleRef, String, CodeGenFileType, ByRef String)
      nameWithType:
        CSharp: LLVM.TargetMachineEmitToFile(TargetMachineRef, ModuleRef, String, CodeGenFileType, out String)
        VB: LLVM.TargetMachineEmitToFile(TargetMachineRef, ModuleRef, String, CodeGenFileType, ByRef String)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.TargetMachineEmitToFile(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.ModuleRef, System.String, Swigged.LLVM.CodeGenFileType, out System.String)
        VB: Swigged.LLVM.LLVM.TargetMachineEmitToFile(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.ModuleRef, System.String, Swigged.LLVM.CodeGenFileType, ByRef System.String)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: TargetMachineEmitToFile
        path: src/swigged.llvm/LLVM.cs
        startLine: 3419
      syntax:
        content:
          CSharp: public static bool TargetMachineEmitToFile(TargetMachineRef T, ModuleRef M, string Filename, CodeGenFileType codegen, out string ErrorMessage)
          VB: Public Shared Function TargetMachineEmitToFile(T As TargetMachineRef, M As ModuleRef, Filename As String, codegen As CodeGenFileType, ByRef ErrorMessage As String) As Boolean
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: Filename
          type: System.String
        - id: codegen
          type: Swigged.LLVM.CodeGenFileType
        - id: ErrorMessage
          type: System.String
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.TargetMachineEmitToFile*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.ModuleRef,Swigged.LLVM.CodeGenFileType,System.String@,Swigged.LLVM.MemoryBufferRef@)
      commentId: M:Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.ModuleRef,Swigged.LLVM.CodeGenFileType,System.String@,Swigged.LLVM.MemoryBufferRef@)
      language: CSharp
      name:
        CSharp: TargetMachineEmitToMemoryBuffer(TargetMachineRef, ModuleRef, CodeGenFileType, out String, out MemoryBufferRef)
        VB: TargetMachineEmitToMemoryBuffer(TargetMachineRef, ModuleRef, CodeGenFileType, ByRef String, ByRef MemoryBufferRef)
      nameWithType:
        CSharp: LLVM.TargetMachineEmitToMemoryBuffer(TargetMachineRef, ModuleRef, CodeGenFileType, out String, out MemoryBufferRef)
        VB: LLVM.TargetMachineEmitToMemoryBuffer(TargetMachineRef, ModuleRef, CodeGenFileType, ByRef String, ByRef MemoryBufferRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.ModuleRef, Swigged.LLVM.CodeGenFileType, out System.String, out Swigged.LLVM.MemoryBufferRef)
        VB: Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.ModuleRef, Swigged.LLVM.CodeGenFileType, ByRef System.String, ByRef Swigged.LLVM.MemoryBufferRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: TargetMachineEmitToMemoryBuffer
        path: src/swigged.llvm/LLVM.cs
        startLine: 3424
      syntax:
        content:
          CSharp: public static bool TargetMachineEmitToMemoryBuffer(TargetMachineRef T, ModuleRef M, CodeGenFileType codegen, out string ErrorMessage, out MemoryBufferRef OutMemBuf)
          VB: Public Shared Function TargetMachineEmitToMemoryBuffer(T As TargetMachineRef, M As ModuleRef, codegen As CodeGenFileType, ByRef ErrorMessage As String, ByRef OutMemBuf As MemoryBufferRef) As Boolean
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        - id: M
          type: Swigged.LLVM.ModuleRef
        - id: codegen
          type: Swigged.LLVM.CodeGenFileType
        - id: ErrorMessage
          type: System.String
        - id: OutMemBuf
          type: Swigged.LLVM.MemoryBufferRef
        return:
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.GetDefaultTargetTriple
      commentId: M:Swigged.LLVM.LLVM.GetDefaultTargetTriple
      language: CSharp
      name:
        CSharp: GetDefaultTargetTriple()
        VB: GetDefaultTargetTriple()
      nameWithType:
        CSharp: LLVM.GetDefaultTargetTriple()
        VB: LLVM.GetDefaultTargetTriple()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.GetDefaultTargetTriple()
        VB: Swigged.LLVM.LLVM.GetDefaultTargetTriple()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: GetDefaultTargetTriple
        path: src/swigged.llvm/LLVM.cs
        startLine: 3429
      syntax:
        content:
          CSharp: public static string GetDefaultTargetTriple()
          VB: Public Shared Function GetDefaultTargetTriple As String
        return:
          type: System.String
      overload: Swigged.LLVM.LLVM.GetDefaultTargetTriple*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddAnalysisPasses(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddAnalysisPasses(Swigged.LLVM.TargetMachineRef,Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddAnalysisPasses(TargetMachineRef, PassManagerRef)
        VB: AddAnalysisPasses(TargetMachineRef, PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddAnalysisPasses(TargetMachineRef, PassManagerRef)
        VB: LLVM.AddAnalysisPasses(TargetMachineRef, PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddAnalysisPasses(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddAnalysisPasses(Swigged.LLVM.TargetMachineRef, Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddAnalysisPasses
        path: src/swigged.llvm/LLVM.cs
        startLine: 3434
      syntax:
        content:
          CSharp: public static void AddAnalysisPasses(TargetMachineRef T, PassManagerRef PM)
          VB: Public Shared Sub AddAnalysisPasses(T As TargetMachineRef, PM As PassManagerRef)
        parameters:
        - id: T
          type: Swigged.LLVM.TargetMachineRef
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddAnalysisPasses*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddArgumentPromotionPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddArgumentPromotionPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddArgumentPromotionPass(PassManagerRef)
        VB: AddArgumentPromotionPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddArgumentPromotionPass(PassManagerRef)
        VB: LLVM.AddArgumentPromotionPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddArgumentPromotionPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddArgumentPromotionPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddArgumentPromotionPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3438
      syntax:
        content:
          CSharp: public static void AddArgumentPromotionPass(PassManagerRef PM)
          VB: Public Shared Sub AddArgumentPromotionPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddArgumentPromotionPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddConstantMergePass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddConstantMergePass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddConstantMergePass(PassManagerRef)
        VB: AddConstantMergePass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddConstantMergePass(PassManagerRef)
        VB: LLVM.AddConstantMergePass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddConstantMergePass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddConstantMergePass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddConstantMergePass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3442
      syntax:
        content:
          CSharp: public static void AddConstantMergePass(PassManagerRef PM)
          VB: Public Shared Sub AddConstantMergePass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddConstantMergePass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddDeadArgEliminationPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddDeadArgEliminationPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddDeadArgEliminationPass(PassManagerRef)
        VB: AddDeadArgEliminationPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddDeadArgEliminationPass(PassManagerRef)
        VB: LLVM.AddDeadArgEliminationPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddDeadArgEliminationPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddDeadArgEliminationPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddDeadArgEliminationPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3446
      syntax:
        content:
          CSharp: public static void AddDeadArgEliminationPass(PassManagerRef PM)
          VB: Public Shared Sub AddDeadArgEliminationPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddDeadArgEliminationPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddFunctionAttrsPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddFunctionAttrsPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddFunctionAttrsPass(PassManagerRef)
        VB: AddFunctionAttrsPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddFunctionAttrsPass(PassManagerRef)
        VB: LLVM.AddFunctionAttrsPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddFunctionAttrsPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddFunctionAttrsPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddFunctionAttrsPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3450
      syntax:
        content:
          CSharp: public static void AddFunctionAttrsPass(PassManagerRef PM)
          VB: Public Shared Sub AddFunctionAttrsPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddFunctionAttrsPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddFunctionInliningPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddFunctionInliningPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddFunctionInliningPass(PassManagerRef)
        VB: AddFunctionInliningPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddFunctionInliningPass(PassManagerRef)
        VB: LLVM.AddFunctionInliningPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddFunctionInliningPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddFunctionInliningPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddFunctionInliningPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3454
      syntax:
        content:
          CSharp: public static void AddFunctionInliningPass(PassManagerRef PM)
          VB: Public Shared Sub AddFunctionInliningPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddFunctionInliningPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddAlwaysInlinerPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddAlwaysInlinerPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddAlwaysInlinerPass(PassManagerRef)
        VB: AddAlwaysInlinerPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddAlwaysInlinerPass(PassManagerRef)
        VB: LLVM.AddAlwaysInlinerPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddAlwaysInlinerPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddAlwaysInlinerPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddAlwaysInlinerPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3458
      syntax:
        content:
          CSharp: public static void AddAlwaysInlinerPass(PassManagerRef PM)
          VB: Public Shared Sub AddAlwaysInlinerPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddAlwaysInlinerPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddGlobalDCEPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddGlobalDCEPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddGlobalDCEPass(PassManagerRef)
        VB: AddGlobalDCEPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddGlobalDCEPass(PassManagerRef)
        VB: LLVM.AddGlobalDCEPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddGlobalDCEPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddGlobalDCEPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddGlobalDCEPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3462
      syntax:
        content:
          CSharp: public static void AddGlobalDCEPass(PassManagerRef PM)
          VB: Public Shared Sub AddGlobalDCEPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddGlobalDCEPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddGlobalOptimizerPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddGlobalOptimizerPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddGlobalOptimizerPass(PassManagerRef)
        VB: AddGlobalOptimizerPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddGlobalOptimizerPass(PassManagerRef)
        VB: LLVM.AddGlobalOptimizerPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddGlobalOptimizerPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddGlobalOptimizerPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddGlobalOptimizerPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3466
      syntax:
        content:
          CSharp: public static void AddGlobalOptimizerPass(PassManagerRef PM)
          VB: Public Shared Sub AddGlobalOptimizerPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddGlobalOptimizerPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddIPConstantPropagationPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddIPConstantPropagationPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddIPConstantPropagationPass(PassManagerRef)
        VB: AddIPConstantPropagationPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddIPConstantPropagationPass(PassManagerRef)
        VB: LLVM.AddIPConstantPropagationPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddIPConstantPropagationPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddIPConstantPropagationPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddIPConstantPropagationPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3470
      syntax:
        content:
          CSharp: public static void AddIPConstantPropagationPass(PassManagerRef PM)
          VB: Public Shared Sub AddIPConstantPropagationPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddIPConstantPropagationPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddPruneEHPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddPruneEHPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddPruneEHPass(PassManagerRef)
        VB: AddPruneEHPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddPruneEHPass(PassManagerRef)
        VB: LLVM.AddPruneEHPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddPruneEHPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddPruneEHPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddPruneEHPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3474
      syntax:
        content:
          CSharp: public static void AddPruneEHPass(PassManagerRef PM)
          VB: Public Shared Sub AddPruneEHPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddPruneEHPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddIPSCCPPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddIPSCCPPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddIPSCCPPass(PassManagerRef)
        VB: AddIPSCCPPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddIPSCCPPass(PassManagerRef)
        VB: LLVM.AddIPSCCPPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddIPSCCPPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddIPSCCPPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddIPSCCPPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3478
      syntax:
        content:
          CSharp: public static void AddIPSCCPPass(PassManagerRef PM)
          VB: Public Shared Sub AddIPSCCPPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddIPSCCPPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddInternalizePass(Swigged.LLVM.PassManagerRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.AddInternalizePass(Swigged.LLVM.PassManagerRef,System.UInt32)
      language: CSharp
      name:
        CSharp: AddInternalizePass(PassManagerRef, UInt32)
        VB: AddInternalizePass(PassManagerRef, UInt32)
      nameWithType:
        CSharp: LLVM.AddInternalizePass(PassManagerRef, UInt32)
        VB: LLVM.AddInternalizePass(PassManagerRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddInternalizePass(Swigged.LLVM.PassManagerRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.AddInternalizePass(Swigged.LLVM.PassManagerRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddInternalizePass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3482
      syntax:
        content:
          CSharp: public static void AddInternalizePass(PassManagerRef arg0, uint AllButMain)
          VB: Public Shared Sub AddInternalizePass(arg0 As PassManagerRef, AllButMain As UInteger)
        parameters:
        - id: arg0
          type: Swigged.LLVM.PassManagerRef
        - id: AllButMain
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.AddInternalizePass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddStripDeadPrototypesPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddStripDeadPrototypesPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddStripDeadPrototypesPass(PassManagerRef)
        VB: AddStripDeadPrototypesPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddStripDeadPrototypesPass(PassManagerRef)
        VB: LLVM.AddStripDeadPrototypesPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddStripDeadPrototypesPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddStripDeadPrototypesPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddStripDeadPrototypesPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3486
      syntax:
        content:
          CSharp: public static void AddStripDeadPrototypesPass(PassManagerRef PM)
          VB: Public Shared Sub AddStripDeadPrototypesPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddStripDeadPrototypesPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddStripSymbolsPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddStripSymbolsPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddStripSymbolsPass(PassManagerRef)
        VB: AddStripSymbolsPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddStripSymbolsPass(PassManagerRef)
        VB: LLVM.AddStripSymbolsPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddStripSymbolsPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddStripSymbolsPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddStripSymbolsPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3490
      syntax:
        content:
          CSharp: public static void AddStripSymbolsPass(PassManagerRef PM)
          VB: Public Shared Sub AddStripSymbolsPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddStripSymbolsPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderCreate
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderCreate
      language: CSharp
      name:
        CSharp: PassManagerBuilderCreate()
        VB: PassManagerBuilderCreate()
      nameWithType:
        CSharp: LLVM.PassManagerBuilderCreate()
        VB: LLVM.PassManagerBuilderCreate()
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderCreate()
        VB: Swigged.LLVM.LLVM.PassManagerBuilderCreate()
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderCreate
        path: src/swigged.llvm/LLVM.cs
        startLine: 3494
      syntax:
        content:
          CSharp: public static PassManagerBuilderRef PassManagerBuilderCreate()
          VB: Public Shared Function PassManagerBuilderCreate As PassManagerBuilderRef
        return:
          type: Swigged.LLVM.PassManagerBuilderRef
      overload: Swigged.LLVM.LLVM.PassManagerBuilderCreate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderDispose(Swigged.LLVM.PassManagerBuilderRef)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderDispose(Swigged.LLVM.PassManagerBuilderRef)
      language: CSharp
      name:
        CSharp: PassManagerBuilderDispose(PassManagerBuilderRef)
        VB: PassManagerBuilderDispose(PassManagerBuilderRef)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderDispose(PassManagerBuilderRef)
        VB: LLVM.PassManagerBuilderDispose(PassManagerBuilderRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderDispose(Swigged.LLVM.PassManagerBuilderRef)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderDispose(Swigged.LLVM.PassManagerBuilderRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderDispose
        path: src/swigged.llvm/LLVM.cs
        startLine: 3499
      syntax:
        content:
          CSharp: public static void PassManagerBuilderDispose(PassManagerBuilderRef PMB)
          VB: Public Shared Sub PassManagerBuilderDispose(PMB As PassManagerBuilderRef)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
      overload: Swigged.LLVM.LLVM.PassManagerBuilderDispose*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel(Swigged.LLVM.PassManagerBuilderRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel(Swigged.LLVM.PassManagerBuilderRef,System.UInt32)
      language: CSharp
      name:
        CSharp: PassManagerBuilderSetOptLevel(PassManagerBuilderRef, UInt32)
        VB: PassManagerBuilderSetOptLevel(PassManagerBuilderRef, UInt32)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderSetOptLevel(PassManagerBuilderRef, UInt32)
        VB: LLVM.PassManagerBuilderSetOptLevel(PassManagerBuilderRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel(Swigged.LLVM.PassManagerBuilderRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel(Swigged.LLVM.PassManagerBuilderRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderSetOptLevel
        path: src/swigged.llvm/LLVM.cs
        startLine: 3503
      syntax:
        content:
          CSharp: public static void PassManagerBuilderSetOptLevel(PassManagerBuilderRef PMB, uint OptLevel)
          VB: Public Shared Sub PassManagerBuilderSetOptLevel(PMB As PassManagerBuilderRef, OptLevel As UInteger)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: OptLevel
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel(Swigged.LLVM.PassManagerBuilderRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel(Swigged.LLVM.PassManagerBuilderRef,System.UInt32)
      language: CSharp
      name:
        CSharp: PassManagerBuilderSetSizeLevel(PassManagerBuilderRef, UInt32)
        VB: PassManagerBuilderSetSizeLevel(PassManagerBuilderRef, UInt32)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderSetSizeLevel(PassManagerBuilderRef, UInt32)
        VB: LLVM.PassManagerBuilderSetSizeLevel(PassManagerBuilderRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel(Swigged.LLVM.PassManagerBuilderRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel(Swigged.LLVM.PassManagerBuilderRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderSetSizeLevel
        path: src/swigged.llvm/LLVM.cs
        startLine: 3507
      syntax:
        content:
          CSharp: public static void PassManagerBuilderSetSizeLevel(PassManagerBuilderRef PMB, uint SizeLevel)
          VB: Public Shared Sub PassManagerBuilderSetSizeLevel(PMB As PassManagerBuilderRef, SizeLevel As UInteger)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: SizeLevel
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime(Swigged.LLVM.PassManagerBuilderRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime(Swigged.LLVM.PassManagerBuilderRef,System.Boolean)
      language: CSharp
      name:
        CSharp: PassManagerBuilderSetDisableUnitAtATime(PassManagerBuilderRef, Boolean)
        VB: PassManagerBuilderSetDisableUnitAtATime(PassManagerBuilderRef, Boolean)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderSetDisableUnitAtATime(PassManagerBuilderRef, Boolean)
        VB: LLVM.PassManagerBuilderSetDisableUnitAtATime(PassManagerBuilderRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime(Swigged.LLVM.PassManagerBuilderRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime(Swigged.LLVM.PassManagerBuilderRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderSetDisableUnitAtATime
        path: src/swigged.llvm/LLVM.cs
        startLine: 3511
      syntax:
        content:
          CSharp: public static void PassManagerBuilderSetDisableUnitAtATime(PassManagerBuilderRef PMB, bool Value)
          VB: Public Shared Sub PassManagerBuilderSetDisableUnitAtATime(PMB As PassManagerBuilderRef, Value As Boolean)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: Value
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops(Swigged.LLVM.PassManagerBuilderRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops(Swigged.LLVM.PassManagerBuilderRef,System.Boolean)
      language: CSharp
      name:
        CSharp: PassManagerBuilderSetDisableUnrollLoops(PassManagerBuilderRef, Boolean)
        VB: PassManagerBuilderSetDisableUnrollLoops(PassManagerBuilderRef, Boolean)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderSetDisableUnrollLoops(PassManagerBuilderRef, Boolean)
        VB: LLVM.PassManagerBuilderSetDisableUnrollLoops(PassManagerBuilderRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops(Swigged.LLVM.PassManagerBuilderRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops(Swigged.LLVM.PassManagerBuilderRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderSetDisableUnrollLoops
        path: src/swigged.llvm/LLVM.cs
        startLine: 3515
      syntax:
        content:
          CSharp: public static void PassManagerBuilderSetDisableUnrollLoops(PassManagerBuilderRef PMB, bool Value)
          VB: Public Shared Sub PassManagerBuilderSetDisableUnrollLoops(PMB As PassManagerBuilderRef, Value As Boolean)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: Value
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls(Swigged.LLVM.PassManagerBuilderRef,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls(Swigged.LLVM.PassManagerBuilderRef,System.Boolean)
      language: CSharp
      name:
        CSharp: PassManagerBuilderSetDisableSimplifyLibCalls(PassManagerBuilderRef, Boolean)
        VB: PassManagerBuilderSetDisableSimplifyLibCalls(PassManagerBuilderRef, Boolean)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderSetDisableSimplifyLibCalls(PassManagerBuilderRef, Boolean)
        VB: LLVM.PassManagerBuilderSetDisableSimplifyLibCalls(PassManagerBuilderRef, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls(Swigged.LLVM.PassManagerBuilderRef, System.Boolean)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls(Swigged.LLVM.PassManagerBuilderRef, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderSetDisableSimplifyLibCalls
        path: src/swigged.llvm/LLVM.cs
        startLine: 3519
      syntax:
        content:
          CSharp: public static void PassManagerBuilderSetDisableSimplifyLibCalls(PassManagerBuilderRef PMB, bool Value)
          VB: Public Shared Sub PassManagerBuilderSetDisableSimplifyLibCalls(PMB As PassManagerBuilderRef, Value As Boolean)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: Value
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold(Swigged.LLVM.PassManagerBuilderRef,System.UInt32)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold(Swigged.LLVM.PassManagerBuilderRef,System.UInt32)
      language: CSharp
      name:
        CSharp: PassManagerBuilderUseInlinerWithThreshold(PassManagerBuilderRef, UInt32)
        VB: PassManagerBuilderUseInlinerWithThreshold(PassManagerBuilderRef, UInt32)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderUseInlinerWithThreshold(PassManagerBuilderRef, UInt32)
        VB: LLVM.PassManagerBuilderUseInlinerWithThreshold(PassManagerBuilderRef, UInt32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold(Swigged.LLVM.PassManagerBuilderRef, System.UInt32)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold(Swigged.LLVM.PassManagerBuilderRef, System.UInt32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderUseInlinerWithThreshold
        path: src/swigged.llvm/LLVM.cs
        startLine: 3523
      syntax:
        content:
          CSharp: public static void PassManagerBuilderUseInlinerWithThreshold(PassManagerBuilderRef PMB, uint Threshold)
          VB: Public Shared Sub PassManagerBuilderUseInlinerWithThreshold(PMB As PassManagerBuilderRef, Threshold As UInteger)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: Threshold
          type: System.UInt32
      overload: Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: PassManagerBuilderPopulateFunctionPassManager(PassManagerBuilderRef, PassManagerRef)
        VB: PassManagerBuilderPopulateFunctionPassManager(PassManagerBuilderRef, PassManagerRef)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderPopulateFunctionPassManager(PassManagerBuilderRef, PassManagerRef)
        VB: LLVM.PassManagerBuilderPopulateFunctionPassManager(PassManagerBuilderRef, PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderPopulateFunctionPassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 3527
      syntax:
        content:
          CSharp: public static void PassManagerBuilderPopulateFunctionPassManager(PassManagerBuilderRef PMB, PassManagerRef PM)
          VB: Public Shared Sub PassManagerBuilderPopulateFunctionPassManager(PMB As PassManagerBuilderRef, PM As PassManagerRef)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: PassManagerBuilderPopulateModulePassManager(PassManagerBuilderRef, PassManagerRef)
        VB: PassManagerBuilderPopulateModulePassManager(PassManagerBuilderRef, PassManagerRef)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderPopulateModulePassManager(PassManagerBuilderRef, PassManagerRef)
        VB: LLVM.PassManagerBuilderPopulateModulePassManager(PassManagerBuilderRef, PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderPopulateModulePassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 3531
      syntax:
        content:
          CSharp: public static void PassManagerBuilderPopulateModulePassManager(PassManagerBuilderRef PMB, PassManagerRef PM)
          VB: Public Shared Sub PassManagerBuilderPopulateModulePassManager(PMB As PassManagerBuilderRef, PM As PassManagerRef)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerRef,System.Boolean,System.Boolean)
      commentId: M:Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager(Swigged.LLVM.PassManagerBuilderRef,Swigged.LLVM.PassManagerRef,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: PassManagerBuilderPopulateLTOPassManager(PassManagerBuilderRef, PassManagerRef, Boolean, Boolean)
        VB: PassManagerBuilderPopulateLTOPassManager(PassManagerBuilderRef, PassManagerRef, Boolean, Boolean)
      nameWithType:
        CSharp: LLVM.PassManagerBuilderPopulateLTOPassManager(PassManagerBuilderRef, PassManagerRef, Boolean, Boolean)
        VB: LLVM.PassManagerBuilderPopulateLTOPassManager(PassManagerBuilderRef, PassManagerRef, Boolean, Boolean)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerRef, System.Boolean, System.Boolean)
        VB: Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager(Swigged.LLVM.PassManagerBuilderRef, Swigged.LLVM.PassManagerRef, System.Boolean, System.Boolean)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: PassManagerBuilderPopulateLTOPassManager
        path: src/swigged.llvm/LLVM.cs
        startLine: 3535
      syntax:
        content:
          CSharp: public static void PassManagerBuilderPopulateLTOPassManager(PassManagerBuilderRef PMB, PassManagerRef PM, bool Internalize, bool RunInliner)
          VB: Public Shared Sub PassManagerBuilderPopulateLTOPassManager(PMB As PassManagerBuilderRef, PM As PassManagerRef, Internalize As Boolean, RunInliner As Boolean)
        parameters:
        - id: PMB
          type: Swigged.LLVM.PassManagerBuilderRef
        - id: PM
          type: Swigged.LLVM.PassManagerRef
        - id: Internalize
          type: System.Boolean
        - id: RunInliner
          type: System.Boolean
      overload: Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddAggressiveDCEPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddAggressiveDCEPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddAggressiveDCEPass(PassManagerRef)
        VB: AddAggressiveDCEPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddAggressiveDCEPass(PassManagerRef)
        VB: LLVM.AddAggressiveDCEPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddAggressiveDCEPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddAggressiveDCEPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddAggressiveDCEPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3539
      syntax:
        content:
          CSharp: public static void AddAggressiveDCEPass(PassManagerRef PM)
          VB: Public Shared Sub AddAggressiveDCEPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddAggressiveDCEPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddBitTrackingDCEPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddBitTrackingDCEPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddBitTrackingDCEPass(PassManagerRef)
        VB: AddBitTrackingDCEPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddBitTrackingDCEPass(PassManagerRef)
        VB: LLVM.AddBitTrackingDCEPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddBitTrackingDCEPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddBitTrackingDCEPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddBitTrackingDCEPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3543
      syntax:
        content:
          CSharp: public static void AddBitTrackingDCEPass(PassManagerRef PM)
          VB: Public Shared Sub AddBitTrackingDCEPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddBitTrackingDCEPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddAlignmentFromAssumptionsPass(PassManagerRef)
        VB: AddAlignmentFromAssumptionsPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddAlignmentFromAssumptionsPass(PassManagerRef)
        VB: LLVM.AddAlignmentFromAssumptionsPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddAlignmentFromAssumptionsPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3547
      syntax:
        content:
          CSharp: public static void AddAlignmentFromAssumptionsPass(PassManagerRef PM)
          VB: Public Shared Sub AddAlignmentFromAssumptionsPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddCFGSimplificationPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddCFGSimplificationPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddCFGSimplificationPass(PassManagerRef)
        VB: AddCFGSimplificationPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddCFGSimplificationPass(PassManagerRef)
        VB: LLVM.AddCFGSimplificationPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddCFGSimplificationPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddCFGSimplificationPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddCFGSimplificationPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3551
      syntax:
        content:
          CSharp: public static void AddCFGSimplificationPass(PassManagerRef PM)
          VB: Public Shared Sub AddCFGSimplificationPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddCFGSimplificationPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddDeadStoreEliminationPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddDeadStoreEliminationPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddDeadStoreEliminationPass(PassManagerRef)
        VB: AddDeadStoreEliminationPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddDeadStoreEliminationPass(PassManagerRef)
        VB: LLVM.AddDeadStoreEliminationPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddDeadStoreEliminationPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddDeadStoreEliminationPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddDeadStoreEliminationPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3555
      syntax:
        content:
          CSharp: public static void AddDeadStoreEliminationPass(PassManagerRef PM)
          VB: Public Shared Sub AddDeadStoreEliminationPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddDeadStoreEliminationPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddScalarizerPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddScalarizerPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddScalarizerPass(PassManagerRef)
        VB: AddScalarizerPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddScalarizerPass(PassManagerRef)
        VB: LLVM.AddScalarizerPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddScalarizerPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddScalarizerPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddScalarizerPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3559
      syntax:
        content:
          CSharp: public static void AddScalarizerPass(PassManagerRef PM)
          VB: Public Shared Sub AddScalarizerPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddScalarizerPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddMergedLoadStoreMotionPass(PassManagerRef)
        VB: AddMergedLoadStoreMotionPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddMergedLoadStoreMotionPass(PassManagerRef)
        VB: LLVM.AddMergedLoadStoreMotionPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddMergedLoadStoreMotionPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3563
      syntax:
        content:
          CSharp: public static void AddMergedLoadStoreMotionPass(PassManagerRef PM)
          VB: Public Shared Sub AddMergedLoadStoreMotionPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddGVNPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddGVNPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddGVNPass(PassManagerRef)
        VB: AddGVNPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddGVNPass(PassManagerRef)
        VB: LLVM.AddGVNPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddGVNPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddGVNPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddGVNPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3567
      syntax:
        content:
          CSharp: public static void AddGVNPass(PassManagerRef PM)
          VB: Public Shared Sub AddGVNPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddGVNPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddNewGVNPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddNewGVNPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddNewGVNPass(PassManagerRef)
        VB: AddNewGVNPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddNewGVNPass(PassManagerRef)
        VB: LLVM.AddNewGVNPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddNewGVNPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddNewGVNPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddNewGVNPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3571
      syntax:
        content:
          CSharp: public static void AddNewGVNPass(PassManagerRef PM)
          VB: Public Shared Sub AddNewGVNPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddNewGVNPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddIndVarSimplifyPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddIndVarSimplifyPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddIndVarSimplifyPass(PassManagerRef)
        VB: AddIndVarSimplifyPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddIndVarSimplifyPass(PassManagerRef)
        VB: LLVM.AddIndVarSimplifyPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddIndVarSimplifyPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddIndVarSimplifyPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddIndVarSimplifyPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3575
      syntax:
        content:
          CSharp: public static void AddIndVarSimplifyPass(PassManagerRef PM)
          VB: Public Shared Sub AddIndVarSimplifyPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddIndVarSimplifyPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddInstructionCombiningPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddInstructionCombiningPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddInstructionCombiningPass(PassManagerRef)
        VB: AddInstructionCombiningPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddInstructionCombiningPass(PassManagerRef)
        VB: LLVM.AddInstructionCombiningPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddInstructionCombiningPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddInstructionCombiningPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddInstructionCombiningPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3579
      syntax:
        content:
          CSharp: public static void AddInstructionCombiningPass(PassManagerRef PM)
          VB: Public Shared Sub AddInstructionCombiningPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddInstructionCombiningPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddJumpThreadingPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddJumpThreadingPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddJumpThreadingPass(PassManagerRef)
        VB: AddJumpThreadingPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddJumpThreadingPass(PassManagerRef)
        VB: LLVM.AddJumpThreadingPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddJumpThreadingPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddJumpThreadingPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddJumpThreadingPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3583
      syntax:
        content:
          CSharp: public static void AddJumpThreadingPass(PassManagerRef PM)
          VB: Public Shared Sub AddJumpThreadingPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddJumpThreadingPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLICMPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLICMPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLICMPass(PassManagerRef)
        VB: AddLICMPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLICMPass(PassManagerRef)
        VB: LLVM.AddLICMPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLICMPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLICMPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLICMPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3587
      syntax:
        content:
          CSharp: public static void AddLICMPass(PassManagerRef PM)
          VB: Public Shared Sub AddLICMPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLICMPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLoopDeletionPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLoopDeletionPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLoopDeletionPass(PassManagerRef)
        VB: AddLoopDeletionPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLoopDeletionPass(PassManagerRef)
        VB: LLVM.AddLoopDeletionPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLoopDeletionPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLoopDeletionPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLoopDeletionPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3591
      syntax:
        content:
          CSharp: public static void AddLoopDeletionPass(PassManagerRef PM)
          VB: Public Shared Sub AddLoopDeletionPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLoopDeletionPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLoopIdiomPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLoopIdiomPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLoopIdiomPass(PassManagerRef)
        VB: AddLoopIdiomPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLoopIdiomPass(PassManagerRef)
        VB: LLVM.AddLoopIdiomPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLoopIdiomPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLoopIdiomPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLoopIdiomPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3595
      syntax:
        content:
          CSharp: public static void AddLoopIdiomPass(PassManagerRef PM)
          VB: Public Shared Sub AddLoopIdiomPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLoopIdiomPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLoopRotatePass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLoopRotatePass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLoopRotatePass(PassManagerRef)
        VB: AddLoopRotatePass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLoopRotatePass(PassManagerRef)
        VB: LLVM.AddLoopRotatePass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLoopRotatePass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLoopRotatePass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLoopRotatePass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3599
      syntax:
        content:
          CSharp: public static void AddLoopRotatePass(PassManagerRef PM)
          VB: Public Shared Sub AddLoopRotatePass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLoopRotatePass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLoopRerollPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLoopRerollPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLoopRerollPass(PassManagerRef)
        VB: AddLoopRerollPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLoopRerollPass(PassManagerRef)
        VB: LLVM.AddLoopRerollPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLoopRerollPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLoopRerollPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLoopRerollPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3603
      syntax:
        content:
          CSharp: public static void AddLoopRerollPass(PassManagerRef PM)
          VB: Public Shared Sub AddLoopRerollPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLoopRerollPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLoopUnrollPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLoopUnrollPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLoopUnrollPass(PassManagerRef)
        VB: AddLoopUnrollPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLoopUnrollPass(PassManagerRef)
        VB: LLVM.AddLoopUnrollPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLoopUnrollPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLoopUnrollPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLoopUnrollPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3607
      syntax:
        content:
          CSharp: public static void AddLoopUnrollPass(PassManagerRef PM)
          VB: Public Shared Sub AddLoopUnrollPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLoopUnrollPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLoopUnswitchPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLoopUnswitchPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLoopUnswitchPass(PassManagerRef)
        VB: AddLoopUnswitchPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLoopUnswitchPass(PassManagerRef)
        VB: LLVM.AddLoopUnswitchPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLoopUnswitchPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLoopUnswitchPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLoopUnswitchPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3611
      syntax:
        content:
          CSharp: public static void AddLoopUnswitchPass(PassManagerRef PM)
          VB: Public Shared Sub AddLoopUnswitchPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLoopUnswitchPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddMemCpyOptPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddMemCpyOptPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddMemCpyOptPass(PassManagerRef)
        VB: AddMemCpyOptPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddMemCpyOptPass(PassManagerRef)
        VB: LLVM.AddMemCpyOptPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddMemCpyOptPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddMemCpyOptPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddMemCpyOptPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3615
      syntax:
        content:
          CSharp: public static void AddMemCpyOptPass(PassManagerRef PM)
          VB: Public Shared Sub AddMemCpyOptPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddMemCpyOptPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddPartiallyInlineLibCallsPass(PassManagerRef)
        VB: AddPartiallyInlineLibCallsPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddPartiallyInlineLibCallsPass(PassManagerRef)
        VB: LLVM.AddPartiallyInlineLibCallsPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddPartiallyInlineLibCallsPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3619
      syntax:
        content:
          CSharp: public static void AddPartiallyInlineLibCallsPass(PassManagerRef PM)
          VB: Public Shared Sub AddPartiallyInlineLibCallsPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLowerSwitchPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLowerSwitchPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLowerSwitchPass(PassManagerRef)
        VB: AddLowerSwitchPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLowerSwitchPass(PassManagerRef)
        VB: LLVM.AddLowerSwitchPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLowerSwitchPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLowerSwitchPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLowerSwitchPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3623
      syntax:
        content:
          CSharp: public static void AddLowerSwitchPass(PassManagerRef PM)
          VB: Public Shared Sub AddLowerSwitchPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLowerSwitchPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddPromoteMemoryToRegisterPass(PassManagerRef)
        VB: AddPromoteMemoryToRegisterPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddPromoteMemoryToRegisterPass(PassManagerRef)
        VB: LLVM.AddPromoteMemoryToRegisterPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddPromoteMemoryToRegisterPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3627
      syntax:
        content:
          CSharp: public static void AddPromoteMemoryToRegisterPass(PassManagerRef PM)
          VB: Public Shared Sub AddPromoteMemoryToRegisterPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddReassociatePass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddReassociatePass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddReassociatePass(PassManagerRef)
        VB: AddReassociatePass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddReassociatePass(PassManagerRef)
        VB: LLVM.AddReassociatePass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddReassociatePass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddReassociatePass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddReassociatePass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3631
      syntax:
        content:
          CSharp: public static void AddReassociatePass(PassManagerRef PM)
          VB: Public Shared Sub AddReassociatePass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddReassociatePass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddSCCPPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddSCCPPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddSCCPPass(PassManagerRef)
        VB: AddSCCPPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddSCCPPass(PassManagerRef)
        VB: LLVM.AddSCCPPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddSCCPPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddSCCPPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddSCCPPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3635
      syntax:
        content:
          CSharp: public static void AddSCCPPass(PassManagerRef PM)
          VB: Public Shared Sub AddSCCPPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddSCCPPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddScalarReplAggregatesPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddScalarReplAggregatesPass(PassManagerRef)
        VB: AddScalarReplAggregatesPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddScalarReplAggregatesPass(PassManagerRef)
        VB: LLVM.AddScalarReplAggregatesPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddScalarReplAggregatesPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddScalarReplAggregatesPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddScalarReplAggregatesPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3639
      syntax:
        content:
          CSharp: public static void AddScalarReplAggregatesPass(PassManagerRef PM)
          VB: Public Shared Sub AddScalarReplAggregatesPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddScalarReplAggregatesPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddScalarReplAggregatesPassSSA(PassManagerRef)
        VB: AddScalarReplAggregatesPassSSA(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddScalarReplAggregatesPassSSA(PassManagerRef)
        VB: LLVM.AddScalarReplAggregatesPassSSA(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddScalarReplAggregatesPassSSA
        path: src/swigged.llvm/LLVM.cs
        startLine: 3643
      syntax:
        content:
          CSharp: public static void AddScalarReplAggregatesPassSSA(PassManagerRef PM)
          VB: Public Shared Sub AddScalarReplAggregatesPassSSA(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold(Swigged.LLVM.PassManagerRef,System.Int32)
      commentId: M:Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold(Swigged.LLVM.PassManagerRef,System.Int32)
      language: CSharp
      name:
        CSharp: AddScalarReplAggregatesPassWithThreshold(PassManagerRef, Int32)
        VB: AddScalarReplAggregatesPassWithThreshold(PassManagerRef, Int32)
      nameWithType:
        CSharp: LLVM.AddScalarReplAggregatesPassWithThreshold(PassManagerRef, Int32)
        VB: LLVM.AddScalarReplAggregatesPassWithThreshold(PassManagerRef, Int32)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold(Swigged.LLVM.PassManagerRef, System.Int32)
        VB: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold(Swigged.LLVM.PassManagerRef, System.Int32)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddScalarReplAggregatesPassWithThreshold
        path: src/swigged.llvm/LLVM.cs
        startLine: 3647
      syntax:
        content:
          CSharp: public static void AddScalarReplAggregatesPassWithThreshold(PassManagerRef PM, int Threshold)
          VB: Public Shared Sub AddScalarReplAggregatesPassWithThreshold(PM As PassManagerRef, Threshold As Integer)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
        - id: Threshold
          type: System.Int32
      overload: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddSimplifyLibCallsPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddSimplifyLibCallsPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddSimplifyLibCallsPass(PassManagerRef)
        VB: AddSimplifyLibCallsPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddSimplifyLibCallsPass(PassManagerRef)
        VB: LLVM.AddSimplifyLibCallsPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddSimplifyLibCallsPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddSimplifyLibCallsPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddSimplifyLibCallsPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3651
      syntax:
        content:
          CSharp: public static void AddSimplifyLibCallsPass(PassManagerRef PM)
          VB: Public Shared Sub AddSimplifyLibCallsPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddSimplifyLibCallsPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddTailCallEliminationPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddTailCallEliminationPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddTailCallEliminationPass(PassManagerRef)
        VB: AddTailCallEliminationPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddTailCallEliminationPass(PassManagerRef)
        VB: LLVM.AddTailCallEliminationPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddTailCallEliminationPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddTailCallEliminationPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddTailCallEliminationPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3655
      syntax:
        content:
          CSharp: public static void AddTailCallEliminationPass(PassManagerRef PM)
          VB: Public Shared Sub AddTailCallEliminationPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddTailCallEliminationPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddConstantPropagationPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddConstantPropagationPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddConstantPropagationPass(PassManagerRef)
        VB: AddConstantPropagationPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddConstantPropagationPass(PassManagerRef)
        VB: LLVM.AddConstantPropagationPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddConstantPropagationPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddConstantPropagationPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddConstantPropagationPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3659
      syntax:
        content:
          CSharp: public static void AddConstantPropagationPass(PassManagerRef PM)
          VB: Public Shared Sub AddConstantPropagationPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddConstantPropagationPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddDemoteMemoryToRegisterPass(PassManagerRef)
        VB: AddDemoteMemoryToRegisterPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddDemoteMemoryToRegisterPass(PassManagerRef)
        VB: LLVM.AddDemoteMemoryToRegisterPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddDemoteMemoryToRegisterPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3663
      syntax:
        content:
          CSharp: public static void AddDemoteMemoryToRegisterPass(PassManagerRef PM)
          VB: Public Shared Sub AddDemoteMemoryToRegisterPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddVerifierPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddVerifierPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddVerifierPass(PassManagerRef)
        VB: AddVerifierPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddVerifierPass(PassManagerRef)
        VB: LLVM.AddVerifierPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddVerifierPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddVerifierPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddVerifierPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3667
      syntax:
        content:
          CSharp: public static void AddVerifierPass(PassManagerRef PM)
          VB: Public Shared Sub AddVerifierPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddVerifierPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddCorrelatedValuePropagationPass(PassManagerRef)
        VB: AddCorrelatedValuePropagationPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddCorrelatedValuePropagationPass(PassManagerRef)
        VB: LLVM.AddCorrelatedValuePropagationPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddCorrelatedValuePropagationPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3671
      syntax:
        content:
          CSharp: public static void AddCorrelatedValuePropagationPass(PassManagerRef PM)
          VB: Public Shared Sub AddCorrelatedValuePropagationPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddEarlyCSEPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddEarlyCSEPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddEarlyCSEPass(PassManagerRef)
        VB: AddEarlyCSEPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddEarlyCSEPass(PassManagerRef)
        VB: LLVM.AddEarlyCSEPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddEarlyCSEPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddEarlyCSEPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddEarlyCSEPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3675
      syntax:
        content:
          CSharp: public static void AddEarlyCSEPass(PassManagerRef PM)
          VB: Public Shared Sub AddEarlyCSEPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddEarlyCSEPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddEarlyCSEMemSSAPass(PassManagerRef)
        VB: AddEarlyCSEMemSSAPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddEarlyCSEMemSSAPass(PassManagerRef)
        VB: LLVM.AddEarlyCSEMemSSAPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddEarlyCSEMemSSAPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3679
      syntax:
        content:
          CSharp: public static void AddEarlyCSEMemSSAPass(PassManagerRef PM)
          VB: Public Shared Sub AddEarlyCSEMemSSAPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLowerExpectIntrinsicPass(PassManagerRef)
        VB: AddLowerExpectIntrinsicPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLowerExpectIntrinsicPass(PassManagerRef)
        VB: LLVM.AddLowerExpectIntrinsicPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLowerExpectIntrinsicPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3683
      syntax:
        content:
          CSharp: public static void AddLowerExpectIntrinsicPass(PassManagerRef PM)
          VB: Public Shared Sub AddLowerExpectIntrinsicPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddTypeBasedAliasAnalysisPass(PassManagerRef)
        VB: AddTypeBasedAliasAnalysisPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddTypeBasedAliasAnalysisPass(PassManagerRef)
        VB: LLVM.AddTypeBasedAliasAnalysisPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddTypeBasedAliasAnalysisPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3687
      syntax:
        content:
          CSharp: public static void AddTypeBasedAliasAnalysisPass(PassManagerRef PM)
          VB: Public Shared Sub AddTypeBasedAliasAnalysisPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddScopedNoAliasAAPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddScopedNoAliasAAPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddScopedNoAliasAAPass(PassManagerRef)
        VB: AddScopedNoAliasAAPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddScopedNoAliasAAPass(PassManagerRef)
        VB: LLVM.AddScopedNoAliasAAPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddScopedNoAliasAAPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddScopedNoAliasAAPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddScopedNoAliasAAPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3691
      syntax:
        content:
          CSharp: public static void AddScopedNoAliasAAPass(PassManagerRef PM)
          VB: Public Shared Sub AddScopedNoAliasAAPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddScopedNoAliasAAPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddBasicAliasAnalysisPass(PassManagerRef)
        VB: AddBasicAliasAnalysisPass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddBasicAliasAnalysisPass(PassManagerRef)
        VB: LLVM.AddBasicAliasAnalysisPass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddBasicAliasAnalysisPass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3695
      syntax:
        content:
          CSharp: public static void AddBasicAliasAnalysisPass(PassManagerRef PM)
          VB: Public Shared Sub AddBasicAliasAnalysisPass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddBBVectorizePass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddBBVectorizePass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddBBVectorizePass(PassManagerRef)
        VB: AddBBVectorizePass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddBBVectorizePass(PassManagerRef)
        VB: LLVM.AddBBVectorizePass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddBBVectorizePass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddBBVectorizePass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddBBVectorizePass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3699
      syntax:
        content:
          CSharp: public static void AddBBVectorizePass(PassManagerRef PM)
          VB: Public Shared Sub AddBBVectorizePass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddBBVectorizePass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddLoopVectorizePass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddLoopVectorizePass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddLoopVectorizePass(PassManagerRef)
        VB: AddLoopVectorizePass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddLoopVectorizePass(PassManagerRef)
        VB: LLVM.AddLoopVectorizePass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddLoopVectorizePass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddLoopVectorizePass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddLoopVectorizePass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3703
      syntax:
        content:
          CSharp: public static void AddLoopVectorizePass(PassManagerRef PM)
          VB: Public Shared Sub AddLoopVectorizePass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddLoopVectorizePass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AddSLPVectorizePass(Swigged.LLVM.PassManagerRef)
      commentId: M:Swigged.LLVM.LLVM.AddSLPVectorizePass(Swigged.LLVM.PassManagerRef)
      language: CSharp
      name:
        CSharp: AddSLPVectorizePass(PassManagerRef)
        VB: AddSLPVectorizePass(PassManagerRef)
      nameWithType:
        CSharp: LLVM.AddSLPVectorizePass(PassManagerRef)
        VB: LLVM.AddSLPVectorizePass(PassManagerRef)
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AddSLPVectorizePass(Swigged.LLVM.PassManagerRef)
        VB: Swigged.LLVM.LLVM.AddSLPVectorizePass(Swigged.LLVM.PassManagerRef)
      type: Method
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AddSLPVectorizePass
        path: src/swigged.llvm/LLVM.cs
        startLine: 3707
      syntax:
        content:
          CSharp: public static void AddSLPVectorizePass(PassManagerRef PM)
          VB: Public Shared Sub AddSLPVectorizePass(PM As PassManagerRef)
        parameters:
        - id: PM
          type: Swigged.LLVM.PassManagerRef
      overload: Swigged.LLVM.LLVM.AddSLPVectorizePass*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Swigged.LLVM.LLVM.AttributeReturnIndex
      commentId: F:Swigged.LLVM.LLVM.AttributeReturnIndex
      language: CSharp
      name:
        CSharp: AttributeReturnIndex
        VB: AttributeReturnIndex
      nameWithType:
        CSharp: LLVM.AttributeReturnIndex
        VB: LLVM.AttributeReturnIndex
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AttributeReturnIndex
        VB: Swigged.LLVM.LLVM.AttributeReturnIndex
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AttributeReturnIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 3711
      syntax:
        content:
          CSharp: public static readonly int AttributeReturnIndex
          VB: Public Shared ReadOnly AttributeReturnIndex As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.AttributeFunctionIndex
      commentId: F:Swigged.LLVM.LLVM.AttributeFunctionIndex
      language: CSharp
      name:
        CSharp: AttributeFunctionIndex
        VB: AttributeFunctionIndex
      nameWithType:
        CSharp: LLVM.AttributeFunctionIndex
        VB: LLVM.AttributeFunctionIndex
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.AttributeFunctionIndex
        VB: Swigged.LLVM.LLVM.AttributeFunctionIndex
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: AttributeFunctionIndex
        path: src/swigged.llvm/LLVM.cs
        startLine: 3712
      syntax:
        content:
          CSharp: public static readonly int AttributeFunctionIndex
          VB: Public Shared ReadOnly AttributeFunctionIndex As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_None
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_None
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_None
        VB: Disassembler_VariantKind_None
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_None
        VB: LLVM.Disassembler_VariantKind_None
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_None
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_None
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_None
        path: src/swigged.llvm/LLVM.cs
        startLine: 3714
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_None
          VB: Public Shared ReadOnly Disassembler_VariantKind_None As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM_HI16
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM_HI16
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_ARM_HI16
        VB: Disassembler_VariantKind_ARM_HI16
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_ARM_HI16
        VB: LLVM.Disassembler_VariantKind_ARM_HI16
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM_HI16
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM_HI16
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_ARM_HI16
        path: src/swigged.llvm/LLVM.cs
        startLine: 3715
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_ARM_HI16
          VB: Public Shared ReadOnly Disassembler_VariantKind_ARM_HI16 As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM_LO16
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM_LO16
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_ARM_LO16
        VB: Disassembler_VariantKind_ARM_LO16
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_ARM_LO16
        VB: LLVM.Disassembler_VariantKind_ARM_LO16
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM_LO16
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM_LO16
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_ARM_LO16
        path: src/swigged.llvm/LLVM.cs
        startLine: 3716
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_ARM_LO16
          VB: Public Shared ReadOnly Disassembler_VariantKind_ARM_LO16 As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_PAGE
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_PAGE
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_ARM64_PAGE
        VB: Disassembler_VariantKind_ARM64_PAGE
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_ARM64_PAGE
        VB: LLVM.Disassembler_VariantKind_ARM64_PAGE
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_PAGE
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_PAGE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_ARM64_PAGE
        path: src/swigged.llvm/LLVM.cs
        startLine: 3717
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_ARM64_PAGE
          VB: Public Shared ReadOnly Disassembler_VariantKind_ARM64_PAGE As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_PAGEOFF
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_PAGEOFF
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_ARM64_PAGEOFF
        VB: Disassembler_VariantKind_ARM64_PAGEOFF
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_ARM64_PAGEOFF
        VB: LLVM.Disassembler_VariantKind_ARM64_PAGEOFF
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_PAGEOFF
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_PAGEOFF
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_ARM64_PAGEOFF
        path: src/swigged.llvm/LLVM.cs
        startLine: 3718
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_ARM64_PAGEOFF
          VB: Public Shared ReadOnly Disassembler_VariantKind_ARM64_PAGEOFF As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_GOTPAGE
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_GOTPAGE
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_ARM64_GOTPAGE
        VB: Disassembler_VariantKind_ARM64_GOTPAGE
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_ARM64_GOTPAGE
        VB: LLVM.Disassembler_VariantKind_ARM64_GOTPAGE
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_GOTPAGE
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_GOTPAGE
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_ARM64_GOTPAGE
        path: src/swigged.llvm/LLVM.cs
        startLine: 3719
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_ARM64_GOTPAGE
          VB: Public Shared ReadOnly Disassembler_VariantKind_ARM64_GOTPAGE As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_GOTPAGEOFF
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_GOTPAGEOFF
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_ARM64_GOTPAGEOFF
        VB: Disassembler_VariantKind_ARM64_GOTPAGEOFF
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_ARM64_GOTPAGEOFF
        VB: LLVM.Disassembler_VariantKind_ARM64_GOTPAGEOFF
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_GOTPAGEOFF
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_GOTPAGEOFF
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_ARM64_GOTPAGEOFF
        path: src/swigged.llvm/LLVM.cs
        startLine: 3720
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_ARM64_GOTPAGEOFF
          VB: Public Shared ReadOnly Disassembler_VariantKind_ARM64_GOTPAGEOFF As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_TLVP
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_TLVP
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_ARM64_TLVP
        VB: Disassembler_VariantKind_ARM64_TLVP
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_ARM64_TLVP
        VB: LLVM.Disassembler_VariantKind_ARM64_TLVP
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_TLVP
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_TLVP
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_ARM64_TLVP
        path: src/swigged.llvm/LLVM.cs
        startLine: 3721
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_ARM64_TLVP
          VB: Public Shared ReadOnly Disassembler_VariantKind_ARM64_TLVP As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_TLVOFF
      commentId: F:Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_TLVOFF
      language: CSharp
      name:
        CSharp: Disassembler_VariantKind_ARM64_TLVOFF
        VB: Disassembler_VariantKind_ARM64_TLVOFF
      nameWithType:
        CSharp: LLVM.Disassembler_VariantKind_ARM64_TLVOFF
        VB: LLVM.Disassembler_VariantKind_ARM64_TLVOFF
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_TLVOFF
        VB: Swigged.LLVM.LLVM.Disassembler_VariantKind_ARM64_TLVOFF
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_VariantKind_ARM64_TLVOFF
        path: src/swigged.llvm/LLVM.cs
        startLine: 3722
      syntax:
        content:
          CSharp: public static readonly int Disassembler_VariantKind_ARM64_TLVOFF
          VB: Public Shared ReadOnly Disassembler_VariantKind_ARM64_TLVOFF As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_InOut_None
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_InOut_None
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_InOut_None
        VB: Disassembler_ReferenceType_InOut_None
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_InOut_None
        VB: LLVM.Disassembler_ReferenceType_InOut_None
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_InOut_None
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_InOut_None
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_InOut_None
        path: src/swigged.llvm/LLVM.cs
        startLine: 3723
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_InOut_None
          VB: Public Shared ReadOnly Disassembler_ReferenceType_InOut_None As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_Branch
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_Branch
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_In_Branch
        VB: Disassembler_ReferenceType_In_Branch
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_In_Branch
        VB: LLVM.Disassembler_ReferenceType_In_Branch
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_Branch
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_Branch
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_In_Branch
        path: src/swigged.llvm/LLVM.cs
        startLine: 3724
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_In_Branch
          VB: Public Shared ReadOnly Disassembler_ReferenceType_In_Branch As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_PCrel_Load
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_PCrel_Load
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_In_PCrel_Load
        VB: Disassembler_ReferenceType_In_PCrel_Load
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_In_PCrel_Load
        VB: LLVM.Disassembler_ReferenceType_In_PCrel_Load
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_PCrel_Load
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_PCrel_Load
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_In_PCrel_Load
        path: src/swigged.llvm/LLVM.cs
        startLine: 3725
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_In_PCrel_Load
          VB: Public Shared ReadOnly Disassembler_ReferenceType_In_PCrel_Load As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADRP
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADRP
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_In_ARM64_ADRP
        VB: Disassembler_ReferenceType_In_ARM64_ADRP
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_In_ARM64_ADRP
        VB: LLVM.Disassembler_ReferenceType_In_ARM64_ADRP
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADRP
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADRP
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_In_ARM64_ADRP
        path: src/swigged.llvm/LLVM.cs
        startLine: 3726
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_In_ARM64_ADRP
          VB: Public Shared ReadOnly Disassembler_ReferenceType_In_ARM64_ADRP As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADDXri
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADDXri
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_In_ARM64_ADDXri
        VB: Disassembler_ReferenceType_In_ARM64_ADDXri
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_In_ARM64_ADDXri
        VB: LLVM.Disassembler_ReferenceType_In_ARM64_ADDXri
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADDXri
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADDXri
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_In_ARM64_ADDXri
        path: src/swigged.llvm/LLVM.cs
        startLine: 3727
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_In_ARM64_ADDXri
          VB: Public Shared ReadOnly Disassembler_ReferenceType_In_ARM64_ADDXri As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_LDRXui
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_LDRXui
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_In_ARM64_LDRXui
        VB: Disassembler_ReferenceType_In_ARM64_LDRXui
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_In_ARM64_LDRXui
        VB: LLVM.Disassembler_ReferenceType_In_ARM64_LDRXui
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_LDRXui
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_LDRXui
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_In_ARM64_LDRXui
        path: src/swigged.llvm/LLVM.cs
        startLine: 3728
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_In_ARM64_LDRXui
          VB: Public Shared ReadOnly Disassembler_ReferenceType_In_ARM64_LDRXui As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_LDRXl
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_LDRXl
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_In_ARM64_LDRXl
        VB: Disassembler_ReferenceType_In_ARM64_LDRXl
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_In_ARM64_LDRXl
        VB: LLVM.Disassembler_ReferenceType_In_ARM64_LDRXl
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_LDRXl
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_LDRXl
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_In_ARM64_LDRXl
        path: src/swigged.llvm/LLVM.cs
        startLine: 3729
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_In_ARM64_LDRXl
          VB: Public Shared ReadOnly Disassembler_ReferenceType_In_ARM64_LDRXl As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADR
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADR
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_In_ARM64_ADR
        VB: Disassembler_ReferenceType_In_ARM64_ADR
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_In_ARM64_ADR
        VB: LLVM.Disassembler_ReferenceType_In_ARM64_ADR
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADR
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_In_ARM64_ADR
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_In_ARM64_ADR
        path: src/swigged.llvm/LLVM.cs
        startLine: 3730
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_In_ARM64_ADR
          VB: Public Shared ReadOnly Disassembler_ReferenceType_In_ARM64_ADR As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_SymbolStub
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_SymbolStub
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_Out_SymbolStub
        VB: Disassembler_ReferenceType_Out_SymbolStub
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_Out_SymbolStub
        VB: LLVM.Disassembler_ReferenceType_Out_SymbolStub
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_SymbolStub
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_SymbolStub
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_Out_SymbolStub
        path: src/swigged.llvm/LLVM.cs
        startLine: 3731
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_Out_SymbolStub
          VB: Public Shared ReadOnly Disassembler_ReferenceType_Out_SymbolStub As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_LitPool_SymAddr
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_LitPool_SymAddr
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_Out_LitPool_SymAddr
        VB: Disassembler_ReferenceType_Out_LitPool_SymAddr
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_Out_LitPool_SymAddr
        VB: LLVM.Disassembler_ReferenceType_Out_LitPool_SymAddr
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_LitPool_SymAddr
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_LitPool_SymAddr
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_Out_LitPool_SymAddr
        path: src/swigged.llvm/LLVM.cs
        startLine: 3732
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_Out_LitPool_SymAddr
          VB: Public Shared ReadOnly Disassembler_ReferenceType_Out_LitPool_SymAddr As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_LitPool_CstrAddr
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_LitPool_CstrAddr
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_Out_LitPool_CstrAddr
        VB: Disassembler_ReferenceType_Out_LitPool_CstrAddr
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_Out_LitPool_CstrAddr
        VB: LLVM.Disassembler_ReferenceType_Out_LitPool_CstrAddr
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_LitPool_CstrAddr
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_LitPool_CstrAddr
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_Out_LitPool_CstrAddr
        path: src/swigged.llvm/LLVM.cs
        startLine: 3733
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_Out_LitPool_CstrAddr
          VB: Public Shared ReadOnly Disassembler_ReferenceType_Out_LitPool_CstrAddr As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_CFString_Ref
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_CFString_Ref
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_Out_Objc_CFString_Ref
        VB: Disassembler_ReferenceType_Out_Objc_CFString_Ref
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_Out_Objc_CFString_Ref
        VB: LLVM.Disassembler_ReferenceType_Out_Objc_CFString_Ref
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_CFString_Ref
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_CFString_Ref
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_Out_Objc_CFString_Ref
        path: src/swigged.llvm/LLVM.cs
        startLine: 3734
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_Out_Objc_CFString_Ref
          VB: Public Shared ReadOnly Disassembler_ReferenceType_Out_Objc_CFString_Ref As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Message
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Message
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_Out_Objc_Message
        VB: Disassembler_ReferenceType_Out_Objc_Message
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_Out_Objc_Message
        VB: LLVM.Disassembler_ReferenceType_Out_Objc_Message
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Message
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Message
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_Out_Objc_Message
        path: src/swigged.llvm/LLVM.cs
        startLine: 3735
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_Out_Objc_Message
          VB: Public Shared ReadOnly Disassembler_ReferenceType_Out_Objc_Message As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Message_Ref
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Message_Ref
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_Out_Objc_Message_Ref
        VB: Disassembler_ReferenceType_Out_Objc_Message_Ref
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_Out_Objc_Message_Ref
        VB: LLVM.Disassembler_ReferenceType_Out_Objc_Message_Ref
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Message_Ref
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Message_Ref
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_Out_Objc_Message_Ref
        path: src/swigged.llvm/LLVM.cs
        startLine: 3736
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_Out_Objc_Message_Ref
          VB: Public Shared ReadOnly Disassembler_ReferenceType_Out_Objc_Message_Ref As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Selector_Ref
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Selector_Ref
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_Out_Objc_Selector_Ref
        VB: Disassembler_ReferenceType_Out_Objc_Selector_Ref
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_Out_Objc_Selector_Ref
        VB: LLVM.Disassembler_ReferenceType_Out_Objc_Selector_Ref
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Selector_Ref
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Selector_Ref
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_Out_Objc_Selector_Ref
        path: src/swigged.llvm/LLVM.cs
        startLine: 3737
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_Out_Objc_Selector_Ref
          VB: Public Shared ReadOnly Disassembler_ReferenceType_Out_Objc_Selector_Ref As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Class_Ref
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Class_Ref
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_Out_Objc_Class_Ref
        VB: Disassembler_ReferenceType_Out_Objc_Class_Ref
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_Out_Objc_Class_Ref
        VB: LLVM.Disassembler_ReferenceType_Out_Objc_Class_Ref
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Class_Ref
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_Out_Objc_Class_Ref
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_Out_Objc_Class_Ref
        path: src/swigged.llvm/LLVM.cs
        startLine: 3738
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_Out_Objc_Class_Ref
          VB: Public Shared ReadOnly Disassembler_ReferenceType_Out_Objc_Class_Ref As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_ReferenceType_DeMangled_Name
      commentId: F:Swigged.LLVM.LLVM.Disassembler_ReferenceType_DeMangled_Name
      language: CSharp
      name:
        CSharp: Disassembler_ReferenceType_DeMangled_Name
        VB: Disassembler_ReferenceType_DeMangled_Name
      nameWithType:
        CSharp: LLVM.Disassembler_ReferenceType_DeMangled_Name
        VB: LLVM.Disassembler_ReferenceType_DeMangled_Name
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_ReferenceType_DeMangled_Name
        VB: Swigged.LLVM.LLVM.Disassembler_ReferenceType_DeMangled_Name
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_ReferenceType_DeMangled_Name
        path: src/swigged.llvm/LLVM.cs
        startLine: 3739
      syntax:
        content:
          CSharp: public static readonly int Disassembler_ReferenceType_DeMangled_Name
          VB: Public Shared ReadOnly Disassembler_ReferenceType_DeMangled_Name As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_Option_UseMarkup
      commentId: F:Swigged.LLVM.LLVM.Disassembler_Option_UseMarkup
      language: CSharp
      name:
        CSharp: Disassembler_Option_UseMarkup
        VB: Disassembler_Option_UseMarkup
      nameWithType:
        CSharp: LLVM.Disassembler_Option_UseMarkup
        VB: LLVM.Disassembler_Option_UseMarkup
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_Option_UseMarkup
        VB: Swigged.LLVM.LLVM.Disassembler_Option_UseMarkup
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_Option_UseMarkup
        path: src/swigged.llvm/LLVM.cs
        startLine: 3740
      syntax:
        content:
          CSharp: public static readonly int Disassembler_Option_UseMarkup
          VB: Public Shared ReadOnly Disassembler_Option_UseMarkup As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_Option_PrintImmHex
      commentId: F:Swigged.LLVM.LLVM.Disassembler_Option_PrintImmHex
      language: CSharp
      name:
        CSharp: Disassembler_Option_PrintImmHex
        VB: Disassembler_Option_PrintImmHex
      nameWithType:
        CSharp: LLVM.Disassembler_Option_PrintImmHex
        VB: LLVM.Disassembler_Option_PrintImmHex
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_Option_PrintImmHex
        VB: Swigged.LLVM.LLVM.Disassembler_Option_PrintImmHex
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_Option_PrintImmHex
        path: src/swigged.llvm/LLVM.cs
        startLine: 3741
      syntax:
        content:
          CSharp: public static readonly int Disassembler_Option_PrintImmHex
          VB: Public Shared ReadOnly Disassembler_Option_PrintImmHex As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_Option_AsmPrinterVariant
      commentId: F:Swigged.LLVM.LLVM.Disassembler_Option_AsmPrinterVariant
      language: CSharp
      name:
        CSharp: Disassembler_Option_AsmPrinterVariant
        VB: Disassembler_Option_AsmPrinterVariant
      nameWithType:
        CSharp: LLVM.Disassembler_Option_AsmPrinterVariant
        VB: LLVM.Disassembler_Option_AsmPrinterVariant
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_Option_AsmPrinterVariant
        VB: Swigged.LLVM.LLVM.Disassembler_Option_AsmPrinterVariant
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_Option_AsmPrinterVariant
        path: src/swigged.llvm/LLVM.cs
        startLine: 3742
      syntax:
        content:
          CSharp: public static readonly int Disassembler_Option_AsmPrinterVariant
          VB: Public Shared ReadOnly Disassembler_Option_AsmPrinterVariant As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_Option_SetInstrComments
      commentId: F:Swigged.LLVM.LLVM.Disassembler_Option_SetInstrComments
      language: CSharp
      name:
        CSharp: Disassembler_Option_SetInstrComments
        VB: Disassembler_Option_SetInstrComments
      nameWithType:
        CSharp: LLVM.Disassembler_Option_SetInstrComments
        VB: LLVM.Disassembler_Option_SetInstrComments
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_Option_SetInstrComments
        VB: Swigged.LLVM.LLVM.Disassembler_Option_SetInstrComments
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_Option_SetInstrComments
        path: src/swigged.llvm/LLVM.cs
        startLine: 3743
      syntax:
        content:
          CSharp: public static readonly int Disassembler_Option_SetInstrComments
          VB: Public Shared ReadOnly Disassembler_Option_SetInstrComments As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Swigged.LLVM.LLVM.Disassembler_Option_PrintLatency
      commentId: F:Swigged.LLVM.LLVM.Disassembler_Option_PrintLatency
      language: CSharp
      name:
        CSharp: Disassembler_Option_PrintLatency
        VB: Disassembler_Option_PrintLatency
      nameWithType:
        CSharp: LLVM.Disassembler_Option_PrintLatency
        VB: LLVM.Disassembler_Option_PrintLatency
      qualifiedName:
        CSharp: Swigged.LLVM.LLVM.Disassembler_Option_PrintLatency
        VB: Swigged.LLVM.LLVM.Disassembler_Option_PrintLatency
      type: Field
      assemblies:
      - swigged.llvm
      namespace: Swigged.LLVM
      source:
        remote:
          path: src/swigged.llvm/LLVM.cs
          branch: master
          repo: https://github.com/kaby76/swigged-llvm-docfx.git
        id: Disassembler_Option_PrintLatency
        path: src/swigged.llvm/LLVM.cs
        startLine: 3744
      syntax:
        content:
          CSharp: public static readonly int Disassembler_Option_PrintLatency
          VB: Public Shared ReadOnly Disassembler_Option_PrintLatency As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
references:
  Swigged.LLVM:
    name:
      CSharp:
      - name: Swigged.LLVM
        nameWithType: Swigged.LLVM
        qualifiedName: Swigged.LLVM
      VB:
      - name: Swigged.LLVM
        nameWithType: Swigged.LLVM
        qualifiedName: Swigged.LLVM
    isDefinition: true
    commentId: N:Swigged.LLVM
  Swigged.LLVM.AtomicOrdering:
    name:
      CSharp:
      - id: Swigged.LLVM.AtomicOrdering
        name: AtomicOrdering
        nameWithType: AtomicOrdering
        qualifiedName: Swigged.LLVM.AtomicOrdering
      VB:
      - id: Swigged.LLVM.AtomicOrdering
        name: AtomicOrdering
        nameWithType: AtomicOrdering
        qualifiedName: Swigged.LLVM.AtomicOrdering
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.AtomicOrdering
  Swigged.LLVM.AtomicRMWBinOp:
    name:
      CSharp:
      - id: Swigged.LLVM.AtomicRMWBinOp
        name: AtomicRMWBinOp
        nameWithType: AtomicRMWBinOp
        qualifiedName: Swigged.LLVM.AtomicRMWBinOp
      VB:
      - id: Swigged.LLVM.AtomicRMWBinOp
        name: AtomicRMWBinOp
        nameWithType: AtomicRMWBinOp
        qualifiedName: Swigged.LLVM.AtomicRMWBinOp
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.AtomicRMWBinOp
  System.IntPtr:
    name:
      CSharp:
      - id: System.IntPtr
        name: System.IntPtr
        nameWithType: System.IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      VB:
      - id: System.IntPtr
        name: System.IntPtr
        nameWithType: System.IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
    isDefinition: true
  Swigged.LLVM.AttributeRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.AttributeRef.#ctor*
        name: AttributeRef
        nameWithType: AttributeRef.AttributeRef
        qualifiedName: Swigged.LLVM.AttributeRef.AttributeRef
      VB:
      - id: Swigged.LLVM.AttributeRef.#ctor*
        name: AttributeRef
        nameWithType: AttributeRef.AttributeRef
        qualifiedName: Swigged.LLVM.AttributeRef.AttributeRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.AttributeRef.#ctor
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
  Swigged.LLVM.AttributeRef:
    name:
      CSharp:
      - id: Swigged.LLVM.AttributeRef
        name: AttributeRef
        nameWithType: AttributeRef
        qualifiedName: Swigged.LLVM.AttributeRef
      VB:
      - id: Swigged.LLVM.AttributeRef
        name: AttributeRef
        nameWithType: AttributeRef
        qualifiedName: Swigged.LLVM.AttributeRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.AttributeRef
  Swigged.LLVM.AttributeRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.AttributeRef.Equals*
        name: Equals
        nameWithType: AttributeRef.Equals
        qualifiedName: Swigged.LLVM.AttributeRef.Equals
      VB:
      - id: Swigged.LLVM.AttributeRef.Equals*
        name: Equals
        nameWithType: AttributeRef.Equals
        qualifiedName: Swigged.LLVM.AttributeRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.AttributeRef.Equals
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
  Swigged.LLVM.AttributeRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.AttributeRef.GetHashCode*
        name: GetHashCode
        nameWithType: AttributeRef.GetHashCode
        qualifiedName: Swigged.LLVM.AttributeRef.GetHashCode
      VB:
      - id: Swigged.LLVM.AttributeRef.GetHashCode*
        name: GetHashCode
        nameWithType: AttributeRef.GetHashCode
        qualifiedName: Swigged.LLVM.AttributeRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.AttributeRef.GetHashCode
  Swigged.LLVM.AttributeRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.AttributeRef.op_Equality*
        name: Equality
        nameWithType: AttributeRef.Equality
        qualifiedName: Swigged.LLVM.AttributeRef.Equality
      VB:
      - id: Swigged.LLVM.AttributeRef.op_Equality*
        name: Equality
        nameWithType: AttributeRef.Equality
        qualifiedName: Swigged.LLVM.AttributeRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.AttributeRef.op_Equality
  Swigged.LLVM.AttributeRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.AttributeRef.op_Inequality*
        name: Inequality
        nameWithType: AttributeRef.Inequality
        qualifiedName: Swigged.LLVM.AttributeRef.Inequality
      VB:
      - id: Swigged.LLVM.AttributeRef.op_Inequality*
        name: Inequality
        nameWithType: AttributeRef.Inequality
        qualifiedName: Swigged.LLVM.AttributeRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.AttributeRef.op_Inequality
  Swigged.LLVM.BasicBlockRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.BasicBlockRef.#ctor*
        name: BasicBlockRef
        nameWithType: BasicBlockRef.BasicBlockRef
        qualifiedName: Swigged.LLVM.BasicBlockRef.BasicBlockRef
      VB:
      - id: Swigged.LLVM.BasicBlockRef.#ctor*
        name: BasicBlockRef
        nameWithType: BasicBlockRef.BasicBlockRef
        qualifiedName: Swigged.LLVM.BasicBlockRef.BasicBlockRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BasicBlockRef.#ctor
  Swigged.LLVM.BasicBlockRef:
    name:
      CSharp:
      - id: Swigged.LLVM.BasicBlockRef
        name: BasicBlockRef
        nameWithType: BasicBlockRef
        qualifiedName: Swigged.LLVM.BasicBlockRef
      VB:
      - id: Swigged.LLVM.BasicBlockRef
        name: BasicBlockRef
        nameWithType: BasicBlockRef
        qualifiedName: Swigged.LLVM.BasicBlockRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.BasicBlockRef
  Swigged.LLVM.BasicBlockRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.BasicBlockRef.Equals*
        name: Equals
        nameWithType: BasicBlockRef.Equals
        qualifiedName: Swigged.LLVM.BasicBlockRef.Equals
      VB:
      - id: Swigged.LLVM.BasicBlockRef.Equals*
        name: Equals
        nameWithType: BasicBlockRef.Equals
        qualifiedName: Swigged.LLVM.BasicBlockRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BasicBlockRef.Equals
  Swigged.LLVM.BasicBlockRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.BasicBlockRef.GetHashCode*
        name: GetHashCode
        nameWithType: BasicBlockRef.GetHashCode
        qualifiedName: Swigged.LLVM.BasicBlockRef.GetHashCode
      VB:
      - id: Swigged.LLVM.BasicBlockRef.GetHashCode*
        name: GetHashCode
        nameWithType: BasicBlockRef.GetHashCode
        qualifiedName: Swigged.LLVM.BasicBlockRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BasicBlockRef.GetHashCode
  Swigged.LLVM.BasicBlockRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.BasicBlockRef.op_Equality*
        name: Equality
        nameWithType: BasicBlockRef.Equality
        qualifiedName: Swigged.LLVM.BasicBlockRef.Equality
      VB:
      - id: Swigged.LLVM.BasicBlockRef.op_Equality*
        name: Equality
        nameWithType: BasicBlockRef.Equality
        qualifiedName: Swigged.LLVM.BasicBlockRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BasicBlockRef.op_Equality
  Swigged.LLVM.BasicBlockRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.BasicBlockRef.op_Inequality*
        name: Inequality
        nameWithType: BasicBlockRef.Inequality
        qualifiedName: Swigged.LLVM.BasicBlockRef.Inequality
      VB:
      - id: Swigged.LLVM.BasicBlockRef.op_Inequality*
        name: Inequality
        nameWithType: BasicBlockRef.Inequality
        qualifiedName: Swigged.LLVM.BasicBlockRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BasicBlockRef.op_Inequality
  Swigged.LLVM.BuilderRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.BuilderRef.#ctor*
        name: BuilderRef
        nameWithType: BuilderRef.BuilderRef
        qualifiedName: Swigged.LLVM.BuilderRef.BuilderRef
      VB:
      - id: Swigged.LLVM.BuilderRef.#ctor*
        name: BuilderRef
        nameWithType: BuilderRef.BuilderRef
        qualifiedName: Swigged.LLVM.BuilderRef.BuilderRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BuilderRef.#ctor
  Swigged.LLVM.BuilderRef:
    name:
      CSharp:
      - id: Swigged.LLVM.BuilderRef
        name: BuilderRef
        nameWithType: BuilderRef
        qualifiedName: Swigged.LLVM.BuilderRef
      VB:
      - id: Swigged.LLVM.BuilderRef
        name: BuilderRef
        nameWithType: BuilderRef
        qualifiedName: Swigged.LLVM.BuilderRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.BuilderRef
  Swigged.LLVM.BuilderRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.BuilderRef.Equals*
        name: Equals
        nameWithType: BuilderRef.Equals
        qualifiedName: Swigged.LLVM.BuilderRef.Equals
      VB:
      - id: Swigged.LLVM.BuilderRef.Equals*
        name: Equals
        nameWithType: BuilderRef.Equals
        qualifiedName: Swigged.LLVM.BuilderRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BuilderRef.Equals
  Swigged.LLVM.BuilderRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.BuilderRef.GetHashCode*
        name: GetHashCode
        nameWithType: BuilderRef.GetHashCode
        qualifiedName: Swigged.LLVM.BuilderRef.GetHashCode
      VB:
      - id: Swigged.LLVM.BuilderRef.GetHashCode*
        name: GetHashCode
        nameWithType: BuilderRef.GetHashCode
        qualifiedName: Swigged.LLVM.BuilderRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BuilderRef.GetHashCode
  Swigged.LLVM.BuilderRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.BuilderRef.op_Equality*
        name: Equality
        nameWithType: BuilderRef.Equality
        qualifiedName: Swigged.LLVM.BuilderRef.Equality
      VB:
      - id: Swigged.LLVM.BuilderRef.op_Equality*
        name: Equality
        nameWithType: BuilderRef.Equality
        qualifiedName: Swigged.LLVM.BuilderRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BuilderRef.op_Equality
  Swigged.LLVM.BuilderRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.BuilderRef.op_Inequality*
        name: Inequality
        nameWithType: BuilderRef.Inequality
        qualifiedName: Swigged.LLVM.BuilderRef.Inequality
      VB:
      - id: Swigged.LLVM.BuilderRef.op_Inequality*
        name: Inequality
        nameWithType: BuilderRef.Inequality
        qualifiedName: Swigged.LLVM.BuilderRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.BuilderRef.op_Inequality
  Swigged.LLVM.ByteOrdering:
    name:
      CSharp:
      - id: Swigged.LLVM.ByteOrdering
        name: ByteOrdering
        nameWithType: ByteOrdering
        qualifiedName: Swigged.LLVM.ByteOrdering
      VB:
      - id: Swigged.LLVM.ByteOrdering
        name: ByteOrdering
        nameWithType: ByteOrdering
        qualifiedName: Swigged.LLVM.ByteOrdering
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ByteOrdering
  Swigged.LLVM.CallConv:
    name:
      CSharp:
      - id: Swigged.LLVM.CallConv
        name: CallConv
        nameWithType: CallConv
        qualifiedName: Swigged.LLVM.CallConv
      VB:
      - id: Swigged.LLVM.CallConv
        name: CallConv
        nameWithType: CallConv
        qualifiedName: Swigged.LLVM.CallConv
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.CallConv
  Swigged.LLVM.CodeGenFileType:
    name:
      CSharp:
      - id: Swigged.LLVM.CodeGenFileType
        name: CodeGenFileType
        nameWithType: CodeGenFileType
        qualifiedName: Swigged.LLVM.CodeGenFileType
      VB:
      - id: Swigged.LLVM.CodeGenFileType
        name: CodeGenFileType
        nameWithType: CodeGenFileType
        qualifiedName: Swigged.LLVM.CodeGenFileType
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.CodeGenFileType
  Swigged.LLVM.CodeGenOptLevel:
    name:
      CSharp:
      - id: Swigged.LLVM.CodeGenOptLevel
        name: CodeGenOptLevel
        nameWithType: CodeGenOptLevel
        qualifiedName: Swigged.LLVM.CodeGenOptLevel
      VB:
      - id: Swigged.LLVM.CodeGenOptLevel
        name: CodeGenOptLevel
        nameWithType: CodeGenOptLevel
        qualifiedName: Swigged.LLVM.CodeGenOptLevel
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.CodeGenOptLevel
  Swigged.LLVM.CodeModel:
    name:
      CSharp:
      - id: Swigged.LLVM.CodeModel
        name: CodeModel
        nameWithType: CodeModel
        qualifiedName: Swigged.LLVM.CodeModel
      VB:
      - id: Swigged.LLVM.CodeModel
        name: CodeModel
        nameWithType: CodeModel
        qualifiedName: Swigged.LLVM.CodeModel
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.CodeModel
  Swigged.LLVM.ContextRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.ContextRef.#ctor*
        name: ContextRef
        nameWithType: ContextRef.ContextRef
        qualifiedName: Swigged.LLVM.ContextRef.ContextRef
      VB:
      - id: Swigged.LLVM.ContextRef.#ctor*
        name: ContextRef
        nameWithType: ContextRef.ContextRef
        qualifiedName: Swigged.LLVM.ContextRef.ContextRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ContextRef.#ctor
  Swigged.LLVM.ContextRef:
    name:
      CSharp:
      - id: Swigged.LLVM.ContextRef
        name: ContextRef
        nameWithType: ContextRef
        qualifiedName: Swigged.LLVM.ContextRef
      VB:
      - id: Swigged.LLVM.ContextRef
        name: ContextRef
        nameWithType: ContextRef
        qualifiedName: Swigged.LLVM.ContextRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ContextRef
  Swigged.LLVM.ContextRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.ContextRef.Equals*
        name: Equals
        nameWithType: ContextRef.Equals
        qualifiedName: Swigged.LLVM.ContextRef.Equals
      VB:
      - id: Swigged.LLVM.ContextRef.Equals*
        name: Equals
        nameWithType: ContextRef.Equals
        qualifiedName: Swigged.LLVM.ContextRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ContextRef.Equals
  Swigged.LLVM.ContextRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.ContextRef.GetHashCode*
        name: GetHashCode
        nameWithType: ContextRef.GetHashCode
        qualifiedName: Swigged.LLVM.ContextRef.GetHashCode
      VB:
      - id: Swigged.LLVM.ContextRef.GetHashCode*
        name: GetHashCode
        nameWithType: ContextRef.GetHashCode
        qualifiedName: Swigged.LLVM.ContextRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ContextRef.GetHashCode
  Swigged.LLVM.ContextRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ContextRef.op_Equality*
        name: Equality
        nameWithType: ContextRef.Equality
        qualifiedName: Swigged.LLVM.ContextRef.Equality
      VB:
      - id: Swigged.LLVM.ContextRef.op_Equality*
        name: Equality
        nameWithType: ContextRef.Equality
        qualifiedName: Swigged.LLVM.ContextRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ContextRef.op_Equality
  Swigged.LLVM.ContextRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ContextRef.op_Inequality*
        name: Inequality
        nameWithType: ContextRef.Inequality
        qualifiedName: Swigged.LLVM.ContextRef.Inequality
      VB:
      - id: Swigged.LLVM.ContextRef.op_Inequality*
        name: Inequality
        nameWithType: ContextRef.Inequality
        qualifiedName: Swigged.LLVM.ContextRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ContextRef.op_Inequality
  Swigged.LLVM.DiagnosticInfoRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.DiagnosticInfoRef.#ctor*
        name: DiagnosticInfoRef
        nameWithType: DiagnosticInfoRef.DiagnosticInfoRef
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.DiagnosticInfoRef
      VB:
      - id: Swigged.LLVM.DiagnosticInfoRef.#ctor*
        name: DiagnosticInfoRef
        nameWithType: DiagnosticInfoRef.DiagnosticInfoRef
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.DiagnosticInfoRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.DiagnosticInfoRef.#ctor
  Swigged.LLVM.DiagnosticInfoRef:
    name:
      CSharp:
      - id: Swigged.LLVM.DiagnosticInfoRef
        name: DiagnosticInfoRef
        nameWithType: DiagnosticInfoRef
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef
      VB:
      - id: Swigged.LLVM.DiagnosticInfoRef
        name: DiagnosticInfoRef
        nameWithType: DiagnosticInfoRef
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.DiagnosticInfoRef
  Swigged.LLVM.DiagnosticInfoRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.DiagnosticInfoRef.Equals*
        name: Equals
        nameWithType: DiagnosticInfoRef.Equals
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.Equals
      VB:
      - id: Swigged.LLVM.DiagnosticInfoRef.Equals*
        name: Equals
        nameWithType: DiagnosticInfoRef.Equals
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.DiagnosticInfoRef.Equals
  Swigged.LLVM.DiagnosticInfoRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.DiagnosticInfoRef.GetHashCode*
        name: GetHashCode
        nameWithType: DiagnosticInfoRef.GetHashCode
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.GetHashCode
      VB:
      - id: Swigged.LLVM.DiagnosticInfoRef.GetHashCode*
        name: GetHashCode
        nameWithType: DiagnosticInfoRef.GetHashCode
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.DiagnosticInfoRef.GetHashCode
  Swigged.LLVM.DiagnosticInfoRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.DiagnosticInfoRef.op_Equality*
        name: Equality
        nameWithType: DiagnosticInfoRef.Equality
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.Equality
      VB:
      - id: Swigged.LLVM.DiagnosticInfoRef.op_Equality*
        name: Equality
        nameWithType: DiagnosticInfoRef.Equality
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.DiagnosticInfoRef.op_Equality
  Swigged.LLVM.DiagnosticInfoRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.DiagnosticInfoRef.op_Inequality*
        name: Inequality
        nameWithType: DiagnosticInfoRef.Inequality
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.Inequality
      VB:
      - id: Swigged.LLVM.DiagnosticInfoRef.op_Inequality*
        name: Inequality
        nameWithType: DiagnosticInfoRef.Inequality
        qualifiedName: Swigged.LLVM.DiagnosticInfoRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.DiagnosticInfoRef.op_Inequality
  Swigged.LLVM.DiagnosticSeverity:
    name:
      CSharp:
      - id: Swigged.LLVM.DiagnosticSeverity
        name: DiagnosticSeverity
        nameWithType: DiagnosticSeverity
        qualifiedName: Swigged.LLVM.DiagnosticSeverity
      VB:
      - id: Swigged.LLVM.DiagnosticSeverity
        name: DiagnosticSeverity
        nameWithType: DiagnosticSeverity
        qualifiedName: Swigged.LLVM.DiagnosticSeverity
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.DiagnosticSeverity
  Swigged.LLVM.DLLStorageClass:
    name:
      CSharp:
      - id: Swigged.LLVM.DLLStorageClass
        name: DLLStorageClass
        nameWithType: DLLStorageClass
        qualifiedName: Swigged.LLVM.DLLStorageClass
      VB:
      - id: Swigged.LLVM.DLLStorageClass
        name: DLLStorageClass
        nameWithType: DLLStorageClass
        qualifiedName: Swigged.LLVM.DLLStorageClass
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.DLLStorageClass
  Swigged.LLVM.ExecutionEngineRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.ExecutionEngineRef.#ctor*
        name: ExecutionEngineRef
        nameWithType: ExecutionEngineRef.ExecutionEngineRef
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.ExecutionEngineRef
      VB:
      - id: Swigged.LLVM.ExecutionEngineRef.#ctor*
        name: ExecutionEngineRef
        nameWithType: ExecutionEngineRef.ExecutionEngineRef
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.ExecutionEngineRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ExecutionEngineRef.#ctor
  Swigged.LLVM.ExecutionEngineRef:
    name:
      CSharp:
      - id: Swigged.LLVM.ExecutionEngineRef
        name: ExecutionEngineRef
        nameWithType: ExecutionEngineRef
        qualifiedName: Swigged.LLVM.ExecutionEngineRef
      VB:
      - id: Swigged.LLVM.ExecutionEngineRef
        name: ExecutionEngineRef
        nameWithType: ExecutionEngineRef
        qualifiedName: Swigged.LLVM.ExecutionEngineRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ExecutionEngineRef
  Swigged.LLVM.ExecutionEngineRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.ExecutionEngineRef.Equals*
        name: Equals
        nameWithType: ExecutionEngineRef.Equals
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.Equals
      VB:
      - id: Swigged.LLVM.ExecutionEngineRef.Equals*
        name: Equals
        nameWithType: ExecutionEngineRef.Equals
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ExecutionEngineRef.Equals
  Swigged.LLVM.ExecutionEngineRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.ExecutionEngineRef.GetHashCode*
        name: GetHashCode
        nameWithType: ExecutionEngineRef.GetHashCode
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.GetHashCode
      VB:
      - id: Swigged.LLVM.ExecutionEngineRef.GetHashCode*
        name: GetHashCode
        nameWithType: ExecutionEngineRef.GetHashCode
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ExecutionEngineRef.GetHashCode
  Swigged.LLVM.ExecutionEngineRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ExecutionEngineRef.op_Equality*
        name: Equality
        nameWithType: ExecutionEngineRef.Equality
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.Equality
      VB:
      - id: Swigged.LLVM.ExecutionEngineRef.op_Equality*
        name: Equality
        nameWithType: ExecutionEngineRef.Equality
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ExecutionEngineRef.op_Equality
  Swigged.LLVM.ExecutionEngineRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ExecutionEngineRef.op_Inequality*
        name: Inequality
        nameWithType: ExecutionEngineRef.Inequality
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.Inequality
      VB:
      - id: Swigged.LLVM.ExecutionEngineRef.op_Inequality*
        name: Inequality
        nameWithType: ExecutionEngineRef.Inequality
        qualifiedName: Swigged.LLVM.ExecutionEngineRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ExecutionEngineRef.op_Inequality
  Swigged.LLVM.GenericValueRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.GenericValueRef.#ctor*
        name: GenericValueRef
        nameWithType: GenericValueRef.GenericValueRef
        qualifiedName: Swigged.LLVM.GenericValueRef.GenericValueRef
      VB:
      - id: Swigged.LLVM.GenericValueRef.#ctor*
        name: GenericValueRef
        nameWithType: GenericValueRef.GenericValueRef
        qualifiedName: Swigged.LLVM.GenericValueRef.GenericValueRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.GenericValueRef.#ctor
  Swigged.LLVM.GenericValueRef:
    name:
      CSharp:
      - id: Swigged.LLVM.GenericValueRef
        name: GenericValueRef
        nameWithType: GenericValueRef
        qualifiedName: Swigged.LLVM.GenericValueRef
      VB:
      - id: Swigged.LLVM.GenericValueRef
        name: GenericValueRef
        nameWithType: GenericValueRef
        qualifiedName: Swigged.LLVM.GenericValueRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.GenericValueRef
  Swigged.LLVM.GenericValueRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.GenericValueRef.Equals*
        name: Equals
        nameWithType: GenericValueRef.Equals
        qualifiedName: Swigged.LLVM.GenericValueRef.Equals
      VB:
      - id: Swigged.LLVM.GenericValueRef.Equals*
        name: Equals
        nameWithType: GenericValueRef.Equals
        qualifiedName: Swigged.LLVM.GenericValueRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.GenericValueRef.Equals
  Swigged.LLVM.GenericValueRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.GenericValueRef.GetHashCode*
        name: GetHashCode
        nameWithType: GenericValueRef.GetHashCode
        qualifiedName: Swigged.LLVM.GenericValueRef.GetHashCode
      VB:
      - id: Swigged.LLVM.GenericValueRef.GetHashCode*
        name: GetHashCode
        nameWithType: GenericValueRef.GetHashCode
        qualifiedName: Swigged.LLVM.GenericValueRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.GenericValueRef.GetHashCode
  Swigged.LLVM.GenericValueRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.GenericValueRef.op_Equality*
        name: Equality
        nameWithType: GenericValueRef.Equality
        qualifiedName: Swigged.LLVM.GenericValueRef.Equality
      VB:
      - id: Swigged.LLVM.GenericValueRef.op_Equality*
        name: Equality
        nameWithType: GenericValueRef.Equality
        qualifiedName: Swigged.LLVM.GenericValueRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.GenericValueRef.op_Equality
  Swigged.LLVM.GenericValueRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.GenericValueRef.op_Inequality*
        name: Inequality
        nameWithType: GenericValueRef.Inequality
        qualifiedName: Swigged.LLVM.GenericValueRef.Inequality
      VB:
      - id: Swigged.LLVM.GenericValueRef.op_Inequality*
        name: Inequality
        nameWithType: GenericValueRef.Inequality
        qualifiedName: Swigged.LLVM.GenericValueRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.GenericValueRef.op_Inequality
  Swigged.LLVM.IntPredicate:
    name:
      CSharp:
      - id: Swigged.LLVM.IntPredicate
        name: IntPredicate
        nameWithType: IntPredicate
        qualifiedName: Swigged.LLVM.IntPredicate
      VB:
      - id: Swigged.LLVM.IntPredicate
        name: IntPredicate
        nameWithType: IntPredicate
        qualifiedName: Swigged.LLVM.IntPredicate
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.IntPredicate
  Swigged.LLVM.LandingPadClauseTy:
    name:
      CSharp:
      - id: Swigged.LLVM.LandingPadClauseTy
        name: LandingPadClauseTy
        nameWithType: LandingPadClauseTy
        qualifiedName: Swigged.LLVM.LandingPadClauseTy
      VB:
      - id: Swigged.LLVM.LandingPadClauseTy
        name: LandingPadClauseTy
        nameWithType: LandingPadClauseTy
        qualifiedName: Swigged.LLVM.LandingPadClauseTy
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.LandingPadClauseTy
  Swigged.LLVM.Linkage:
    name:
      CSharp:
      - id: Swigged.LLVM.Linkage
        name: Linkage
        nameWithType: Linkage
        qualifiedName: Swigged.LLVM.Linkage
      VB:
      - id: Swigged.LLVM.Linkage
        name: Linkage
        nameWithType: Linkage
        qualifiedName: Swigged.LLVM.Linkage
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.Linkage
  Swigged.LLVM.LinkerMode:
    name:
      CSharp:
      - id: Swigged.LLVM.LinkerMode
        name: LinkerMode
        nameWithType: LinkerMode
        qualifiedName: Swigged.LLVM.LinkerMode
      VB:
      - id: Swigged.LLVM.LinkerMode
        name: LinkerMode
        nameWithType: LinkerMode
        qualifiedName: Swigged.LLVM.LinkerMode
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.LinkerMode
  Swigged.LLVM.MCJITCompilerOptions.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITCompilerOptions.#ctor*
        name: MCJITCompilerOptions
        nameWithType: MCJITCompilerOptions.MCJITCompilerOptions
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.MCJITCompilerOptions
      VB:
      - id: Swigged.LLVM.MCJITCompilerOptions.#ctor*
        name: MCJITCompilerOptions
        nameWithType: MCJITCompilerOptions.MCJITCompilerOptions
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.MCJITCompilerOptions
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITCompilerOptions.#ctor
  Swigged.LLVM.MCJITCompilerOptions:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITCompilerOptions
        name: MCJITCompilerOptions
        nameWithType: MCJITCompilerOptions
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions
      VB:
      - id: Swigged.LLVM.MCJITCompilerOptions
        name: MCJITCompilerOptions
        nameWithType: MCJITCompilerOptions
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.MCJITCompilerOptions
  Swigged.LLVM.MCJITCompilerOptions.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITCompilerOptions.Equals*
        name: Equals
        nameWithType: MCJITCompilerOptions.Equals
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.Equals
      VB:
      - id: Swigged.LLVM.MCJITCompilerOptions.Equals*
        name: Equals
        nameWithType: MCJITCompilerOptions.Equals
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITCompilerOptions.Equals
  Swigged.LLVM.MCJITCompilerOptions.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITCompilerOptions.GetHashCode*
        name: GetHashCode
        nameWithType: MCJITCompilerOptions.GetHashCode
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.GetHashCode
      VB:
      - id: Swigged.LLVM.MCJITCompilerOptions.GetHashCode*
        name: GetHashCode
        nameWithType: MCJITCompilerOptions.GetHashCode
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITCompilerOptions.GetHashCode
  Swigged.LLVM.MCJITCompilerOptions.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITCompilerOptions.op_Equality*
        name: Equality
        nameWithType: MCJITCompilerOptions.Equality
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.Equality
      VB:
      - id: Swigged.LLVM.MCJITCompilerOptions.op_Equality*
        name: Equality
        nameWithType: MCJITCompilerOptions.Equality
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITCompilerOptions.op_Equality
  Swigged.LLVM.MCJITCompilerOptions.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITCompilerOptions.op_Inequality*
        name: Inequality
        nameWithType: MCJITCompilerOptions.Inequality
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.Inequality
      VB:
      - id: Swigged.LLVM.MCJITCompilerOptions.op_Inequality*
        name: Inequality
        nameWithType: MCJITCompilerOptions.Inequality
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITCompilerOptions.op_Inequality
  Swigged.LLVM.MCJITCompilerOptions.Dispose*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITCompilerOptions.Dispose*
        name: Dispose
        nameWithType: MCJITCompilerOptions.Dispose
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.Dispose
      VB:
      - id: Swigged.LLVM.MCJITCompilerOptions.Dispose*
        name: Dispose
        nameWithType: MCJITCompilerOptions.Dispose
        qualifiedName: Swigged.LLVM.MCJITCompilerOptions.Dispose
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITCompilerOptions.Dispose
  Swigged.LLVM.MCJITMemoryManagerRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.#ctor*
        name: MCJITMemoryManagerRef
        nameWithType: MCJITMemoryManagerRef.MCJITMemoryManagerRef
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.MCJITMemoryManagerRef
      VB:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.#ctor*
        name: MCJITMemoryManagerRef
        nameWithType: MCJITMemoryManagerRef.MCJITMemoryManagerRef
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.MCJITMemoryManagerRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITMemoryManagerRef.#ctor
  Swigged.LLVM.MCJITMemoryManagerRef:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITMemoryManagerRef
        name: MCJITMemoryManagerRef
        nameWithType: MCJITMemoryManagerRef
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef
      VB:
      - id: Swigged.LLVM.MCJITMemoryManagerRef
        name: MCJITMemoryManagerRef
        nameWithType: MCJITMemoryManagerRef
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.MCJITMemoryManagerRef
  Swigged.LLVM.MCJITMemoryManagerRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.Equals*
        name: Equals
        nameWithType: MCJITMemoryManagerRef.Equals
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.Equals
      VB:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.Equals*
        name: Equals
        nameWithType: MCJITMemoryManagerRef.Equals
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITMemoryManagerRef.Equals
  Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode*
        name: GetHashCode
        nameWithType: MCJITMemoryManagerRef.GetHashCode
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode
      VB:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode*
        name: GetHashCode
        nameWithType: MCJITMemoryManagerRef.GetHashCode
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITMemoryManagerRef.GetHashCode
  Swigged.LLVM.MCJITMemoryManagerRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.op_Equality*
        name: Equality
        nameWithType: MCJITMemoryManagerRef.Equality
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.Equality
      VB:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.op_Equality*
        name: Equality
        nameWithType: MCJITMemoryManagerRef.Equality
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITMemoryManagerRef.op_Equality
  Swigged.LLVM.MCJITMemoryManagerRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.op_Inequality*
        name: Inequality
        nameWithType: MCJITMemoryManagerRef.Inequality
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.Inequality
      VB:
      - id: Swigged.LLVM.MCJITMemoryManagerRef.op_Inequality*
        name: Inequality
        nameWithType: MCJITMemoryManagerRef.Inequality
        qualifiedName: Swigged.LLVM.MCJITMemoryManagerRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MCJITMemoryManagerRef.op_Inequality
  Swigged.LLVM.MemoryBufferRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.MemoryBufferRef.#ctor*
        name: MemoryBufferRef
        nameWithType: MemoryBufferRef.MemoryBufferRef
        qualifiedName: Swigged.LLVM.MemoryBufferRef.MemoryBufferRef
      VB:
      - id: Swigged.LLVM.MemoryBufferRef.#ctor*
        name: MemoryBufferRef
        nameWithType: MemoryBufferRef.MemoryBufferRef
        qualifiedName: Swigged.LLVM.MemoryBufferRef.MemoryBufferRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MemoryBufferRef.#ctor
  Swigged.LLVM.MemoryBufferRef:
    name:
      CSharp:
      - id: Swigged.LLVM.MemoryBufferRef
        name: MemoryBufferRef
        nameWithType: MemoryBufferRef
        qualifiedName: Swigged.LLVM.MemoryBufferRef
      VB:
      - id: Swigged.LLVM.MemoryBufferRef
        name: MemoryBufferRef
        nameWithType: MemoryBufferRef
        qualifiedName: Swigged.LLVM.MemoryBufferRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.MemoryBufferRef
  Swigged.LLVM.MemoryBufferRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.MemoryBufferRef.Equals*
        name: Equals
        nameWithType: MemoryBufferRef.Equals
        qualifiedName: Swigged.LLVM.MemoryBufferRef.Equals
      VB:
      - id: Swigged.LLVM.MemoryBufferRef.Equals*
        name: Equals
        nameWithType: MemoryBufferRef.Equals
        qualifiedName: Swigged.LLVM.MemoryBufferRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MemoryBufferRef.Equals
  Swigged.LLVM.MemoryBufferRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.MemoryBufferRef.GetHashCode*
        name: GetHashCode
        nameWithType: MemoryBufferRef.GetHashCode
        qualifiedName: Swigged.LLVM.MemoryBufferRef.GetHashCode
      VB:
      - id: Swigged.LLVM.MemoryBufferRef.GetHashCode*
        name: GetHashCode
        nameWithType: MemoryBufferRef.GetHashCode
        qualifiedName: Swigged.LLVM.MemoryBufferRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MemoryBufferRef.GetHashCode
  Swigged.LLVM.MemoryBufferRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.MemoryBufferRef.op_Equality*
        name: Equality
        nameWithType: MemoryBufferRef.Equality
        qualifiedName: Swigged.LLVM.MemoryBufferRef.Equality
      VB:
      - id: Swigged.LLVM.MemoryBufferRef.op_Equality*
        name: Equality
        nameWithType: MemoryBufferRef.Equality
        qualifiedName: Swigged.LLVM.MemoryBufferRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MemoryBufferRef.op_Equality
  Swigged.LLVM.MemoryBufferRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.MemoryBufferRef.op_Inequality*
        name: Inequality
        nameWithType: MemoryBufferRef.Inequality
        qualifiedName: Swigged.LLVM.MemoryBufferRef.Inequality
      VB:
      - id: Swigged.LLVM.MemoryBufferRef.op_Inequality*
        name: Inequality
        nameWithType: MemoryBufferRef.Inequality
        qualifiedName: Swigged.LLVM.MemoryBufferRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.MemoryBufferRef.op_Inequality
  Swigged.LLVM.ModuleProviderRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleProviderRef.#ctor*
        name: ModuleProviderRef
        nameWithType: ModuleProviderRef.ModuleProviderRef
        qualifiedName: Swigged.LLVM.ModuleProviderRef.ModuleProviderRef
      VB:
      - id: Swigged.LLVM.ModuleProviderRef.#ctor*
        name: ModuleProviderRef
        nameWithType: ModuleProviderRef.ModuleProviderRef
        qualifiedName: Swigged.LLVM.ModuleProviderRef.ModuleProviderRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleProviderRef.#ctor
  Swigged.LLVM.ModuleProviderRef:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleProviderRef
        name: ModuleProviderRef
        nameWithType: ModuleProviderRef
        qualifiedName: Swigged.LLVM.ModuleProviderRef
      VB:
      - id: Swigged.LLVM.ModuleProviderRef
        name: ModuleProviderRef
        nameWithType: ModuleProviderRef
        qualifiedName: Swigged.LLVM.ModuleProviderRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ModuleProviderRef
  Swigged.LLVM.ModuleProviderRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleProviderRef.Equals*
        name: Equals
        nameWithType: ModuleProviderRef.Equals
        qualifiedName: Swigged.LLVM.ModuleProviderRef.Equals
      VB:
      - id: Swigged.LLVM.ModuleProviderRef.Equals*
        name: Equals
        nameWithType: ModuleProviderRef.Equals
        qualifiedName: Swigged.LLVM.ModuleProviderRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleProviderRef.Equals
  Swigged.LLVM.ModuleProviderRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleProviderRef.GetHashCode*
        name: GetHashCode
        nameWithType: ModuleProviderRef.GetHashCode
        qualifiedName: Swigged.LLVM.ModuleProviderRef.GetHashCode
      VB:
      - id: Swigged.LLVM.ModuleProviderRef.GetHashCode*
        name: GetHashCode
        nameWithType: ModuleProviderRef.GetHashCode
        qualifiedName: Swigged.LLVM.ModuleProviderRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleProviderRef.GetHashCode
  Swigged.LLVM.ModuleProviderRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleProviderRef.op_Equality*
        name: Equality
        nameWithType: ModuleProviderRef.Equality
        qualifiedName: Swigged.LLVM.ModuleProviderRef.Equality
      VB:
      - id: Swigged.LLVM.ModuleProviderRef.op_Equality*
        name: Equality
        nameWithType: ModuleProviderRef.Equality
        qualifiedName: Swigged.LLVM.ModuleProviderRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleProviderRef.op_Equality
  Swigged.LLVM.ModuleProviderRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleProviderRef.op_Inequality*
        name: Inequality
        nameWithType: ModuleProviderRef.Inequality
        qualifiedName: Swigged.LLVM.ModuleProviderRef.Inequality
      VB:
      - id: Swigged.LLVM.ModuleProviderRef.op_Inequality*
        name: Inequality
        nameWithType: ModuleProviderRef.Inequality
        qualifiedName: Swigged.LLVM.ModuleProviderRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleProviderRef.op_Inequality
  Swigged.LLVM.ModuleRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleRef.#ctor*
        name: ModuleRef
        nameWithType: ModuleRef.ModuleRef
        qualifiedName: Swigged.LLVM.ModuleRef.ModuleRef
      VB:
      - id: Swigged.LLVM.ModuleRef.#ctor*
        name: ModuleRef
        nameWithType: ModuleRef.ModuleRef
        qualifiedName: Swigged.LLVM.ModuleRef.ModuleRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleRef.#ctor
  Swigged.LLVM.ModuleRef:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleRef
        name: ModuleRef
        nameWithType: ModuleRef
        qualifiedName: Swigged.LLVM.ModuleRef
      VB:
      - id: Swigged.LLVM.ModuleRef
        name: ModuleRef
        nameWithType: ModuleRef
        qualifiedName: Swigged.LLVM.ModuleRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ModuleRef
  Swigged.LLVM.ModuleRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleRef.Equals*
        name: Equals
        nameWithType: ModuleRef.Equals
        qualifiedName: Swigged.LLVM.ModuleRef.Equals
      VB:
      - id: Swigged.LLVM.ModuleRef.Equals*
        name: Equals
        nameWithType: ModuleRef.Equals
        qualifiedName: Swigged.LLVM.ModuleRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleRef.Equals
  Swigged.LLVM.ModuleRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleRef.GetHashCode*
        name: GetHashCode
        nameWithType: ModuleRef.GetHashCode
        qualifiedName: Swigged.LLVM.ModuleRef.GetHashCode
      VB:
      - id: Swigged.LLVM.ModuleRef.GetHashCode*
        name: GetHashCode
        nameWithType: ModuleRef.GetHashCode
        qualifiedName: Swigged.LLVM.ModuleRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleRef.GetHashCode
  Swigged.LLVM.ModuleRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleRef.op_Equality*
        name: Equality
        nameWithType: ModuleRef.Equality
        qualifiedName: Swigged.LLVM.ModuleRef.Equality
      VB:
      - id: Swigged.LLVM.ModuleRef.op_Equality*
        name: Equality
        nameWithType: ModuleRef.Equality
        qualifiedName: Swigged.LLVM.ModuleRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleRef.op_Equality
  Swigged.LLVM.ModuleRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ModuleRef.op_Inequality*
        name: Inequality
        nameWithType: ModuleRef.Inequality
        qualifiedName: Swigged.LLVM.ModuleRef.Inequality
      VB:
      - id: Swigged.LLVM.ModuleRef.op_Inequality*
        name: Inequality
        nameWithType: ModuleRef.Inequality
        qualifiedName: Swigged.LLVM.ModuleRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ModuleRef.op_Inequality
  Swigged.LLVM.ObjectFileRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.ObjectFileRef.#ctor*
        name: ObjectFileRef
        nameWithType: ObjectFileRef.ObjectFileRef
        qualifiedName: Swigged.LLVM.ObjectFileRef.ObjectFileRef
      VB:
      - id: Swigged.LLVM.ObjectFileRef.#ctor*
        name: ObjectFileRef
        nameWithType: ObjectFileRef.ObjectFileRef
        qualifiedName: Swigged.LLVM.ObjectFileRef.ObjectFileRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ObjectFileRef.#ctor
  Swigged.LLVM.ObjectFileRef:
    name:
      CSharp:
      - id: Swigged.LLVM.ObjectFileRef
        name: ObjectFileRef
        nameWithType: ObjectFileRef
        qualifiedName: Swigged.LLVM.ObjectFileRef
      VB:
      - id: Swigged.LLVM.ObjectFileRef
        name: ObjectFileRef
        nameWithType: ObjectFileRef
        qualifiedName: Swigged.LLVM.ObjectFileRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ObjectFileRef
  Swigged.LLVM.ObjectFileRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.ObjectFileRef.Equals*
        name: Equals
        nameWithType: ObjectFileRef.Equals
        qualifiedName: Swigged.LLVM.ObjectFileRef.Equals
      VB:
      - id: Swigged.LLVM.ObjectFileRef.Equals*
        name: Equals
        nameWithType: ObjectFileRef.Equals
        qualifiedName: Swigged.LLVM.ObjectFileRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ObjectFileRef.Equals
  Swigged.LLVM.ObjectFileRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.ObjectFileRef.GetHashCode*
        name: GetHashCode
        nameWithType: ObjectFileRef.GetHashCode
        qualifiedName: Swigged.LLVM.ObjectFileRef.GetHashCode
      VB:
      - id: Swigged.LLVM.ObjectFileRef.GetHashCode*
        name: GetHashCode
        nameWithType: ObjectFileRef.GetHashCode
        qualifiedName: Swigged.LLVM.ObjectFileRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ObjectFileRef.GetHashCode
  Swigged.LLVM.ObjectFileRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ObjectFileRef.op_Equality*
        name: Equality
        nameWithType: ObjectFileRef.Equality
        qualifiedName: Swigged.LLVM.ObjectFileRef.Equality
      VB:
      - id: Swigged.LLVM.ObjectFileRef.op_Equality*
        name: Equality
        nameWithType: ObjectFileRef.Equality
        qualifiedName: Swigged.LLVM.ObjectFileRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ObjectFileRef.op_Equality
  Swigged.LLVM.ObjectFileRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ObjectFileRef.op_Inequality*
        name: Inequality
        nameWithType: ObjectFileRef.Inequality
        qualifiedName: Swigged.LLVM.ObjectFileRef.Inequality
      VB:
      - id: Swigged.LLVM.ObjectFileRef.op_Inequality*
        name: Inequality
        nameWithType: ObjectFileRef.Inequality
        qualifiedName: Swigged.LLVM.ObjectFileRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ObjectFileRef.op_Inequality
  Swigged.LLVM.Opcode:
    name:
      CSharp:
      - id: Swigged.LLVM.Opcode
        name: Opcode
        nameWithType: Opcode
        qualifiedName: Swigged.LLVM.Opcode
      VB:
      - id: Swigged.LLVM.Opcode
        name: Opcode
        nameWithType: Opcode
        qualifiedName: Swigged.LLVM.Opcode
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.Opcode
  Swigged.LLVM.OpInfo1.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfo1.#ctor*
        name: OpInfo1
        nameWithType: OpInfo1.OpInfo1
        qualifiedName: Swigged.LLVM.OpInfo1.OpInfo1
      VB:
      - id: Swigged.LLVM.OpInfo1.#ctor*
        name: OpInfo1
        nameWithType: OpInfo1.OpInfo1
        qualifiedName: Swigged.LLVM.OpInfo1.OpInfo1
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfo1.#ctor
  Swigged.LLVM.OpInfo1:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfo1
        name: OpInfo1
        nameWithType: OpInfo1
        qualifiedName: Swigged.LLVM.OpInfo1
      VB:
      - id: Swigged.LLVM.OpInfo1
        name: OpInfo1
        nameWithType: OpInfo1
        qualifiedName: Swigged.LLVM.OpInfo1
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.OpInfo1
  Swigged.LLVM.OpInfo1.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfo1.Equals*
        name: Equals
        nameWithType: OpInfo1.Equals
        qualifiedName: Swigged.LLVM.OpInfo1.Equals
      VB:
      - id: Swigged.LLVM.OpInfo1.Equals*
        name: Equals
        nameWithType: OpInfo1.Equals
        qualifiedName: Swigged.LLVM.OpInfo1.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfo1.Equals
  Swigged.LLVM.OpInfo1.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfo1.GetHashCode*
        name: GetHashCode
        nameWithType: OpInfo1.GetHashCode
        qualifiedName: Swigged.LLVM.OpInfo1.GetHashCode
      VB:
      - id: Swigged.LLVM.OpInfo1.GetHashCode*
        name: GetHashCode
        nameWithType: OpInfo1.GetHashCode
        qualifiedName: Swigged.LLVM.OpInfo1.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfo1.GetHashCode
  Swigged.LLVM.OpInfo1.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfo1.op_Equality*
        name: Equality
        nameWithType: OpInfo1.Equality
        qualifiedName: Swigged.LLVM.OpInfo1.Equality
      VB:
      - id: Swigged.LLVM.OpInfo1.op_Equality*
        name: Equality
        nameWithType: OpInfo1.Equality
        qualifiedName: Swigged.LLVM.OpInfo1.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfo1.op_Equality
  Swigged.LLVM.OpInfo1.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfo1.op_Inequality*
        name: Inequality
        nameWithType: OpInfo1.Inequality
        qualifiedName: Swigged.LLVM.OpInfo1.Inequality
      VB:
      - id: Swigged.LLVM.OpInfo1.op_Inequality*
        name: Inequality
        nameWithType: OpInfo1.Inequality
        qualifiedName: Swigged.LLVM.OpInfo1.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfo1.op_Inequality
  Swigged.LLVM.OpInfoSymbol1.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfoSymbol1.#ctor*
        name: OpInfoSymbol1
        nameWithType: OpInfoSymbol1.OpInfoSymbol1
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.OpInfoSymbol1
      VB:
      - id: Swigged.LLVM.OpInfoSymbol1.#ctor*
        name: OpInfoSymbol1
        nameWithType: OpInfoSymbol1.OpInfoSymbol1
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.OpInfoSymbol1
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfoSymbol1.#ctor
  Swigged.LLVM.OpInfoSymbol1:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfoSymbol1
        name: OpInfoSymbol1
        nameWithType: OpInfoSymbol1
        qualifiedName: Swigged.LLVM.OpInfoSymbol1
      VB:
      - id: Swigged.LLVM.OpInfoSymbol1
        name: OpInfoSymbol1
        nameWithType: OpInfoSymbol1
        qualifiedName: Swigged.LLVM.OpInfoSymbol1
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.OpInfoSymbol1
  Swigged.LLVM.OpInfoSymbol1.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfoSymbol1.Equals*
        name: Equals
        nameWithType: OpInfoSymbol1.Equals
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.Equals
      VB:
      - id: Swigged.LLVM.OpInfoSymbol1.Equals*
        name: Equals
        nameWithType: OpInfoSymbol1.Equals
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfoSymbol1.Equals
  Swigged.LLVM.OpInfoSymbol1.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfoSymbol1.GetHashCode*
        name: GetHashCode
        nameWithType: OpInfoSymbol1.GetHashCode
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.GetHashCode
      VB:
      - id: Swigged.LLVM.OpInfoSymbol1.GetHashCode*
        name: GetHashCode
        nameWithType: OpInfoSymbol1.GetHashCode
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfoSymbol1.GetHashCode
  Swigged.LLVM.OpInfoSymbol1.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfoSymbol1.op_Equality*
        name: Equality
        nameWithType: OpInfoSymbol1.Equality
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.Equality
      VB:
      - id: Swigged.LLVM.OpInfoSymbol1.op_Equality*
        name: Equality
        nameWithType: OpInfoSymbol1.Equality
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfoSymbol1.op_Equality
  Swigged.LLVM.OpInfoSymbol1.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.OpInfoSymbol1.op_Inequality*
        name: Inequality
        nameWithType: OpInfoSymbol1.Inequality
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.Inequality
      VB:
      - id: Swigged.LLVM.OpInfoSymbol1.op_Inequality*
        name: Inequality
        nameWithType: OpInfoSymbol1.Inequality
        qualifiedName: Swigged.LLVM.OpInfoSymbol1.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OpInfoSymbol1.op_Inequality
  Swigged.LLVM.OrcErrorCode:
    name:
      CSharp:
      - id: Swigged.LLVM.OrcErrorCode
        name: OrcErrorCode
        nameWithType: OrcErrorCode
        qualifiedName: Swigged.LLVM.OrcErrorCode
      VB:
      - id: Swigged.LLVM.OrcErrorCode
        name: OrcErrorCode
        nameWithType: OrcErrorCode
        qualifiedName: Swigged.LLVM.OrcErrorCode
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.OrcErrorCode
  Swigged.LLVM.OrcJITStackRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.OrcJITStackRef.#ctor*
        name: OrcJITStackRef
        nameWithType: OrcJITStackRef.OrcJITStackRef
        qualifiedName: Swigged.LLVM.OrcJITStackRef.OrcJITStackRef
      VB:
      - id: Swigged.LLVM.OrcJITStackRef.#ctor*
        name: OrcJITStackRef
        nameWithType: OrcJITStackRef.OrcJITStackRef
        qualifiedName: Swigged.LLVM.OrcJITStackRef.OrcJITStackRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OrcJITStackRef.#ctor
  Swigged.LLVM.OrcJITStackRef:
    name:
      CSharp:
      - id: Swigged.LLVM.OrcJITStackRef
        name: OrcJITStackRef
        nameWithType: OrcJITStackRef
        qualifiedName: Swigged.LLVM.OrcJITStackRef
      VB:
      - id: Swigged.LLVM.OrcJITStackRef
        name: OrcJITStackRef
        nameWithType: OrcJITStackRef
        qualifiedName: Swigged.LLVM.OrcJITStackRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.OrcJITStackRef
  Swigged.LLVM.OrcJITStackRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.OrcJITStackRef.Equals*
        name: Equals
        nameWithType: OrcJITStackRef.Equals
        qualifiedName: Swigged.LLVM.OrcJITStackRef.Equals
      VB:
      - id: Swigged.LLVM.OrcJITStackRef.Equals*
        name: Equals
        nameWithType: OrcJITStackRef.Equals
        qualifiedName: Swigged.LLVM.OrcJITStackRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OrcJITStackRef.Equals
  Swigged.LLVM.OrcJITStackRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.OrcJITStackRef.GetHashCode*
        name: GetHashCode
        nameWithType: OrcJITStackRef.GetHashCode
        qualifiedName: Swigged.LLVM.OrcJITStackRef.GetHashCode
      VB:
      - id: Swigged.LLVM.OrcJITStackRef.GetHashCode*
        name: GetHashCode
        nameWithType: OrcJITStackRef.GetHashCode
        qualifiedName: Swigged.LLVM.OrcJITStackRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OrcJITStackRef.GetHashCode
  Swigged.LLVM.OrcJITStackRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.OrcJITStackRef.op_Equality*
        name: Equality
        nameWithType: OrcJITStackRef.Equality
        qualifiedName: Swigged.LLVM.OrcJITStackRef.Equality
      VB:
      - id: Swigged.LLVM.OrcJITStackRef.op_Equality*
        name: Equality
        nameWithType: OrcJITStackRef.Equality
        qualifiedName: Swigged.LLVM.OrcJITStackRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OrcJITStackRef.op_Equality
  Swigged.LLVM.OrcJITStackRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.OrcJITStackRef.op_Inequality*
        name: Inequality
        nameWithType: OrcJITStackRef.Inequality
        qualifiedName: Swigged.LLVM.OrcJITStackRef.Inequality
      VB:
      - id: Swigged.LLVM.OrcJITStackRef.op_Inequality*
        name: Inequality
        nameWithType: OrcJITStackRef.Inequality
        qualifiedName: Swigged.LLVM.OrcJITStackRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.OrcJITStackRef.op_Inequality
  Swigged.LLVM.PassManagerBuilderRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerBuilderRef.#ctor*
        name: PassManagerBuilderRef
        nameWithType: PassManagerBuilderRef.PassManagerBuilderRef
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.PassManagerBuilderRef
      VB:
      - id: Swigged.LLVM.PassManagerBuilderRef.#ctor*
        name: PassManagerBuilderRef
        nameWithType: PassManagerBuilderRef.PassManagerBuilderRef
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.PassManagerBuilderRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerBuilderRef.#ctor
  Swigged.LLVM.PassManagerBuilderRef:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerBuilderRef
        name: PassManagerBuilderRef
        nameWithType: PassManagerBuilderRef
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef
      VB:
      - id: Swigged.LLVM.PassManagerBuilderRef
        name: PassManagerBuilderRef
        nameWithType: PassManagerBuilderRef
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.PassManagerBuilderRef
  Swigged.LLVM.PassManagerBuilderRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerBuilderRef.Equals*
        name: Equals
        nameWithType: PassManagerBuilderRef.Equals
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.Equals
      VB:
      - id: Swigged.LLVM.PassManagerBuilderRef.Equals*
        name: Equals
        nameWithType: PassManagerBuilderRef.Equals
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerBuilderRef.Equals
  Swigged.LLVM.PassManagerBuilderRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerBuilderRef.GetHashCode*
        name: GetHashCode
        nameWithType: PassManagerBuilderRef.GetHashCode
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.GetHashCode
      VB:
      - id: Swigged.LLVM.PassManagerBuilderRef.GetHashCode*
        name: GetHashCode
        nameWithType: PassManagerBuilderRef.GetHashCode
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerBuilderRef.GetHashCode
  Swigged.LLVM.PassManagerBuilderRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerBuilderRef.op_Equality*
        name: Equality
        nameWithType: PassManagerBuilderRef.Equality
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.Equality
      VB:
      - id: Swigged.LLVM.PassManagerBuilderRef.op_Equality*
        name: Equality
        nameWithType: PassManagerBuilderRef.Equality
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerBuilderRef.op_Equality
  Swigged.LLVM.PassManagerBuilderRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerBuilderRef.op_Inequality*
        name: Inequality
        nameWithType: PassManagerBuilderRef.Inequality
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.Inequality
      VB:
      - id: Swigged.LLVM.PassManagerBuilderRef.op_Inequality*
        name: Inequality
        nameWithType: PassManagerBuilderRef.Inequality
        qualifiedName: Swigged.LLVM.PassManagerBuilderRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerBuilderRef.op_Inequality
  Swigged.LLVM.PassManagerRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerRef.#ctor*
        name: PassManagerRef
        nameWithType: PassManagerRef.PassManagerRef
        qualifiedName: Swigged.LLVM.PassManagerRef.PassManagerRef
      VB:
      - id: Swigged.LLVM.PassManagerRef.#ctor*
        name: PassManagerRef
        nameWithType: PassManagerRef.PassManagerRef
        qualifiedName: Swigged.LLVM.PassManagerRef.PassManagerRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerRef.#ctor
  Swigged.LLVM.PassManagerRef:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerRef
        name: PassManagerRef
        nameWithType: PassManagerRef
        qualifiedName: Swigged.LLVM.PassManagerRef
      VB:
      - id: Swigged.LLVM.PassManagerRef
        name: PassManagerRef
        nameWithType: PassManagerRef
        qualifiedName: Swigged.LLVM.PassManagerRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.PassManagerRef
  Swigged.LLVM.PassManagerRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerRef.Equals*
        name: Equals
        nameWithType: PassManagerRef.Equals
        qualifiedName: Swigged.LLVM.PassManagerRef.Equals
      VB:
      - id: Swigged.LLVM.PassManagerRef.Equals*
        name: Equals
        nameWithType: PassManagerRef.Equals
        qualifiedName: Swigged.LLVM.PassManagerRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerRef.Equals
  Swigged.LLVM.PassManagerRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerRef.GetHashCode*
        name: GetHashCode
        nameWithType: PassManagerRef.GetHashCode
        qualifiedName: Swigged.LLVM.PassManagerRef.GetHashCode
      VB:
      - id: Swigged.LLVM.PassManagerRef.GetHashCode*
        name: GetHashCode
        nameWithType: PassManagerRef.GetHashCode
        qualifiedName: Swigged.LLVM.PassManagerRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerRef.GetHashCode
  Swigged.LLVM.PassManagerRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerRef.op_Equality*
        name: Equality
        nameWithType: PassManagerRef.Equality
        qualifiedName: Swigged.LLVM.PassManagerRef.Equality
      VB:
      - id: Swigged.LLVM.PassManagerRef.op_Equality*
        name: Equality
        nameWithType: PassManagerRef.Equality
        qualifiedName: Swigged.LLVM.PassManagerRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerRef.op_Equality
  Swigged.LLVM.PassManagerRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassManagerRef.op_Inequality*
        name: Inequality
        nameWithType: PassManagerRef.Inequality
        qualifiedName: Swigged.LLVM.PassManagerRef.Inequality
      VB:
      - id: Swigged.LLVM.PassManagerRef.op_Inequality*
        name: Inequality
        nameWithType: PassManagerRef.Inequality
        qualifiedName: Swigged.LLVM.PassManagerRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassManagerRef.op_Inequality
  Swigged.LLVM.PassRegistryRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassRegistryRef.#ctor*
        name: PassRegistryRef
        nameWithType: PassRegistryRef.PassRegistryRef
        qualifiedName: Swigged.LLVM.PassRegistryRef.PassRegistryRef
      VB:
      - id: Swigged.LLVM.PassRegistryRef.#ctor*
        name: PassRegistryRef
        nameWithType: PassRegistryRef.PassRegistryRef
        qualifiedName: Swigged.LLVM.PassRegistryRef.PassRegistryRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassRegistryRef.#ctor
  Swigged.LLVM.PassRegistryRef:
    name:
      CSharp:
      - id: Swigged.LLVM.PassRegistryRef
        name: PassRegistryRef
        nameWithType: PassRegistryRef
        qualifiedName: Swigged.LLVM.PassRegistryRef
      VB:
      - id: Swigged.LLVM.PassRegistryRef
        name: PassRegistryRef
        nameWithType: PassRegistryRef
        qualifiedName: Swigged.LLVM.PassRegistryRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.PassRegistryRef
  Swigged.LLVM.PassRegistryRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassRegistryRef.Equals*
        name: Equals
        nameWithType: PassRegistryRef.Equals
        qualifiedName: Swigged.LLVM.PassRegistryRef.Equals
      VB:
      - id: Swigged.LLVM.PassRegistryRef.Equals*
        name: Equals
        nameWithType: PassRegistryRef.Equals
        qualifiedName: Swigged.LLVM.PassRegistryRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassRegistryRef.Equals
  Swigged.LLVM.PassRegistryRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassRegistryRef.GetHashCode*
        name: GetHashCode
        nameWithType: PassRegistryRef.GetHashCode
        qualifiedName: Swigged.LLVM.PassRegistryRef.GetHashCode
      VB:
      - id: Swigged.LLVM.PassRegistryRef.GetHashCode*
        name: GetHashCode
        nameWithType: PassRegistryRef.GetHashCode
        qualifiedName: Swigged.LLVM.PassRegistryRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassRegistryRef.GetHashCode
  Swigged.LLVM.PassRegistryRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassRegistryRef.op_Equality*
        name: Equality
        nameWithType: PassRegistryRef.Equality
        qualifiedName: Swigged.LLVM.PassRegistryRef.Equality
      VB:
      - id: Swigged.LLVM.PassRegistryRef.op_Equality*
        name: Equality
        nameWithType: PassRegistryRef.Equality
        qualifiedName: Swigged.LLVM.PassRegistryRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassRegistryRef.op_Equality
  Swigged.LLVM.PassRegistryRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.PassRegistryRef.op_Inequality*
        name: Inequality
        nameWithType: PassRegistryRef.Inequality
        qualifiedName: Swigged.LLVM.PassRegistryRef.Inequality
      VB:
      - id: Swigged.LLVM.PassRegistryRef.op_Inequality*
        name: Inequality
        nameWithType: PassRegistryRef.Inequality
        qualifiedName: Swigged.LLVM.PassRegistryRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.PassRegistryRef.op_Inequality
  Swigged.LLVM.RealPredicate:
    name:
      CSharp:
      - id: Swigged.LLVM.RealPredicate
        name: RealPredicate
        nameWithType: RealPredicate
        qualifiedName: Swigged.LLVM.RealPredicate
      VB:
      - id: Swigged.LLVM.RealPredicate
        name: RealPredicate
        nameWithType: RealPredicate
        qualifiedName: Swigged.LLVM.RealPredicate
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.RealPredicate
  Swigged.LLVM.RelocMode:
    name:
      CSharp:
      - id: Swigged.LLVM.RelocMode
        name: RelocMode
        nameWithType: RelocMode
        qualifiedName: Swigged.LLVM.RelocMode
      VB:
      - id: Swigged.LLVM.RelocMode
        name: RelocMode
        nameWithType: RelocMode
        qualifiedName: Swigged.LLVM.RelocMode
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.RelocMode
  Swigged.LLVM.TargetDataRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetDataRef.#ctor*
        name: TargetDataRef
        nameWithType: TargetDataRef.TargetDataRef
        qualifiedName: Swigged.LLVM.TargetDataRef.TargetDataRef
      VB:
      - id: Swigged.LLVM.TargetDataRef.#ctor*
        name: TargetDataRef
        nameWithType: TargetDataRef.TargetDataRef
        qualifiedName: Swigged.LLVM.TargetDataRef.TargetDataRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetDataRef.#ctor
  Swigged.LLVM.TargetDataRef:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetDataRef
        name: TargetDataRef
        nameWithType: TargetDataRef
        qualifiedName: Swigged.LLVM.TargetDataRef
      VB:
      - id: Swigged.LLVM.TargetDataRef
        name: TargetDataRef
        nameWithType: TargetDataRef
        qualifiedName: Swigged.LLVM.TargetDataRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.TargetDataRef
  Swigged.LLVM.TargetDataRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetDataRef.Equals*
        name: Equals
        nameWithType: TargetDataRef.Equals
        qualifiedName: Swigged.LLVM.TargetDataRef.Equals
      VB:
      - id: Swigged.LLVM.TargetDataRef.Equals*
        name: Equals
        nameWithType: TargetDataRef.Equals
        qualifiedName: Swigged.LLVM.TargetDataRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetDataRef.Equals
  Swigged.LLVM.TargetDataRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetDataRef.GetHashCode*
        name: GetHashCode
        nameWithType: TargetDataRef.GetHashCode
        qualifiedName: Swigged.LLVM.TargetDataRef.GetHashCode
      VB:
      - id: Swigged.LLVM.TargetDataRef.GetHashCode*
        name: GetHashCode
        nameWithType: TargetDataRef.GetHashCode
        qualifiedName: Swigged.LLVM.TargetDataRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetDataRef.GetHashCode
  Swigged.LLVM.TargetDataRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetDataRef.op_Equality*
        name: Equality
        nameWithType: TargetDataRef.Equality
        qualifiedName: Swigged.LLVM.TargetDataRef.Equality
      VB:
      - id: Swigged.LLVM.TargetDataRef.op_Equality*
        name: Equality
        nameWithType: TargetDataRef.Equality
        qualifiedName: Swigged.LLVM.TargetDataRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetDataRef.op_Equality
  Swigged.LLVM.TargetDataRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetDataRef.op_Inequality*
        name: Inequality
        nameWithType: TargetDataRef.Inequality
        qualifiedName: Swigged.LLVM.TargetDataRef.Inequality
      VB:
      - id: Swigged.LLVM.TargetDataRef.op_Inequality*
        name: Inequality
        nameWithType: TargetDataRef.Inequality
        qualifiedName: Swigged.LLVM.TargetDataRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetDataRef.op_Inequality
  Swigged.LLVM.TargetLibraryInfoRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetLibraryInfoRef.#ctor*
        name: TargetLibraryInfoRef
        nameWithType: TargetLibraryInfoRef.TargetLibraryInfoRef
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.TargetLibraryInfoRef
      VB:
      - id: Swigged.LLVM.TargetLibraryInfoRef.#ctor*
        name: TargetLibraryInfoRef
        nameWithType: TargetLibraryInfoRef.TargetLibraryInfoRef
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.TargetLibraryInfoRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetLibraryInfoRef.#ctor
  Swigged.LLVM.TargetLibraryInfoRef:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetLibraryInfoRef
        name: TargetLibraryInfoRef
        nameWithType: TargetLibraryInfoRef
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef
      VB:
      - id: Swigged.LLVM.TargetLibraryInfoRef
        name: TargetLibraryInfoRef
        nameWithType: TargetLibraryInfoRef
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.TargetLibraryInfoRef
  Swigged.LLVM.TargetLibraryInfoRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetLibraryInfoRef.Equals*
        name: Equals
        nameWithType: TargetLibraryInfoRef.Equals
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.Equals
      VB:
      - id: Swigged.LLVM.TargetLibraryInfoRef.Equals*
        name: Equals
        nameWithType: TargetLibraryInfoRef.Equals
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetLibraryInfoRef.Equals
  Swigged.LLVM.TargetLibraryInfoRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetLibraryInfoRef.GetHashCode*
        name: GetHashCode
        nameWithType: TargetLibraryInfoRef.GetHashCode
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.GetHashCode
      VB:
      - id: Swigged.LLVM.TargetLibraryInfoRef.GetHashCode*
        name: GetHashCode
        nameWithType: TargetLibraryInfoRef.GetHashCode
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetLibraryInfoRef.GetHashCode
  Swigged.LLVM.TargetLibraryInfoRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetLibraryInfoRef.op_Equality*
        name: Equality
        nameWithType: TargetLibraryInfoRef.Equality
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.Equality
      VB:
      - id: Swigged.LLVM.TargetLibraryInfoRef.op_Equality*
        name: Equality
        nameWithType: TargetLibraryInfoRef.Equality
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetLibraryInfoRef.op_Equality
  Swigged.LLVM.TargetLibraryInfoRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetLibraryInfoRef.op_Inequality*
        name: Inequality
        nameWithType: TargetLibraryInfoRef.Inequality
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.Inequality
      VB:
      - id: Swigged.LLVM.TargetLibraryInfoRef.op_Inequality*
        name: Inequality
        nameWithType: TargetLibraryInfoRef.Inequality
        qualifiedName: Swigged.LLVM.TargetLibraryInfoRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetLibraryInfoRef.op_Inequality
  Swigged.LLVM.TargetMachineRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetMachineRef.#ctor*
        name: TargetMachineRef
        nameWithType: TargetMachineRef.TargetMachineRef
        qualifiedName: Swigged.LLVM.TargetMachineRef.TargetMachineRef
      VB:
      - id: Swigged.LLVM.TargetMachineRef.#ctor*
        name: TargetMachineRef
        nameWithType: TargetMachineRef.TargetMachineRef
        qualifiedName: Swigged.LLVM.TargetMachineRef.TargetMachineRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetMachineRef.#ctor
  Swigged.LLVM.TargetMachineRef:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetMachineRef
        name: TargetMachineRef
        nameWithType: TargetMachineRef
        qualifiedName: Swigged.LLVM.TargetMachineRef
      VB:
      - id: Swigged.LLVM.TargetMachineRef
        name: TargetMachineRef
        nameWithType: TargetMachineRef
        qualifiedName: Swigged.LLVM.TargetMachineRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.TargetMachineRef
  Swigged.LLVM.TargetMachineRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetMachineRef.Equals*
        name: Equals
        nameWithType: TargetMachineRef.Equals
        qualifiedName: Swigged.LLVM.TargetMachineRef.Equals
      VB:
      - id: Swigged.LLVM.TargetMachineRef.Equals*
        name: Equals
        nameWithType: TargetMachineRef.Equals
        qualifiedName: Swigged.LLVM.TargetMachineRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetMachineRef.Equals
  Swigged.LLVM.TargetMachineRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetMachineRef.GetHashCode*
        name: GetHashCode
        nameWithType: TargetMachineRef.GetHashCode
        qualifiedName: Swigged.LLVM.TargetMachineRef.GetHashCode
      VB:
      - id: Swigged.LLVM.TargetMachineRef.GetHashCode*
        name: GetHashCode
        nameWithType: TargetMachineRef.GetHashCode
        qualifiedName: Swigged.LLVM.TargetMachineRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetMachineRef.GetHashCode
  Swigged.LLVM.TargetMachineRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetMachineRef.op_Equality*
        name: Equality
        nameWithType: TargetMachineRef.Equality
        qualifiedName: Swigged.LLVM.TargetMachineRef.Equality
      VB:
      - id: Swigged.LLVM.TargetMachineRef.op_Equality*
        name: Equality
        nameWithType: TargetMachineRef.Equality
        qualifiedName: Swigged.LLVM.TargetMachineRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetMachineRef.op_Equality
  Swigged.LLVM.TargetMachineRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetMachineRef.op_Inequality*
        name: Inequality
        nameWithType: TargetMachineRef.Inequality
        qualifiedName: Swigged.LLVM.TargetMachineRef.Inequality
      VB:
      - id: Swigged.LLVM.TargetMachineRef.op_Inequality*
        name: Inequality
        nameWithType: TargetMachineRef.Inequality
        qualifiedName: Swigged.LLVM.TargetMachineRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetMachineRef.op_Inequality
  Swigged.LLVM.TargetRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetRef.#ctor*
        name: TargetRef
        nameWithType: TargetRef.TargetRef
        qualifiedName: Swigged.LLVM.TargetRef.TargetRef
      VB:
      - id: Swigged.LLVM.TargetRef.#ctor*
        name: TargetRef
        nameWithType: TargetRef.TargetRef
        qualifiedName: Swigged.LLVM.TargetRef.TargetRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetRef.#ctor
  Swigged.LLVM.TargetRef:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetRef
        name: TargetRef
        nameWithType: TargetRef
        qualifiedName: Swigged.LLVM.TargetRef
      VB:
      - id: Swigged.LLVM.TargetRef
        name: TargetRef
        nameWithType: TargetRef
        qualifiedName: Swigged.LLVM.TargetRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.TargetRef
  Swigged.LLVM.TargetRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetRef.Equals*
        name: Equals
        nameWithType: TargetRef.Equals
        qualifiedName: Swigged.LLVM.TargetRef.Equals
      VB:
      - id: Swigged.LLVM.TargetRef.Equals*
        name: Equals
        nameWithType: TargetRef.Equals
        qualifiedName: Swigged.LLVM.TargetRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetRef.Equals
  Swigged.LLVM.TargetRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetRef.GetHashCode*
        name: GetHashCode
        nameWithType: TargetRef.GetHashCode
        qualifiedName: Swigged.LLVM.TargetRef.GetHashCode
      VB:
      - id: Swigged.LLVM.TargetRef.GetHashCode*
        name: GetHashCode
        nameWithType: TargetRef.GetHashCode
        qualifiedName: Swigged.LLVM.TargetRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetRef.GetHashCode
  Swigged.LLVM.TargetRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetRef.op_Equality*
        name: Equality
        nameWithType: TargetRef.Equality
        qualifiedName: Swigged.LLVM.TargetRef.Equality
      VB:
      - id: Swigged.LLVM.TargetRef.op_Equality*
        name: Equality
        nameWithType: TargetRef.Equality
        qualifiedName: Swigged.LLVM.TargetRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetRef.op_Equality
  Swigged.LLVM.TargetRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TargetRef.op_Inequality*
        name: Inequality
        nameWithType: TargetRef.Inequality
        qualifiedName: Swigged.LLVM.TargetRef.Inequality
      VB:
      - id: Swigged.LLVM.TargetRef.op_Inequality*
        name: Inequality
        nameWithType: TargetRef.Inequality
        qualifiedName: Swigged.LLVM.TargetRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TargetRef.op_Inequality
  Swigged.LLVM.ThreadLocalMode:
    name:
      CSharp:
      - id: Swigged.LLVM.ThreadLocalMode
        name: ThreadLocalMode
        nameWithType: ThreadLocalMode
        qualifiedName: Swigged.LLVM.ThreadLocalMode
      VB:
      - id: Swigged.LLVM.ThreadLocalMode
        name: ThreadLocalMode
        nameWithType: ThreadLocalMode
        qualifiedName: Swigged.LLVM.ThreadLocalMode
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ThreadLocalMode
  Swigged.LLVM.TypeKind:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeKind
        name: TypeKind
        nameWithType: TypeKind
        qualifiedName: Swigged.LLVM.TypeKind
      VB:
      - id: Swigged.LLVM.TypeKind
        name: TypeKind
        nameWithType: TypeKind
        qualifiedName: Swigged.LLVM.TypeKind
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.TypeKind
  Swigged.LLVM.TypeRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeRef.#ctor*
        name: TypeRef
        nameWithType: TypeRef.TypeRef
        qualifiedName: Swigged.LLVM.TypeRef.TypeRef
      VB:
      - id: Swigged.LLVM.TypeRef.#ctor*
        name: TypeRef
        nameWithType: TypeRef.TypeRef
        qualifiedName: Swigged.LLVM.TypeRef.TypeRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TypeRef.#ctor
  Swigged.LLVM.TypeRef:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeRef
        name: TypeRef
        nameWithType: TypeRef
        qualifiedName: Swigged.LLVM.TypeRef
      VB:
      - id: Swigged.LLVM.TypeRef
        name: TypeRef
        nameWithType: TypeRef
        qualifiedName: Swigged.LLVM.TypeRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.TypeRef
  Swigged.LLVM.TypeRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeRef.Equals*
        name: Equals
        nameWithType: TypeRef.Equals
        qualifiedName: Swigged.LLVM.TypeRef.Equals
      VB:
      - id: Swigged.LLVM.TypeRef.Equals*
        name: Equals
        nameWithType: TypeRef.Equals
        qualifiedName: Swigged.LLVM.TypeRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TypeRef.Equals
  Swigged.LLVM.TypeRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeRef.GetHashCode*
        name: GetHashCode
        nameWithType: TypeRef.GetHashCode
        qualifiedName: Swigged.LLVM.TypeRef.GetHashCode
      VB:
      - id: Swigged.LLVM.TypeRef.GetHashCode*
        name: GetHashCode
        nameWithType: TypeRef.GetHashCode
        qualifiedName: Swigged.LLVM.TypeRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TypeRef.GetHashCode
  Swigged.LLVM.TypeRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeRef.op_Equality*
        name: Equality
        nameWithType: TypeRef.Equality
        qualifiedName: Swigged.LLVM.TypeRef.Equality
      VB:
      - id: Swigged.LLVM.TypeRef.op_Equality*
        name: Equality
        nameWithType: TypeRef.Equality
        qualifiedName: Swigged.LLVM.TypeRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TypeRef.op_Equality
  Swigged.LLVM.TypeRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeRef.op_Inequality*
        name: Inequality
        nameWithType: TypeRef.Inequality
        qualifiedName: Swigged.LLVM.TypeRef.Inequality
      VB:
      - id: Swigged.LLVM.TypeRef.op_Inequality*
        name: Inequality
        nameWithType: TypeRef.Inequality
        qualifiedName: Swigged.LLVM.TypeRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TypeRef.op_Inequality
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
  Swigged.LLVM.TypeRef.ToString*:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeRef.ToString*
        name: ToString
        nameWithType: TypeRef.ToString
        qualifiedName: Swigged.LLVM.TypeRef.ToString
      VB:
      - id: Swigged.LLVM.TypeRef.ToString*
        name: ToString
        nameWithType: TypeRef.ToString
        qualifiedName: Swigged.LLVM.TypeRef.ToString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.TypeRef.ToString
  Swigged.LLVM.UseRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.UseRef.#ctor*
        name: UseRef
        nameWithType: UseRef.UseRef
        qualifiedName: Swigged.LLVM.UseRef.UseRef
      VB:
      - id: Swigged.LLVM.UseRef.#ctor*
        name: UseRef
        nameWithType: UseRef.UseRef
        qualifiedName: Swigged.LLVM.UseRef.UseRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.UseRef.#ctor
  Swigged.LLVM.UseRef:
    name:
      CSharp:
      - id: Swigged.LLVM.UseRef
        name: UseRef
        nameWithType: UseRef
        qualifiedName: Swigged.LLVM.UseRef
      VB:
      - id: Swigged.LLVM.UseRef
        name: UseRef
        nameWithType: UseRef
        qualifiedName: Swigged.LLVM.UseRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.UseRef
  Swigged.LLVM.UseRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.UseRef.Equals*
        name: Equals
        nameWithType: UseRef.Equals
        qualifiedName: Swigged.LLVM.UseRef.Equals
      VB:
      - id: Swigged.LLVM.UseRef.Equals*
        name: Equals
        nameWithType: UseRef.Equals
        qualifiedName: Swigged.LLVM.UseRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.UseRef.Equals
  Swigged.LLVM.UseRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.UseRef.GetHashCode*
        name: GetHashCode
        nameWithType: UseRef.GetHashCode
        qualifiedName: Swigged.LLVM.UseRef.GetHashCode
      VB:
      - id: Swigged.LLVM.UseRef.GetHashCode*
        name: GetHashCode
        nameWithType: UseRef.GetHashCode
        qualifiedName: Swigged.LLVM.UseRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.UseRef.GetHashCode
  Swigged.LLVM.UseRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.UseRef.op_Equality*
        name: Equality
        nameWithType: UseRef.Equality
        qualifiedName: Swigged.LLVM.UseRef.Equality
      VB:
      - id: Swigged.LLVM.UseRef.op_Equality*
        name: Equality
        nameWithType: UseRef.Equality
        qualifiedName: Swigged.LLVM.UseRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.UseRef.op_Equality
  Swigged.LLVM.UseRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.UseRef.op_Inequality*
        name: Inequality
        nameWithType: UseRef.Inequality
        qualifiedName: Swigged.LLVM.UseRef.Inequality
      VB:
      - id: Swigged.LLVM.UseRef.op_Inequality*
        name: Inequality
        nameWithType: UseRef.Inequality
        qualifiedName: Swigged.LLVM.UseRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.UseRef.op_Inequality
  Swigged.LLVM.ValueKind:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueKind
        name: ValueKind
        nameWithType: ValueKind
        qualifiedName: Swigged.LLVM.ValueKind
      VB:
      - id: Swigged.LLVM.ValueKind
        name: ValueKind
        nameWithType: ValueKind
        qualifiedName: Swigged.LLVM.ValueKind
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ValueKind
  Swigged.LLVM.ValueRef.#ctor*:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueRef.#ctor*
        name: ValueRef
        nameWithType: ValueRef.ValueRef
        qualifiedName: Swigged.LLVM.ValueRef.ValueRef
      VB:
      - id: Swigged.LLVM.ValueRef.#ctor*
        name: ValueRef
        nameWithType: ValueRef.ValueRef
        qualifiedName: Swigged.LLVM.ValueRef.ValueRef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ValueRef.#ctor
  Swigged.LLVM.ValueRef:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueRef
        name: ValueRef
        nameWithType: ValueRef
        qualifiedName: Swigged.LLVM.ValueRef
      VB:
      - id: Swigged.LLVM.ValueRef
        name: ValueRef
        nameWithType: ValueRef
        qualifiedName: Swigged.LLVM.ValueRef
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.ValueRef
  Swigged.LLVM.ValueRef.Equals*:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueRef.Equals*
        name: Equals
        nameWithType: ValueRef.Equals
        qualifiedName: Swigged.LLVM.ValueRef.Equals
      VB:
      - id: Swigged.LLVM.ValueRef.Equals*
        name: Equals
        nameWithType: ValueRef.Equals
        qualifiedName: Swigged.LLVM.ValueRef.Equals
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ValueRef.Equals
  Swigged.LLVM.ValueRef.GetHashCode*:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueRef.GetHashCode*
        name: GetHashCode
        nameWithType: ValueRef.GetHashCode
        qualifiedName: Swigged.LLVM.ValueRef.GetHashCode
      VB:
      - id: Swigged.LLVM.ValueRef.GetHashCode*
        name: GetHashCode
        nameWithType: ValueRef.GetHashCode
        qualifiedName: Swigged.LLVM.ValueRef.GetHashCode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ValueRef.GetHashCode
  Swigged.LLVM.ValueRef.op_Equality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueRef.op_Equality*
        name: Equality
        nameWithType: ValueRef.Equality
        qualifiedName: Swigged.LLVM.ValueRef.Equality
      VB:
      - id: Swigged.LLVM.ValueRef.op_Equality*
        name: Equality
        nameWithType: ValueRef.Equality
        qualifiedName: Swigged.LLVM.ValueRef.Equality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ValueRef.op_Equality
  Swigged.LLVM.ValueRef.op_Inequality*:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueRef.op_Inequality*
        name: Inequality
        nameWithType: ValueRef.Inequality
        qualifiedName: Swigged.LLVM.ValueRef.Inequality
      VB:
      - id: Swigged.LLVM.ValueRef.op_Inequality*
        name: Inequality
        nameWithType: ValueRef.Inequality
        qualifiedName: Swigged.LLVM.ValueRef.Inequality
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ValueRef.op_Inequality
  Swigged.LLVM.ValueRef.ToString*:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueRef.ToString*
        name: ToString
        nameWithType: ValueRef.ToString
        qualifiedName: Swigged.LLVM.ValueRef.ToString
      VB:
      - id: Swigged.LLVM.ValueRef.ToString*
        name: ToString
        nameWithType: ValueRef.ToString
        qualifiedName: Swigged.LLVM.ValueRef.ToString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.ValueRef.ToString
  Swigged.LLVM.VerifierFailureAction:
    name:
      CSharp:
      - id: Swigged.LLVM.VerifierFailureAction
        name: VerifierFailureAction
        nameWithType: VerifierFailureAction
        qualifiedName: Swigged.LLVM.VerifierFailureAction
      VB:
      - id: Swigged.LLVM.VerifierFailureAction
        name: VerifierFailureAction
        nameWithType: VerifierFailureAction
        qualifiedName: Swigged.LLVM.VerifierFailureAction
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.VerifierFailureAction
  Swigged.LLVM.Visibility:
    name:
      CSharp:
      - id: Swigged.LLVM.Visibility
        name: Visibility
        nameWithType: Visibility
        qualifiedName: Swigged.LLVM.Visibility
      VB:
      - id: Swigged.LLVM.Visibility
        name: Visibility
        nameWithType: Visibility
        qualifiedName: Swigged.LLVM.Visibility
    isDefinition: true
    parent: Swigged.LLVM
    commentId: T:Swigged.LLVM.Visibility
  Swigged.LLVM.LLVM.InitializeCore*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeCore*
        name: InitializeCore
        nameWithType: LLVM.InitializeCore
        qualifiedName: Swigged.LLVM.LLVM.InitializeCore
      VB:
      - id: Swigged.LLVM.LLVM.InitializeCore*
        name: InitializeCore
        nameWithType: LLVM.InitializeCore
        qualifiedName: Swigged.LLVM.LLVM.InitializeCore
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeCore
  Swigged.LLVM.LLVM.Shutdown*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Shutdown*
        name: Shutdown
        nameWithType: LLVM.Shutdown
        qualifiedName: Swigged.LLVM.LLVM.Shutdown
      VB:
      - id: Swigged.LLVM.LLVM.Shutdown*
        name: Shutdown
        nameWithType: LLVM.Shutdown
        qualifiedName: Swigged.LLVM.LLVM.Shutdown
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Shutdown
  Swigged.LLVM.LLVM.CreateMessage*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateMessage*
        name: CreateMessage
        nameWithType: LLVM.CreateMessage
        qualifiedName: Swigged.LLVM.LLVM.CreateMessage
      VB:
      - id: Swigged.LLVM.LLVM.CreateMessage*
        name: CreateMessage
        nameWithType: LLVM.CreateMessage
        qualifiedName: Swigged.LLVM.LLVM.CreateMessage
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateMessage
  Swigged.LLVM.LLVM.DisposeMessage*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeMessage*
        name: DisposeMessage
        nameWithType: LLVM.DisposeMessage
        qualifiedName: Swigged.LLVM.LLVM.DisposeMessage
      VB:
      - id: Swigged.LLVM.LLVM.DisposeMessage*
        name: DisposeMessage
        nameWithType: LLVM.DisposeMessage
        qualifiedName: Swigged.LLVM.LLVM.DisposeMessage
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeMessage
  Swigged.LLVM.LLVM.ContextCreate*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ContextCreate*
        name: ContextCreate
        nameWithType: LLVM.ContextCreate
        qualifiedName: Swigged.LLVM.LLVM.ContextCreate
      VB:
      - id: Swigged.LLVM.LLVM.ContextCreate*
        name: ContextCreate
        nameWithType: LLVM.ContextCreate
        qualifiedName: Swigged.LLVM.LLVM.ContextCreate
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ContextCreate
  Swigged.LLVM.LLVM.GetGlobalContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetGlobalContext*
        name: GetGlobalContext
        nameWithType: LLVM.GetGlobalContext
        qualifiedName: Swigged.LLVM.LLVM.GetGlobalContext
      VB:
      - id: Swigged.LLVM.LLVM.GetGlobalContext*
        name: GetGlobalContext
        nameWithType: LLVM.GetGlobalContext
        qualifiedName: Swigged.LLVM.LLVM.GetGlobalContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetGlobalContext
  Swigged.LLVM.LLVM.ContextGetDiagnosticContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ContextGetDiagnosticContext*
        name: ContextGetDiagnosticContext
        nameWithType: LLVM.ContextGetDiagnosticContext
        qualifiedName: Swigged.LLVM.LLVM.ContextGetDiagnosticContext
      VB:
      - id: Swigged.LLVM.LLVM.ContextGetDiagnosticContext*
        name: ContextGetDiagnosticContext
        nameWithType: LLVM.ContextGetDiagnosticContext
        qualifiedName: Swigged.LLVM.LLVM.ContextGetDiagnosticContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ContextGetDiagnosticContext
  Swigged.LLVM.LLVM.ContextDispose*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ContextDispose*
        name: ContextDispose
        nameWithType: LLVM.ContextDispose
        qualifiedName: Swigged.LLVM.LLVM.ContextDispose
      VB:
      - id: Swigged.LLVM.LLVM.ContextDispose*
        name: ContextDispose
        nameWithType: LLVM.ContextDispose
        qualifiedName: Swigged.LLVM.LLVM.ContextDispose
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ContextDispose
  Swigged.LLVM.LLVM.GetDiagInfoDescription*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetDiagInfoDescription*
        name: GetDiagInfoDescription
        nameWithType: LLVM.GetDiagInfoDescription
        qualifiedName: Swigged.LLVM.LLVM.GetDiagInfoDescription
      VB:
      - id: Swigged.LLVM.LLVM.GetDiagInfoDescription*
        name: GetDiagInfoDescription
        nameWithType: LLVM.GetDiagInfoDescription
        qualifiedName: Swigged.LLVM.LLVM.GetDiagInfoDescription
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetDiagInfoDescription
  Swigged.LLVM.LLVM.GetDiagInfoSeverity*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetDiagInfoSeverity*
        name: GetDiagInfoSeverity
        nameWithType: LLVM.GetDiagInfoSeverity
        qualifiedName: Swigged.LLVM.LLVM.GetDiagInfoSeverity
      VB:
      - id: Swigged.LLVM.LLVM.GetDiagInfoSeverity*
        name: GetDiagInfoSeverity
        nameWithType: LLVM.GetDiagInfoSeverity
        qualifiedName: Swigged.LLVM.LLVM.GetDiagInfoSeverity
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetDiagInfoSeverity
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
  Swigged.LLVM.LLVM.GetMDKindIDInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetMDKindIDInContext*
        name: GetMDKindIDInContext
        nameWithType: LLVM.GetMDKindIDInContext
        qualifiedName: Swigged.LLVM.LLVM.GetMDKindIDInContext
      VB:
      - id: Swigged.LLVM.LLVM.GetMDKindIDInContext*
        name: GetMDKindIDInContext
        nameWithType: LLVM.GetMDKindIDInContext
        qualifiedName: Swigged.LLVM.LLVM.GetMDKindIDInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetMDKindIDInContext
  Swigged.LLVM.LLVM.GetMDKindID*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetMDKindID*
        name: GetMDKindID
        nameWithType: LLVM.GetMDKindID
        qualifiedName: Swigged.LLVM.LLVM.GetMDKindID
      VB:
      - id: Swigged.LLVM.LLVM.GetMDKindID*
        name: GetMDKindID
        nameWithType: LLVM.GetMDKindID
        qualifiedName: Swigged.LLVM.LLVM.GetMDKindID
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetMDKindID
  Swigged.LLVM.LLVM.GetEnumAttributeKindForName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetEnumAttributeKindForName*
        name: GetEnumAttributeKindForName
        nameWithType: LLVM.GetEnumAttributeKindForName
        qualifiedName: Swigged.LLVM.LLVM.GetEnumAttributeKindForName
      VB:
      - id: Swigged.LLVM.LLVM.GetEnumAttributeKindForName*
        name: GetEnumAttributeKindForName
        nameWithType: LLVM.GetEnumAttributeKindForName
        qualifiedName: Swigged.LLVM.LLVM.GetEnumAttributeKindForName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetEnumAttributeKindForName
  Swigged.LLVM.LLVM.GetLastEnumAttributeKind*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetLastEnumAttributeKind*
        name: GetLastEnumAttributeKind
        nameWithType: LLVM.GetLastEnumAttributeKind
        qualifiedName: Swigged.LLVM.LLVM.GetLastEnumAttributeKind
      VB:
      - id: Swigged.LLVM.LLVM.GetLastEnumAttributeKind*
        name: GetLastEnumAttributeKind
        nameWithType: LLVM.GetLastEnumAttributeKind
        qualifiedName: Swigged.LLVM.LLVM.GetLastEnumAttributeKind
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetLastEnumAttributeKind
  System.UInt64:
    name:
      CSharp:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
      VB:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
    isDefinition: true
  Swigged.LLVM.LLVM.CreateEnumAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateEnumAttribute*
        name: CreateEnumAttribute
        nameWithType: LLVM.CreateEnumAttribute
        qualifiedName: Swigged.LLVM.LLVM.CreateEnumAttribute
      VB:
      - id: Swigged.LLVM.LLVM.CreateEnumAttribute*
        name: CreateEnumAttribute
        nameWithType: LLVM.CreateEnumAttribute
        qualifiedName: Swigged.LLVM.LLVM.CreateEnumAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateEnumAttribute
  Swigged.LLVM.LLVM.GetEnumAttributeKind*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetEnumAttributeKind*
        name: GetEnumAttributeKind
        nameWithType: LLVM.GetEnumAttributeKind
        qualifiedName: Swigged.LLVM.LLVM.GetEnumAttributeKind
      VB:
      - id: Swigged.LLVM.LLVM.GetEnumAttributeKind*
        name: GetEnumAttributeKind
        nameWithType: LLVM.GetEnumAttributeKind
        qualifiedName: Swigged.LLVM.LLVM.GetEnumAttributeKind
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetEnumAttributeKind
  Swigged.LLVM.LLVM.GetEnumAttributeValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetEnumAttributeValue*
        name: GetEnumAttributeValue
        nameWithType: LLVM.GetEnumAttributeValue
        qualifiedName: Swigged.LLVM.LLVM.GetEnumAttributeValue
      VB:
      - id: Swigged.LLVM.LLVM.GetEnumAttributeValue*
        name: GetEnumAttributeValue
        nameWithType: LLVM.GetEnumAttributeValue
        qualifiedName: Swigged.LLVM.LLVM.GetEnumAttributeValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetEnumAttributeValue
  Swigged.LLVM.LLVM.CreateStringAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateStringAttribute*
        name: CreateStringAttribute
        nameWithType: LLVM.CreateStringAttribute
        qualifiedName: Swigged.LLVM.LLVM.CreateStringAttribute
      VB:
      - id: Swigged.LLVM.LLVM.CreateStringAttribute*
        name: CreateStringAttribute
        nameWithType: LLVM.CreateStringAttribute
        qualifiedName: Swigged.LLVM.LLVM.CreateStringAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateStringAttribute
  Swigged.LLVM.LLVM.GetStringAttributeKind*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetStringAttributeKind*
        name: GetStringAttributeKind
        nameWithType: LLVM.GetStringAttributeKind
        qualifiedName: Swigged.LLVM.LLVM.GetStringAttributeKind
      VB:
      - id: Swigged.LLVM.LLVM.GetStringAttributeKind*
        name: GetStringAttributeKind
        nameWithType: LLVM.GetStringAttributeKind
        qualifiedName: Swigged.LLVM.LLVM.GetStringAttributeKind
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetStringAttributeKind
  Swigged.LLVM.LLVM.GetStringAttributeValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetStringAttributeValue*
        name: GetStringAttributeValue
        nameWithType: LLVM.GetStringAttributeValue
        qualifiedName: Swigged.LLVM.LLVM.GetStringAttributeValue
      VB:
      - id: Swigged.LLVM.LLVM.GetStringAttributeValue*
        name: GetStringAttributeValue
        nameWithType: LLVM.GetStringAttributeValue
        qualifiedName: Swigged.LLVM.LLVM.GetStringAttributeValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetStringAttributeValue
  Swigged.LLVM.LLVM.IsEnumAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsEnumAttribute*
        name: IsEnumAttribute
        nameWithType: LLVM.IsEnumAttribute
        qualifiedName: Swigged.LLVM.LLVM.IsEnumAttribute
      VB:
      - id: Swigged.LLVM.LLVM.IsEnumAttribute*
        name: IsEnumAttribute
        nameWithType: LLVM.IsEnumAttribute
        qualifiedName: Swigged.LLVM.LLVM.IsEnumAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsEnumAttribute
  Swigged.LLVM.LLVM.IsStringAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsStringAttribute*
        name: IsStringAttribute
        nameWithType: LLVM.IsStringAttribute
        qualifiedName: Swigged.LLVM.LLVM.IsStringAttribute
      VB:
      - id: Swigged.LLVM.LLVM.IsStringAttribute*
        name: IsStringAttribute
        nameWithType: LLVM.IsStringAttribute
        qualifiedName: Swigged.LLVM.LLVM.IsStringAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsStringAttribute
  Swigged.LLVM.LLVM.ModuleCreateWithName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ModuleCreateWithName*
        name: ModuleCreateWithName
        nameWithType: LLVM.ModuleCreateWithName
        qualifiedName: Swigged.LLVM.LLVM.ModuleCreateWithName
      VB:
      - id: Swigged.LLVM.LLVM.ModuleCreateWithName*
        name: ModuleCreateWithName
        nameWithType: LLVM.ModuleCreateWithName
        qualifiedName: Swigged.LLVM.LLVM.ModuleCreateWithName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ModuleCreateWithName
  Swigged.LLVM.LLVM.ModuleCreateWithNameInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ModuleCreateWithNameInContext*
        name: ModuleCreateWithNameInContext
        nameWithType: LLVM.ModuleCreateWithNameInContext
        qualifiedName: Swigged.LLVM.LLVM.ModuleCreateWithNameInContext
      VB:
      - id: Swigged.LLVM.LLVM.ModuleCreateWithNameInContext*
        name: ModuleCreateWithNameInContext
        nameWithType: LLVM.ModuleCreateWithNameInContext
        qualifiedName: Swigged.LLVM.LLVM.ModuleCreateWithNameInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ModuleCreateWithNameInContext
  Swigged.LLVM.LLVM.CloneModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CloneModule*
        name: CloneModule
        nameWithType: LLVM.CloneModule
        qualifiedName: Swigged.LLVM.LLVM.CloneModule
      VB:
      - id: Swigged.LLVM.LLVM.CloneModule*
        name: CloneModule
        nameWithType: LLVM.CloneModule
        qualifiedName: Swigged.LLVM.LLVM.CloneModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CloneModule
  Swigged.LLVM.LLVM.DisposeModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeModule*
        name: DisposeModule
        nameWithType: LLVM.DisposeModule
        qualifiedName: Swigged.LLVM.LLVM.DisposeModule
      VB:
      - id: Swigged.LLVM.LLVM.DisposeModule*
        name: DisposeModule
        nameWithType: LLVM.DisposeModule
        qualifiedName: Swigged.LLVM.LLVM.DisposeModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeModule
  Swigged.LLVM.LLVM.GetModuleIdentifier*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetModuleIdentifier*
        name: GetModuleIdentifier
        nameWithType: LLVM.GetModuleIdentifier
        qualifiedName: Swigged.LLVM.LLVM.GetModuleIdentifier
      VB:
      - id: Swigged.LLVM.LLVM.GetModuleIdentifier*
        name: GetModuleIdentifier
        nameWithType: LLVM.GetModuleIdentifier
        qualifiedName: Swigged.LLVM.LLVM.GetModuleIdentifier
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetModuleIdentifier
  Swigged.LLVM.LLVM.SetModuleIdentifier*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetModuleIdentifier*
        name: SetModuleIdentifier
        nameWithType: LLVM.SetModuleIdentifier
        qualifiedName: Swigged.LLVM.LLVM.SetModuleIdentifier
      VB:
      - id: Swigged.LLVM.LLVM.SetModuleIdentifier*
        name: SetModuleIdentifier
        nameWithType: LLVM.SetModuleIdentifier
        qualifiedName: Swigged.LLVM.LLVM.SetModuleIdentifier
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetModuleIdentifier
  Swigged.LLVM.LLVM.GetDataLayoutStr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetDataLayoutStr*
        name: GetDataLayoutStr
        nameWithType: LLVM.GetDataLayoutStr
        qualifiedName: Swigged.LLVM.LLVM.GetDataLayoutStr
      VB:
      - id: Swigged.LLVM.LLVM.GetDataLayoutStr*
        name: GetDataLayoutStr
        nameWithType: LLVM.GetDataLayoutStr
        qualifiedName: Swigged.LLVM.LLVM.GetDataLayoutStr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetDataLayoutStr
  Swigged.LLVM.LLVM.GetDataLayout*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetDataLayout*
        name: GetDataLayout
        nameWithType: LLVM.GetDataLayout
        qualifiedName: Swigged.LLVM.LLVM.GetDataLayout
      VB:
      - id: Swigged.LLVM.LLVM.GetDataLayout*
        name: GetDataLayout
        nameWithType: LLVM.GetDataLayout
        qualifiedName: Swigged.LLVM.LLVM.GetDataLayout
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetDataLayout
  Swigged.LLVM.LLVM.SetDataLayout*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetDataLayout*
        name: SetDataLayout
        nameWithType: LLVM.SetDataLayout
        qualifiedName: Swigged.LLVM.LLVM.SetDataLayout
      VB:
      - id: Swigged.LLVM.LLVM.SetDataLayout*
        name: SetDataLayout
        nameWithType: LLVM.SetDataLayout
        qualifiedName: Swigged.LLVM.LLVM.SetDataLayout
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetDataLayout
  Swigged.LLVM.LLVM.GetTarget*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTarget*
        name: GetTarget
        nameWithType: LLVM.GetTarget
        qualifiedName: Swigged.LLVM.LLVM.GetTarget
      VB:
      - id: Swigged.LLVM.LLVM.GetTarget*
        name: GetTarget
        nameWithType: LLVM.GetTarget
        qualifiedName: Swigged.LLVM.LLVM.GetTarget
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTarget
  Swigged.LLVM.LLVM.SetTarget*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetTarget*
        name: SetTarget
        nameWithType: LLVM.SetTarget
        qualifiedName: Swigged.LLVM.LLVM.SetTarget
      VB:
      - id: Swigged.LLVM.LLVM.SetTarget*
        name: SetTarget
        nameWithType: LLVM.SetTarget
        qualifiedName: Swigged.LLVM.LLVM.SetTarget
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetTarget
  Swigged.LLVM.LLVM.DumpModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DumpModule*
        name: DumpModule
        nameWithType: LLVM.DumpModule
        qualifiedName: Swigged.LLVM.LLVM.DumpModule
      VB:
      - id: Swigged.LLVM.LLVM.DumpModule*
        name: DumpModule
        nameWithType: LLVM.DumpModule
        qualifiedName: Swigged.LLVM.LLVM.DumpModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DumpModule
  Swigged.LLVM.LLVM.PrintModuleToFile*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PrintModuleToFile*
        name: PrintModuleToFile
        nameWithType: LLVM.PrintModuleToFile
        qualifiedName: Swigged.LLVM.LLVM.PrintModuleToFile
      VB:
      - id: Swigged.LLVM.LLVM.PrintModuleToFile*
        name: PrintModuleToFile
        nameWithType: LLVM.PrintModuleToFile
        qualifiedName: Swigged.LLVM.LLVM.PrintModuleToFile
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PrintModuleToFile
  Swigged.LLVM.LLVM.PrintModuleToString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PrintModuleToString*
        name: PrintModuleToString
        nameWithType: LLVM.PrintModuleToString
        qualifiedName: Swigged.LLVM.LLVM.PrintModuleToString
      VB:
      - id: Swigged.LLVM.LLVM.PrintModuleToString*
        name: PrintModuleToString
        nameWithType: LLVM.PrintModuleToString
        qualifiedName: Swigged.LLVM.LLVM.PrintModuleToString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PrintModuleToString
  Swigged.LLVM.LLVM.SetModuleInlineAsm*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetModuleInlineAsm*
        name: SetModuleInlineAsm
        nameWithType: LLVM.SetModuleInlineAsm
        qualifiedName: Swigged.LLVM.LLVM.SetModuleInlineAsm
      VB:
      - id: Swigged.LLVM.LLVM.SetModuleInlineAsm*
        name: SetModuleInlineAsm
        nameWithType: LLVM.SetModuleInlineAsm
        qualifiedName: Swigged.LLVM.LLVM.SetModuleInlineAsm
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetModuleInlineAsm
  Swigged.LLVM.LLVM.GetModuleContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetModuleContext*
        name: GetModuleContext
        nameWithType: LLVM.GetModuleContext
        qualifiedName: Swigged.LLVM.LLVM.GetModuleContext
      VB:
      - id: Swigged.LLVM.LLVM.GetModuleContext*
        name: GetModuleContext
        nameWithType: LLVM.GetModuleContext
        qualifiedName: Swigged.LLVM.LLVM.GetModuleContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetModuleContext
  Swigged.LLVM.LLVM.GetTypeByName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTypeByName*
        name: GetTypeByName
        nameWithType: LLVM.GetTypeByName
        qualifiedName: Swigged.LLVM.LLVM.GetTypeByName
      VB:
      - id: Swigged.LLVM.LLVM.GetTypeByName*
        name: GetTypeByName
        nameWithType: LLVM.GetTypeByName
        qualifiedName: Swigged.LLVM.LLVM.GetTypeByName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTypeByName
  Swigged.LLVM.LLVM.GetNamedMetadataNumOperands*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNamedMetadataNumOperands*
        name: GetNamedMetadataNumOperands
        nameWithType: LLVM.GetNamedMetadataNumOperands
        qualifiedName: Swigged.LLVM.LLVM.GetNamedMetadataNumOperands
      VB:
      - id: Swigged.LLVM.LLVM.GetNamedMetadataNumOperands*
        name: GetNamedMetadataNumOperands
        nameWithType: LLVM.GetNamedMetadataNumOperands
        qualifiedName: Swigged.LLVM.LLVM.GetNamedMetadataNumOperands
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNamedMetadataNumOperands
  Swigged.LLVM.LLVM.GetNamedMetadataOperands*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNamedMetadataOperands*
        name: GetNamedMetadataOperands
        nameWithType: LLVM.GetNamedMetadataOperands
        qualifiedName: Swigged.LLVM.LLVM.GetNamedMetadataOperands
      VB:
      - id: Swigged.LLVM.LLVM.GetNamedMetadataOperands*
        name: GetNamedMetadataOperands
        nameWithType: LLVM.GetNamedMetadataOperands
        qualifiedName: Swigged.LLVM.LLVM.GetNamedMetadataOperands
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNamedMetadataOperands
  Swigged.LLVM.LLVM.AddNamedMetadataOperand*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddNamedMetadataOperand*
        name: AddNamedMetadataOperand
        nameWithType: LLVM.AddNamedMetadataOperand
        qualifiedName: Swigged.LLVM.LLVM.AddNamedMetadataOperand
      VB:
      - id: Swigged.LLVM.LLVM.AddNamedMetadataOperand*
        name: AddNamedMetadataOperand
        nameWithType: LLVM.AddNamedMetadataOperand
        qualifiedName: Swigged.LLVM.LLVM.AddNamedMetadataOperand
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddNamedMetadataOperand
  Swigged.LLVM.LLVM.AddFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddFunction*
        name: AddFunction
        nameWithType: LLVM.AddFunction
        qualifiedName: Swigged.LLVM.LLVM.AddFunction
      VB:
      - id: Swigged.LLVM.LLVM.AddFunction*
        name: AddFunction
        nameWithType: LLVM.AddFunction
        qualifiedName: Swigged.LLVM.LLVM.AddFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddFunction
  Swigged.LLVM.LLVM.GetNamedFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNamedFunction*
        name: GetNamedFunction
        nameWithType: LLVM.GetNamedFunction
        qualifiedName: Swigged.LLVM.LLVM.GetNamedFunction
      VB:
      - id: Swigged.LLVM.LLVM.GetNamedFunction*
        name: GetNamedFunction
        nameWithType: LLVM.GetNamedFunction
        qualifiedName: Swigged.LLVM.LLVM.GetNamedFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNamedFunction
  Swigged.LLVM.LLVM.GetFirstFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFirstFunction*
        name: GetFirstFunction
        nameWithType: LLVM.GetFirstFunction
        qualifiedName: Swigged.LLVM.LLVM.GetFirstFunction
      VB:
      - id: Swigged.LLVM.LLVM.GetFirstFunction*
        name: GetFirstFunction
        nameWithType: LLVM.GetFirstFunction
        qualifiedName: Swigged.LLVM.LLVM.GetFirstFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFirstFunction
  Swigged.LLVM.LLVM.GetLastFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetLastFunction*
        name: GetLastFunction
        nameWithType: LLVM.GetLastFunction
        qualifiedName: Swigged.LLVM.LLVM.GetLastFunction
      VB:
      - id: Swigged.LLVM.LLVM.GetLastFunction*
        name: GetLastFunction
        nameWithType: LLVM.GetLastFunction
        qualifiedName: Swigged.LLVM.LLVM.GetLastFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetLastFunction
  Swigged.LLVM.LLVM.GetNextFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNextFunction*
        name: GetNextFunction
        nameWithType: LLVM.GetNextFunction
        qualifiedName: Swigged.LLVM.LLVM.GetNextFunction
      VB:
      - id: Swigged.LLVM.LLVM.GetNextFunction*
        name: GetNextFunction
        nameWithType: LLVM.GetNextFunction
        qualifiedName: Swigged.LLVM.LLVM.GetNextFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNextFunction
  Swigged.LLVM.LLVM.GetPreviousFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetPreviousFunction*
        name: GetPreviousFunction
        nameWithType: LLVM.GetPreviousFunction
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousFunction
      VB:
      - id: Swigged.LLVM.LLVM.GetPreviousFunction*
        name: GetPreviousFunction
        nameWithType: LLVM.GetPreviousFunction
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetPreviousFunction
  Swigged.LLVM.LLVM.GetTypeKind*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTypeKind*
        name: GetTypeKind
        nameWithType: LLVM.GetTypeKind
        qualifiedName: Swigged.LLVM.LLVM.GetTypeKind
      VB:
      - id: Swigged.LLVM.LLVM.GetTypeKind*
        name: GetTypeKind
        nameWithType: LLVM.GetTypeKind
        qualifiedName: Swigged.LLVM.LLVM.GetTypeKind
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTypeKind
  Swigged.LLVM.LLVM.TypeIsSized*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.TypeIsSized*
        name: TypeIsSized
        nameWithType: LLVM.TypeIsSized
        qualifiedName: Swigged.LLVM.LLVM.TypeIsSized
      VB:
      - id: Swigged.LLVM.LLVM.TypeIsSized*
        name: TypeIsSized
        nameWithType: LLVM.TypeIsSized
        qualifiedName: Swigged.LLVM.LLVM.TypeIsSized
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.TypeIsSized
  Swigged.LLVM.LLVM.GetTypeContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTypeContext*
        name: GetTypeContext
        nameWithType: LLVM.GetTypeContext
        qualifiedName: Swigged.LLVM.LLVM.GetTypeContext
      VB:
      - id: Swigged.LLVM.LLVM.GetTypeContext*
        name: GetTypeContext
        nameWithType: LLVM.GetTypeContext
        qualifiedName: Swigged.LLVM.LLVM.GetTypeContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTypeContext
  Swigged.LLVM.LLVM.DumpType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DumpType*
        name: DumpType
        nameWithType: LLVM.DumpType
        qualifiedName: Swigged.LLVM.LLVM.DumpType
      VB:
      - id: Swigged.LLVM.LLVM.DumpType*
        name: DumpType
        nameWithType: LLVM.DumpType
        qualifiedName: Swigged.LLVM.LLVM.DumpType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DumpType
  Swigged.LLVM.LLVM.PrintTypeToString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PrintTypeToString*
        name: PrintTypeToString
        nameWithType: LLVM.PrintTypeToString
        qualifiedName: Swigged.LLVM.LLVM.PrintTypeToString
      VB:
      - id: Swigged.LLVM.LLVM.PrintTypeToString*
        name: PrintTypeToString
        nameWithType: LLVM.PrintTypeToString
        qualifiedName: Swigged.LLVM.LLVM.PrintTypeToString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PrintTypeToString
  Swigged.LLVM.LLVM.Int1TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int1TypeInContext*
        name: Int1TypeInContext
        nameWithType: LLVM.Int1TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int1TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.Int1TypeInContext*
        name: Int1TypeInContext
        nameWithType: LLVM.Int1TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int1TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int1TypeInContext
  Swigged.LLVM.LLVM.Int8TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int8TypeInContext*
        name: Int8TypeInContext
        nameWithType: LLVM.Int8TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int8TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.Int8TypeInContext*
        name: Int8TypeInContext
        nameWithType: LLVM.Int8TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int8TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int8TypeInContext
  Swigged.LLVM.LLVM.Int16TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int16TypeInContext*
        name: Int16TypeInContext
        nameWithType: LLVM.Int16TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int16TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.Int16TypeInContext*
        name: Int16TypeInContext
        nameWithType: LLVM.Int16TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int16TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int16TypeInContext
  Swigged.LLVM.LLVM.Int32TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int32TypeInContext*
        name: Int32TypeInContext
        nameWithType: LLVM.Int32TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int32TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.Int32TypeInContext*
        name: Int32TypeInContext
        nameWithType: LLVM.Int32TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int32TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int32TypeInContext
  Swigged.LLVM.LLVM.Int64TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int64TypeInContext*
        name: Int64TypeInContext
        nameWithType: LLVM.Int64TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int64TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.Int64TypeInContext*
        name: Int64TypeInContext
        nameWithType: LLVM.Int64TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int64TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int64TypeInContext
  Swigged.LLVM.LLVM.Int128TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int128TypeInContext*
        name: Int128TypeInContext
        nameWithType: LLVM.Int128TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int128TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.Int128TypeInContext*
        name: Int128TypeInContext
        nameWithType: LLVM.Int128TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.Int128TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int128TypeInContext
  Swigged.LLVM.LLVM.IntTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IntTypeInContext*
        name: IntTypeInContext
        nameWithType: LLVM.IntTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.IntTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.IntTypeInContext*
        name: IntTypeInContext
        nameWithType: LLVM.IntTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.IntTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IntTypeInContext
  Swigged.LLVM.LLVM.Int1Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int1Type*
        name: Int1Type
        nameWithType: LLVM.Int1Type
        qualifiedName: Swigged.LLVM.LLVM.Int1Type
      VB:
      - id: Swigged.LLVM.LLVM.Int1Type*
        name: Int1Type
        nameWithType: LLVM.Int1Type
        qualifiedName: Swigged.LLVM.LLVM.Int1Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int1Type
  Swigged.LLVM.LLVM.Int8Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int8Type*
        name: Int8Type
        nameWithType: LLVM.Int8Type
        qualifiedName: Swigged.LLVM.LLVM.Int8Type
      VB:
      - id: Swigged.LLVM.LLVM.Int8Type*
        name: Int8Type
        nameWithType: LLVM.Int8Type
        qualifiedName: Swigged.LLVM.LLVM.Int8Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int8Type
  Swigged.LLVM.LLVM.Int16Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int16Type*
        name: Int16Type
        nameWithType: LLVM.Int16Type
        qualifiedName: Swigged.LLVM.LLVM.Int16Type
      VB:
      - id: Swigged.LLVM.LLVM.Int16Type*
        name: Int16Type
        nameWithType: LLVM.Int16Type
        qualifiedName: Swigged.LLVM.LLVM.Int16Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int16Type
  Swigged.LLVM.LLVM.Int32Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int32Type*
        name: Int32Type
        nameWithType: LLVM.Int32Type
        qualifiedName: Swigged.LLVM.LLVM.Int32Type
      VB:
      - id: Swigged.LLVM.LLVM.Int32Type*
        name: Int32Type
        nameWithType: LLVM.Int32Type
        qualifiedName: Swigged.LLVM.LLVM.Int32Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int32Type
  Swigged.LLVM.LLVM.Int64Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int64Type*
        name: Int64Type
        nameWithType: LLVM.Int64Type
        qualifiedName: Swigged.LLVM.LLVM.Int64Type
      VB:
      - id: Swigged.LLVM.LLVM.Int64Type*
        name: Int64Type
        nameWithType: LLVM.Int64Type
        qualifiedName: Swigged.LLVM.LLVM.Int64Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int64Type
  Swigged.LLVM.LLVM.Int128Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.Int128Type*
        name: Int128Type
        nameWithType: LLVM.Int128Type
        qualifiedName: Swigged.LLVM.LLVM.Int128Type
      VB:
      - id: Swigged.LLVM.LLVM.Int128Type*
        name: Int128Type
        nameWithType: LLVM.Int128Type
        qualifiedName: Swigged.LLVM.LLVM.Int128Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.Int128Type
  Swigged.LLVM.LLVM.IntType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IntType*
        name: IntType
        nameWithType: LLVM.IntType
        qualifiedName: Swigged.LLVM.LLVM.IntType
      VB:
      - id: Swigged.LLVM.LLVM.IntType*
        name: IntType
        nameWithType: LLVM.IntType
        qualifiedName: Swigged.LLVM.LLVM.IntType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IntType
  Swigged.LLVM.LLVM.GetIntTypeWidth*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetIntTypeWidth*
        name: GetIntTypeWidth
        nameWithType: LLVM.GetIntTypeWidth
        qualifiedName: Swigged.LLVM.LLVM.GetIntTypeWidth
      VB:
      - id: Swigged.LLVM.LLVM.GetIntTypeWidth*
        name: GetIntTypeWidth
        nameWithType: LLVM.GetIntTypeWidth
        qualifiedName: Swigged.LLVM.LLVM.GetIntTypeWidth
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetIntTypeWidth
  Swigged.LLVM.LLVM.HalfTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.HalfTypeInContext*
        name: HalfTypeInContext
        nameWithType: LLVM.HalfTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.HalfTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.HalfTypeInContext*
        name: HalfTypeInContext
        nameWithType: LLVM.HalfTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.HalfTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.HalfTypeInContext
  Swigged.LLVM.LLVM.FloatTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.FloatTypeInContext*
        name: FloatTypeInContext
        nameWithType: LLVM.FloatTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.FloatTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.FloatTypeInContext*
        name: FloatTypeInContext
        nameWithType: LLVM.FloatTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.FloatTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.FloatTypeInContext
  Swigged.LLVM.LLVM.DoubleTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DoubleTypeInContext*
        name: DoubleTypeInContext
        nameWithType: LLVM.DoubleTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.DoubleTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.DoubleTypeInContext*
        name: DoubleTypeInContext
        nameWithType: LLVM.DoubleTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.DoubleTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DoubleTypeInContext
  Swigged.LLVM.LLVM.X86FP80TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.X86FP80TypeInContext*
        name: X86FP80TypeInContext
        nameWithType: LLVM.X86FP80TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.X86FP80TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.X86FP80TypeInContext*
        name: X86FP80TypeInContext
        nameWithType: LLVM.X86FP80TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.X86FP80TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.X86FP80TypeInContext
  Swigged.LLVM.LLVM.FP128TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.FP128TypeInContext*
        name: FP128TypeInContext
        nameWithType: LLVM.FP128TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.FP128TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.FP128TypeInContext*
        name: FP128TypeInContext
        nameWithType: LLVM.FP128TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.FP128TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.FP128TypeInContext
  Swigged.LLVM.LLVM.PPCFP128TypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PPCFP128TypeInContext*
        name: PPCFP128TypeInContext
        nameWithType: LLVM.PPCFP128TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.PPCFP128TypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.PPCFP128TypeInContext*
        name: PPCFP128TypeInContext
        nameWithType: LLVM.PPCFP128TypeInContext
        qualifiedName: Swigged.LLVM.LLVM.PPCFP128TypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PPCFP128TypeInContext
  Swigged.LLVM.LLVM.HalfType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.HalfType*
        name: HalfType
        nameWithType: LLVM.HalfType
        qualifiedName: Swigged.LLVM.LLVM.HalfType
      VB:
      - id: Swigged.LLVM.LLVM.HalfType*
        name: HalfType
        nameWithType: LLVM.HalfType
        qualifiedName: Swigged.LLVM.LLVM.HalfType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.HalfType
  Swigged.LLVM.LLVM.FloatType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.FloatType*
        name: FloatType
        nameWithType: LLVM.FloatType
        qualifiedName: Swigged.LLVM.LLVM.FloatType
      VB:
      - id: Swigged.LLVM.LLVM.FloatType*
        name: FloatType
        nameWithType: LLVM.FloatType
        qualifiedName: Swigged.LLVM.LLVM.FloatType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.FloatType
  Swigged.LLVM.LLVM.DoubleType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DoubleType*
        name: DoubleType
        nameWithType: LLVM.DoubleType
        qualifiedName: Swigged.LLVM.LLVM.DoubleType
      VB:
      - id: Swigged.LLVM.LLVM.DoubleType*
        name: DoubleType
        nameWithType: LLVM.DoubleType
        qualifiedName: Swigged.LLVM.LLVM.DoubleType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DoubleType
  Swigged.LLVM.LLVM.X86FP80Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.X86FP80Type*
        name: X86FP80Type
        nameWithType: LLVM.X86FP80Type
        qualifiedName: Swigged.LLVM.LLVM.X86FP80Type
      VB:
      - id: Swigged.LLVM.LLVM.X86FP80Type*
        name: X86FP80Type
        nameWithType: LLVM.X86FP80Type
        qualifiedName: Swigged.LLVM.LLVM.X86FP80Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.X86FP80Type
  Swigged.LLVM.LLVM.FP128Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.FP128Type*
        name: FP128Type
        nameWithType: LLVM.FP128Type
        qualifiedName: Swigged.LLVM.LLVM.FP128Type
      VB:
      - id: Swigged.LLVM.LLVM.FP128Type*
        name: FP128Type
        nameWithType: LLVM.FP128Type
        qualifiedName: Swigged.LLVM.LLVM.FP128Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.FP128Type
  Swigged.LLVM.LLVM.PPCFP128Type*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PPCFP128Type*
        name: PPCFP128Type
        nameWithType: LLVM.PPCFP128Type
        qualifiedName: Swigged.LLVM.LLVM.PPCFP128Type
      VB:
      - id: Swigged.LLVM.LLVM.PPCFP128Type*
        name: PPCFP128Type
        nameWithType: LLVM.PPCFP128Type
        qualifiedName: Swigged.LLVM.LLVM.PPCFP128Type
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PPCFP128Type
  Swigged.LLVM.TypeRef[]:
    name:
      CSharp:
      - id: Swigged.LLVM.TypeRef
        name: TypeRef
        nameWithType: TypeRef
        qualifiedName: Swigged.LLVM.TypeRef
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Swigged.LLVM.TypeRef
        name: TypeRef
        nameWithType: TypeRef
        qualifiedName: Swigged.LLVM.TypeRef
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Swigged.LLVM.LLVM.FunctionType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.FunctionType*
        name: FunctionType
        nameWithType: LLVM.FunctionType
        qualifiedName: Swigged.LLVM.LLVM.FunctionType
      VB:
      - id: Swigged.LLVM.LLVM.FunctionType*
        name: FunctionType
        nameWithType: LLVM.FunctionType
        qualifiedName: Swigged.LLVM.LLVM.FunctionType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.FunctionType
  Swigged.LLVM.LLVM.IsFunctionVarArg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsFunctionVarArg*
        name: IsFunctionVarArg
        nameWithType: LLVM.IsFunctionVarArg
        qualifiedName: Swigged.LLVM.LLVM.IsFunctionVarArg
      VB:
      - id: Swigged.LLVM.LLVM.IsFunctionVarArg*
        name: IsFunctionVarArg
        nameWithType: LLVM.IsFunctionVarArg
        qualifiedName: Swigged.LLVM.LLVM.IsFunctionVarArg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsFunctionVarArg
  Swigged.LLVM.LLVM.GetReturnType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetReturnType*
        name: GetReturnType
        nameWithType: LLVM.GetReturnType
        qualifiedName: Swigged.LLVM.LLVM.GetReturnType
      VB:
      - id: Swigged.LLVM.LLVM.GetReturnType*
        name: GetReturnType
        nameWithType: LLVM.GetReturnType
        qualifiedName: Swigged.LLVM.LLVM.GetReturnType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetReturnType
  Swigged.LLVM.LLVM.CountParamTypes*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CountParamTypes*
        name: CountParamTypes
        nameWithType: LLVM.CountParamTypes
        qualifiedName: Swigged.LLVM.LLVM.CountParamTypes
      VB:
      - id: Swigged.LLVM.LLVM.CountParamTypes*
        name: CountParamTypes
        nameWithType: LLVM.CountParamTypes
        qualifiedName: Swigged.LLVM.LLVM.CountParamTypes
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CountParamTypes
  Swigged.LLVM.LLVM.GetParamTypes*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetParamTypes*
        name: GetParamTypes
        nameWithType: LLVM.GetParamTypes
        qualifiedName: Swigged.LLVM.LLVM.GetParamTypes
      VB:
      - id: Swigged.LLVM.LLVM.GetParamTypes*
        name: GetParamTypes
        nameWithType: LLVM.GetParamTypes
        qualifiedName: Swigged.LLVM.LLVM.GetParamTypes
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetParamTypes
  Swigged.LLVM.LLVM.StructTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.StructTypeInContext*
        name: StructTypeInContext
        nameWithType: LLVM.StructTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.StructTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.StructTypeInContext*
        name: StructTypeInContext
        nameWithType: LLVM.StructTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.StructTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.StructTypeInContext
  Swigged.LLVM.LLVM.StructType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.StructType*
        name: StructType
        nameWithType: LLVM.StructType
        qualifiedName: Swigged.LLVM.LLVM.StructType
      VB:
      - id: Swigged.LLVM.LLVM.StructType*
        name: StructType
        nameWithType: LLVM.StructType
        qualifiedName: Swigged.LLVM.LLVM.StructType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.StructType
  Swigged.LLVM.LLVM.StructCreateNamed*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.StructCreateNamed*
        name: StructCreateNamed
        nameWithType: LLVM.StructCreateNamed
        qualifiedName: Swigged.LLVM.LLVM.StructCreateNamed
      VB:
      - id: Swigged.LLVM.LLVM.StructCreateNamed*
        name: StructCreateNamed
        nameWithType: LLVM.StructCreateNamed
        qualifiedName: Swigged.LLVM.LLVM.StructCreateNamed
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.StructCreateNamed
  Swigged.LLVM.LLVM.GetStructName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetStructName*
        name: GetStructName
        nameWithType: LLVM.GetStructName
        qualifiedName: Swigged.LLVM.LLVM.GetStructName
      VB:
      - id: Swigged.LLVM.LLVM.GetStructName*
        name: GetStructName
        nameWithType: LLVM.GetStructName
        qualifiedName: Swigged.LLVM.LLVM.GetStructName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetStructName
  Swigged.LLVM.LLVM.StructSetBody*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.StructSetBody*
        name: StructSetBody
        nameWithType: LLVM.StructSetBody
        qualifiedName: Swigged.LLVM.LLVM.StructSetBody
      VB:
      - id: Swigged.LLVM.LLVM.StructSetBody*
        name: StructSetBody
        nameWithType: LLVM.StructSetBody
        qualifiedName: Swigged.LLVM.LLVM.StructSetBody
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.StructSetBody
  Swigged.LLVM.LLVM.CountStructElementTypes*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CountStructElementTypes*
        name: CountStructElementTypes
        nameWithType: LLVM.CountStructElementTypes
        qualifiedName: Swigged.LLVM.LLVM.CountStructElementTypes
      VB:
      - id: Swigged.LLVM.LLVM.CountStructElementTypes*
        name: CountStructElementTypes
        nameWithType: LLVM.CountStructElementTypes
        qualifiedName: Swigged.LLVM.LLVM.CountStructElementTypes
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CountStructElementTypes
  Swigged.LLVM.LLVM.GetStructElementTypes*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetStructElementTypes*
        name: GetStructElementTypes
        nameWithType: LLVM.GetStructElementTypes
        qualifiedName: Swigged.LLVM.LLVM.GetStructElementTypes
      VB:
      - id: Swigged.LLVM.LLVM.GetStructElementTypes*
        name: GetStructElementTypes
        nameWithType: LLVM.GetStructElementTypes
        qualifiedName: Swigged.LLVM.LLVM.GetStructElementTypes
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetStructElementTypes
  Swigged.LLVM.LLVM.StructGetTypeAtIndex*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.StructGetTypeAtIndex*
        name: StructGetTypeAtIndex
        nameWithType: LLVM.StructGetTypeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.StructGetTypeAtIndex
      VB:
      - id: Swigged.LLVM.LLVM.StructGetTypeAtIndex*
        name: StructGetTypeAtIndex
        nameWithType: LLVM.StructGetTypeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.StructGetTypeAtIndex
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.StructGetTypeAtIndex
  Swigged.LLVM.LLVM.IsPackedStruct*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsPackedStruct*
        name: IsPackedStruct
        nameWithType: LLVM.IsPackedStruct
        qualifiedName: Swigged.LLVM.LLVM.IsPackedStruct
      VB:
      - id: Swigged.LLVM.LLVM.IsPackedStruct*
        name: IsPackedStruct
        nameWithType: LLVM.IsPackedStruct
        qualifiedName: Swigged.LLVM.LLVM.IsPackedStruct
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsPackedStruct
  Swigged.LLVM.LLVM.IsOpaqueStruct*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsOpaqueStruct*
        name: IsOpaqueStruct
        nameWithType: LLVM.IsOpaqueStruct
        qualifiedName: Swigged.LLVM.LLVM.IsOpaqueStruct
      VB:
      - id: Swigged.LLVM.LLVM.IsOpaqueStruct*
        name: IsOpaqueStruct
        nameWithType: LLVM.IsOpaqueStruct
        qualifiedName: Swigged.LLVM.LLVM.IsOpaqueStruct
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsOpaqueStruct
  Swigged.LLVM.LLVM.GetElementType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetElementType*
        name: GetElementType
        nameWithType: LLVM.GetElementType
        qualifiedName: Swigged.LLVM.LLVM.GetElementType
      VB:
      - id: Swigged.LLVM.LLVM.GetElementType*
        name: GetElementType
        nameWithType: LLVM.GetElementType
        qualifiedName: Swigged.LLVM.LLVM.GetElementType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetElementType
  Swigged.LLVM.LLVM.ArrayType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ArrayType*
        name: ArrayType
        nameWithType: LLVM.ArrayType
        qualifiedName: Swigged.LLVM.LLVM.ArrayType
      VB:
      - id: Swigged.LLVM.LLVM.ArrayType*
        name: ArrayType
        nameWithType: LLVM.ArrayType
        qualifiedName: Swigged.LLVM.LLVM.ArrayType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ArrayType
  Swigged.LLVM.LLVM.GetArrayLength*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetArrayLength*
        name: GetArrayLength
        nameWithType: LLVM.GetArrayLength
        qualifiedName: Swigged.LLVM.LLVM.GetArrayLength
      VB:
      - id: Swigged.LLVM.LLVM.GetArrayLength*
        name: GetArrayLength
        nameWithType: LLVM.GetArrayLength
        qualifiedName: Swigged.LLVM.LLVM.GetArrayLength
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetArrayLength
  Swigged.LLVM.LLVM.PointerType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PointerType*
        name: PointerType
        nameWithType: LLVM.PointerType
        qualifiedName: Swigged.LLVM.LLVM.PointerType
      VB:
      - id: Swigged.LLVM.LLVM.PointerType*
        name: PointerType
        nameWithType: LLVM.PointerType
        qualifiedName: Swigged.LLVM.LLVM.PointerType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PointerType
  Swigged.LLVM.LLVM.GetPointerAddressSpace*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetPointerAddressSpace*
        name: GetPointerAddressSpace
        nameWithType: LLVM.GetPointerAddressSpace
        qualifiedName: Swigged.LLVM.LLVM.GetPointerAddressSpace
      VB:
      - id: Swigged.LLVM.LLVM.GetPointerAddressSpace*
        name: GetPointerAddressSpace
        nameWithType: LLVM.GetPointerAddressSpace
        qualifiedName: Swigged.LLVM.LLVM.GetPointerAddressSpace
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetPointerAddressSpace
  Swigged.LLVM.LLVM.VectorType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.VectorType*
        name: VectorType
        nameWithType: LLVM.VectorType
        qualifiedName: Swigged.LLVM.LLVM.VectorType
      VB:
      - id: Swigged.LLVM.LLVM.VectorType*
        name: VectorType
        nameWithType: LLVM.VectorType
        qualifiedName: Swigged.LLVM.LLVM.VectorType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.VectorType
  Swigged.LLVM.LLVM.GetVectorSize*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetVectorSize*
        name: GetVectorSize
        nameWithType: LLVM.GetVectorSize
        qualifiedName: Swigged.LLVM.LLVM.GetVectorSize
      VB:
      - id: Swigged.LLVM.LLVM.GetVectorSize*
        name: GetVectorSize
        nameWithType: LLVM.GetVectorSize
        qualifiedName: Swigged.LLVM.LLVM.GetVectorSize
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetVectorSize
  Swigged.LLVM.LLVM.VoidTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.VoidTypeInContext*
        name: VoidTypeInContext
        nameWithType: LLVM.VoidTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.VoidTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.VoidTypeInContext*
        name: VoidTypeInContext
        nameWithType: LLVM.VoidTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.VoidTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.VoidTypeInContext
  Swigged.LLVM.LLVM.LabelTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.LabelTypeInContext*
        name: LabelTypeInContext
        nameWithType: LLVM.LabelTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.LabelTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.LabelTypeInContext*
        name: LabelTypeInContext
        nameWithType: LLVM.LabelTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.LabelTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.LabelTypeInContext
  Swigged.LLVM.LLVM.X86MMXTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.X86MMXTypeInContext*
        name: X86MMXTypeInContext
        nameWithType: LLVM.X86MMXTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.X86MMXTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.X86MMXTypeInContext*
        name: X86MMXTypeInContext
        nameWithType: LLVM.X86MMXTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.X86MMXTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.X86MMXTypeInContext
  Swigged.LLVM.LLVM.VoidType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.VoidType*
        name: VoidType
        nameWithType: LLVM.VoidType
        qualifiedName: Swigged.LLVM.LLVM.VoidType
      VB:
      - id: Swigged.LLVM.LLVM.VoidType*
        name: VoidType
        nameWithType: LLVM.VoidType
        qualifiedName: Swigged.LLVM.LLVM.VoidType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.VoidType
  Swigged.LLVM.LLVM.LabelType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.LabelType*
        name: LabelType
        nameWithType: LLVM.LabelType
        qualifiedName: Swigged.LLVM.LLVM.LabelType
      VB:
      - id: Swigged.LLVM.LLVM.LabelType*
        name: LabelType
        nameWithType: LLVM.LabelType
        qualifiedName: Swigged.LLVM.LLVM.LabelType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.LabelType
  Swigged.LLVM.LLVM.X86MMXType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.X86MMXType*
        name: X86MMXType
        nameWithType: LLVM.X86MMXType
        qualifiedName: Swigged.LLVM.LLVM.X86MMXType
      VB:
      - id: Swigged.LLVM.LLVM.X86MMXType*
        name: X86MMXType
        nameWithType: LLVM.X86MMXType
        qualifiedName: Swigged.LLVM.LLVM.X86MMXType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.X86MMXType
  Swigged.LLVM.LLVM.TypeOf*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.TypeOf*
        name: TypeOf
        nameWithType: LLVM.TypeOf
        qualifiedName: Swigged.LLVM.LLVM.TypeOf
      VB:
      - id: Swigged.LLVM.LLVM.TypeOf*
        name: TypeOf
        nameWithType: LLVM.TypeOf
        qualifiedName: Swigged.LLVM.LLVM.TypeOf
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.TypeOf
  Swigged.LLVM.LLVM.GetValueKind*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetValueKind*
        name: GetValueKind
        nameWithType: LLVM.GetValueKind
        qualifiedName: Swigged.LLVM.LLVM.GetValueKind
      VB:
      - id: Swigged.LLVM.LLVM.GetValueKind*
        name: GetValueKind
        nameWithType: LLVM.GetValueKind
        qualifiedName: Swigged.LLVM.LLVM.GetValueKind
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetValueKind
  Swigged.LLVM.LLVM.GetValueName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetValueName*
        name: GetValueName
        nameWithType: LLVM.GetValueName
        qualifiedName: Swigged.LLVM.LLVM.GetValueName
      VB:
      - id: Swigged.LLVM.LLVM.GetValueName*
        name: GetValueName
        nameWithType: LLVM.GetValueName
        qualifiedName: Swigged.LLVM.LLVM.GetValueName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetValueName
  Swigged.LLVM.LLVM.SetValueName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetValueName*
        name: SetValueName
        nameWithType: LLVM.SetValueName
        qualifiedName: Swigged.LLVM.LLVM.SetValueName
      VB:
      - id: Swigged.LLVM.LLVM.SetValueName*
        name: SetValueName
        nameWithType: LLVM.SetValueName
        qualifiedName: Swigged.LLVM.LLVM.SetValueName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetValueName
  Swigged.LLVM.LLVM.DumpValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DumpValue*
        name: DumpValue
        nameWithType: LLVM.DumpValue
        qualifiedName: Swigged.LLVM.LLVM.DumpValue
      VB:
      - id: Swigged.LLVM.LLVM.DumpValue*
        name: DumpValue
        nameWithType: LLVM.DumpValue
        qualifiedName: Swigged.LLVM.LLVM.DumpValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DumpValue
  Swigged.LLVM.LLVM.PrintValueToString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PrintValueToString*
        name: PrintValueToString
        nameWithType: LLVM.PrintValueToString
        qualifiedName: Swigged.LLVM.LLVM.PrintValueToString
      VB:
      - id: Swigged.LLVM.LLVM.PrintValueToString*
        name: PrintValueToString
        nameWithType: LLVM.PrintValueToString
        qualifiedName: Swigged.LLVM.LLVM.PrintValueToString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PrintValueToString
  Swigged.LLVM.LLVM.ReplaceAllUsesWith*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ReplaceAllUsesWith*
        name: ReplaceAllUsesWith
        nameWithType: LLVM.ReplaceAllUsesWith
        qualifiedName: Swigged.LLVM.LLVM.ReplaceAllUsesWith
      VB:
      - id: Swigged.LLVM.LLVM.ReplaceAllUsesWith*
        name: ReplaceAllUsesWith
        nameWithType: LLVM.ReplaceAllUsesWith
        qualifiedName: Swigged.LLVM.LLVM.ReplaceAllUsesWith
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ReplaceAllUsesWith
  Swigged.LLVM.LLVM.IsConstant*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsConstant*
        name: IsConstant
        nameWithType: LLVM.IsConstant
        qualifiedName: Swigged.LLVM.LLVM.IsConstant
      VB:
      - id: Swigged.LLVM.LLVM.IsConstant*
        name: IsConstant
        nameWithType: LLVM.IsConstant
        qualifiedName: Swigged.LLVM.LLVM.IsConstant
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsConstant
  Swigged.LLVM.LLVM.IsUndef*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsUndef*
        name: IsUndef
        nameWithType: LLVM.IsUndef
        qualifiedName: Swigged.LLVM.LLVM.IsUndef
      VB:
      - id: Swigged.LLVM.LLVM.IsUndef*
        name: IsUndef
        nameWithType: LLVM.IsUndef
        qualifiedName: Swigged.LLVM.LLVM.IsUndef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsUndef
  Swigged.LLVM.LLVM.IsAArgument*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAArgument*
        name: IsAArgument
        nameWithType: LLVM.IsAArgument
        qualifiedName: Swigged.LLVM.LLVM.IsAArgument
      VB:
      - id: Swigged.LLVM.LLVM.IsAArgument*
        name: IsAArgument
        nameWithType: LLVM.IsAArgument
        qualifiedName: Swigged.LLVM.LLVM.IsAArgument
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAArgument
  Swigged.LLVM.LLVM.IsABasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsABasicBlock*
        name: IsABasicBlock
        nameWithType: LLVM.IsABasicBlock
        qualifiedName: Swigged.LLVM.LLVM.IsABasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.IsABasicBlock*
        name: IsABasicBlock
        nameWithType: LLVM.IsABasicBlock
        qualifiedName: Swigged.LLVM.LLVM.IsABasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsABasicBlock
  Swigged.LLVM.LLVM.IsAInlineAsm*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAInlineAsm*
        name: IsAInlineAsm
        nameWithType: LLVM.IsAInlineAsm
        qualifiedName: Swigged.LLVM.LLVM.IsAInlineAsm
      VB:
      - id: Swigged.LLVM.LLVM.IsAInlineAsm*
        name: IsAInlineAsm
        nameWithType: LLVM.IsAInlineAsm
        qualifiedName: Swigged.LLVM.LLVM.IsAInlineAsm
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAInlineAsm
  Swigged.LLVM.LLVM.IsAUser*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAUser*
        name: IsAUser
        nameWithType: LLVM.IsAUser
        qualifiedName: Swigged.LLVM.LLVM.IsAUser
      VB:
      - id: Swigged.LLVM.LLVM.IsAUser*
        name: IsAUser
        nameWithType: LLVM.IsAUser
        qualifiedName: Swigged.LLVM.LLVM.IsAUser
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAUser
  Swigged.LLVM.LLVM.IsAConstant*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstant*
        name: IsAConstant
        nameWithType: LLVM.IsAConstant
        qualifiedName: Swigged.LLVM.LLVM.IsAConstant
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstant*
        name: IsAConstant
        nameWithType: LLVM.IsAConstant
        qualifiedName: Swigged.LLVM.LLVM.IsAConstant
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstant
  Swigged.LLVM.LLVM.IsABlockAddress*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsABlockAddress*
        name: IsABlockAddress
        nameWithType: LLVM.IsABlockAddress
        qualifiedName: Swigged.LLVM.LLVM.IsABlockAddress
      VB:
      - id: Swigged.LLVM.LLVM.IsABlockAddress*
        name: IsABlockAddress
        nameWithType: LLVM.IsABlockAddress
        qualifiedName: Swigged.LLVM.LLVM.IsABlockAddress
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsABlockAddress
  Swigged.LLVM.LLVM.IsAConstantAggregateZero*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantAggregateZero*
        name: IsAConstantAggregateZero
        nameWithType: LLVM.IsAConstantAggregateZero
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantAggregateZero
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantAggregateZero*
        name: IsAConstantAggregateZero
        nameWithType: LLVM.IsAConstantAggregateZero
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantAggregateZero
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantAggregateZero
  Swigged.LLVM.LLVM.IsAConstantArray*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantArray*
        name: IsAConstantArray
        nameWithType: LLVM.IsAConstantArray
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantArray
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantArray*
        name: IsAConstantArray
        nameWithType: LLVM.IsAConstantArray
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantArray
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantArray
  Swigged.LLVM.LLVM.IsAConstantDataSequential*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantDataSequential*
        name: IsAConstantDataSequential
        nameWithType: LLVM.IsAConstantDataSequential
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantDataSequential
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantDataSequential*
        name: IsAConstantDataSequential
        nameWithType: LLVM.IsAConstantDataSequential
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantDataSequential
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantDataSequential
  Swigged.LLVM.LLVM.IsAConstantDataArray*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantDataArray*
        name: IsAConstantDataArray
        nameWithType: LLVM.IsAConstantDataArray
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantDataArray
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantDataArray*
        name: IsAConstantDataArray
        nameWithType: LLVM.IsAConstantDataArray
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantDataArray
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantDataArray
  Swigged.LLVM.LLVM.IsAConstantDataVector*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantDataVector*
        name: IsAConstantDataVector
        nameWithType: LLVM.IsAConstantDataVector
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantDataVector
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantDataVector*
        name: IsAConstantDataVector
        nameWithType: LLVM.IsAConstantDataVector
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantDataVector
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantDataVector
  Swigged.LLVM.LLVM.IsAConstantExpr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantExpr*
        name: IsAConstantExpr
        nameWithType: LLVM.IsAConstantExpr
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantExpr
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantExpr*
        name: IsAConstantExpr
        nameWithType: LLVM.IsAConstantExpr
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantExpr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantExpr
  Swigged.LLVM.LLVM.IsAConstantFP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantFP*
        name: IsAConstantFP
        nameWithType: LLVM.IsAConstantFP
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantFP
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantFP*
        name: IsAConstantFP
        nameWithType: LLVM.IsAConstantFP
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantFP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantFP
  Swigged.LLVM.LLVM.IsAConstantInt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantInt*
        name: IsAConstantInt
        nameWithType: LLVM.IsAConstantInt
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantInt
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantInt*
        name: IsAConstantInt
        nameWithType: LLVM.IsAConstantInt
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantInt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantInt
  Swigged.LLVM.LLVM.IsAConstantPointerNull*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantPointerNull*
        name: IsAConstantPointerNull
        nameWithType: LLVM.IsAConstantPointerNull
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantPointerNull
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantPointerNull*
        name: IsAConstantPointerNull
        nameWithType: LLVM.IsAConstantPointerNull
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantPointerNull
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantPointerNull
  Swigged.LLVM.LLVM.IsAConstantStruct*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantStruct*
        name: IsAConstantStruct
        nameWithType: LLVM.IsAConstantStruct
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantStruct
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantStruct*
        name: IsAConstantStruct
        nameWithType: LLVM.IsAConstantStruct
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantStruct
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantStruct
  Swigged.LLVM.LLVM.IsAConstantTokenNone*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantTokenNone*
        name: IsAConstantTokenNone
        nameWithType: LLVM.IsAConstantTokenNone
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantTokenNone
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantTokenNone*
        name: IsAConstantTokenNone
        nameWithType: LLVM.IsAConstantTokenNone
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantTokenNone
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantTokenNone
  Swigged.LLVM.LLVM.IsAConstantVector*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAConstantVector*
        name: IsAConstantVector
        nameWithType: LLVM.IsAConstantVector
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantVector
      VB:
      - id: Swigged.LLVM.LLVM.IsAConstantVector*
        name: IsAConstantVector
        nameWithType: LLVM.IsAConstantVector
        qualifiedName: Swigged.LLVM.LLVM.IsAConstantVector
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAConstantVector
  Swigged.LLVM.LLVM.IsAGlobalValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAGlobalValue*
        name: IsAGlobalValue
        nameWithType: LLVM.IsAGlobalValue
        qualifiedName: Swigged.LLVM.LLVM.IsAGlobalValue
      VB:
      - id: Swigged.LLVM.LLVM.IsAGlobalValue*
        name: IsAGlobalValue
        nameWithType: LLVM.IsAGlobalValue
        qualifiedName: Swigged.LLVM.LLVM.IsAGlobalValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAGlobalValue
  Swigged.LLVM.LLVM.IsAGlobalAlias*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAGlobalAlias*
        name: IsAGlobalAlias
        nameWithType: LLVM.IsAGlobalAlias
        qualifiedName: Swigged.LLVM.LLVM.IsAGlobalAlias
      VB:
      - id: Swigged.LLVM.LLVM.IsAGlobalAlias*
        name: IsAGlobalAlias
        nameWithType: LLVM.IsAGlobalAlias
        qualifiedName: Swigged.LLVM.LLVM.IsAGlobalAlias
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAGlobalAlias
  Swigged.LLVM.LLVM.IsAGlobalObject*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAGlobalObject*
        name: IsAGlobalObject
        nameWithType: LLVM.IsAGlobalObject
        qualifiedName: Swigged.LLVM.LLVM.IsAGlobalObject
      VB:
      - id: Swigged.LLVM.LLVM.IsAGlobalObject*
        name: IsAGlobalObject
        nameWithType: LLVM.IsAGlobalObject
        qualifiedName: Swigged.LLVM.LLVM.IsAGlobalObject
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAGlobalObject
  Swigged.LLVM.LLVM.IsAFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAFunction*
        name: IsAFunction
        nameWithType: LLVM.IsAFunction
        qualifiedName: Swigged.LLVM.LLVM.IsAFunction
      VB:
      - id: Swigged.LLVM.LLVM.IsAFunction*
        name: IsAFunction
        nameWithType: LLVM.IsAFunction
        qualifiedName: Swigged.LLVM.LLVM.IsAFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAFunction
  Swigged.LLVM.LLVM.IsAGlobalVariable*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAGlobalVariable*
        name: IsAGlobalVariable
        nameWithType: LLVM.IsAGlobalVariable
        qualifiedName: Swigged.LLVM.LLVM.IsAGlobalVariable
      VB:
      - id: Swigged.LLVM.LLVM.IsAGlobalVariable*
        name: IsAGlobalVariable
        nameWithType: LLVM.IsAGlobalVariable
        qualifiedName: Swigged.LLVM.LLVM.IsAGlobalVariable
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAGlobalVariable
  Swigged.LLVM.LLVM.IsAUndefValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAUndefValue*
        name: IsAUndefValue
        nameWithType: LLVM.IsAUndefValue
        qualifiedName: Swigged.LLVM.LLVM.IsAUndefValue
      VB:
      - id: Swigged.LLVM.LLVM.IsAUndefValue*
        name: IsAUndefValue
        nameWithType: LLVM.IsAUndefValue
        qualifiedName: Swigged.LLVM.LLVM.IsAUndefValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAUndefValue
  Swigged.LLVM.LLVM.IsAInstruction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAInstruction*
        name: IsAInstruction
        nameWithType: LLVM.IsAInstruction
        qualifiedName: Swigged.LLVM.LLVM.IsAInstruction
      VB:
      - id: Swigged.LLVM.LLVM.IsAInstruction*
        name: IsAInstruction
        nameWithType: LLVM.IsAInstruction
        qualifiedName: Swigged.LLVM.LLVM.IsAInstruction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAInstruction
  Swigged.LLVM.LLVM.IsABinaryOperator*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsABinaryOperator*
        name: IsABinaryOperator
        nameWithType: LLVM.IsABinaryOperator
        qualifiedName: Swigged.LLVM.LLVM.IsABinaryOperator
      VB:
      - id: Swigged.LLVM.LLVM.IsABinaryOperator*
        name: IsABinaryOperator
        nameWithType: LLVM.IsABinaryOperator
        qualifiedName: Swigged.LLVM.LLVM.IsABinaryOperator
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsABinaryOperator
  Swigged.LLVM.LLVM.IsACallInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsACallInst*
        name: IsACallInst
        nameWithType: LLVM.IsACallInst
        qualifiedName: Swigged.LLVM.LLVM.IsACallInst
      VB:
      - id: Swigged.LLVM.LLVM.IsACallInst*
        name: IsACallInst
        nameWithType: LLVM.IsACallInst
        qualifiedName: Swigged.LLVM.LLVM.IsACallInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsACallInst
  Swigged.LLVM.LLVM.IsAIntrinsicInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAIntrinsicInst*
        name: IsAIntrinsicInst
        nameWithType: LLVM.IsAIntrinsicInst
        qualifiedName: Swigged.LLVM.LLVM.IsAIntrinsicInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAIntrinsicInst*
        name: IsAIntrinsicInst
        nameWithType: LLVM.IsAIntrinsicInst
        qualifiedName: Swigged.LLVM.LLVM.IsAIntrinsicInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAIntrinsicInst
  Swigged.LLVM.LLVM.IsADbgInfoIntrinsic*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsADbgInfoIntrinsic*
        name: IsADbgInfoIntrinsic
        nameWithType: LLVM.IsADbgInfoIntrinsic
        qualifiedName: Swigged.LLVM.LLVM.IsADbgInfoIntrinsic
      VB:
      - id: Swigged.LLVM.LLVM.IsADbgInfoIntrinsic*
        name: IsADbgInfoIntrinsic
        nameWithType: LLVM.IsADbgInfoIntrinsic
        qualifiedName: Swigged.LLVM.LLVM.IsADbgInfoIntrinsic
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsADbgInfoIntrinsic
  Swigged.LLVM.LLVM.IsADbgDeclareInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsADbgDeclareInst*
        name: IsADbgDeclareInst
        nameWithType: LLVM.IsADbgDeclareInst
        qualifiedName: Swigged.LLVM.LLVM.IsADbgDeclareInst
      VB:
      - id: Swigged.LLVM.LLVM.IsADbgDeclareInst*
        name: IsADbgDeclareInst
        nameWithType: LLVM.IsADbgDeclareInst
        qualifiedName: Swigged.LLVM.LLVM.IsADbgDeclareInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsADbgDeclareInst
  Swigged.LLVM.LLVM.IsAMemIntrinsic*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAMemIntrinsic*
        name: IsAMemIntrinsic
        nameWithType: LLVM.IsAMemIntrinsic
        qualifiedName: Swigged.LLVM.LLVM.IsAMemIntrinsic
      VB:
      - id: Swigged.LLVM.LLVM.IsAMemIntrinsic*
        name: IsAMemIntrinsic
        nameWithType: LLVM.IsAMemIntrinsic
        qualifiedName: Swigged.LLVM.LLVM.IsAMemIntrinsic
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAMemIntrinsic
  Swigged.LLVM.LLVM.IsAMemCpyInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAMemCpyInst*
        name: IsAMemCpyInst
        nameWithType: LLVM.IsAMemCpyInst
        qualifiedName: Swigged.LLVM.LLVM.IsAMemCpyInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAMemCpyInst*
        name: IsAMemCpyInst
        nameWithType: LLVM.IsAMemCpyInst
        qualifiedName: Swigged.LLVM.LLVM.IsAMemCpyInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAMemCpyInst
  Swigged.LLVM.LLVM.IsAMemMoveInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAMemMoveInst*
        name: IsAMemMoveInst
        nameWithType: LLVM.IsAMemMoveInst
        qualifiedName: Swigged.LLVM.LLVM.IsAMemMoveInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAMemMoveInst*
        name: IsAMemMoveInst
        nameWithType: LLVM.IsAMemMoveInst
        qualifiedName: Swigged.LLVM.LLVM.IsAMemMoveInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAMemMoveInst
  Swigged.LLVM.LLVM.IsAMemSetInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAMemSetInst*
        name: IsAMemSetInst
        nameWithType: LLVM.IsAMemSetInst
        qualifiedName: Swigged.LLVM.LLVM.IsAMemSetInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAMemSetInst*
        name: IsAMemSetInst
        nameWithType: LLVM.IsAMemSetInst
        qualifiedName: Swigged.LLVM.LLVM.IsAMemSetInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAMemSetInst
  Swigged.LLVM.LLVM.IsACmpInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsACmpInst*
        name: IsACmpInst
        nameWithType: LLVM.IsACmpInst
        qualifiedName: Swigged.LLVM.LLVM.IsACmpInst
      VB:
      - id: Swigged.LLVM.LLVM.IsACmpInst*
        name: IsACmpInst
        nameWithType: LLVM.IsACmpInst
        qualifiedName: Swigged.LLVM.LLVM.IsACmpInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsACmpInst
  Swigged.LLVM.LLVM.IsAFCmpInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAFCmpInst*
        name: IsAFCmpInst
        nameWithType: LLVM.IsAFCmpInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFCmpInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAFCmpInst*
        name: IsAFCmpInst
        nameWithType: LLVM.IsAFCmpInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFCmpInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAFCmpInst
  Swigged.LLVM.LLVM.IsAICmpInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAICmpInst*
        name: IsAICmpInst
        nameWithType: LLVM.IsAICmpInst
        qualifiedName: Swigged.LLVM.LLVM.IsAICmpInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAICmpInst*
        name: IsAICmpInst
        nameWithType: LLVM.IsAICmpInst
        qualifiedName: Swigged.LLVM.LLVM.IsAICmpInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAICmpInst
  Swigged.LLVM.LLVM.IsAExtractElementInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAExtractElementInst*
        name: IsAExtractElementInst
        nameWithType: LLVM.IsAExtractElementInst
        qualifiedName: Swigged.LLVM.LLVM.IsAExtractElementInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAExtractElementInst*
        name: IsAExtractElementInst
        nameWithType: LLVM.IsAExtractElementInst
        qualifiedName: Swigged.LLVM.LLVM.IsAExtractElementInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAExtractElementInst
  Swigged.LLVM.LLVM.IsAGetElementPtrInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAGetElementPtrInst*
        name: IsAGetElementPtrInst
        nameWithType: LLVM.IsAGetElementPtrInst
        qualifiedName: Swigged.LLVM.LLVM.IsAGetElementPtrInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAGetElementPtrInst*
        name: IsAGetElementPtrInst
        nameWithType: LLVM.IsAGetElementPtrInst
        qualifiedName: Swigged.LLVM.LLVM.IsAGetElementPtrInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAGetElementPtrInst
  Swigged.LLVM.LLVM.IsAInsertElementInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAInsertElementInst*
        name: IsAInsertElementInst
        nameWithType: LLVM.IsAInsertElementInst
        qualifiedName: Swigged.LLVM.LLVM.IsAInsertElementInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAInsertElementInst*
        name: IsAInsertElementInst
        nameWithType: LLVM.IsAInsertElementInst
        qualifiedName: Swigged.LLVM.LLVM.IsAInsertElementInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAInsertElementInst
  Swigged.LLVM.LLVM.IsAInsertValueInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAInsertValueInst*
        name: IsAInsertValueInst
        nameWithType: LLVM.IsAInsertValueInst
        qualifiedName: Swigged.LLVM.LLVM.IsAInsertValueInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAInsertValueInst*
        name: IsAInsertValueInst
        nameWithType: LLVM.IsAInsertValueInst
        qualifiedName: Swigged.LLVM.LLVM.IsAInsertValueInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAInsertValueInst
  Swigged.LLVM.LLVM.IsALandingPadInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsALandingPadInst*
        name: IsALandingPadInst
        nameWithType: LLVM.IsALandingPadInst
        qualifiedName: Swigged.LLVM.LLVM.IsALandingPadInst
      VB:
      - id: Swigged.LLVM.LLVM.IsALandingPadInst*
        name: IsALandingPadInst
        nameWithType: LLVM.IsALandingPadInst
        qualifiedName: Swigged.LLVM.LLVM.IsALandingPadInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsALandingPadInst
  Swigged.LLVM.LLVM.IsAPHINode*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAPHINode*
        name: IsAPHINode
        nameWithType: LLVM.IsAPHINode
        qualifiedName: Swigged.LLVM.LLVM.IsAPHINode
      VB:
      - id: Swigged.LLVM.LLVM.IsAPHINode*
        name: IsAPHINode
        nameWithType: LLVM.IsAPHINode
        qualifiedName: Swigged.LLVM.LLVM.IsAPHINode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAPHINode
  Swigged.LLVM.LLVM.IsASelectInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsASelectInst*
        name: IsASelectInst
        nameWithType: LLVM.IsASelectInst
        qualifiedName: Swigged.LLVM.LLVM.IsASelectInst
      VB:
      - id: Swigged.LLVM.LLVM.IsASelectInst*
        name: IsASelectInst
        nameWithType: LLVM.IsASelectInst
        qualifiedName: Swigged.LLVM.LLVM.IsASelectInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsASelectInst
  Swigged.LLVM.LLVM.IsAShuffleVectorInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAShuffleVectorInst*
        name: IsAShuffleVectorInst
        nameWithType: LLVM.IsAShuffleVectorInst
        qualifiedName: Swigged.LLVM.LLVM.IsAShuffleVectorInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAShuffleVectorInst*
        name: IsAShuffleVectorInst
        nameWithType: LLVM.IsAShuffleVectorInst
        qualifiedName: Swigged.LLVM.LLVM.IsAShuffleVectorInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAShuffleVectorInst
  Swigged.LLVM.LLVM.IsAStoreInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAStoreInst*
        name: IsAStoreInst
        nameWithType: LLVM.IsAStoreInst
        qualifiedName: Swigged.LLVM.LLVM.IsAStoreInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAStoreInst*
        name: IsAStoreInst
        nameWithType: LLVM.IsAStoreInst
        qualifiedName: Swigged.LLVM.LLVM.IsAStoreInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAStoreInst
  Swigged.LLVM.LLVM.IsATerminatorInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsATerminatorInst*
        name: IsATerminatorInst
        nameWithType: LLVM.IsATerminatorInst
        qualifiedName: Swigged.LLVM.LLVM.IsATerminatorInst
      VB:
      - id: Swigged.LLVM.LLVM.IsATerminatorInst*
        name: IsATerminatorInst
        nameWithType: LLVM.IsATerminatorInst
        qualifiedName: Swigged.LLVM.LLVM.IsATerminatorInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsATerminatorInst
  Swigged.LLVM.LLVM.IsABranchInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsABranchInst*
        name: IsABranchInst
        nameWithType: LLVM.IsABranchInst
        qualifiedName: Swigged.LLVM.LLVM.IsABranchInst
      VB:
      - id: Swigged.LLVM.LLVM.IsABranchInst*
        name: IsABranchInst
        nameWithType: LLVM.IsABranchInst
        qualifiedName: Swigged.LLVM.LLVM.IsABranchInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsABranchInst
  Swigged.LLVM.LLVM.IsAIndirectBrInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAIndirectBrInst*
        name: IsAIndirectBrInst
        nameWithType: LLVM.IsAIndirectBrInst
        qualifiedName: Swigged.LLVM.LLVM.IsAIndirectBrInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAIndirectBrInst*
        name: IsAIndirectBrInst
        nameWithType: LLVM.IsAIndirectBrInst
        qualifiedName: Swigged.LLVM.LLVM.IsAIndirectBrInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAIndirectBrInst
  Swigged.LLVM.LLVM.IsAInvokeInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAInvokeInst*
        name: IsAInvokeInst
        nameWithType: LLVM.IsAInvokeInst
        qualifiedName: Swigged.LLVM.LLVM.IsAInvokeInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAInvokeInst*
        name: IsAInvokeInst
        nameWithType: LLVM.IsAInvokeInst
        qualifiedName: Swigged.LLVM.LLVM.IsAInvokeInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAInvokeInst
  Swigged.LLVM.LLVM.IsAReturnInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAReturnInst*
        name: IsAReturnInst
        nameWithType: LLVM.IsAReturnInst
        qualifiedName: Swigged.LLVM.LLVM.IsAReturnInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAReturnInst*
        name: IsAReturnInst
        nameWithType: LLVM.IsAReturnInst
        qualifiedName: Swigged.LLVM.LLVM.IsAReturnInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAReturnInst
  Swigged.LLVM.LLVM.IsASwitchInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsASwitchInst*
        name: IsASwitchInst
        nameWithType: LLVM.IsASwitchInst
        qualifiedName: Swigged.LLVM.LLVM.IsASwitchInst
      VB:
      - id: Swigged.LLVM.LLVM.IsASwitchInst*
        name: IsASwitchInst
        nameWithType: LLVM.IsASwitchInst
        qualifiedName: Swigged.LLVM.LLVM.IsASwitchInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsASwitchInst
  Swigged.LLVM.LLVM.IsAUnreachableInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAUnreachableInst*
        name: IsAUnreachableInst
        nameWithType: LLVM.IsAUnreachableInst
        qualifiedName: Swigged.LLVM.LLVM.IsAUnreachableInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAUnreachableInst*
        name: IsAUnreachableInst
        nameWithType: LLVM.IsAUnreachableInst
        qualifiedName: Swigged.LLVM.LLVM.IsAUnreachableInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAUnreachableInst
  Swigged.LLVM.LLVM.IsAResumeInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAResumeInst*
        name: IsAResumeInst
        nameWithType: LLVM.IsAResumeInst
        qualifiedName: Swigged.LLVM.LLVM.IsAResumeInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAResumeInst*
        name: IsAResumeInst
        nameWithType: LLVM.IsAResumeInst
        qualifiedName: Swigged.LLVM.LLVM.IsAResumeInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAResumeInst
  Swigged.LLVM.LLVM.IsACleanupReturnInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsACleanupReturnInst*
        name: IsACleanupReturnInst
        nameWithType: LLVM.IsACleanupReturnInst
        qualifiedName: Swigged.LLVM.LLVM.IsACleanupReturnInst
      VB:
      - id: Swigged.LLVM.LLVM.IsACleanupReturnInst*
        name: IsACleanupReturnInst
        nameWithType: LLVM.IsACleanupReturnInst
        qualifiedName: Swigged.LLVM.LLVM.IsACleanupReturnInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsACleanupReturnInst
  Swigged.LLVM.LLVM.IsACatchReturnInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsACatchReturnInst*
        name: IsACatchReturnInst
        nameWithType: LLVM.IsACatchReturnInst
        qualifiedName: Swigged.LLVM.LLVM.IsACatchReturnInst
      VB:
      - id: Swigged.LLVM.LLVM.IsACatchReturnInst*
        name: IsACatchReturnInst
        nameWithType: LLVM.IsACatchReturnInst
        qualifiedName: Swigged.LLVM.LLVM.IsACatchReturnInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsACatchReturnInst
  Swigged.LLVM.LLVM.IsAFuncletPadInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAFuncletPadInst*
        name: IsAFuncletPadInst
        nameWithType: LLVM.IsAFuncletPadInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFuncletPadInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAFuncletPadInst*
        name: IsAFuncletPadInst
        nameWithType: LLVM.IsAFuncletPadInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFuncletPadInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAFuncletPadInst
  Swigged.LLVM.LLVM.IsACatchPadInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsACatchPadInst*
        name: IsACatchPadInst
        nameWithType: LLVM.IsACatchPadInst
        qualifiedName: Swigged.LLVM.LLVM.IsACatchPadInst
      VB:
      - id: Swigged.LLVM.LLVM.IsACatchPadInst*
        name: IsACatchPadInst
        nameWithType: LLVM.IsACatchPadInst
        qualifiedName: Swigged.LLVM.LLVM.IsACatchPadInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsACatchPadInst
  Swigged.LLVM.LLVM.IsACleanupPadInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsACleanupPadInst*
        name: IsACleanupPadInst
        nameWithType: LLVM.IsACleanupPadInst
        qualifiedName: Swigged.LLVM.LLVM.IsACleanupPadInst
      VB:
      - id: Swigged.LLVM.LLVM.IsACleanupPadInst*
        name: IsACleanupPadInst
        nameWithType: LLVM.IsACleanupPadInst
        qualifiedName: Swigged.LLVM.LLVM.IsACleanupPadInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsACleanupPadInst
  Swigged.LLVM.LLVM.IsAUnaryInstruction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAUnaryInstruction*
        name: IsAUnaryInstruction
        nameWithType: LLVM.IsAUnaryInstruction
        qualifiedName: Swigged.LLVM.LLVM.IsAUnaryInstruction
      VB:
      - id: Swigged.LLVM.LLVM.IsAUnaryInstruction*
        name: IsAUnaryInstruction
        nameWithType: LLVM.IsAUnaryInstruction
        qualifiedName: Swigged.LLVM.LLVM.IsAUnaryInstruction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAUnaryInstruction
  Swigged.LLVM.LLVM.IsAAllocaInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAAllocaInst*
        name: IsAAllocaInst
        nameWithType: LLVM.IsAAllocaInst
        qualifiedName: Swigged.LLVM.LLVM.IsAAllocaInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAAllocaInst*
        name: IsAAllocaInst
        nameWithType: LLVM.IsAAllocaInst
        qualifiedName: Swigged.LLVM.LLVM.IsAAllocaInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAAllocaInst
  Swigged.LLVM.LLVM.IsACastInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsACastInst*
        name: IsACastInst
        nameWithType: LLVM.IsACastInst
        qualifiedName: Swigged.LLVM.LLVM.IsACastInst
      VB:
      - id: Swigged.LLVM.LLVM.IsACastInst*
        name: IsACastInst
        nameWithType: LLVM.IsACastInst
        qualifiedName: Swigged.LLVM.LLVM.IsACastInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsACastInst
  Swigged.LLVM.LLVM.IsAAddrSpaceCastInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAAddrSpaceCastInst*
        name: IsAAddrSpaceCastInst
        nameWithType: LLVM.IsAAddrSpaceCastInst
        qualifiedName: Swigged.LLVM.LLVM.IsAAddrSpaceCastInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAAddrSpaceCastInst*
        name: IsAAddrSpaceCastInst
        nameWithType: LLVM.IsAAddrSpaceCastInst
        qualifiedName: Swigged.LLVM.LLVM.IsAAddrSpaceCastInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAAddrSpaceCastInst
  Swigged.LLVM.LLVM.IsABitCastInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsABitCastInst*
        name: IsABitCastInst
        nameWithType: LLVM.IsABitCastInst
        qualifiedName: Swigged.LLVM.LLVM.IsABitCastInst
      VB:
      - id: Swigged.LLVM.LLVM.IsABitCastInst*
        name: IsABitCastInst
        nameWithType: LLVM.IsABitCastInst
        qualifiedName: Swigged.LLVM.LLVM.IsABitCastInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsABitCastInst
  Swigged.LLVM.LLVM.IsAFPExtInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAFPExtInst*
        name: IsAFPExtInst
        nameWithType: LLVM.IsAFPExtInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFPExtInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAFPExtInst*
        name: IsAFPExtInst
        nameWithType: LLVM.IsAFPExtInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFPExtInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAFPExtInst
  Swigged.LLVM.LLVM.IsAFPToSIInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAFPToSIInst*
        name: IsAFPToSIInst
        nameWithType: LLVM.IsAFPToSIInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFPToSIInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAFPToSIInst*
        name: IsAFPToSIInst
        nameWithType: LLVM.IsAFPToSIInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFPToSIInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAFPToSIInst
  Swigged.LLVM.LLVM.IsAFPToUIInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAFPToUIInst*
        name: IsAFPToUIInst
        nameWithType: LLVM.IsAFPToUIInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFPToUIInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAFPToUIInst*
        name: IsAFPToUIInst
        nameWithType: LLVM.IsAFPToUIInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFPToUIInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAFPToUIInst
  Swigged.LLVM.LLVM.IsAFPTruncInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAFPTruncInst*
        name: IsAFPTruncInst
        nameWithType: LLVM.IsAFPTruncInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFPTruncInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAFPTruncInst*
        name: IsAFPTruncInst
        nameWithType: LLVM.IsAFPTruncInst
        qualifiedName: Swigged.LLVM.LLVM.IsAFPTruncInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAFPTruncInst
  Swigged.LLVM.LLVM.IsAIntToPtrInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAIntToPtrInst*
        name: IsAIntToPtrInst
        nameWithType: LLVM.IsAIntToPtrInst
        qualifiedName: Swigged.LLVM.LLVM.IsAIntToPtrInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAIntToPtrInst*
        name: IsAIntToPtrInst
        nameWithType: LLVM.IsAIntToPtrInst
        qualifiedName: Swigged.LLVM.LLVM.IsAIntToPtrInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAIntToPtrInst
  Swigged.LLVM.LLVM.IsAPtrToIntInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAPtrToIntInst*
        name: IsAPtrToIntInst
        nameWithType: LLVM.IsAPtrToIntInst
        qualifiedName: Swigged.LLVM.LLVM.IsAPtrToIntInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAPtrToIntInst*
        name: IsAPtrToIntInst
        nameWithType: LLVM.IsAPtrToIntInst
        qualifiedName: Swigged.LLVM.LLVM.IsAPtrToIntInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAPtrToIntInst
  Swigged.LLVM.LLVM.IsASExtInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsASExtInst*
        name: IsASExtInst
        nameWithType: LLVM.IsASExtInst
        qualifiedName: Swigged.LLVM.LLVM.IsASExtInst
      VB:
      - id: Swigged.LLVM.LLVM.IsASExtInst*
        name: IsASExtInst
        nameWithType: LLVM.IsASExtInst
        qualifiedName: Swigged.LLVM.LLVM.IsASExtInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsASExtInst
  Swigged.LLVM.LLVM.IsASIToFPInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsASIToFPInst*
        name: IsASIToFPInst
        nameWithType: LLVM.IsASIToFPInst
        qualifiedName: Swigged.LLVM.LLVM.IsASIToFPInst
      VB:
      - id: Swigged.LLVM.LLVM.IsASIToFPInst*
        name: IsASIToFPInst
        nameWithType: LLVM.IsASIToFPInst
        qualifiedName: Swigged.LLVM.LLVM.IsASIToFPInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsASIToFPInst
  Swigged.LLVM.LLVM.IsATruncInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsATruncInst*
        name: IsATruncInst
        nameWithType: LLVM.IsATruncInst
        qualifiedName: Swigged.LLVM.LLVM.IsATruncInst
      VB:
      - id: Swigged.LLVM.LLVM.IsATruncInst*
        name: IsATruncInst
        nameWithType: LLVM.IsATruncInst
        qualifiedName: Swigged.LLVM.LLVM.IsATruncInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsATruncInst
  Swigged.LLVM.LLVM.IsAUIToFPInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAUIToFPInst*
        name: IsAUIToFPInst
        nameWithType: LLVM.IsAUIToFPInst
        qualifiedName: Swigged.LLVM.LLVM.IsAUIToFPInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAUIToFPInst*
        name: IsAUIToFPInst
        nameWithType: LLVM.IsAUIToFPInst
        qualifiedName: Swigged.LLVM.LLVM.IsAUIToFPInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAUIToFPInst
  Swigged.LLVM.LLVM.IsAZExtInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAZExtInst*
        name: IsAZExtInst
        nameWithType: LLVM.IsAZExtInst
        qualifiedName: Swigged.LLVM.LLVM.IsAZExtInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAZExtInst*
        name: IsAZExtInst
        nameWithType: LLVM.IsAZExtInst
        qualifiedName: Swigged.LLVM.LLVM.IsAZExtInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAZExtInst
  Swigged.LLVM.LLVM.IsAExtractValueInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAExtractValueInst*
        name: IsAExtractValueInst
        nameWithType: LLVM.IsAExtractValueInst
        qualifiedName: Swigged.LLVM.LLVM.IsAExtractValueInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAExtractValueInst*
        name: IsAExtractValueInst
        nameWithType: LLVM.IsAExtractValueInst
        qualifiedName: Swigged.LLVM.LLVM.IsAExtractValueInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAExtractValueInst
  Swigged.LLVM.LLVM.IsALoadInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsALoadInst*
        name: IsALoadInst
        nameWithType: LLVM.IsALoadInst
        qualifiedName: Swigged.LLVM.LLVM.IsALoadInst
      VB:
      - id: Swigged.LLVM.LLVM.IsALoadInst*
        name: IsALoadInst
        nameWithType: LLVM.IsALoadInst
        qualifiedName: Swigged.LLVM.LLVM.IsALoadInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsALoadInst
  Swigged.LLVM.LLVM.IsAVAArgInst*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAVAArgInst*
        name: IsAVAArgInst
        nameWithType: LLVM.IsAVAArgInst
        qualifiedName: Swigged.LLVM.LLVM.IsAVAArgInst
      VB:
      - id: Swigged.LLVM.LLVM.IsAVAArgInst*
        name: IsAVAArgInst
        nameWithType: LLVM.IsAVAArgInst
        qualifiedName: Swigged.LLVM.LLVM.IsAVAArgInst
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAVAArgInst
  Swigged.LLVM.LLVM.IsAMDNode*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAMDNode*
        name: IsAMDNode
        nameWithType: LLVM.IsAMDNode
        qualifiedName: Swigged.LLVM.LLVM.IsAMDNode
      VB:
      - id: Swigged.LLVM.LLVM.IsAMDNode*
        name: IsAMDNode
        nameWithType: LLVM.IsAMDNode
        qualifiedName: Swigged.LLVM.LLVM.IsAMDNode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAMDNode
  Swigged.LLVM.LLVM.IsAMDString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAMDString*
        name: IsAMDString
        nameWithType: LLVM.IsAMDString
        qualifiedName: Swigged.LLVM.LLVM.IsAMDString
      VB:
      - id: Swigged.LLVM.LLVM.IsAMDString*
        name: IsAMDString
        nameWithType: LLVM.IsAMDString
        qualifiedName: Swigged.LLVM.LLVM.IsAMDString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAMDString
  Swigged.LLVM.LLVM.GetFirstUse*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFirstUse*
        name: GetFirstUse
        nameWithType: LLVM.GetFirstUse
        qualifiedName: Swigged.LLVM.LLVM.GetFirstUse
      VB:
      - id: Swigged.LLVM.LLVM.GetFirstUse*
        name: GetFirstUse
        nameWithType: LLVM.GetFirstUse
        qualifiedName: Swigged.LLVM.LLVM.GetFirstUse
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFirstUse
  Swigged.LLVM.LLVM.GetNextUse*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNextUse*
        name: GetNextUse
        nameWithType: LLVM.GetNextUse
        qualifiedName: Swigged.LLVM.LLVM.GetNextUse
      VB:
      - id: Swigged.LLVM.LLVM.GetNextUse*
        name: GetNextUse
        nameWithType: LLVM.GetNextUse
        qualifiedName: Swigged.LLVM.LLVM.GetNextUse
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNextUse
  Swigged.LLVM.LLVM.GetUser*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetUser*
        name: GetUser
        nameWithType: LLVM.GetUser
        qualifiedName: Swigged.LLVM.LLVM.GetUser
      VB:
      - id: Swigged.LLVM.LLVM.GetUser*
        name: GetUser
        nameWithType: LLVM.GetUser
        qualifiedName: Swigged.LLVM.LLVM.GetUser
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetUser
  Swigged.LLVM.LLVM.GetUsedValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetUsedValue*
        name: GetUsedValue
        nameWithType: LLVM.GetUsedValue
        qualifiedName: Swigged.LLVM.LLVM.GetUsedValue
      VB:
      - id: Swigged.LLVM.LLVM.GetUsedValue*
        name: GetUsedValue
        nameWithType: LLVM.GetUsedValue
        qualifiedName: Swigged.LLVM.LLVM.GetUsedValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetUsedValue
  Swigged.LLVM.LLVM.GetOperand*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetOperand*
        name: GetOperand
        nameWithType: LLVM.GetOperand
        qualifiedName: Swigged.LLVM.LLVM.GetOperand
      VB:
      - id: Swigged.LLVM.LLVM.GetOperand*
        name: GetOperand
        nameWithType: LLVM.GetOperand
        qualifiedName: Swigged.LLVM.LLVM.GetOperand
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetOperand
  Swigged.LLVM.LLVM.GetOperandUse*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetOperandUse*
        name: GetOperandUse
        nameWithType: LLVM.GetOperandUse
        qualifiedName: Swigged.LLVM.LLVM.GetOperandUse
      VB:
      - id: Swigged.LLVM.LLVM.GetOperandUse*
        name: GetOperandUse
        nameWithType: LLVM.GetOperandUse
        qualifiedName: Swigged.LLVM.LLVM.GetOperandUse
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetOperandUse
  Swigged.LLVM.LLVM.SetOperand*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetOperand*
        name: SetOperand
        nameWithType: LLVM.SetOperand
        qualifiedName: Swigged.LLVM.LLVM.SetOperand
      VB:
      - id: Swigged.LLVM.LLVM.SetOperand*
        name: SetOperand
        nameWithType: LLVM.SetOperand
        qualifiedName: Swigged.LLVM.LLVM.SetOperand
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetOperand
  Swigged.LLVM.LLVM.GetNumOperands*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNumOperands*
        name: GetNumOperands
        nameWithType: LLVM.GetNumOperands
        qualifiedName: Swigged.LLVM.LLVM.GetNumOperands
      VB:
      - id: Swigged.LLVM.LLVM.GetNumOperands*
        name: GetNumOperands
        nameWithType: LLVM.GetNumOperands
        qualifiedName: Swigged.LLVM.LLVM.GetNumOperands
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNumOperands
  Swigged.LLVM.LLVM.ConstNull*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNull*
        name: ConstNull
        nameWithType: LLVM.ConstNull
        qualifiedName: Swigged.LLVM.LLVM.ConstNull
      VB:
      - id: Swigged.LLVM.LLVM.ConstNull*
        name: ConstNull
        nameWithType: LLVM.ConstNull
        qualifiedName: Swigged.LLVM.LLVM.ConstNull
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNull
  Swigged.LLVM.LLVM.ConstAllOnes*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstAllOnes*
        name: ConstAllOnes
        nameWithType: LLVM.ConstAllOnes
        qualifiedName: Swigged.LLVM.LLVM.ConstAllOnes
      VB:
      - id: Swigged.LLVM.LLVM.ConstAllOnes*
        name: ConstAllOnes
        nameWithType: LLVM.ConstAllOnes
        qualifiedName: Swigged.LLVM.LLVM.ConstAllOnes
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstAllOnes
  Swigged.LLVM.LLVM.GetUndef*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetUndef*
        name: GetUndef
        nameWithType: LLVM.GetUndef
        qualifiedName: Swigged.LLVM.LLVM.GetUndef
      VB:
      - id: Swigged.LLVM.LLVM.GetUndef*
        name: GetUndef
        nameWithType: LLVM.GetUndef
        qualifiedName: Swigged.LLVM.LLVM.GetUndef
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetUndef
  Swigged.LLVM.LLVM.IsNull*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsNull*
        name: IsNull
        nameWithType: LLVM.IsNull
        qualifiedName: Swigged.LLVM.LLVM.IsNull
      VB:
      - id: Swigged.LLVM.LLVM.IsNull*
        name: IsNull
        nameWithType: LLVM.IsNull
        qualifiedName: Swigged.LLVM.LLVM.IsNull
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsNull
  Swigged.LLVM.LLVM.ConstPointerNull*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstPointerNull*
        name: ConstPointerNull
        nameWithType: LLVM.ConstPointerNull
        qualifiedName: Swigged.LLVM.LLVM.ConstPointerNull
      VB:
      - id: Swigged.LLVM.LLVM.ConstPointerNull*
        name: ConstPointerNull
        nameWithType: LLVM.ConstPointerNull
        qualifiedName: Swigged.LLVM.LLVM.ConstPointerNull
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstPointerNull
  Swigged.LLVM.LLVM.ConstInt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstInt*
        name: ConstInt
        nameWithType: LLVM.ConstInt
        qualifiedName: Swigged.LLVM.LLVM.ConstInt
      VB:
      - id: Swigged.LLVM.LLVM.ConstInt*
        name: ConstInt
        nameWithType: LLVM.ConstInt
        qualifiedName: Swigged.LLVM.LLVM.ConstInt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstInt
  System.Byte:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
    isDefinition: true
  Swigged.LLVM.LLVM.ConstIntOfString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstIntOfString*
        name: ConstIntOfString
        nameWithType: LLVM.ConstIntOfString
        qualifiedName: Swigged.LLVM.LLVM.ConstIntOfString
      VB:
      - id: Swigged.LLVM.LLVM.ConstIntOfString*
        name: ConstIntOfString
        nameWithType: LLVM.ConstIntOfString
        qualifiedName: Swigged.LLVM.LLVM.ConstIntOfString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstIntOfString
  Swigged.LLVM.LLVM.ConstIntOfStringAndSize*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstIntOfStringAndSize*
        name: ConstIntOfStringAndSize
        nameWithType: LLVM.ConstIntOfStringAndSize
        qualifiedName: Swigged.LLVM.LLVM.ConstIntOfStringAndSize
      VB:
      - id: Swigged.LLVM.LLVM.ConstIntOfStringAndSize*
        name: ConstIntOfStringAndSize
        nameWithType: LLVM.ConstIntOfStringAndSize
        qualifiedName: Swigged.LLVM.LLVM.ConstIntOfStringAndSize
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstIntOfStringAndSize
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
  Swigged.LLVM.LLVM.ConstReal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstReal*
        name: ConstReal
        nameWithType: LLVM.ConstReal
        qualifiedName: Swigged.LLVM.LLVM.ConstReal
      VB:
      - id: Swigged.LLVM.LLVM.ConstReal*
        name: ConstReal
        nameWithType: LLVM.ConstReal
        qualifiedName: Swigged.LLVM.LLVM.ConstReal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstReal
  Swigged.LLVM.LLVM.ConstRealOfString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstRealOfString*
        name: ConstRealOfString
        nameWithType: LLVM.ConstRealOfString
        qualifiedName: Swigged.LLVM.LLVM.ConstRealOfString
      VB:
      - id: Swigged.LLVM.LLVM.ConstRealOfString*
        name: ConstRealOfString
        nameWithType: LLVM.ConstRealOfString
        qualifiedName: Swigged.LLVM.LLVM.ConstRealOfString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstRealOfString
  Swigged.LLVM.LLVM.ConstRealOfStringAndSize*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstRealOfStringAndSize*
        name: ConstRealOfStringAndSize
        nameWithType: LLVM.ConstRealOfStringAndSize
        qualifiedName: Swigged.LLVM.LLVM.ConstRealOfStringAndSize
      VB:
      - id: Swigged.LLVM.LLVM.ConstRealOfStringAndSize*
        name: ConstRealOfStringAndSize
        nameWithType: LLVM.ConstRealOfStringAndSize
        qualifiedName: Swigged.LLVM.LLVM.ConstRealOfStringAndSize
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstRealOfStringAndSize
  Swigged.LLVM.LLVM.ConstIntGetZExtValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstIntGetZExtValue*
        name: ConstIntGetZExtValue
        nameWithType: LLVM.ConstIntGetZExtValue
        qualifiedName: Swigged.LLVM.LLVM.ConstIntGetZExtValue
      VB:
      - id: Swigged.LLVM.LLVM.ConstIntGetZExtValue*
        name: ConstIntGetZExtValue
        nameWithType: LLVM.ConstIntGetZExtValue
        qualifiedName: Swigged.LLVM.LLVM.ConstIntGetZExtValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstIntGetZExtValue
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    commentId: '!:System.Int64'
  Swigged.LLVM.LLVM.ConstIntGetSExtValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstIntGetSExtValue*
        name: ConstIntGetSExtValue
        nameWithType: LLVM.ConstIntGetSExtValue
        qualifiedName: Swigged.LLVM.LLVM.ConstIntGetSExtValue
      VB:
      - id: Swigged.LLVM.LLVM.ConstIntGetSExtValue*
        name: ConstIntGetSExtValue
        nameWithType: LLVM.ConstIntGetSExtValue
        qualifiedName: Swigged.LLVM.LLVM.ConstIntGetSExtValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstIntGetSExtValue
  Swigged.LLVM.LLVM.ConstRealGetDouble*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstRealGetDouble*
        name: ConstRealGetDouble
        nameWithType: LLVM.ConstRealGetDouble
        qualifiedName: Swigged.LLVM.LLVM.ConstRealGetDouble
      VB:
      - id: Swigged.LLVM.LLVM.ConstRealGetDouble*
        name: ConstRealGetDouble
        nameWithType: LLVM.ConstRealGetDouble
        qualifiedName: Swigged.LLVM.LLVM.ConstRealGetDouble
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstRealGetDouble
  Swigged.LLVM.LLVM.ConstStringInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstStringInContext*
        name: ConstStringInContext
        nameWithType: LLVM.ConstStringInContext
        qualifiedName: Swigged.LLVM.LLVM.ConstStringInContext
      VB:
      - id: Swigged.LLVM.LLVM.ConstStringInContext*
        name: ConstStringInContext
        nameWithType: LLVM.ConstStringInContext
        qualifiedName: Swigged.LLVM.LLVM.ConstStringInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstStringInContext
  Swigged.LLVM.LLVM.ConstString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstString*
        name: ConstString
        nameWithType: LLVM.ConstString
        qualifiedName: Swigged.LLVM.LLVM.ConstString
      VB:
      - id: Swigged.LLVM.LLVM.ConstString*
        name: ConstString
        nameWithType: LLVM.ConstString
        qualifiedName: Swigged.LLVM.LLVM.ConstString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstString
  Swigged.LLVM.LLVM.IsConstantString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsConstantString*
        name: IsConstantString
        nameWithType: LLVM.IsConstantString
        qualifiedName: Swigged.LLVM.LLVM.IsConstantString
      VB:
      - id: Swigged.LLVM.LLVM.IsConstantString*
        name: IsConstantString
        nameWithType: LLVM.IsConstantString
        qualifiedName: Swigged.LLVM.LLVM.IsConstantString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsConstantString
  Swigged.LLVM.LLVM.GetAsString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetAsString*
        name: GetAsString
        nameWithType: LLVM.GetAsString
        qualifiedName: Swigged.LLVM.LLVM.GetAsString
      VB:
      - id: Swigged.LLVM.LLVM.GetAsString*
        name: GetAsString
        nameWithType: LLVM.GetAsString
        qualifiedName: Swigged.LLVM.LLVM.GetAsString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetAsString
  Swigged.LLVM.ValueRef[]:
    name:
      CSharp:
      - id: Swigged.LLVM.ValueRef
        name: ValueRef
        nameWithType: ValueRef
        qualifiedName: Swigged.LLVM.ValueRef
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Swigged.LLVM.ValueRef
        name: ValueRef
        nameWithType: ValueRef
        qualifiedName: Swigged.LLVM.ValueRef
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Swigged.LLVM.LLVM.ConstStructInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstStructInContext*
        name: ConstStructInContext
        nameWithType: LLVM.ConstStructInContext
        qualifiedName: Swigged.LLVM.LLVM.ConstStructInContext
      VB:
      - id: Swigged.LLVM.LLVM.ConstStructInContext*
        name: ConstStructInContext
        nameWithType: LLVM.ConstStructInContext
        qualifiedName: Swigged.LLVM.LLVM.ConstStructInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstStructInContext
  Swigged.LLVM.LLVM.ConstStruct*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstStruct*
        name: ConstStruct
        nameWithType: LLVM.ConstStruct
        qualifiedName: Swigged.LLVM.LLVM.ConstStruct
      VB:
      - id: Swigged.LLVM.LLVM.ConstStruct*
        name: ConstStruct
        nameWithType: LLVM.ConstStruct
        qualifiedName: Swigged.LLVM.LLVM.ConstStruct
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstStruct
  Swigged.LLVM.LLVM.ConstArray*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstArray*
        name: ConstArray
        nameWithType: LLVM.ConstArray
        qualifiedName: Swigged.LLVM.LLVM.ConstArray
      VB:
      - id: Swigged.LLVM.LLVM.ConstArray*
        name: ConstArray
        nameWithType: LLVM.ConstArray
        qualifiedName: Swigged.LLVM.LLVM.ConstArray
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstArray
  Swigged.LLVM.LLVM.ConstNamedStruct*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNamedStruct*
        name: ConstNamedStruct
        nameWithType: LLVM.ConstNamedStruct
        qualifiedName: Swigged.LLVM.LLVM.ConstNamedStruct
      VB:
      - id: Swigged.LLVM.LLVM.ConstNamedStruct*
        name: ConstNamedStruct
        nameWithType: LLVM.ConstNamedStruct
        qualifiedName: Swigged.LLVM.LLVM.ConstNamedStruct
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNamedStruct
  Swigged.LLVM.LLVM.GetElementAsConstant*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetElementAsConstant*
        name: GetElementAsConstant
        nameWithType: LLVM.GetElementAsConstant
        qualifiedName: Swigged.LLVM.LLVM.GetElementAsConstant
      VB:
      - id: Swigged.LLVM.LLVM.GetElementAsConstant*
        name: GetElementAsConstant
        nameWithType: LLVM.GetElementAsConstant
        qualifiedName: Swigged.LLVM.LLVM.GetElementAsConstant
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetElementAsConstant
  Swigged.LLVM.LLVM.ConstVector*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstVector*
        name: ConstVector
        nameWithType: LLVM.ConstVector
        qualifiedName: Swigged.LLVM.LLVM.ConstVector
      VB:
      - id: Swigged.LLVM.LLVM.ConstVector*
        name: ConstVector
        nameWithType: LLVM.ConstVector
        qualifiedName: Swigged.LLVM.LLVM.ConstVector
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstVector
  Swigged.LLVM.LLVM.GetConstOpcode*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetConstOpcode*
        name: GetConstOpcode
        nameWithType: LLVM.GetConstOpcode
        qualifiedName: Swigged.LLVM.LLVM.GetConstOpcode
      VB:
      - id: Swigged.LLVM.LLVM.GetConstOpcode*
        name: GetConstOpcode
        nameWithType: LLVM.GetConstOpcode
        qualifiedName: Swigged.LLVM.LLVM.GetConstOpcode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetConstOpcode
  Swigged.LLVM.LLVM.AlignOf*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AlignOf*
        name: AlignOf
        nameWithType: LLVM.AlignOf
        qualifiedName: Swigged.LLVM.LLVM.AlignOf
      VB:
      - id: Swigged.LLVM.LLVM.AlignOf*
        name: AlignOf
        nameWithType: LLVM.AlignOf
        qualifiedName: Swigged.LLVM.LLVM.AlignOf
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AlignOf
  Swigged.LLVM.LLVM.SizeOf*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SizeOf*
        name: SizeOf
        nameWithType: LLVM.SizeOf
        qualifiedName: Swigged.LLVM.LLVM.SizeOf
      VB:
      - id: Swigged.LLVM.LLVM.SizeOf*
        name: SizeOf
        nameWithType: LLVM.SizeOf
        qualifiedName: Swigged.LLVM.LLVM.SizeOf
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SizeOf
  Swigged.LLVM.LLVM.ConstNeg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNeg*
        name: ConstNeg
        nameWithType: LLVM.ConstNeg
        qualifiedName: Swigged.LLVM.LLVM.ConstNeg
      VB:
      - id: Swigged.LLVM.LLVM.ConstNeg*
        name: ConstNeg
        nameWithType: LLVM.ConstNeg
        qualifiedName: Swigged.LLVM.LLVM.ConstNeg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNeg
  Swigged.LLVM.LLVM.ConstNSWNeg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNSWNeg*
        name: ConstNSWNeg
        nameWithType: LLVM.ConstNSWNeg
        qualifiedName: Swigged.LLVM.LLVM.ConstNSWNeg
      VB:
      - id: Swigged.LLVM.LLVM.ConstNSWNeg*
        name: ConstNSWNeg
        nameWithType: LLVM.ConstNSWNeg
        qualifiedName: Swigged.LLVM.LLVM.ConstNSWNeg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNSWNeg
  Swigged.LLVM.LLVM.ConstNUWNeg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNUWNeg*
        name: ConstNUWNeg
        nameWithType: LLVM.ConstNUWNeg
        qualifiedName: Swigged.LLVM.LLVM.ConstNUWNeg
      VB:
      - id: Swigged.LLVM.LLVM.ConstNUWNeg*
        name: ConstNUWNeg
        nameWithType: LLVM.ConstNUWNeg
        qualifiedName: Swigged.LLVM.LLVM.ConstNUWNeg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNUWNeg
  Swigged.LLVM.LLVM.ConstFNeg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFNeg*
        name: ConstFNeg
        nameWithType: LLVM.ConstFNeg
        qualifiedName: Swigged.LLVM.LLVM.ConstFNeg
      VB:
      - id: Swigged.LLVM.LLVM.ConstFNeg*
        name: ConstFNeg
        nameWithType: LLVM.ConstFNeg
        qualifiedName: Swigged.LLVM.LLVM.ConstFNeg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFNeg
  Swigged.LLVM.LLVM.ConstNot*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNot*
        name: ConstNot
        nameWithType: LLVM.ConstNot
        qualifiedName: Swigged.LLVM.LLVM.ConstNot
      VB:
      - id: Swigged.LLVM.LLVM.ConstNot*
        name: ConstNot
        nameWithType: LLVM.ConstNot
        qualifiedName: Swigged.LLVM.LLVM.ConstNot
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNot
  Swigged.LLVM.LLVM.ConstAdd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstAdd*
        name: ConstAdd
        nameWithType: LLVM.ConstAdd
        qualifiedName: Swigged.LLVM.LLVM.ConstAdd
      VB:
      - id: Swigged.LLVM.LLVM.ConstAdd*
        name: ConstAdd
        nameWithType: LLVM.ConstAdd
        qualifiedName: Swigged.LLVM.LLVM.ConstAdd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstAdd
  Swigged.LLVM.LLVM.ConstNSWAdd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNSWAdd*
        name: ConstNSWAdd
        nameWithType: LLVM.ConstNSWAdd
        qualifiedName: Swigged.LLVM.LLVM.ConstNSWAdd
      VB:
      - id: Swigged.LLVM.LLVM.ConstNSWAdd*
        name: ConstNSWAdd
        nameWithType: LLVM.ConstNSWAdd
        qualifiedName: Swigged.LLVM.LLVM.ConstNSWAdd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNSWAdd
  Swigged.LLVM.LLVM.ConstNUWAdd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNUWAdd*
        name: ConstNUWAdd
        nameWithType: LLVM.ConstNUWAdd
        qualifiedName: Swigged.LLVM.LLVM.ConstNUWAdd
      VB:
      - id: Swigged.LLVM.LLVM.ConstNUWAdd*
        name: ConstNUWAdd
        nameWithType: LLVM.ConstNUWAdd
        qualifiedName: Swigged.LLVM.LLVM.ConstNUWAdd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNUWAdd
  Swigged.LLVM.LLVM.ConstFAdd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFAdd*
        name: ConstFAdd
        nameWithType: LLVM.ConstFAdd
        qualifiedName: Swigged.LLVM.LLVM.ConstFAdd
      VB:
      - id: Swigged.LLVM.LLVM.ConstFAdd*
        name: ConstFAdd
        nameWithType: LLVM.ConstFAdd
        qualifiedName: Swigged.LLVM.LLVM.ConstFAdd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFAdd
  Swigged.LLVM.LLVM.ConstSub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstSub*
        name: ConstSub
        nameWithType: LLVM.ConstSub
        qualifiedName: Swigged.LLVM.LLVM.ConstSub
      VB:
      - id: Swigged.LLVM.LLVM.ConstSub*
        name: ConstSub
        nameWithType: LLVM.ConstSub
        qualifiedName: Swigged.LLVM.LLVM.ConstSub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstSub
  Swigged.LLVM.LLVM.ConstNSWSub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNSWSub*
        name: ConstNSWSub
        nameWithType: LLVM.ConstNSWSub
        qualifiedName: Swigged.LLVM.LLVM.ConstNSWSub
      VB:
      - id: Swigged.LLVM.LLVM.ConstNSWSub*
        name: ConstNSWSub
        nameWithType: LLVM.ConstNSWSub
        qualifiedName: Swigged.LLVM.LLVM.ConstNSWSub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNSWSub
  Swigged.LLVM.LLVM.ConstNUWSub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNUWSub*
        name: ConstNUWSub
        nameWithType: LLVM.ConstNUWSub
        qualifiedName: Swigged.LLVM.LLVM.ConstNUWSub
      VB:
      - id: Swigged.LLVM.LLVM.ConstNUWSub*
        name: ConstNUWSub
        nameWithType: LLVM.ConstNUWSub
        qualifiedName: Swigged.LLVM.LLVM.ConstNUWSub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNUWSub
  Swigged.LLVM.LLVM.ConstFSub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFSub*
        name: ConstFSub
        nameWithType: LLVM.ConstFSub
        qualifiedName: Swigged.LLVM.LLVM.ConstFSub
      VB:
      - id: Swigged.LLVM.LLVM.ConstFSub*
        name: ConstFSub
        nameWithType: LLVM.ConstFSub
        qualifiedName: Swigged.LLVM.LLVM.ConstFSub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFSub
  Swigged.LLVM.LLVM.ConstMul*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstMul*
        name: ConstMul
        nameWithType: LLVM.ConstMul
        qualifiedName: Swigged.LLVM.LLVM.ConstMul
      VB:
      - id: Swigged.LLVM.LLVM.ConstMul*
        name: ConstMul
        nameWithType: LLVM.ConstMul
        qualifiedName: Swigged.LLVM.LLVM.ConstMul
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstMul
  Swigged.LLVM.LLVM.ConstNSWMul*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNSWMul*
        name: ConstNSWMul
        nameWithType: LLVM.ConstNSWMul
        qualifiedName: Swigged.LLVM.LLVM.ConstNSWMul
      VB:
      - id: Swigged.LLVM.LLVM.ConstNSWMul*
        name: ConstNSWMul
        nameWithType: LLVM.ConstNSWMul
        qualifiedName: Swigged.LLVM.LLVM.ConstNSWMul
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNSWMul
  Swigged.LLVM.LLVM.ConstNUWMul*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstNUWMul*
        name: ConstNUWMul
        nameWithType: LLVM.ConstNUWMul
        qualifiedName: Swigged.LLVM.LLVM.ConstNUWMul
      VB:
      - id: Swigged.LLVM.LLVM.ConstNUWMul*
        name: ConstNUWMul
        nameWithType: LLVM.ConstNUWMul
        qualifiedName: Swigged.LLVM.LLVM.ConstNUWMul
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstNUWMul
  Swigged.LLVM.LLVM.ConstFMul*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFMul*
        name: ConstFMul
        nameWithType: LLVM.ConstFMul
        qualifiedName: Swigged.LLVM.LLVM.ConstFMul
      VB:
      - id: Swigged.LLVM.LLVM.ConstFMul*
        name: ConstFMul
        nameWithType: LLVM.ConstFMul
        qualifiedName: Swigged.LLVM.LLVM.ConstFMul
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFMul
  Swigged.LLVM.LLVM.ConstUDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstUDiv*
        name: ConstUDiv
        nameWithType: LLVM.ConstUDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstUDiv
      VB:
      - id: Swigged.LLVM.LLVM.ConstUDiv*
        name: ConstUDiv
        nameWithType: LLVM.ConstUDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstUDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstUDiv
  Swigged.LLVM.LLVM.ConstExactUDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstExactUDiv*
        name: ConstExactUDiv
        nameWithType: LLVM.ConstExactUDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstExactUDiv
      VB:
      - id: Swigged.LLVM.LLVM.ConstExactUDiv*
        name: ConstExactUDiv
        nameWithType: LLVM.ConstExactUDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstExactUDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstExactUDiv
  Swigged.LLVM.LLVM.ConstSDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstSDiv*
        name: ConstSDiv
        nameWithType: LLVM.ConstSDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstSDiv
      VB:
      - id: Swigged.LLVM.LLVM.ConstSDiv*
        name: ConstSDiv
        nameWithType: LLVM.ConstSDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstSDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstSDiv
  Swigged.LLVM.LLVM.ConstExactSDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstExactSDiv*
        name: ConstExactSDiv
        nameWithType: LLVM.ConstExactSDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstExactSDiv
      VB:
      - id: Swigged.LLVM.LLVM.ConstExactSDiv*
        name: ConstExactSDiv
        nameWithType: LLVM.ConstExactSDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstExactSDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstExactSDiv
  Swigged.LLVM.LLVM.ConstFDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFDiv*
        name: ConstFDiv
        nameWithType: LLVM.ConstFDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstFDiv
      VB:
      - id: Swigged.LLVM.LLVM.ConstFDiv*
        name: ConstFDiv
        nameWithType: LLVM.ConstFDiv
        qualifiedName: Swigged.LLVM.LLVM.ConstFDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFDiv
  Swigged.LLVM.LLVM.ConstURem*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstURem*
        name: ConstURem
        nameWithType: LLVM.ConstURem
        qualifiedName: Swigged.LLVM.LLVM.ConstURem
      VB:
      - id: Swigged.LLVM.LLVM.ConstURem*
        name: ConstURem
        nameWithType: LLVM.ConstURem
        qualifiedName: Swigged.LLVM.LLVM.ConstURem
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstURem
  Swigged.LLVM.LLVM.ConstSRem*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstSRem*
        name: ConstSRem
        nameWithType: LLVM.ConstSRem
        qualifiedName: Swigged.LLVM.LLVM.ConstSRem
      VB:
      - id: Swigged.LLVM.LLVM.ConstSRem*
        name: ConstSRem
        nameWithType: LLVM.ConstSRem
        qualifiedName: Swigged.LLVM.LLVM.ConstSRem
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstSRem
  Swigged.LLVM.LLVM.ConstFRem*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFRem*
        name: ConstFRem
        nameWithType: LLVM.ConstFRem
        qualifiedName: Swigged.LLVM.LLVM.ConstFRem
      VB:
      - id: Swigged.LLVM.LLVM.ConstFRem*
        name: ConstFRem
        nameWithType: LLVM.ConstFRem
        qualifiedName: Swigged.LLVM.LLVM.ConstFRem
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFRem
  Swigged.LLVM.LLVM.ConstAnd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstAnd*
        name: ConstAnd
        nameWithType: LLVM.ConstAnd
        qualifiedName: Swigged.LLVM.LLVM.ConstAnd
      VB:
      - id: Swigged.LLVM.LLVM.ConstAnd*
        name: ConstAnd
        nameWithType: LLVM.ConstAnd
        qualifiedName: Swigged.LLVM.LLVM.ConstAnd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstAnd
  Swigged.LLVM.LLVM.ConstOr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstOr*
        name: ConstOr
        nameWithType: LLVM.ConstOr
        qualifiedName: Swigged.LLVM.LLVM.ConstOr
      VB:
      - id: Swigged.LLVM.LLVM.ConstOr*
        name: ConstOr
        nameWithType: LLVM.ConstOr
        qualifiedName: Swigged.LLVM.LLVM.ConstOr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstOr
  Swigged.LLVM.LLVM.ConstXor*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstXor*
        name: ConstXor
        nameWithType: LLVM.ConstXor
        qualifiedName: Swigged.LLVM.LLVM.ConstXor
      VB:
      - id: Swigged.LLVM.LLVM.ConstXor*
        name: ConstXor
        nameWithType: LLVM.ConstXor
        qualifiedName: Swigged.LLVM.LLVM.ConstXor
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstXor
  Swigged.LLVM.LLVM.ConstICmp*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstICmp*
        name: ConstICmp
        nameWithType: LLVM.ConstICmp
        qualifiedName: Swigged.LLVM.LLVM.ConstICmp
      VB:
      - id: Swigged.LLVM.LLVM.ConstICmp*
        name: ConstICmp
        nameWithType: LLVM.ConstICmp
        qualifiedName: Swigged.LLVM.LLVM.ConstICmp
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstICmp
  Swigged.LLVM.LLVM.ConstFCmp*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFCmp*
        name: ConstFCmp
        nameWithType: LLVM.ConstFCmp
        qualifiedName: Swigged.LLVM.LLVM.ConstFCmp
      VB:
      - id: Swigged.LLVM.LLVM.ConstFCmp*
        name: ConstFCmp
        nameWithType: LLVM.ConstFCmp
        qualifiedName: Swigged.LLVM.LLVM.ConstFCmp
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFCmp
  Swigged.LLVM.LLVM.ConstShl*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstShl*
        name: ConstShl
        nameWithType: LLVM.ConstShl
        qualifiedName: Swigged.LLVM.LLVM.ConstShl
      VB:
      - id: Swigged.LLVM.LLVM.ConstShl*
        name: ConstShl
        nameWithType: LLVM.ConstShl
        qualifiedName: Swigged.LLVM.LLVM.ConstShl
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstShl
  Swigged.LLVM.LLVM.ConstLShr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstLShr*
        name: ConstLShr
        nameWithType: LLVM.ConstLShr
        qualifiedName: Swigged.LLVM.LLVM.ConstLShr
      VB:
      - id: Swigged.LLVM.LLVM.ConstLShr*
        name: ConstLShr
        nameWithType: LLVM.ConstLShr
        qualifiedName: Swigged.LLVM.LLVM.ConstLShr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstLShr
  Swigged.LLVM.LLVM.ConstAShr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstAShr*
        name: ConstAShr
        nameWithType: LLVM.ConstAShr
        qualifiedName: Swigged.LLVM.LLVM.ConstAShr
      VB:
      - id: Swigged.LLVM.LLVM.ConstAShr*
        name: ConstAShr
        nameWithType: LLVM.ConstAShr
        qualifiedName: Swigged.LLVM.LLVM.ConstAShr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstAShr
  Swigged.LLVM.LLVM.ConstGEP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstGEP*
        name: ConstGEP
        nameWithType: LLVM.ConstGEP
        qualifiedName: Swigged.LLVM.LLVM.ConstGEP
      VB:
      - id: Swigged.LLVM.LLVM.ConstGEP*
        name: ConstGEP
        nameWithType: LLVM.ConstGEP
        qualifiedName: Swigged.LLVM.LLVM.ConstGEP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstGEP
  Swigged.LLVM.LLVM.ConstInBoundsGEP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstInBoundsGEP*
        name: ConstInBoundsGEP
        nameWithType: LLVM.ConstInBoundsGEP
        qualifiedName: Swigged.LLVM.LLVM.ConstInBoundsGEP
      VB:
      - id: Swigged.LLVM.LLVM.ConstInBoundsGEP*
        name: ConstInBoundsGEP
        nameWithType: LLVM.ConstInBoundsGEP
        qualifiedName: Swigged.LLVM.LLVM.ConstInBoundsGEP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstInBoundsGEP
  Swigged.LLVM.LLVM.ConstTrunc*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstTrunc*
        name: ConstTrunc
        nameWithType: LLVM.ConstTrunc
        qualifiedName: Swigged.LLVM.LLVM.ConstTrunc
      VB:
      - id: Swigged.LLVM.LLVM.ConstTrunc*
        name: ConstTrunc
        nameWithType: LLVM.ConstTrunc
        qualifiedName: Swigged.LLVM.LLVM.ConstTrunc
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstTrunc
  Swigged.LLVM.LLVM.ConstSExt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstSExt*
        name: ConstSExt
        nameWithType: LLVM.ConstSExt
        qualifiedName: Swigged.LLVM.LLVM.ConstSExt
      VB:
      - id: Swigged.LLVM.LLVM.ConstSExt*
        name: ConstSExt
        nameWithType: LLVM.ConstSExt
        qualifiedName: Swigged.LLVM.LLVM.ConstSExt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstSExt
  Swigged.LLVM.LLVM.ConstZExt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstZExt*
        name: ConstZExt
        nameWithType: LLVM.ConstZExt
        qualifiedName: Swigged.LLVM.LLVM.ConstZExt
      VB:
      - id: Swigged.LLVM.LLVM.ConstZExt*
        name: ConstZExt
        nameWithType: LLVM.ConstZExt
        qualifiedName: Swigged.LLVM.LLVM.ConstZExt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstZExt
  Swigged.LLVM.LLVM.ConstFPTrunc*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFPTrunc*
        name: ConstFPTrunc
        nameWithType: LLVM.ConstFPTrunc
        qualifiedName: Swigged.LLVM.LLVM.ConstFPTrunc
      VB:
      - id: Swigged.LLVM.LLVM.ConstFPTrunc*
        name: ConstFPTrunc
        nameWithType: LLVM.ConstFPTrunc
        qualifiedName: Swigged.LLVM.LLVM.ConstFPTrunc
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFPTrunc
  Swigged.LLVM.LLVM.ConstFPExt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFPExt*
        name: ConstFPExt
        nameWithType: LLVM.ConstFPExt
        qualifiedName: Swigged.LLVM.LLVM.ConstFPExt
      VB:
      - id: Swigged.LLVM.LLVM.ConstFPExt*
        name: ConstFPExt
        nameWithType: LLVM.ConstFPExt
        qualifiedName: Swigged.LLVM.LLVM.ConstFPExt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFPExt
  Swigged.LLVM.LLVM.ConstUIToFP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstUIToFP*
        name: ConstUIToFP
        nameWithType: LLVM.ConstUIToFP
        qualifiedName: Swigged.LLVM.LLVM.ConstUIToFP
      VB:
      - id: Swigged.LLVM.LLVM.ConstUIToFP*
        name: ConstUIToFP
        nameWithType: LLVM.ConstUIToFP
        qualifiedName: Swigged.LLVM.LLVM.ConstUIToFP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstUIToFP
  Swigged.LLVM.LLVM.ConstSIToFP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstSIToFP*
        name: ConstSIToFP
        nameWithType: LLVM.ConstSIToFP
        qualifiedName: Swigged.LLVM.LLVM.ConstSIToFP
      VB:
      - id: Swigged.LLVM.LLVM.ConstSIToFP*
        name: ConstSIToFP
        nameWithType: LLVM.ConstSIToFP
        qualifiedName: Swigged.LLVM.LLVM.ConstSIToFP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstSIToFP
  Swigged.LLVM.LLVM.ConstFPToUI*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFPToUI*
        name: ConstFPToUI
        nameWithType: LLVM.ConstFPToUI
        qualifiedName: Swigged.LLVM.LLVM.ConstFPToUI
      VB:
      - id: Swigged.LLVM.LLVM.ConstFPToUI*
        name: ConstFPToUI
        nameWithType: LLVM.ConstFPToUI
        qualifiedName: Swigged.LLVM.LLVM.ConstFPToUI
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFPToUI
  Swigged.LLVM.LLVM.ConstFPToSI*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFPToSI*
        name: ConstFPToSI
        nameWithType: LLVM.ConstFPToSI
        qualifiedName: Swigged.LLVM.LLVM.ConstFPToSI
      VB:
      - id: Swigged.LLVM.LLVM.ConstFPToSI*
        name: ConstFPToSI
        nameWithType: LLVM.ConstFPToSI
        qualifiedName: Swigged.LLVM.LLVM.ConstFPToSI
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFPToSI
  Swigged.LLVM.LLVM.ConstPtrToInt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstPtrToInt*
        name: ConstPtrToInt
        nameWithType: LLVM.ConstPtrToInt
        qualifiedName: Swigged.LLVM.LLVM.ConstPtrToInt
      VB:
      - id: Swigged.LLVM.LLVM.ConstPtrToInt*
        name: ConstPtrToInt
        nameWithType: LLVM.ConstPtrToInt
        qualifiedName: Swigged.LLVM.LLVM.ConstPtrToInt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstPtrToInt
  Swigged.LLVM.LLVM.ConstIntToPtr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstIntToPtr*
        name: ConstIntToPtr
        nameWithType: LLVM.ConstIntToPtr
        qualifiedName: Swigged.LLVM.LLVM.ConstIntToPtr
      VB:
      - id: Swigged.LLVM.LLVM.ConstIntToPtr*
        name: ConstIntToPtr
        nameWithType: LLVM.ConstIntToPtr
        qualifiedName: Swigged.LLVM.LLVM.ConstIntToPtr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstIntToPtr
  Swigged.LLVM.LLVM.ConstBitCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstBitCast*
        name: ConstBitCast
        nameWithType: LLVM.ConstBitCast
        qualifiedName: Swigged.LLVM.LLVM.ConstBitCast
      VB:
      - id: Swigged.LLVM.LLVM.ConstBitCast*
        name: ConstBitCast
        nameWithType: LLVM.ConstBitCast
        qualifiedName: Swigged.LLVM.LLVM.ConstBitCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstBitCast
  Swigged.LLVM.LLVM.ConstAddrSpaceCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstAddrSpaceCast*
        name: ConstAddrSpaceCast
        nameWithType: LLVM.ConstAddrSpaceCast
        qualifiedName: Swigged.LLVM.LLVM.ConstAddrSpaceCast
      VB:
      - id: Swigged.LLVM.LLVM.ConstAddrSpaceCast*
        name: ConstAddrSpaceCast
        nameWithType: LLVM.ConstAddrSpaceCast
        qualifiedName: Swigged.LLVM.LLVM.ConstAddrSpaceCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstAddrSpaceCast
  Swigged.LLVM.LLVM.ConstZExtOrBitCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstZExtOrBitCast*
        name: ConstZExtOrBitCast
        nameWithType: LLVM.ConstZExtOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.ConstZExtOrBitCast
      VB:
      - id: Swigged.LLVM.LLVM.ConstZExtOrBitCast*
        name: ConstZExtOrBitCast
        nameWithType: LLVM.ConstZExtOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.ConstZExtOrBitCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstZExtOrBitCast
  Swigged.LLVM.LLVM.ConstSExtOrBitCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstSExtOrBitCast*
        name: ConstSExtOrBitCast
        nameWithType: LLVM.ConstSExtOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.ConstSExtOrBitCast
      VB:
      - id: Swigged.LLVM.LLVM.ConstSExtOrBitCast*
        name: ConstSExtOrBitCast
        nameWithType: LLVM.ConstSExtOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.ConstSExtOrBitCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstSExtOrBitCast
  Swigged.LLVM.LLVM.ConstTruncOrBitCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstTruncOrBitCast*
        name: ConstTruncOrBitCast
        nameWithType: LLVM.ConstTruncOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.ConstTruncOrBitCast
      VB:
      - id: Swigged.LLVM.LLVM.ConstTruncOrBitCast*
        name: ConstTruncOrBitCast
        nameWithType: LLVM.ConstTruncOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.ConstTruncOrBitCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstTruncOrBitCast
  Swigged.LLVM.LLVM.ConstPointerCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstPointerCast*
        name: ConstPointerCast
        nameWithType: LLVM.ConstPointerCast
        qualifiedName: Swigged.LLVM.LLVM.ConstPointerCast
      VB:
      - id: Swigged.LLVM.LLVM.ConstPointerCast*
        name: ConstPointerCast
        nameWithType: LLVM.ConstPointerCast
        qualifiedName: Swigged.LLVM.LLVM.ConstPointerCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstPointerCast
  Swigged.LLVM.LLVM.ConstIntCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstIntCast*
        name: ConstIntCast
        nameWithType: LLVM.ConstIntCast
        qualifiedName: Swigged.LLVM.LLVM.ConstIntCast
      VB:
      - id: Swigged.LLVM.LLVM.ConstIntCast*
        name: ConstIntCast
        nameWithType: LLVM.ConstIntCast
        qualifiedName: Swigged.LLVM.LLVM.ConstIntCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstIntCast
  Swigged.LLVM.LLVM.ConstFPCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstFPCast*
        name: ConstFPCast
        nameWithType: LLVM.ConstFPCast
        qualifiedName: Swigged.LLVM.LLVM.ConstFPCast
      VB:
      - id: Swigged.LLVM.LLVM.ConstFPCast*
        name: ConstFPCast
        nameWithType: LLVM.ConstFPCast
        qualifiedName: Swigged.LLVM.LLVM.ConstFPCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstFPCast
  Swigged.LLVM.LLVM.ConstSelect*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstSelect*
        name: ConstSelect
        nameWithType: LLVM.ConstSelect
        qualifiedName: Swigged.LLVM.LLVM.ConstSelect
      VB:
      - id: Swigged.LLVM.LLVM.ConstSelect*
        name: ConstSelect
        nameWithType: LLVM.ConstSelect
        qualifiedName: Swigged.LLVM.LLVM.ConstSelect
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstSelect
  Swigged.LLVM.LLVM.ConstExtractElement*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstExtractElement*
        name: ConstExtractElement
        nameWithType: LLVM.ConstExtractElement
        qualifiedName: Swigged.LLVM.LLVM.ConstExtractElement
      VB:
      - id: Swigged.LLVM.LLVM.ConstExtractElement*
        name: ConstExtractElement
        nameWithType: LLVM.ConstExtractElement
        qualifiedName: Swigged.LLVM.LLVM.ConstExtractElement
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstExtractElement
  Swigged.LLVM.LLVM.ConstInsertElement*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstInsertElement*
        name: ConstInsertElement
        nameWithType: LLVM.ConstInsertElement
        qualifiedName: Swigged.LLVM.LLVM.ConstInsertElement
      VB:
      - id: Swigged.LLVM.LLVM.ConstInsertElement*
        name: ConstInsertElement
        nameWithType: LLVM.ConstInsertElement
        qualifiedName: Swigged.LLVM.LLVM.ConstInsertElement
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstInsertElement
  Swigged.LLVM.LLVM.ConstShuffleVector*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstShuffleVector*
        name: ConstShuffleVector
        nameWithType: LLVM.ConstShuffleVector
        qualifiedName: Swigged.LLVM.LLVM.ConstShuffleVector
      VB:
      - id: Swigged.LLVM.LLVM.ConstShuffleVector*
        name: ConstShuffleVector
        nameWithType: LLVM.ConstShuffleVector
        qualifiedName: Swigged.LLVM.LLVM.ConstShuffleVector
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstShuffleVector
  System.UInt32[]:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Swigged.LLVM.LLVM.ConstExtractValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstExtractValue*
        name: ConstExtractValue
        nameWithType: LLVM.ConstExtractValue
        qualifiedName: Swigged.LLVM.LLVM.ConstExtractValue
      VB:
      - id: Swigged.LLVM.LLVM.ConstExtractValue*
        name: ConstExtractValue
        nameWithType: LLVM.ConstExtractValue
        qualifiedName: Swigged.LLVM.LLVM.ConstExtractValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstExtractValue
  Swigged.LLVM.LLVM.ConstInsertValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstInsertValue*
        name: ConstInsertValue
        nameWithType: LLVM.ConstInsertValue
        qualifiedName: Swigged.LLVM.LLVM.ConstInsertValue
      VB:
      - id: Swigged.LLVM.LLVM.ConstInsertValue*
        name: ConstInsertValue
        nameWithType: LLVM.ConstInsertValue
        qualifiedName: Swigged.LLVM.LLVM.ConstInsertValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstInsertValue
  Swigged.LLVM.LLVM.ConstInlineAsm*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ConstInlineAsm*
        name: ConstInlineAsm
        nameWithType: LLVM.ConstInlineAsm
        qualifiedName: Swigged.LLVM.LLVM.ConstInlineAsm
      VB:
      - id: Swigged.LLVM.LLVM.ConstInlineAsm*
        name: ConstInlineAsm
        nameWithType: LLVM.ConstInlineAsm
        qualifiedName: Swigged.LLVM.LLVM.ConstInlineAsm
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ConstInlineAsm
  Swigged.LLVM.LLVM.BlockAddress*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BlockAddress*
        name: BlockAddress
        nameWithType: LLVM.BlockAddress
        qualifiedName: Swigged.LLVM.LLVM.BlockAddress
      VB:
      - id: Swigged.LLVM.LLVM.BlockAddress*
        name: BlockAddress
        nameWithType: LLVM.BlockAddress
        qualifiedName: Swigged.LLVM.LLVM.BlockAddress
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BlockAddress
  Swigged.LLVM.LLVM.GetGlobalParent*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetGlobalParent*
        name: GetGlobalParent
        nameWithType: LLVM.GetGlobalParent
        qualifiedName: Swigged.LLVM.LLVM.GetGlobalParent
      VB:
      - id: Swigged.LLVM.LLVM.GetGlobalParent*
        name: GetGlobalParent
        nameWithType: LLVM.GetGlobalParent
        qualifiedName: Swigged.LLVM.LLVM.GetGlobalParent
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetGlobalParent
  Swigged.LLVM.LLVM.IsDeclaration*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsDeclaration*
        name: IsDeclaration
        nameWithType: LLVM.IsDeclaration
        qualifiedName: Swigged.LLVM.LLVM.IsDeclaration
      VB:
      - id: Swigged.LLVM.LLVM.IsDeclaration*
        name: IsDeclaration
        nameWithType: LLVM.IsDeclaration
        qualifiedName: Swigged.LLVM.LLVM.IsDeclaration
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsDeclaration
  Swigged.LLVM.LLVM.GetLinkage*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetLinkage*
        name: GetLinkage
        nameWithType: LLVM.GetLinkage
        qualifiedName: Swigged.LLVM.LLVM.GetLinkage
      VB:
      - id: Swigged.LLVM.LLVM.GetLinkage*
        name: GetLinkage
        nameWithType: LLVM.GetLinkage
        qualifiedName: Swigged.LLVM.LLVM.GetLinkage
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetLinkage
  Swigged.LLVM.LLVM.SetLinkage*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetLinkage*
        name: SetLinkage
        nameWithType: LLVM.SetLinkage
        qualifiedName: Swigged.LLVM.LLVM.SetLinkage
      VB:
      - id: Swigged.LLVM.LLVM.SetLinkage*
        name: SetLinkage
        nameWithType: LLVM.SetLinkage
        qualifiedName: Swigged.LLVM.LLVM.SetLinkage
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetLinkage
  Swigged.LLVM.LLVM.GetSection*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetSection*
        name: GetSection
        nameWithType: LLVM.GetSection
        qualifiedName: Swigged.LLVM.LLVM.GetSection
      VB:
      - id: Swigged.LLVM.LLVM.GetSection*
        name: GetSection
        nameWithType: LLVM.GetSection
        qualifiedName: Swigged.LLVM.LLVM.GetSection
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetSection
  Swigged.LLVM.LLVM.SetSection*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetSection*
        name: SetSection
        nameWithType: LLVM.SetSection
        qualifiedName: Swigged.LLVM.LLVM.SetSection
      VB:
      - id: Swigged.LLVM.LLVM.SetSection*
        name: SetSection
        nameWithType: LLVM.SetSection
        qualifiedName: Swigged.LLVM.LLVM.SetSection
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetSection
  Swigged.LLVM.LLVM.GetVisibility*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetVisibility*
        name: GetVisibility
        nameWithType: LLVM.GetVisibility
        qualifiedName: Swigged.LLVM.LLVM.GetVisibility
      VB:
      - id: Swigged.LLVM.LLVM.GetVisibility*
        name: GetVisibility
        nameWithType: LLVM.GetVisibility
        qualifiedName: Swigged.LLVM.LLVM.GetVisibility
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetVisibility
  Swigged.LLVM.LLVM.SetVisibility*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetVisibility*
        name: SetVisibility
        nameWithType: LLVM.SetVisibility
        qualifiedName: Swigged.LLVM.LLVM.SetVisibility
      VB:
      - id: Swigged.LLVM.LLVM.SetVisibility*
        name: SetVisibility
        nameWithType: LLVM.SetVisibility
        qualifiedName: Swigged.LLVM.LLVM.SetVisibility
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetVisibility
  Swigged.LLVM.LLVM.GetDLLStorageClass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetDLLStorageClass*
        name: GetDLLStorageClass
        nameWithType: LLVM.GetDLLStorageClass
        qualifiedName: Swigged.LLVM.LLVM.GetDLLStorageClass
      VB:
      - id: Swigged.LLVM.LLVM.GetDLLStorageClass*
        name: GetDLLStorageClass
        nameWithType: LLVM.GetDLLStorageClass
        qualifiedName: Swigged.LLVM.LLVM.GetDLLStorageClass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetDLLStorageClass
  Swigged.LLVM.LLVM.SetDLLStorageClass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetDLLStorageClass*
        name: SetDLLStorageClass
        nameWithType: LLVM.SetDLLStorageClass
        qualifiedName: Swigged.LLVM.LLVM.SetDLLStorageClass
      VB:
      - id: Swigged.LLVM.LLVM.SetDLLStorageClass*
        name: SetDLLStorageClass
        nameWithType: LLVM.SetDLLStorageClass
        qualifiedName: Swigged.LLVM.LLVM.SetDLLStorageClass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetDLLStorageClass
  Swigged.LLVM.LLVM.HasUnnamedAddr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.HasUnnamedAddr*
        name: HasUnnamedAddr
        nameWithType: LLVM.HasUnnamedAddr
        qualifiedName: Swigged.LLVM.LLVM.HasUnnamedAddr
      VB:
      - id: Swigged.LLVM.LLVM.HasUnnamedAddr*
        name: HasUnnamedAddr
        nameWithType: LLVM.HasUnnamedAddr
        qualifiedName: Swigged.LLVM.LLVM.HasUnnamedAddr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.HasUnnamedAddr
  Swigged.LLVM.LLVM.SetUnnamedAddr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetUnnamedAddr*
        name: SetUnnamedAddr
        nameWithType: LLVM.SetUnnamedAddr
        qualifiedName: Swigged.LLVM.LLVM.SetUnnamedAddr
      VB:
      - id: Swigged.LLVM.LLVM.SetUnnamedAddr*
        name: SetUnnamedAddr
        nameWithType: LLVM.SetUnnamedAddr
        qualifiedName: Swigged.LLVM.LLVM.SetUnnamedAddr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetUnnamedAddr
  Swigged.LLVM.LLVM.GetAlignment*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetAlignment*
        name: GetAlignment
        nameWithType: LLVM.GetAlignment
        qualifiedName: Swigged.LLVM.LLVM.GetAlignment
      VB:
      - id: Swigged.LLVM.LLVM.GetAlignment*
        name: GetAlignment
        nameWithType: LLVM.GetAlignment
        qualifiedName: Swigged.LLVM.LLVM.GetAlignment
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetAlignment
  Swigged.LLVM.LLVM.SetAlignment*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetAlignment*
        name: SetAlignment
        nameWithType: LLVM.SetAlignment
        qualifiedName: Swigged.LLVM.LLVM.SetAlignment
      VB:
      - id: Swigged.LLVM.LLVM.SetAlignment*
        name: SetAlignment
        nameWithType: LLVM.SetAlignment
        qualifiedName: Swigged.LLVM.LLVM.SetAlignment
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetAlignment
  Swigged.LLVM.LLVM.AddGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddGlobal*
        name: AddGlobal
        nameWithType: LLVM.AddGlobal
        qualifiedName: Swigged.LLVM.LLVM.AddGlobal
      VB:
      - id: Swigged.LLVM.LLVM.AddGlobal*
        name: AddGlobal
        nameWithType: LLVM.AddGlobal
        qualifiedName: Swigged.LLVM.LLVM.AddGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddGlobal
  Swigged.LLVM.LLVM.AddGlobalInAddressSpace*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddGlobalInAddressSpace*
        name: AddGlobalInAddressSpace
        nameWithType: LLVM.AddGlobalInAddressSpace
        qualifiedName: Swigged.LLVM.LLVM.AddGlobalInAddressSpace
      VB:
      - id: Swigged.LLVM.LLVM.AddGlobalInAddressSpace*
        name: AddGlobalInAddressSpace
        nameWithType: LLVM.AddGlobalInAddressSpace
        qualifiedName: Swigged.LLVM.LLVM.AddGlobalInAddressSpace
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddGlobalInAddressSpace
  Swigged.LLVM.LLVM.GetNamedGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNamedGlobal*
        name: GetNamedGlobal
        nameWithType: LLVM.GetNamedGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetNamedGlobal
      VB:
      - id: Swigged.LLVM.LLVM.GetNamedGlobal*
        name: GetNamedGlobal
        nameWithType: LLVM.GetNamedGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetNamedGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNamedGlobal
  Swigged.LLVM.LLVM.GetFirstGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFirstGlobal*
        name: GetFirstGlobal
        nameWithType: LLVM.GetFirstGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetFirstGlobal
      VB:
      - id: Swigged.LLVM.LLVM.GetFirstGlobal*
        name: GetFirstGlobal
        nameWithType: LLVM.GetFirstGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetFirstGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFirstGlobal
  Swigged.LLVM.LLVM.GetLastGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetLastGlobal*
        name: GetLastGlobal
        nameWithType: LLVM.GetLastGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetLastGlobal
      VB:
      - id: Swigged.LLVM.LLVM.GetLastGlobal*
        name: GetLastGlobal
        nameWithType: LLVM.GetLastGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetLastGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetLastGlobal
  Swigged.LLVM.LLVM.GetNextGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNextGlobal*
        name: GetNextGlobal
        nameWithType: LLVM.GetNextGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetNextGlobal
      VB:
      - id: Swigged.LLVM.LLVM.GetNextGlobal*
        name: GetNextGlobal
        nameWithType: LLVM.GetNextGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetNextGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNextGlobal
  Swigged.LLVM.LLVM.GetPreviousGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetPreviousGlobal*
        name: GetPreviousGlobal
        nameWithType: LLVM.GetPreviousGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousGlobal
      VB:
      - id: Swigged.LLVM.LLVM.GetPreviousGlobal*
        name: GetPreviousGlobal
        nameWithType: LLVM.GetPreviousGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetPreviousGlobal
  Swigged.LLVM.LLVM.DeleteGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DeleteGlobal*
        name: DeleteGlobal
        nameWithType: LLVM.DeleteGlobal
        qualifiedName: Swigged.LLVM.LLVM.DeleteGlobal
      VB:
      - id: Swigged.LLVM.LLVM.DeleteGlobal*
        name: DeleteGlobal
        nameWithType: LLVM.DeleteGlobal
        qualifiedName: Swigged.LLVM.LLVM.DeleteGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DeleteGlobal
  Swigged.LLVM.LLVM.GetInitializer*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetInitializer*
        name: GetInitializer
        nameWithType: LLVM.GetInitializer
        qualifiedName: Swigged.LLVM.LLVM.GetInitializer
      VB:
      - id: Swigged.LLVM.LLVM.GetInitializer*
        name: GetInitializer
        nameWithType: LLVM.GetInitializer
        qualifiedName: Swigged.LLVM.LLVM.GetInitializer
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetInitializer
  Swigged.LLVM.LLVM.SetInitializer*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetInitializer*
        name: SetInitializer
        nameWithType: LLVM.SetInitializer
        qualifiedName: Swigged.LLVM.LLVM.SetInitializer
      VB:
      - id: Swigged.LLVM.LLVM.SetInitializer*
        name: SetInitializer
        nameWithType: LLVM.SetInitializer
        qualifiedName: Swigged.LLVM.LLVM.SetInitializer
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetInitializer
  Swigged.LLVM.LLVM.IsThreadLocal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsThreadLocal*
        name: IsThreadLocal
        nameWithType: LLVM.IsThreadLocal
        qualifiedName: Swigged.LLVM.LLVM.IsThreadLocal
      VB:
      - id: Swigged.LLVM.LLVM.IsThreadLocal*
        name: IsThreadLocal
        nameWithType: LLVM.IsThreadLocal
        qualifiedName: Swigged.LLVM.LLVM.IsThreadLocal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsThreadLocal
  Swigged.LLVM.LLVM.SetThreadLocal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetThreadLocal*
        name: SetThreadLocal
        nameWithType: LLVM.SetThreadLocal
        qualifiedName: Swigged.LLVM.LLVM.SetThreadLocal
      VB:
      - id: Swigged.LLVM.LLVM.SetThreadLocal*
        name: SetThreadLocal
        nameWithType: LLVM.SetThreadLocal
        qualifiedName: Swigged.LLVM.LLVM.SetThreadLocal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetThreadLocal
  Swigged.LLVM.LLVM.IsGlobalConstant*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsGlobalConstant*
        name: IsGlobalConstant
        nameWithType: LLVM.IsGlobalConstant
        qualifiedName: Swigged.LLVM.LLVM.IsGlobalConstant
      VB:
      - id: Swigged.LLVM.LLVM.IsGlobalConstant*
        name: IsGlobalConstant
        nameWithType: LLVM.IsGlobalConstant
        qualifiedName: Swigged.LLVM.LLVM.IsGlobalConstant
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsGlobalConstant
  Swigged.LLVM.LLVM.SetGlobalConstant*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetGlobalConstant*
        name: SetGlobalConstant
        nameWithType: LLVM.SetGlobalConstant
        qualifiedName: Swigged.LLVM.LLVM.SetGlobalConstant
      VB:
      - id: Swigged.LLVM.LLVM.SetGlobalConstant*
        name: SetGlobalConstant
        nameWithType: LLVM.SetGlobalConstant
        qualifiedName: Swigged.LLVM.LLVM.SetGlobalConstant
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetGlobalConstant
  Swigged.LLVM.LLVM.GetThreadLocalMode*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetThreadLocalMode*
        name: GetThreadLocalMode
        nameWithType: LLVM.GetThreadLocalMode
        qualifiedName: Swigged.LLVM.LLVM.GetThreadLocalMode
      VB:
      - id: Swigged.LLVM.LLVM.GetThreadLocalMode*
        name: GetThreadLocalMode
        nameWithType: LLVM.GetThreadLocalMode
        qualifiedName: Swigged.LLVM.LLVM.GetThreadLocalMode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetThreadLocalMode
  Swigged.LLVM.LLVM.SetThreadLocalMode*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetThreadLocalMode*
        name: SetThreadLocalMode
        nameWithType: LLVM.SetThreadLocalMode
        qualifiedName: Swigged.LLVM.LLVM.SetThreadLocalMode
      VB:
      - id: Swigged.LLVM.LLVM.SetThreadLocalMode*
        name: SetThreadLocalMode
        nameWithType: LLVM.SetThreadLocalMode
        qualifiedName: Swigged.LLVM.LLVM.SetThreadLocalMode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetThreadLocalMode
  Swigged.LLVM.LLVM.IsExternallyInitialized*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsExternallyInitialized*
        name: IsExternallyInitialized
        nameWithType: LLVM.IsExternallyInitialized
        qualifiedName: Swigged.LLVM.LLVM.IsExternallyInitialized
      VB:
      - id: Swigged.LLVM.LLVM.IsExternallyInitialized*
        name: IsExternallyInitialized
        nameWithType: LLVM.IsExternallyInitialized
        qualifiedName: Swigged.LLVM.LLVM.IsExternallyInitialized
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsExternallyInitialized
  Swigged.LLVM.LLVM.SetExternallyInitialized*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetExternallyInitialized*
        name: SetExternallyInitialized
        nameWithType: LLVM.SetExternallyInitialized
        qualifiedName: Swigged.LLVM.LLVM.SetExternallyInitialized
      VB:
      - id: Swigged.LLVM.LLVM.SetExternallyInitialized*
        name: SetExternallyInitialized
        nameWithType: LLVM.SetExternallyInitialized
        qualifiedName: Swigged.LLVM.LLVM.SetExternallyInitialized
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetExternallyInitialized
  Swigged.LLVM.LLVM.AddAlias*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddAlias*
        name: AddAlias
        nameWithType: LLVM.AddAlias
        qualifiedName: Swigged.LLVM.LLVM.AddAlias
      VB:
      - id: Swigged.LLVM.LLVM.AddAlias*
        name: AddAlias
        nameWithType: LLVM.AddAlias
        qualifiedName: Swigged.LLVM.LLVM.AddAlias
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddAlias
  Swigged.LLVM.LLVM.DeleteFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DeleteFunction*
        name: DeleteFunction
        nameWithType: LLVM.DeleteFunction
        qualifiedName: Swigged.LLVM.LLVM.DeleteFunction
      VB:
      - id: Swigged.LLVM.LLVM.DeleteFunction*
        name: DeleteFunction
        nameWithType: LLVM.DeleteFunction
        qualifiedName: Swigged.LLVM.LLVM.DeleteFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DeleteFunction
  Swigged.LLVM.LLVM.HasPersonalityFn*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.HasPersonalityFn*
        name: HasPersonalityFn
        nameWithType: LLVM.HasPersonalityFn
        qualifiedName: Swigged.LLVM.LLVM.HasPersonalityFn
      VB:
      - id: Swigged.LLVM.LLVM.HasPersonalityFn*
        name: HasPersonalityFn
        nameWithType: LLVM.HasPersonalityFn
        qualifiedName: Swigged.LLVM.LLVM.HasPersonalityFn
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.HasPersonalityFn
  Swigged.LLVM.LLVM.GetPersonalityFn*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetPersonalityFn*
        name: GetPersonalityFn
        nameWithType: LLVM.GetPersonalityFn
        qualifiedName: Swigged.LLVM.LLVM.GetPersonalityFn
      VB:
      - id: Swigged.LLVM.LLVM.GetPersonalityFn*
        name: GetPersonalityFn
        nameWithType: LLVM.GetPersonalityFn
        qualifiedName: Swigged.LLVM.LLVM.GetPersonalityFn
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetPersonalityFn
  Swigged.LLVM.LLVM.SetPersonalityFn*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetPersonalityFn*
        name: SetPersonalityFn
        nameWithType: LLVM.SetPersonalityFn
        qualifiedName: Swigged.LLVM.LLVM.SetPersonalityFn
      VB:
      - id: Swigged.LLVM.LLVM.SetPersonalityFn*
        name: SetPersonalityFn
        nameWithType: LLVM.SetPersonalityFn
        qualifiedName: Swigged.LLVM.LLVM.SetPersonalityFn
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetPersonalityFn
  Swigged.LLVM.LLVM.GetIntrinsicID*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetIntrinsicID*
        name: GetIntrinsicID
        nameWithType: LLVM.GetIntrinsicID
        qualifiedName: Swigged.LLVM.LLVM.GetIntrinsicID
      VB:
      - id: Swigged.LLVM.LLVM.GetIntrinsicID*
        name: GetIntrinsicID
        nameWithType: LLVM.GetIntrinsicID
        qualifiedName: Swigged.LLVM.LLVM.GetIntrinsicID
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetIntrinsicID
  Swigged.LLVM.LLVM.GetFunctionCallConv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFunctionCallConv*
        name: GetFunctionCallConv
        nameWithType: LLVM.GetFunctionCallConv
        qualifiedName: Swigged.LLVM.LLVM.GetFunctionCallConv
      VB:
      - id: Swigged.LLVM.LLVM.GetFunctionCallConv*
        name: GetFunctionCallConv
        nameWithType: LLVM.GetFunctionCallConv
        qualifiedName: Swigged.LLVM.LLVM.GetFunctionCallConv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFunctionCallConv
  Swigged.LLVM.LLVM.SetFunctionCallConv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetFunctionCallConv*
        name: SetFunctionCallConv
        nameWithType: LLVM.SetFunctionCallConv
        qualifiedName: Swigged.LLVM.LLVM.SetFunctionCallConv
      VB:
      - id: Swigged.LLVM.LLVM.SetFunctionCallConv*
        name: SetFunctionCallConv
        nameWithType: LLVM.SetFunctionCallConv
        qualifiedName: Swigged.LLVM.LLVM.SetFunctionCallConv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetFunctionCallConv
  Swigged.LLVM.LLVM.GetGC*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetGC*
        name: GetGC
        nameWithType: LLVM.GetGC
        qualifiedName: Swigged.LLVM.LLVM.GetGC
      VB:
      - id: Swigged.LLVM.LLVM.GetGC*
        name: GetGC
        nameWithType: LLVM.GetGC
        qualifiedName: Swigged.LLVM.LLVM.GetGC
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetGC
  Swigged.LLVM.LLVM.SetGC*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetGC*
        name: SetGC
        nameWithType: LLVM.SetGC
        qualifiedName: Swigged.LLVM.LLVM.SetGC
      VB:
      - id: Swigged.LLVM.LLVM.SetGC*
        name: SetGC
        nameWithType: LLVM.SetGC
        qualifiedName: Swigged.LLVM.LLVM.SetGC
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetGC
  Swigged.LLVM.LLVM.AddAttributeAtIndex*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddAttributeAtIndex*
        name: AddAttributeAtIndex
        nameWithType: LLVM.AddAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.AddAttributeAtIndex
      VB:
      - id: Swigged.LLVM.LLVM.AddAttributeAtIndex*
        name: AddAttributeAtIndex
        nameWithType: LLVM.AddAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.AddAttributeAtIndex
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddAttributeAtIndex
  Swigged.LLVM.LLVM.GetAttributeCountAtIndex*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetAttributeCountAtIndex*
        name: GetAttributeCountAtIndex
        nameWithType: LLVM.GetAttributeCountAtIndex
        qualifiedName: Swigged.LLVM.LLVM.GetAttributeCountAtIndex
      VB:
      - id: Swigged.LLVM.LLVM.GetAttributeCountAtIndex*
        name: GetAttributeCountAtIndex
        nameWithType: LLVM.GetAttributeCountAtIndex
        qualifiedName: Swigged.LLVM.LLVM.GetAttributeCountAtIndex
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetAttributeCountAtIndex
  Swigged.LLVM.LLVM.GetAttributesAtIndex*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetAttributesAtIndex*
        name: GetAttributesAtIndex
        nameWithType: LLVM.GetAttributesAtIndex
        qualifiedName: Swigged.LLVM.LLVM.GetAttributesAtIndex
      VB:
      - id: Swigged.LLVM.LLVM.GetAttributesAtIndex*
        name: GetAttributesAtIndex
        nameWithType: LLVM.GetAttributesAtIndex
        qualifiedName: Swigged.LLVM.LLVM.GetAttributesAtIndex
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetAttributesAtIndex
  Swigged.LLVM.LLVM.GetEnumAttributeAtIndex*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetEnumAttributeAtIndex*
        name: GetEnumAttributeAtIndex
        nameWithType: LLVM.GetEnumAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.GetEnumAttributeAtIndex
      VB:
      - id: Swigged.LLVM.LLVM.GetEnumAttributeAtIndex*
        name: GetEnumAttributeAtIndex
        nameWithType: LLVM.GetEnumAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.GetEnumAttributeAtIndex
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetEnumAttributeAtIndex
  Swigged.LLVM.LLVM.GetStringAttributeAtIndex*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetStringAttributeAtIndex*
        name: GetStringAttributeAtIndex
        nameWithType: LLVM.GetStringAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.GetStringAttributeAtIndex
      VB:
      - id: Swigged.LLVM.LLVM.GetStringAttributeAtIndex*
        name: GetStringAttributeAtIndex
        nameWithType: LLVM.GetStringAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.GetStringAttributeAtIndex
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetStringAttributeAtIndex
  Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex*
        name: RemoveEnumAttributeAtIndex
        nameWithType: LLVM.RemoveEnumAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex
      VB:
      - id: Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex*
        name: RemoveEnumAttributeAtIndex
        nameWithType: LLVM.RemoveEnumAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RemoveEnumAttributeAtIndex
  Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex*
        name: RemoveStringAttributeAtIndex
        nameWithType: LLVM.RemoveStringAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex
      VB:
      - id: Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex*
        name: RemoveStringAttributeAtIndex
        nameWithType: LLVM.RemoveStringAttributeAtIndex
        qualifiedName: Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RemoveStringAttributeAtIndex
  Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr*
        name: AddTargetDependentFunctionAttr
        nameWithType: LLVM.AddTargetDependentFunctionAttr
        qualifiedName: Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr
      VB:
      - id: Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr*
        name: AddTargetDependentFunctionAttr
        nameWithType: LLVM.AddTargetDependentFunctionAttr
        qualifiedName: Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddTargetDependentFunctionAttr
  Swigged.LLVM.LLVM.CountParams*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CountParams*
        name: CountParams
        nameWithType: LLVM.CountParams
        qualifiedName: Swigged.LLVM.LLVM.CountParams
      VB:
      - id: Swigged.LLVM.LLVM.CountParams*
        name: CountParams
        nameWithType: LLVM.CountParams
        qualifiedName: Swigged.LLVM.LLVM.CountParams
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CountParams
  Swigged.LLVM.LLVM.GetParams*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetParams*
        name: GetParams
        nameWithType: LLVM.GetParams
        qualifiedName: Swigged.LLVM.LLVM.GetParams
      VB:
      - id: Swigged.LLVM.LLVM.GetParams*
        name: GetParams
        nameWithType: LLVM.GetParams
        qualifiedName: Swigged.LLVM.LLVM.GetParams
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetParams
  Swigged.LLVM.LLVM.GetParam*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetParam*
        name: GetParam
        nameWithType: LLVM.GetParam
        qualifiedName: Swigged.LLVM.LLVM.GetParam
      VB:
      - id: Swigged.LLVM.LLVM.GetParam*
        name: GetParam
        nameWithType: LLVM.GetParam
        qualifiedName: Swigged.LLVM.LLVM.GetParam
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetParam
  Swigged.LLVM.LLVM.GetParamParent*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetParamParent*
        name: GetParamParent
        nameWithType: LLVM.GetParamParent
        qualifiedName: Swigged.LLVM.LLVM.GetParamParent
      VB:
      - id: Swigged.LLVM.LLVM.GetParamParent*
        name: GetParamParent
        nameWithType: LLVM.GetParamParent
        qualifiedName: Swigged.LLVM.LLVM.GetParamParent
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetParamParent
  Swigged.LLVM.LLVM.GetFirstParam*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFirstParam*
        name: GetFirstParam
        nameWithType: LLVM.GetFirstParam
        qualifiedName: Swigged.LLVM.LLVM.GetFirstParam
      VB:
      - id: Swigged.LLVM.LLVM.GetFirstParam*
        name: GetFirstParam
        nameWithType: LLVM.GetFirstParam
        qualifiedName: Swigged.LLVM.LLVM.GetFirstParam
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFirstParam
  Swigged.LLVM.LLVM.GetLastParam*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetLastParam*
        name: GetLastParam
        nameWithType: LLVM.GetLastParam
        qualifiedName: Swigged.LLVM.LLVM.GetLastParam
      VB:
      - id: Swigged.LLVM.LLVM.GetLastParam*
        name: GetLastParam
        nameWithType: LLVM.GetLastParam
        qualifiedName: Swigged.LLVM.LLVM.GetLastParam
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetLastParam
  Swigged.LLVM.LLVM.GetNextParam*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNextParam*
        name: GetNextParam
        nameWithType: LLVM.GetNextParam
        qualifiedName: Swigged.LLVM.LLVM.GetNextParam
      VB:
      - id: Swigged.LLVM.LLVM.GetNextParam*
        name: GetNextParam
        nameWithType: LLVM.GetNextParam
        qualifiedName: Swigged.LLVM.LLVM.GetNextParam
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNextParam
  Swigged.LLVM.LLVM.GetPreviousParam*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetPreviousParam*
        name: GetPreviousParam
        nameWithType: LLVM.GetPreviousParam
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousParam
      VB:
      - id: Swigged.LLVM.LLVM.GetPreviousParam*
        name: GetPreviousParam
        nameWithType: LLVM.GetPreviousParam
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousParam
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetPreviousParam
  Swigged.LLVM.LLVM.SetParamAlignment*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetParamAlignment*
        name: SetParamAlignment
        nameWithType: LLVM.SetParamAlignment
        qualifiedName: Swigged.LLVM.LLVM.SetParamAlignment
      VB:
      - id: Swigged.LLVM.LLVM.SetParamAlignment*
        name: SetParamAlignment
        nameWithType: LLVM.SetParamAlignment
        qualifiedName: Swigged.LLVM.LLVM.SetParamAlignment
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetParamAlignment
  Swigged.LLVM.LLVM.MDStringInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.MDStringInContext*
        name: MDStringInContext
        nameWithType: LLVM.MDStringInContext
        qualifiedName: Swigged.LLVM.LLVM.MDStringInContext
      VB:
      - id: Swigged.LLVM.LLVM.MDStringInContext*
        name: MDStringInContext
        nameWithType: LLVM.MDStringInContext
        qualifiedName: Swigged.LLVM.LLVM.MDStringInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.MDStringInContext
  Swigged.LLVM.LLVM.MDString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.MDString*
        name: MDString
        nameWithType: LLVM.MDString
        qualifiedName: Swigged.LLVM.LLVM.MDString
      VB:
      - id: Swigged.LLVM.LLVM.MDString*
        name: MDString
        nameWithType: LLVM.MDString
        qualifiedName: Swigged.LLVM.LLVM.MDString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.MDString
  Swigged.LLVM.LLVM.MDNodeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.MDNodeInContext*
        name: MDNodeInContext
        nameWithType: LLVM.MDNodeInContext
        qualifiedName: Swigged.LLVM.LLVM.MDNodeInContext
      VB:
      - id: Swigged.LLVM.LLVM.MDNodeInContext*
        name: MDNodeInContext
        nameWithType: LLVM.MDNodeInContext
        qualifiedName: Swigged.LLVM.LLVM.MDNodeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.MDNodeInContext
  Swigged.LLVM.LLVM.MDNode*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.MDNode*
        name: MDNode
        nameWithType: LLVM.MDNode
        qualifiedName: Swigged.LLVM.LLVM.MDNode
      VB:
      - id: Swigged.LLVM.LLVM.MDNode*
        name: MDNode
        nameWithType: LLVM.MDNode
        qualifiedName: Swigged.LLVM.LLVM.MDNode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.MDNode
  Swigged.LLVM.LLVM.GetMDString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetMDString*
        name: GetMDString
        nameWithType: LLVM.GetMDString
        qualifiedName: Swigged.LLVM.LLVM.GetMDString
      VB:
      - id: Swigged.LLVM.LLVM.GetMDString*
        name: GetMDString
        nameWithType: LLVM.GetMDString
        qualifiedName: Swigged.LLVM.LLVM.GetMDString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetMDString
  Swigged.LLVM.LLVM.GetMDNodeNumOperands*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetMDNodeNumOperands*
        name: GetMDNodeNumOperands
        nameWithType: LLVM.GetMDNodeNumOperands
        qualifiedName: Swigged.LLVM.LLVM.GetMDNodeNumOperands
      VB:
      - id: Swigged.LLVM.LLVM.GetMDNodeNumOperands*
        name: GetMDNodeNumOperands
        nameWithType: LLVM.GetMDNodeNumOperands
        qualifiedName: Swigged.LLVM.LLVM.GetMDNodeNumOperands
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetMDNodeNumOperands
  Swigged.LLVM.LLVM.GetMDNodeOperands*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetMDNodeOperands*
        name: GetMDNodeOperands
        nameWithType: LLVM.GetMDNodeOperands
        qualifiedName: Swigged.LLVM.LLVM.GetMDNodeOperands
      VB:
      - id: Swigged.LLVM.LLVM.GetMDNodeOperands*
        name: GetMDNodeOperands
        nameWithType: LLVM.GetMDNodeOperands
        qualifiedName: Swigged.LLVM.LLVM.GetMDNodeOperands
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetMDNodeOperands
  Swigged.LLVM.LLVM.BasicBlockAsValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BasicBlockAsValue*
        name: BasicBlockAsValue
        nameWithType: LLVM.BasicBlockAsValue
        qualifiedName: Swigged.LLVM.LLVM.BasicBlockAsValue
      VB:
      - id: Swigged.LLVM.LLVM.BasicBlockAsValue*
        name: BasicBlockAsValue
        nameWithType: LLVM.BasicBlockAsValue
        qualifiedName: Swigged.LLVM.LLVM.BasicBlockAsValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BasicBlockAsValue
  Swigged.LLVM.LLVM.ValueIsBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ValueIsBasicBlock*
        name: ValueIsBasicBlock
        nameWithType: LLVM.ValueIsBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.ValueIsBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.ValueIsBasicBlock*
        name: ValueIsBasicBlock
        nameWithType: LLVM.ValueIsBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.ValueIsBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ValueIsBasicBlock
  Swigged.LLVM.LLVM.ValueAsBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ValueAsBasicBlock*
        name: ValueAsBasicBlock
        nameWithType: LLVM.ValueAsBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.ValueAsBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.ValueAsBasicBlock*
        name: ValueAsBasicBlock
        nameWithType: LLVM.ValueAsBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.ValueAsBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ValueAsBasicBlock
  Swigged.LLVM.LLVM.GetBasicBlockName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBasicBlockName*
        name: GetBasicBlockName
        nameWithType: LLVM.GetBasicBlockName
        qualifiedName: Swigged.LLVM.LLVM.GetBasicBlockName
      VB:
      - id: Swigged.LLVM.LLVM.GetBasicBlockName*
        name: GetBasicBlockName
        nameWithType: LLVM.GetBasicBlockName
        qualifiedName: Swigged.LLVM.LLVM.GetBasicBlockName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBasicBlockName
  Swigged.LLVM.LLVM.GetBasicBlockParent*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBasicBlockParent*
        name: GetBasicBlockParent
        nameWithType: LLVM.GetBasicBlockParent
        qualifiedName: Swigged.LLVM.LLVM.GetBasicBlockParent
      VB:
      - id: Swigged.LLVM.LLVM.GetBasicBlockParent*
        name: GetBasicBlockParent
        nameWithType: LLVM.GetBasicBlockParent
        qualifiedName: Swigged.LLVM.LLVM.GetBasicBlockParent
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBasicBlockParent
  Swigged.LLVM.LLVM.GetBasicBlockTerminator*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBasicBlockTerminator*
        name: GetBasicBlockTerminator
        nameWithType: LLVM.GetBasicBlockTerminator
        qualifiedName: Swigged.LLVM.LLVM.GetBasicBlockTerminator
      VB:
      - id: Swigged.LLVM.LLVM.GetBasicBlockTerminator*
        name: GetBasicBlockTerminator
        nameWithType: LLVM.GetBasicBlockTerminator
        qualifiedName: Swigged.LLVM.LLVM.GetBasicBlockTerminator
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBasicBlockTerminator
  Swigged.LLVM.LLVM.CountBasicBlocks*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CountBasicBlocks*
        name: CountBasicBlocks
        nameWithType: LLVM.CountBasicBlocks
        qualifiedName: Swigged.LLVM.LLVM.CountBasicBlocks
      VB:
      - id: Swigged.LLVM.LLVM.CountBasicBlocks*
        name: CountBasicBlocks
        nameWithType: LLVM.CountBasicBlocks
        qualifiedName: Swigged.LLVM.LLVM.CountBasicBlocks
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CountBasicBlocks
  Swigged.LLVM.LLVM.GetBasicBlocks*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBasicBlocks*
        name: GetBasicBlocks
        nameWithType: LLVM.GetBasicBlocks
        qualifiedName: Swigged.LLVM.LLVM.GetBasicBlocks
      VB:
      - id: Swigged.LLVM.LLVM.GetBasicBlocks*
        name: GetBasicBlocks
        nameWithType: LLVM.GetBasicBlocks
        qualifiedName: Swigged.LLVM.LLVM.GetBasicBlocks
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBasicBlocks
  Swigged.LLVM.LLVM.GetFirstBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFirstBasicBlock*
        name: GetFirstBasicBlock
        nameWithType: LLVM.GetFirstBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetFirstBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.GetFirstBasicBlock*
        name: GetFirstBasicBlock
        nameWithType: LLVM.GetFirstBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetFirstBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFirstBasicBlock
  Swigged.LLVM.LLVM.GetLastBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetLastBasicBlock*
        name: GetLastBasicBlock
        nameWithType: LLVM.GetLastBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetLastBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.GetLastBasicBlock*
        name: GetLastBasicBlock
        nameWithType: LLVM.GetLastBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetLastBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetLastBasicBlock
  Swigged.LLVM.LLVM.GetNextBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNextBasicBlock*
        name: GetNextBasicBlock
        nameWithType: LLVM.GetNextBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetNextBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.GetNextBasicBlock*
        name: GetNextBasicBlock
        nameWithType: LLVM.GetNextBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetNextBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNextBasicBlock
  Swigged.LLVM.LLVM.GetPreviousBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetPreviousBasicBlock*
        name: GetPreviousBasicBlock
        nameWithType: LLVM.GetPreviousBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.GetPreviousBasicBlock*
        name: GetPreviousBasicBlock
        nameWithType: LLVM.GetPreviousBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetPreviousBasicBlock
  Swigged.LLVM.LLVM.GetEntryBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetEntryBasicBlock*
        name: GetEntryBasicBlock
        nameWithType: LLVM.GetEntryBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetEntryBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.GetEntryBasicBlock*
        name: GetEntryBasicBlock
        nameWithType: LLVM.GetEntryBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.GetEntryBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetEntryBasicBlock
  Swigged.LLVM.LLVM.AppendBasicBlockInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AppendBasicBlockInContext*
        name: AppendBasicBlockInContext
        nameWithType: LLVM.AppendBasicBlockInContext
        qualifiedName: Swigged.LLVM.LLVM.AppendBasicBlockInContext
      VB:
      - id: Swigged.LLVM.LLVM.AppendBasicBlockInContext*
        name: AppendBasicBlockInContext
        nameWithType: LLVM.AppendBasicBlockInContext
        qualifiedName: Swigged.LLVM.LLVM.AppendBasicBlockInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AppendBasicBlockInContext
  Swigged.LLVM.LLVM.AppendBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AppendBasicBlock*
        name: AppendBasicBlock
        nameWithType: LLVM.AppendBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.AppendBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.AppendBasicBlock*
        name: AppendBasicBlock
        nameWithType: LLVM.AppendBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.AppendBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AppendBasicBlock
  Swigged.LLVM.LLVM.InsertBasicBlockInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InsertBasicBlockInContext*
        name: InsertBasicBlockInContext
        nameWithType: LLVM.InsertBasicBlockInContext
        qualifiedName: Swigged.LLVM.LLVM.InsertBasicBlockInContext
      VB:
      - id: Swigged.LLVM.LLVM.InsertBasicBlockInContext*
        name: InsertBasicBlockInContext
        nameWithType: LLVM.InsertBasicBlockInContext
        qualifiedName: Swigged.LLVM.LLVM.InsertBasicBlockInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InsertBasicBlockInContext
  Swigged.LLVM.LLVM.InsertBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InsertBasicBlock*
        name: InsertBasicBlock
        nameWithType: LLVM.InsertBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.InsertBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.InsertBasicBlock*
        name: InsertBasicBlock
        nameWithType: LLVM.InsertBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.InsertBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InsertBasicBlock
  Swigged.LLVM.LLVM.DeleteBasicBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DeleteBasicBlock*
        name: DeleteBasicBlock
        nameWithType: LLVM.DeleteBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.DeleteBasicBlock
      VB:
      - id: Swigged.LLVM.LLVM.DeleteBasicBlock*
        name: DeleteBasicBlock
        nameWithType: LLVM.DeleteBasicBlock
        qualifiedName: Swigged.LLVM.LLVM.DeleteBasicBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DeleteBasicBlock
  Swigged.LLVM.LLVM.RemoveBasicBlockFromParent*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RemoveBasicBlockFromParent*
        name: RemoveBasicBlockFromParent
        nameWithType: LLVM.RemoveBasicBlockFromParent
        qualifiedName: Swigged.LLVM.LLVM.RemoveBasicBlockFromParent
      VB:
      - id: Swigged.LLVM.LLVM.RemoveBasicBlockFromParent*
        name: RemoveBasicBlockFromParent
        nameWithType: LLVM.RemoveBasicBlockFromParent
        qualifiedName: Swigged.LLVM.LLVM.RemoveBasicBlockFromParent
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RemoveBasicBlockFromParent
  Swigged.LLVM.LLVM.MoveBasicBlockBefore*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.MoveBasicBlockBefore*
        name: MoveBasicBlockBefore
        nameWithType: LLVM.MoveBasicBlockBefore
        qualifiedName: Swigged.LLVM.LLVM.MoveBasicBlockBefore
      VB:
      - id: Swigged.LLVM.LLVM.MoveBasicBlockBefore*
        name: MoveBasicBlockBefore
        nameWithType: LLVM.MoveBasicBlockBefore
        qualifiedName: Swigged.LLVM.LLVM.MoveBasicBlockBefore
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.MoveBasicBlockBefore
  Swigged.LLVM.LLVM.MoveBasicBlockAfter*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.MoveBasicBlockAfter*
        name: MoveBasicBlockAfter
        nameWithType: LLVM.MoveBasicBlockAfter
        qualifiedName: Swigged.LLVM.LLVM.MoveBasicBlockAfter
      VB:
      - id: Swigged.LLVM.LLVM.MoveBasicBlockAfter*
        name: MoveBasicBlockAfter
        nameWithType: LLVM.MoveBasicBlockAfter
        qualifiedName: Swigged.LLVM.LLVM.MoveBasicBlockAfter
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.MoveBasicBlockAfter
  Swigged.LLVM.LLVM.GetFirstInstruction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFirstInstruction*
        name: GetFirstInstruction
        nameWithType: LLVM.GetFirstInstruction
        qualifiedName: Swigged.LLVM.LLVM.GetFirstInstruction
      VB:
      - id: Swigged.LLVM.LLVM.GetFirstInstruction*
        name: GetFirstInstruction
        nameWithType: LLVM.GetFirstInstruction
        qualifiedName: Swigged.LLVM.LLVM.GetFirstInstruction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFirstInstruction
  Swigged.LLVM.LLVM.GetLastInstruction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetLastInstruction*
        name: GetLastInstruction
        nameWithType: LLVM.GetLastInstruction
        qualifiedName: Swigged.LLVM.LLVM.GetLastInstruction
      VB:
      - id: Swigged.LLVM.LLVM.GetLastInstruction*
        name: GetLastInstruction
        nameWithType: LLVM.GetLastInstruction
        qualifiedName: Swigged.LLVM.LLVM.GetLastInstruction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetLastInstruction
  Swigged.LLVM.LLVM.HasMetadata*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.HasMetadata*
        name: HasMetadata
        nameWithType: LLVM.HasMetadata
        qualifiedName: Swigged.LLVM.LLVM.HasMetadata
      VB:
      - id: Swigged.LLVM.LLVM.HasMetadata*
        name: HasMetadata
        nameWithType: LLVM.HasMetadata
        qualifiedName: Swigged.LLVM.LLVM.HasMetadata
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.HasMetadata
  Swigged.LLVM.LLVM.GetMetadata*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetMetadata*
        name: GetMetadata
        nameWithType: LLVM.GetMetadata
        qualifiedName: Swigged.LLVM.LLVM.GetMetadata
      VB:
      - id: Swigged.LLVM.LLVM.GetMetadata*
        name: GetMetadata
        nameWithType: LLVM.GetMetadata
        qualifiedName: Swigged.LLVM.LLVM.GetMetadata
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetMetadata
  Swigged.LLVM.LLVM.SetMetadata*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetMetadata*
        name: SetMetadata
        nameWithType: LLVM.SetMetadata
        qualifiedName: Swigged.LLVM.LLVM.SetMetadata
      VB:
      - id: Swigged.LLVM.LLVM.SetMetadata*
        name: SetMetadata
        nameWithType: LLVM.SetMetadata
        qualifiedName: Swigged.LLVM.LLVM.SetMetadata
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetMetadata
  Swigged.LLVM.LLVM.GetInstructionParent*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetInstructionParent*
        name: GetInstructionParent
        nameWithType: LLVM.GetInstructionParent
        qualifiedName: Swigged.LLVM.LLVM.GetInstructionParent
      VB:
      - id: Swigged.LLVM.LLVM.GetInstructionParent*
        name: GetInstructionParent
        nameWithType: LLVM.GetInstructionParent
        qualifiedName: Swigged.LLVM.LLVM.GetInstructionParent
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetInstructionParent
  Swigged.LLVM.LLVM.GetNextInstruction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNextInstruction*
        name: GetNextInstruction
        nameWithType: LLVM.GetNextInstruction
        qualifiedName: Swigged.LLVM.LLVM.GetNextInstruction
      VB:
      - id: Swigged.LLVM.LLVM.GetNextInstruction*
        name: GetNextInstruction
        nameWithType: LLVM.GetNextInstruction
        qualifiedName: Swigged.LLVM.LLVM.GetNextInstruction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNextInstruction
  Swigged.LLVM.LLVM.GetPreviousInstruction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetPreviousInstruction*
        name: GetPreviousInstruction
        nameWithType: LLVM.GetPreviousInstruction
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousInstruction
      VB:
      - id: Swigged.LLVM.LLVM.GetPreviousInstruction*
        name: GetPreviousInstruction
        nameWithType: LLVM.GetPreviousInstruction
        qualifiedName: Swigged.LLVM.LLVM.GetPreviousInstruction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetPreviousInstruction
  Swigged.LLVM.LLVM.InstructionRemoveFromParent*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InstructionRemoveFromParent*
        name: InstructionRemoveFromParent
        nameWithType: LLVM.InstructionRemoveFromParent
        qualifiedName: Swigged.LLVM.LLVM.InstructionRemoveFromParent
      VB:
      - id: Swigged.LLVM.LLVM.InstructionRemoveFromParent*
        name: InstructionRemoveFromParent
        nameWithType: LLVM.InstructionRemoveFromParent
        qualifiedName: Swigged.LLVM.LLVM.InstructionRemoveFromParent
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InstructionRemoveFromParent
  Swigged.LLVM.LLVM.InstructionEraseFromParent*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InstructionEraseFromParent*
        name: InstructionEraseFromParent
        nameWithType: LLVM.InstructionEraseFromParent
        qualifiedName: Swigged.LLVM.LLVM.InstructionEraseFromParent
      VB:
      - id: Swigged.LLVM.LLVM.InstructionEraseFromParent*
        name: InstructionEraseFromParent
        nameWithType: LLVM.InstructionEraseFromParent
        qualifiedName: Swigged.LLVM.LLVM.InstructionEraseFromParent
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InstructionEraseFromParent
  Swigged.LLVM.LLVM.GetInstructionOpcode*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetInstructionOpcode*
        name: GetInstructionOpcode
        nameWithType: LLVM.GetInstructionOpcode
        qualifiedName: Swigged.LLVM.LLVM.GetInstructionOpcode
      VB:
      - id: Swigged.LLVM.LLVM.GetInstructionOpcode*
        name: GetInstructionOpcode
        nameWithType: LLVM.GetInstructionOpcode
        qualifiedName: Swigged.LLVM.LLVM.GetInstructionOpcode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetInstructionOpcode
  Swigged.LLVM.LLVM.GetICmpPredicate*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetICmpPredicate*
        name: GetICmpPredicate
        nameWithType: LLVM.GetICmpPredicate
        qualifiedName: Swigged.LLVM.LLVM.GetICmpPredicate
      VB:
      - id: Swigged.LLVM.LLVM.GetICmpPredicate*
        name: GetICmpPredicate
        nameWithType: LLVM.GetICmpPredicate
        qualifiedName: Swigged.LLVM.LLVM.GetICmpPredicate
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetICmpPredicate
  Swigged.LLVM.LLVM.GetFCmpPredicate*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFCmpPredicate*
        name: GetFCmpPredicate
        nameWithType: LLVM.GetFCmpPredicate
        qualifiedName: Swigged.LLVM.LLVM.GetFCmpPredicate
      VB:
      - id: Swigged.LLVM.LLVM.GetFCmpPredicate*
        name: GetFCmpPredicate
        nameWithType: LLVM.GetFCmpPredicate
        qualifiedName: Swigged.LLVM.LLVM.GetFCmpPredicate
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFCmpPredicate
  Swigged.LLVM.LLVM.InstructionClone*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InstructionClone*
        name: InstructionClone
        nameWithType: LLVM.InstructionClone
        qualifiedName: Swigged.LLVM.LLVM.InstructionClone
      VB:
      - id: Swigged.LLVM.LLVM.InstructionClone*
        name: InstructionClone
        nameWithType: LLVM.InstructionClone
        qualifiedName: Swigged.LLVM.LLVM.InstructionClone
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InstructionClone
  Swigged.LLVM.LLVM.GetNumArgOperands*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNumArgOperands*
        name: GetNumArgOperands
        nameWithType: LLVM.GetNumArgOperands
        qualifiedName: Swigged.LLVM.LLVM.GetNumArgOperands
      VB:
      - id: Swigged.LLVM.LLVM.GetNumArgOperands*
        name: GetNumArgOperands
        nameWithType: LLVM.GetNumArgOperands
        qualifiedName: Swigged.LLVM.LLVM.GetNumArgOperands
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNumArgOperands
  Swigged.LLVM.LLVM.SetInstructionCallConv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetInstructionCallConv*
        name: SetInstructionCallConv
        nameWithType: LLVM.SetInstructionCallConv
        qualifiedName: Swigged.LLVM.LLVM.SetInstructionCallConv
      VB:
      - id: Swigged.LLVM.LLVM.SetInstructionCallConv*
        name: SetInstructionCallConv
        nameWithType: LLVM.SetInstructionCallConv
        qualifiedName: Swigged.LLVM.LLVM.SetInstructionCallConv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetInstructionCallConv
  Swigged.LLVM.LLVM.GetInstructionCallConv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetInstructionCallConv*
        name: GetInstructionCallConv
        nameWithType: LLVM.GetInstructionCallConv
        qualifiedName: Swigged.LLVM.LLVM.GetInstructionCallConv
      VB:
      - id: Swigged.LLVM.LLVM.GetInstructionCallConv*
        name: GetInstructionCallConv
        nameWithType: LLVM.GetInstructionCallConv
        qualifiedName: Swigged.LLVM.LLVM.GetInstructionCallConv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetInstructionCallConv
  Swigged.LLVM.LLVM.SetInstrParamAlignment*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetInstrParamAlignment*
        name: SetInstrParamAlignment
        nameWithType: LLVM.SetInstrParamAlignment
        qualifiedName: Swigged.LLVM.LLVM.SetInstrParamAlignment
      VB:
      - id: Swigged.LLVM.LLVM.SetInstrParamAlignment*
        name: SetInstrParamAlignment
        nameWithType: LLVM.SetInstrParamAlignment
        qualifiedName: Swigged.LLVM.LLVM.SetInstrParamAlignment
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetInstrParamAlignment
  Swigged.LLVM.LLVM.AddCallSiteAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddCallSiteAttribute*
        name: AddCallSiteAttribute
        nameWithType: LLVM.AddCallSiteAttribute
        qualifiedName: Swigged.LLVM.LLVM.AddCallSiteAttribute
      VB:
      - id: Swigged.LLVM.LLVM.AddCallSiteAttribute*
        name: AddCallSiteAttribute
        nameWithType: LLVM.AddCallSiteAttribute
        qualifiedName: Swigged.LLVM.LLVM.AddCallSiteAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddCallSiteAttribute
  Swigged.LLVM.LLVM.GetCallSiteAttributeCount*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCallSiteAttributeCount*
        name: GetCallSiteAttributeCount
        nameWithType: LLVM.GetCallSiteAttributeCount
        qualifiedName: Swigged.LLVM.LLVM.GetCallSiteAttributeCount
      VB:
      - id: Swigged.LLVM.LLVM.GetCallSiteAttributeCount*
        name: GetCallSiteAttributeCount
        nameWithType: LLVM.GetCallSiteAttributeCount
        qualifiedName: Swigged.LLVM.LLVM.GetCallSiteAttributeCount
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCallSiteAttributeCount
  Swigged.LLVM.LLVM.GetCallSiteAttributes*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCallSiteAttributes*
        name: GetCallSiteAttributes
        nameWithType: LLVM.GetCallSiteAttributes
        qualifiedName: Swigged.LLVM.LLVM.GetCallSiteAttributes
      VB:
      - id: Swigged.LLVM.LLVM.GetCallSiteAttributes*
        name: GetCallSiteAttributes
        nameWithType: LLVM.GetCallSiteAttributes
        qualifiedName: Swigged.LLVM.LLVM.GetCallSiteAttributes
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCallSiteAttributes
  Swigged.LLVM.LLVM.GetCallSiteEnumAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCallSiteEnumAttribute*
        name: GetCallSiteEnumAttribute
        nameWithType: LLVM.GetCallSiteEnumAttribute
        qualifiedName: Swigged.LLVM.LLVM.GetCallSiteEnumAttribute
      VB:
      - id: Swigged.LLVM.LLVM.GetCallSiteEnumAttribute*
        name: GetCallSiteEnumAttribute
        nameWithType: LLVM.GetCallSiteEnumAttribute
        qualifiedName: Swigged.LLVM.LLVM.GetCallSiteEnumAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCallSiteEnumAttribute
  Swigged.LLVM.LLVM.GetCallSiteStringAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCallSiteStringAttribute*
        name: GetCallSiteStringAttribute
        nameWithType: LLVM.GetCallSiteStringAttribute
        qualifiedName: Swigged.LLVM.LLVM.GetCallSiteStringAttribute
      VB:
      - id: Swigged.LLVM.LLVM.GetCallSiteStringAttribute*
        name: GetCallSiteStringAttribute
        nameWithType: LLVM.GetCallSiteStringAttribute
        qualifiedName: Swigged.LLVM.LLVM.GetCallSiteStringAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCallSiteStringAttribute
  Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute*
        name: RemoveCallSiteEnumAttribute
        nameWithType: LLVM.RemoveCallSiteEnumAttribute
        qualifiedName: Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute
      VB:
      - id: Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute*
        name: RemoveCallSiteEnumAttribute
        nameWithType: LLVM.RemoveCallSiteEnumAttribute
        qualifiedName: Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RemoveCallSiteEnumAttribute
  Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute*
        name: RemoveCallSiteStringAttribute
        nameWithType: LLVM.RemoveCallSiteStringAttribute
        qualifiedName: Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute
      VB:
      - id: Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute*
        name: RemoveCallSiteStringAttribute
        nameWithType: LLVM.RemoveCallSiteStringAttribute
        qualifiedName: Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RemoveCallSiteStringAttribute
  Swigged.LLVM.LLVM.GetCalledValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCalledValue*
        name: GetCalledValue
        nameWithType: LLVM.GetCalledValue
        qualifiedName: Swigged.LLVM.LLVM.GetCalledValue
      VB:
      - id: Swigged.LLVM.LLVM.GetCalledValue*
        name: GetCalledValue
        nameWithType: LLVM.GetCalledValue
        qualifiedName: Swigged.LLVM.LLVM.GetCalledValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCalledValue
  Swigged.LLVM.LLVM.IsTailCall*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsTailCall*
        name: IsTailCall
        nameWithType: LLVM.IsTailCall
        qualifiedName: Swigged.LLVM.LLVM.IsTailCall
      VB:
      - id: Swigged.LLVM.LLVM.IsTailCall*
        name: IsTailCall
        nameWithType: LLVM.IsTailCall
        qualifiedName: Swigged.LLVM.LLVM.IsTailCall
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsTailCall
  Swigged.LLVM.LLVM.SetTailCall*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetTailCall*
        name: SetTailCall
        nameWithType: LLVM.SetTailCall
        qualifiedName: Swigged.LLVM.LLVM.SetTailCall
      VB:
      - id: Swigged.LLVM.LLVM.SetTailCall*
        name: SetTailCall
        nameWithType: LLVM.SetTailCall
        qualifiedName: Swigged.LLVM.LLVM.SetTailCall
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetTailCall
  Swigged.LLVM.LLVM.GetNormalDest*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNormalDest*
        name: GetNormalDest
        nameWithType: LLVM.GetNormalDest
        qualifiedName: Swigged.LLVM.LLVM.GetNormalDest
      VB:
      - id: Swigged.LLVM.LLVM.GetNormalDest*
        name: GetNormalDest
        nameWithType: LLVM.GetNormalDest
        qualifiedName: Swigged.LLVM.LLVM.GetNormalDest
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNormalDest
  Swigged.LLVM.LLVM.GetUnwindDest*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetUnwindDest*
        name: GetUnwindDest
        nameWithType: LLVM.GetUnwindDest
        qualifiedName: Swigged.LLVM.LLVM.GetUnwindDest
      VB:
      - id: Swigged.LLVM.LLVM.GetUnwindDest*
        name: GetUnwindDest
        nameWithType: LLVM.GetUnwindDest
        qualifiedName: Swigged.LLVM.LLVM.GetUnwindDest
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetUnwindDest
  Swigged.LLVM.LLVM.SetNormalDest*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetNormalDest*
        name: SetNormalDest
        nameWithType: LLVM.SetNormalDest
        qualifiedName: Swigged.LLVM.LLVM.SetNormalDest
      VB:
      - id: Swigged.LLVM.LLVM.SetNormalDest*
        name: SetNormalDest
        nameWithType: LLVM.SetNormalDest
        qualifiedName: Swigged.LLVM.LLVM.SetNormalDest
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetNormalDest
  Swigged.LLVM.LLVM.SetUnwindDest*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetUnwindDest*
        name: SetUnwindDest
        nameWithType: LLVM.SetUnwindDest
        qualifiedName: Swigged.LLVM.LLVM.SetUnwindDest
      VB:
      - id: Swigged.LLVM.LLVM.SetUnwindDest*
        name: SetUnwindDest
        nameWithType: LLVM.SetUnwindDest
        qualifiedName: Swigged.LLVM.LLVM.SetUnwindDest
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetUnwindDest
  Swigged.LLVM.LLVM.GetNumSuccessors*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNumSuccessors*
        name: GetNumSuccessors
        nameWithType: LLVM.GetNumSuccessors
        qualifiedName: Swigged.LLVM.LLVM.GetNumSuccessors
      VB:
      - id: Swigged.LLVM.LLVM.GetNumSuccessors*
        name: GetNumSuccessors
        nameWithType: LLVM.GetNumSuccessors
        qualifiedName: Swigged.LLVM.LLVM.GetNumSuccessors
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNumSuccessors
  Swigged.LLVM.LLVM.GetSuccessor*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetSuccessor*
        name: GetSuccessor
        nameWithType: LLVM.GetSuccessor
        qualifiedName: Swigged.LLVM.LLVM.GetSuccessor
      VB:
      - id: Swigged.LLVM.LLVM.GetSuccessor*
        name: GetSuccessor
        nameWithType: LLVM.GetSuccessor
        qualifiedName: Swigged.LLVM.LLVM.GetSuccessor
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetSuccessor
  Swigged.LLVM.LLVM.SetSuccessor*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetSuccessor*
        name: SetSuccessor
        nameWithType: LLVM.SetSuccessor
        qualifiedName: Swigged.LLVM.LLVM.SetSuccessor
      VB:
      - id: Swigged.LLVM.LLVM.SetSuccessor*
        name: SetSuccessor
        nameWithType: LLVM.SetSuccessor
        qualifiedName: Swigged.LLVM.LLVM.SetSuccessor
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetSuccessor
  Swigged.LLVM.LLVM.IsConditional*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsConditional*
        name: IsConditional
        nameWithType: LLVM.IsConditional
        qualifiedName: Swigged.LLVM.LLVM.IsConditional
      VB:
      - id: Swigged.LLVM.LLVM.IsConditional*
        name: IsConditional
        nameWithType: LLVM.IsConditional
        qualifiedName: Swigged.LLVM.LLVM.IsConditional
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsConditional
  Swigged.LLVM.LLVM.GetCondition*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCondition*
        name: GetCondition
        nameWithType: LLVM.GetCondition
        qualifiedName: Swigged.LLVM.LLVM.GetCondition
      VB:
      - id: Swigged.LLVM.LLVM.GetCondition*
        name: GetCondition
        nameWithType: LLVM.GetCondition
        qualifiedName: Swigged.LLVM.LLVM.GetCondition
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCondition
  Swigged.LLVM.LLVM.SetCondition*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetCondition*
        name: SetCondition
        nameWithType: LLVM.SetCondition
        qualifiedName: Swigged.LLVM.LLVM.SetCondition
      VB:
      - id: Swigged.LLVM.LLVM.SetCondition*
        name: SetCondition
        nameWithType: LLVM.SetCondition
        qualifiedName: Swigged.LLVM.LLVM.SetCondition
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetCondition
  Swigged.LLVM.LLVM.GetSwitchDefaultDest*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetSwitchDefaultDest*
        name: GetSwitchDefaultDest
        nameWithType: LLVM.GetSwitchDefaultDest
        qualifiedName: Swigged.LLVM.LLVM.GetSwitchDefaultDest
      VB:
      - id: Swigged.LLVM.LLVM.GetSwitchDefaultDest*
        name: GetSwitchDefaultDest
        nameWithType: LLVM.GetSwitchDefaultDest
        qualifiedName: Swigged.LLVM.LLVM.GetSwitchDefaultDest
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetSwitchDefaultDest
  Swigged.LLVM.LLVM.GetAllocatedType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetAllocatedType*
        name: GetAllocatedType
        nameWithType: LLVM.GetAllocatedType
        qualifiedName: Swigged.LLVM.LLVM.GetAllocatedType
      VB:
      - id: Swigged.LLVM.LLVM.GetAllocatedType*
        name: GetAllocatedType
        nameWithType: LLVM.GetAllocatedType
        qualifiedName: Swigged.LLVM.LLVM.GetAllocatedType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetAllocatedType
  Swigged.LLVM.LLVM.IsInBounds*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsInBounds*
        name: IsInBounds
        nameWithType: LLVM.IsInBounds
        qualifiedName: Swigged.LLVM.LLVM.IsInBounds
      VB:
      - id: Swigged.LLVM.LLVM.IsInBounds*
        name: IsInBounds
        nameWithType: LLVM.IsInBounds
        qualifiedName: Swigged.LLVM.LLVM.IsInBounds
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsInBounds
  Swigged.LLVM.LLVM.SetIsInBounds*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetIsInBounds*
        name: SetIsInBounds
        nameWithType: LLVM.SetIsInBounds
        qualifiedName: Swigged.LLVM.LLVM.SetIsInBounds
      VB:
      - id: Swigged.LLVM.LLVM.SetIsInBounds*
        name: SetIsInBounds
        nameWithType: LLVM.SetIsInBounds
        qualifiedName: Swigged.LLVM.LLVM.SetIsInBounds
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetIsInBounds
  Swigged.LLVM.BasicBlockRef[]:
    name:
      CSharp:
      - id: Swigged.LLVM.BasicBlockRef
        name: BasicBlockRef
        nameWithType: BasicBlockRef
        qualifiedName: Swigged.LLVM.BasicBlockRef
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Swigged.LLVM.BasicBlockRef
        name: BasicBlockRef
        nameWithType: BasicBlockRef
        qualifiedName: Swigged.LLVM.BasicBlockRef
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Swigged.LLVM.LLVM.AddIncoming*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddIncoming*
        name: AddIncoming
        nameWithType: LLVM.AddIncoming
        qualifiedName: Swigged.LLVM.LLVM.AddIncoming
      VB:
      - id: Swigged.LLVM.LLVM.AddIncoming*
        name: AddIncoming
        nameWithType: LLVM.AddIncoming
        qualifiedName: Swigged.LLVM.LLVM.AddIncoming
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddIncoming
  Swigged.LLVM.LLVM.CountIncoming*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CountIncoming*
        name: CountIncoming
        nameWithType: LLVM.CountIncoming
        qualifiedName: Swigged.LLVM.LLVM.CountIncoming
      VB:
      - id: Swigged.LLVM.LLVM.CountIncoming*
        name: CountIncoming
        nameWithType: LLVM.CountIncoming
        qualifiedName: Swigged.LLVM.LLVM.CountIncoming
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CountIncoming
  Swigged.LLVM.LLVM.GetIncomingValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetIncomingValue*
        name: GetIncomingValue
        nameWithType: LLVM.GetIncomingValue
        qualifiedName: Swigged.LLVM.LLVM.GetIncomingValue
      VB:
      - id: Swigged.LLVM.LLVM.GetIncomingValue*
        name: GetIncomingValue
        nameWithType: LLVM.GetIncomingValue
        qualifiedName: Swigged.LLVM.LLVM.GetIncomingValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetIncomingValue
  Swigged.LLVM.LLVM.GetIncomingBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetIncomingBlock*
        name: GetIncomingBlock
        nameWithType: LLVM.GetIncomingBlock
        qualifiedName: Swigged.LLVM.LLVM.GetIncomingBlock
      VB:
      - id: Swigged.LLVM.LLVM.GetIncomingBlock*
        name: GetIncomingBlock
        nameWithType: LLVM.GetIncomingBlock
        qualifiedName: Swigged.LLVM.LLVM.GetIncomingBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetIncomingBlock
  Swigged.LLVM.LLVM.GetNumIndices*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNumIndices*
        name: GetNumIndices
        nameWithType: LLVM.GetNumIndices
        qualifiedName: Swigged.LLVM.LLVM.GetNumIndices
      VB:
      - id: Swigged.LLVM.LLVM.GetNumIndices*
        name: GetNumIndices
        nameWithType: LLVM.GetNumIndices
        qualifiedName: Swigged.LLVM.LLVM.GetNumIndices
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNumIndices
  Swigged.LLVM.LLVM.CreateBuilderInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateBuilderInContext*
        name: CreateBuilderInContext
        nameWithType: LLVM.CreateBuilderInContext
        qualifiedName: Swigged.LLVM.LLVM.CreateBuilderInContext
      VB:
      - id: Swigged.LLVM.LLVM.CreateBuilderInContext*
        name: CreateBuilderInContext
        nameWithType: LLVM.CreateBuilderInContext
        qualifiedName: Swigged.LLVM.LLVM.CreateBuilderInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateBuilderInContext
  Swigged.LLVM.LLVM.CreateBuilder*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateBuilder*
        name: CreateBuilder
        nameWithType: LLVM.CreateBuilder
        qualifiedName: Swigged.LLVM.LLVM.CreateBuilder
      VB:
      - id: Swigged.LLVM.LLVM.CreateBuilder*
        name: CreateBuilder
        nameWithType: LLVM.CreateBuilder
        qualifiedName: Swigged.LLVM.LLVM.CreateBuilder
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateBuilder
  Swigged.LLVM.LLVM.PositionBuilder*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PositionBuilder*
        name: PositionBuilder
        nameWithType: LLVM.PositionBuilder
        qualifiedName: Swigged.LLVM.LLVM.PositionBuilder
      VB:
      - id: Swigged.LLVM.LLVM.PositionBuilder*
        name: PositionBuilder
        nameWithType: LLVM.PositionBuilder
        qualifiedName: Swigged.LLVM.LLVM.PositionBuilder
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PositionBuilder
  Swigged.LLVM.LLVM.PositionBuilderBefore*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PositionBuilderBefore*
        name: PositionBuilderBefore
        nameWithType: LLVM.PositionBuilderBefore
        qualifiedName: Swigged.LLVM.LLVM.PositionBuilderBefore
      VB:
      - id: Swigged.LLVM.LLVM.PositionBuilderBefore*
        name: PositionBuilderBefore
        nameWithType: LLVM.PositionBuilderBefore
        qualifiedName: Swigged.LLVM.LLVM.PositionBuilderBefore
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PositionBuilderBefore
  Swigged.LLVM.LLVM.PositionBuilderAtEnd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PositionBuilderAtEnd*
        name: PositionBuilderAtEnd
        nameWithType: LLVM.PositionBuilderAtEnd
        qualifiedName: Swigged.LLVM.LLVM.PositionBuilderAtEnd
      VB:
      - id: Swigged.LLVM.LLVM.PositionBuilderAtEnd*
        name: PositionBuilderAtEnd
        nameWithType: LLVM.PositionBuilderAtEnd
        qualifiedName: Swigged.LLVM.LLVM.PositionBuilderAtEnd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PositionBuilderAtEnd
  Swigged.LLVM.LLVM.GetInsertBlock*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetInsertBlock*
        name: GetInsertBlock
        nameWithType: LLVM.GetInsertBlock
        qualifiedName: Swigged.LLVM.LLVM.GetInsertBlock
      VB:
      - id: Swigged.LLVM.LLVM.GetInsertBlock*
        name: GetInsertBlock
        nameWithType: LLVM.GetInsertBlock
        qualifiedName: Swigged.LLVM.LLVM.GetInsertBlock
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetInsertBlock
  Swigged.LLVM.LLVM.ClearInsertionPosition*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ClearInsertionPosition*
        name: ClearInsertionPosition
        nameWithType: LLVM.ClearInsertionPosition
        qualifiedName: Swigged.LLVM.LLVM.ClearInsertionPosition
      VB:
      - id: Swigged.LLVM.LLVM.ClearInsertionPosition*
        name: ClearInsertionPosition
        nameWithType: LLVM.ClearInsertionPosition
        qualifiedName: Swigged.LLVM.LLVM.ClearInsertionPosition
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ClearInsertionPosition
  Swigged.LLVM.LLVM.InsertIntoBuilder*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InsertIntoBuilder*
        name: InsertIntoBuilder
        nameWithType: LLVM.InsertIntoBuilder
        qualifiedName: Swigged.LLVM.LLVM.InsertIntoBuilder
      VB:
      - id: Swigged.LLVM.LLVM.InsertIntoBuilder*
        name: InsertIntoBuilder
        nameWithType: LLVM.InsertIntoBuilder
        qualifiedName: Swigged.LLVM.LLVM.InsertIntoBuilder
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InsertIntoBuilder
  Swigged.LLVM.LLVM.InsertIntoBuilderWithName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InsertIntoBuilderWithName*
        name: InsertIntoBuilderWithName
        nameWithType: LLVM.InsertIntoBuilderWithName
        qualifiedName: Swigged.LLVM.LLVM.InsertIntoBuilderWithName
      VB:
      - id: Swigged.LLVM.LLVM.InsertIntoBuilderWithName*
        name: InsertIntoBuilderWithName
        nameWithType: LLVM.InsertIntoBuilderWithName
        qualifiedName: Swigged.LLVM.LLVM.InsertIntoBuilderWithName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InsertIntoBuilderWithName
  Swigged.LLVM.LLVM.DisposeBuilder*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeBuilder*
        name: DisposeBuilder
        nameWithType: LLVM.DisposeBuilder
        qualifiedName: Swigged.LLVM.LLVM.DisposeBuilder
      VB:
      - id: Swigged.LLVM.LLVM.DisposeBuilder*
        name: DisposeBuilder
        nameWithType: LLVM.DisposeBuilder
        qualifiedName: Swigged.LLVM.LLVM.DisposeBuilder
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeBuilder
  Swigged.LLVM.LLVM.SetCurrentDebugLocation*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetCurrentDebugLocation*
        name: SetCurrentDebugLocation
        nameWithType: LLVM.SetCurrentDebugLocation
        qualifiedName: Swigged.LLVM.LLVM.SetCurrentDebugLocation
      VB:
      - id: Swigged.LLVM.LLVM.SetCurrentDebugLocation*
        name: SetCurrentDebugLocation
        nameWithType: LLVM.SetCurrentDebugLocation
        qualifiedName: Swigged.LLVM.LLVM.SetCurrentDebugLocation
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetCurrentDebugLocation
  Swigged.LLVM.LLVM.GetCurrentDebugLocation*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCurrentDebugLocation*
        name: GetCurrentDebugLocation
        nameWithType: LLVM.GetCurrentDebugLocation
        qualifiedName: Swigged.LLVM.LLVM.GetCurrentDebugLocation
      VB:
      - id: Swigged.LLVM.LLVM.GetCurrentDebugLocation*
        name: GetCurrentDebugLocation
        nameWithType: LLVM.GetCurrentDebugLocation
        qualifiedName: Swigged.LLVM.LLVM.GetCurrentDebugLocation
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCurrentDebugLocation
  Swigged.LLVM.LLVM.SetInstDebugLocation*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetInstDebugLocation*
        name: SetInstDebugLocation
        nameWithType: LLVM.SetInstDebugLocation
        qualifiedName: Swigged.LLVM.LLVM.SetInstDebugLocation
      VB:
      - id: Swigged.LLVM.LLVM.SetInstDebugLocation*
        name: SetInstDebugLocation
        nameWithType: LLVM.SetInstDebugLocation
        qualifiedName: Swigged.LLVM.LLVM.SetInstDebugLocation
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetInstDebugLocation
  Swigged.LLVM.LLVM.BuildRetVoid*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildRetVoid*
        name: BuildRetVoid
        nameWithType: LLVM.BuildRetVoid
        qualifiedName: Swigged.LLVM.LLVM.BuildRetVoid
      VB:
      - id: Swigged.LLVM.LLVM.BuildRetVoid*
        name: BuildRetVoid
        nameWithType: LLVM.BuildRetVoid
        qualifiedName: Swigged.LLVM.LLVM.BuildRetVoid
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildRetVoid
  Swigged.LLVM.LLVM.BuildRet*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildRet*
        name: BuildRet
        nameWithType: LLVM.BuildRet
        qualifiedName: Swigged.LLVM.LLVM.BuildRet
      VB:
      - id: Swigged.LLVM.LLVM.BuildRet*
        name: BuildRet
        nameWithType: LLVM.BuildRet
        qualifiedName: Swigged.LLVM.LLVM.BuildRet
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildRet
  Swigged.LLVM.LLVM.BuildAggregateRet*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildAggregateRet*
        name: BuildAggregateRet
        nameWithType: LLVM.BuildAggregateRet
        qualifiedName: Swigged.LLVM.LLVM.BuildAggregateRet
      VB:
      - id: Swigged.LLVM.LLVM.BuildAggregateRet*
        name: BuildAggregateRet
        nameWithType: LLVM.BuildAggregateRet
        qualifiedName: Swigged.LLVM.LLVM.BuildAggregateRet
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildAggregateRet
  Swigged.LLVM.LLVM.BuildBr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildBr*
        name: BuildBr
        nameWithType: LLVM.BuildBr
        qualifiedName: Swigged.LLVM.LLVM.BuildBr
      VB:
      - id: Swigged.LLVM.LLVM.BuildBr*
        name: BuildBr
        nameWithType: LLVM.BuildBr
        qualifiedName: Swigged.LLVM.LLVM.BuildBr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildBr
  Swigged.LLVM.LLVM.BuildCondBr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildCondBr*
        name: BuildCondBr
        nameWithType: LLVM.BuildCondBr
        qualifiedName: Swigged.LLVM.LLVM.BuildCondBr
      VB:
      - id: Swigged.LLVM.LLVM.BuildCondBr*
        name: BuildCondBr
        nameWithType: LLVM.BuildCondBr
        qualifiedName: Swigged.LLVM.LLVM.BuildCondBr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildCondBr
  Swigged.LLVM.LLVM.BuildSwitch*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildSwitch*
        name: BuildSwitch
        nameWithType: LLVM.BuildSwitch
        qualifiedName: Swigged.LLVM.LLVM.BuildSwitch
      VB:
      - id: Swigged.LLVM.LLVM.BuildSwitch*
        name: BuildSwitch
        nameWithType: LLVM.BuildSwitch
        qualifiedName: Swigged.LLVM.LLVM.BuildSwitch
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildSwitch
  Swigged.LLVM.LLVM.BuildIndirectBr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildIndirectBr*
        name: BuildIndirectBr
        nameWithType: LLVM.BuildIndirectBr
        qualifiedName: Swigged.LLVM.LLVM.BuildIndirectBr
      VB:
      - id: Swigged.LLVM.LLVM.BuildIndirectBr*
        name: BuildIndirectBr
        nameWithType: LLVM.BuildIndirectBr
        qualifiedName: Swigged.LLVM.LLVM.BuildIndirectBr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildIndirectBr
  Swigged.LLVM.LLVM.BuildInvoke*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildInvoke*
        name: BuildInvoke
        nameWithType: LLVM.BuildInvoke
        qualifiedName: Swigged.LLVM.LLVM.BuildInvoke
      VB:
      - id: Swigged.LLVM.LLVM.BuildInvoke*
        name: BuildInvoke
        nameWithType: LLVM.BuildInvoke
        qualifiedName: Swigged.LLVM.LLVM.BuildInvoke
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildInvoke
  Swigged.LLVM.LLVM.BuildLandingPad*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildLandingPad*
        name: BuildLandingPad
        nameWithType: LLVM.BuildLandingPad
        qualifiedName: Swigged.LLVM.LLVM.BuildLandingPad
      VB:
      - id: Swigged.LLVM.LLVM.BuildLandingPad*
        name: BuildLandingPad
        nameWithType: LLVM.BuildLandingPad
        qualifiedName: Swigged.LLVM.LLVM.BuildLandingPad
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildLandingPad
  Swigged.LLVM.LLVM.BuildResume*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildResume*
        name: BuildResume
        nameWithType: LLVM.BuildResume
        qualifiedName: Swigged.LLVM.LLVM.BuildResume
      VB:
      - id: Swigged.LLVM.LLVM.BuildResume*
        name: BuildResume
        nameWithType: LLVM.BuildResume
        qualifiedName: Swigged.LLVM.LLVM.BuildResume
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildResume
  Swigged.LLVM.LLVM.BuildUnreachable*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildUnreachable*
        name: BuildUnreachable
        nameWithType: LLVM.BuildUnreachable
        qualifiedName: Swigged.LLVM.LLVM.BuildUnreachable
      VB:
      - id: Swigged.LLVM.LLVM.BuildUnreachable*
        name: BuildUnreachable
        nameWithType: LLVM.BuildUnreachable
        qualifiedName: Swigged.LLVM.LLVM.BuildUnreachable
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildUnreachable
  Swigged.LLVM.LLVM.AddCase*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddCase*
        name: AddCase
        nameWithType: LLVM.AddCase
        qualifiedName: Swigged.LLVM.LLVM.AddCase
      VB:
      - id: Swigged.LLVM.LLVM.AddCase*
        name: AddCase
        nameWithType: LLVM.AddCase
        qualifiedName: Swigged.LLVM.LLVM.AddCase
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddCase
  Swigged.LLVM.LLVM.AddDestination*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddDestination*
        name: AddDestination
        nameWithType: LLVM.AddDestination
        qualifiedName: Swigged.LLVM.LLVM.AddDestination
      VB:
      - id: Swigged.LLVM.LLVM.AddDestination*
        name: AddDestination
        nameWithType: LLVM.AddDestination
        qualifiedName: Swigged.LLVM.LLVM.AddDestination
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddDestination
  Swigged.LLVM.LLVM.GetNumClauses*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNumClauses*
        name: GetNumClauses
        nameWithType: LLVM.GetNumClauses
        qualifiedName: Swigged.LLVM.LLVM.GetNumClauses
      VB:
      - id: Swigged.LLVM.LLVM.GetNumClauses*
        name: GetNumClauses
        nameWithType: LLVM.GetNumClauses
        qualifiedName: Swigged.LLVM.LLVM.GetNumClauses
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNumClauses
  Swigged.LLVM.LLVM.GetClause*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetClause*
        name: GetClause
        nameWithType: LLVM.GetClause
        qualifiedName: Swigged.LLVM.LLVM.GetClause
      VB:
      - id: Swigged.LLVM.LLVM.GetClause*
        name: GetClause
        nameWithType: LLVM.GetClause
        qualifiedName: Swigged.LLVM.LLVM.GetClause
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetClause
  Swigged.LLVM.LLVM.AddClause*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddClause*
        name: AddClause
        nameWithType: LLVM.AddClause
        qualifiedName: Swigged.LLVM.LLVM.AddClause
      VB:
      - id: Swigged.LLVM.LLVM.AddClause*
        name: AddClause
        nameWithType: LLVM.AddClause
        qualifiedName: Swigged.LLVM.LLVM.AddClause
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddClause
  Swigged.LLVM.LLVM.IsCleanup*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsCleanup*
        name: IsCleanup
        nameWithType: LLVM.IsCleanup
        qualifiedName: Swigged.LLVM.LLVM.IsCleanup
      VB:
      - id: Swigged.LLVM.LLVM.IsCleanup*
        name: IsCleanup
        nameWithType: LLVM.IsCleanup
        qualifiedName: Swigged.LLVM.LLVM.IsCleanup
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsCleanup
  Swigged.LLVM.LLVM.SetCleanup*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetCleanup*
        name: SetCleanup
        nameWithType: LLVM.SetCleanup
        qualifiedName: Swigged.LLVM.LLVM.SetCleanup
      VB:
      - id: Swigged.LLVM.LLVM.SetCleanup*
        name: SetCleanup
        nameWithType: LLVM.SetCleanup
        qualifiedName: Swigged.LLVM.LLVM.SetCleanup
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetCleanup
  Swigged.LLVM.LLVM.BuildAdd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildAdd*
        name: BuildAdd
        nameWithType: LLVM.BuildAdd
        qualifiedName: Swigged.LLVM.LLVM.BuildAdd
      VB:
      - id: Swigged.LLVM.LLVM.BuildAdd*
        name: BuildAdd
        nameWithType: LLVM.BuildAdd
        qualifiedName: Swigged.LLVM.LLVM.BuildAdd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildAdd
  Swigged.LLVM.LLVM.BuildNSWAdd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNSWAdd*
        name: BuildNSWAdd
        nameWithType: LLVM.BuildNSWAdd
        qualifiedName: Swigged.LLVM.LLVM.BuildNSWAdd
      VB:
      - id: Swigged.LLVM.LLVM.BuildNSWAdd*
        name: BuildNSWAdd
        nameWithType: LLVM.BuildNSWAdd
        qualifiedName: Swigged.LLVM.LLVM.BuildNSWAdd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNSWAdd
  Swigged.LLVM.LLVM.BuildNUWAdd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNUWAdd*
        name: BuildNUWAdd
        nameWithType: LLVM.BuildNUWAdd
        qualifiedName: Swigged.LLVM.LLVM.BuildNUWAdd
      VB:
      - id: Swigged.LLVM.LLVM.BuildNUWAdd*
        name: BuildNUWAdd
        nameWithType: LLVM.BuildNUWAdd
        qualifiedName: Swigged.LLVM.LLVM.BuildNUWAdd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNUWAdd
  Swigged.LLVM.LLVM.BuildFAdd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFAdd*
        name: BuildFAdd
        nameWithType: LLVM.BuildFAdd
        qualifiedName: Swigged.LLVM.LLVM.BuildFAdd
      VB:
      - id: Swigged.LLVM.LLVM.BuildFAdd*
        name: BuildFAdd
        nameWithType: LLVM.BuildFAdd
        qualifiedName: Swigged.LLVM.LLVM.BuildFAdd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFAdd
  Swigged.LLVM.LLVM.BuildSub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildSub*
        name: BuildSub
        nameWithType: LLVM.BuildSub
        qualifiedName: Swigged.LLVM.LLVM.BuildSub
      VB:
      - id: Swigged.LLVM.LLVM.BuildSub*
        name: BuildSub
        nameWithType: LLVM.BuildSub
        qualifiedName: Swigged.LLVM.LLVM.BuildSub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildSub
  Swigged.LLVM.LLVM.BuildNSWSub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNSWSub*
        name: BuildNSWSub
        nameWithType: LLVM.BuildNSWSub
        qualifiedName: Swigged.LLVM.LLVM.BuildNSWSub
      VB:
      - id: Swigged.LLVM.LLVM.BuildNSWSub*
        name: BuildNSWSub
        nameWithType: LLVM.BuildNSWSub
        qualifiedName: Swigged.LLVM.LLVM.BuildNSWSub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNSWSub
  Swigged.LLVM.LLVM.BuildNUWSub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNUWSub*
        name: BuildNUWSub
        nameWithType: LLVM.BuildNUWSub
        qualifiedName: Swigged.LLVM.LLVM.BuildNUWSub
      VB:
      - id: Swigged.LLVM.LLVM.BuildNUWSub*
        name: BuildNUWSub
        nameWithType: LLVM.BuildNUWSub
        qualifiedName: Swigged.LLVM.LLVM.BuildNUWSub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNUWSub
  Swigged.LLVM.LLVM.BuildFSub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFSub*
        name: BuildFSub
        nameWithType: LLVM.BuildFSub
        qualifiedName: Swigged.LLVM.LLVM.BuildFSub
      VB:
      - id: Swigged.LLVM.LLVM.BuildFSub*
        name: BuildFSub
        nameWithType: LLVM.BuildFSub
        qualifiedName: Swigged.LLVM.LLVM.BuildFSub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFSub
  Swigged.LLVM.LLVM.BuildMul*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildMul*
        name: BuildMul
        nameWithType: LLVM.BuildMul
        qualifiedName: Swigged.LLVM.LLVM.BuildMul
      VB:
      - id: Swigged.LLVM.LLVM.BuildMul*
        name: BuildMul
        nameWithType: LLVM.BuildMul
        qualifiedName: Swigged.LLVM.LLVM.BuildMul
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildMul
  Swigged.LLVM.LLVM.BuildNSWMul*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNSWMul*
        name: BuildNSWMul
        nameWithType: LLVM.BuildNSWMul
        qualifiedName: Swigged.LLVM.LLVM.BuildNSWMul
      VB:
      - id: Swigged.LLVM.LLVM.BuildNSWMul*
        name: BuildNSWMul
        nameWithType: LLVM.BuildNSWMul
        qualifiedName: Swigged.LLVM.LLVM.BuildNSWMul
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNSWMul
  Swigged.LLVM.LLVM.BuildNUWMul*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNUWMul*
        name: BuildNUWMul
        nameWithType: LLVM.BuildNUWMul
        qualifiedName: Swigged.LLVM.LLVM.BuildNUWMul
      VB:
      - id: Swigged.LLVM.LLVM.BuildNUWMul*
        name: BuildNUWMul
        nameWithType: LLVM.BuildNUWMul
        qualifiedName: Swigged.LLVM.LLVM.BuildNUWMul
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNUWMul
  Swigged.LLVM.LLVM.BuildFMul*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFMul*
        name: BuildFMul
        nameWithType: LLVM.BuildFMul
        qualifiedName: Swigged.LLVM.LLVM.BuildFMul
      VB:
      - id: Swigged.LLVM.LLVM.BuildFMul*
        name: BuildFMul
        nameWithType: LLVM.BuildFMul
        qualifiedName: Swigged.LLVM.LLVM.BuildFMul
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFMul
  Swigged.LLVM.LLVM.BuildUDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildUDiv*
        name: BuildUDiv
        nameWithType: LLVM.BuildUDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildUDiv
      VB:
      - id: Swigged.LLVM.LLVM.BuildUDiv*
        name: BuildUDiv
        nameWithType: LLVM.BuildUDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildUDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildUDiv
  Swigged.LLVM.LLVM.BuildExactUDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildExactUDiv*
        name: BuildExactUDiv
        nameWithType: LLVM.BuildExactUDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildExactUDiv
      VB:
      - id: Swigged.LLVM.LLVM.BuildExactUDiv*
        name: BuildExactUDiv
        nameWithType: LLVM.BuildExactUDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildExactUDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildExactUDiv
  Swigged.LLVM.LLVM.BuildSDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildSDiv*
        name: BuildSDiv
        nameWithType: LLVM.BuildSDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildSDiv
      VB:
      - id: Swigged.LLVM.LLVM.BuildSDiv*
        name: BuildSDiv
        nameWithType: LLVM.BuildSDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildSDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildSDiv
  Swigged.LLVM.LLVM.BuildExactSDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildExactSDiv*
        name: BuildExactSDiv
        nameWithType: LLVM.BuildExactSDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildExactSDiv
      VB:
      - id: Swigged.LLVM.LLVM.BuildExactSDiv*
        name: BuildExactSDiv
        nameWithType: LLVM.BuildExactSDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildExactSDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildExactSDiv
  Swigged.LLVM.LLVM.BuildFDiv*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFDiv*
        name: BuildFDiv
        nameWithType: LLVM.BuildFDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildFDiv
      VB:
      - id: Swigged.LLVM.LLVM.BuildFDiv*
        name: BuildFDiv
        nameWithType: LLVM.BuildFDiv
        qualifiedName: Swigged.LLVM.LLVM.BuildFDiv
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFDiv
  Swigged.LLVM.LLVM.BuildURem*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildURem*
        name: BuildURem
        nameWithType: LLVM.BuildURem
        qualifiedName: Swigged.LLVM.LLVM.BuildURem
      VB:
      - id: Swigged.LLVM.LLVM.BuildURem*
        name: BuildURem
        nameWithType: LLVM.BuildURem
        qualifiedName: Swigged.LLVM.LLVM.BuildURem
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildURem
  Swigged.LLVM.LLVM.BuildSRem*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildSRem*
        name: BuildSRem
        nameWithType: LLVM.BuildSRem
        qualifiedName: Swigged.LLVM.LLVM.BuildSRem
      VB:
      - id: Swigged.LLVM.LLVM.BuildSRem*
        name: BuildSRem
        nameWithType: LLVM.BuildSRem
        qualifiedName: Swigged.LLVM.LLVM.BuildSRem
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildSRem
  Swigged.LLVM.LLVM.BuildFRem*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFRem*
        name: BuildFRem
        nameWithType: LLVM.BuildFRem
        qualifiedName: Swigged.LLVM.LLVM.BuildFRem
      VB:
      - id: Swigged.LLVM.LLVM.BuildFRem*
        name: BuildFRem
        nameWithType: LLVM.BuildFRem
        qualifiedName: Swigged.LLVM.LLVM.BuildFRem
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFRem
  Swigged.LLVM.LLVM.BuildShl*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildShl*
        name: BuildShl
        nameWithType: LLVM.BuildShl
        qualifiedName: Swigged.LLVM.LLVM.BuildShl
      VB:
      - id: Swigged.LLVM.LLVM.BuildShl*
        name: BuildShl
        nameWithType: LLVM.BuildShl
        qualifiedName: Swigged.LLVM.LLVM.BuildShl
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildShl
  Swigged.LLVM.LLVM.BuildLShr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildLShr*
        name: BuildLShr
        nameWithType: LLVM.BuildLShr
        qualifiedName: Swigged.LLVM.LLVM.BuildLShr
      VB:
      - id: Swigged.LLVM.LLVM.BuildLShr*
        name: BuildLShr
        nameWithType: LLVM.BuildLShr
        qualifiedName: Swigged.LLVM.LLVM.BuildLShr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildLShr
  Swigged.LLVM.LLVM.BuildAShr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildAShr*
        name: BuildAShr
        nameWithType: LLVM.BuildAShr
        qualifiedName: Swigged.LLVM.LLVM.BuildAShr
      VB:
      - id: Swigged.LLVM.LLVM.BuildAShr*
        name: BuildAShr
        nameWithType: LLVM.BuildAShr
        qualifiedName: Swigged.LLVM.LLVM.BuildAShr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildAShr
  Swigged.LLVM.LLVM.BuildAnd*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildAnd*
        name: BuildAnd
        nameWithType: LLVM.BuildAnd
        qualifiedName: Swigged.LLVM.LLVM.BuildAnd
      VB:
      - id: Swigged.LLVM.LLVM.BuildAnd*
        name: BuildAnd
        nameWithType: LLVM.BuildAnd
        qualifiedName: Swigged.LLVM.LLVM.BuildAnd
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildAnd
  Swigged.LLVM.LLVM.BuildOr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildOr*
        name: BuildOr
        nameWithType: LLVM.BuildOr
        qualifiedName: Swigged.LLVM.LLVM.BuildOr
      VB:
      - id: Swigged.LLVM.LLVM.BuildOr*
        name: BuildOr
        nameWithType: LLVM.BuildOr
        qualifiedName: Swigged.LLVM.LLVM.BuildOr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildOr
  Swigged.LLVM.LLVM.BuildXor*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildXor*
        name: BuildXor
        nameWithType: LLVM.BuildXor
        qualifiedName: Swigged.LLVM.LLVM.BuildXor
      VB:
      - id: Swigged.LLVM.LLVM.BuildXor*
        name: BuildXor
        nameWithType: LLVM.BuildXor
        qualifiedName: Swigged.LLVM.LLVM.BuildXor
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildXor
  Swigged.LLVM.LLVM.BuildBinOp*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildBinOp*
        name: BuildBinOp
        nameWithType: LLVM.BuildBinOp
        qualifiedName: Swigged.LLVM.LLVM.BuildBinOp
      VB:
      - id: Swigged.LLVM.LLVM.BuildBinOp*
        name: BuildBinOp
        nameWithType: LLVM.BuildBinOp
        qualifiedName: Swigged.LLVM.LLVM.BuildBinOp
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildBinOp
  Swigged.LLVM.LLVM.BuildNeg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNeg*
        name: BuildNeg
        nameWithType: LLVM.BuildNeg
        qualifiedName: Swigged.LLVM.LLVM.BuildNeg
      VB:
      - id: Swigged.LLVM.LLVM.BuildNeg*
        name: BuildNeg
        nameWithType: LLVM.BuildNeg
        qualifiedName: Swigged.LLVM.LLVM.BuildNeg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNeg
  Swigged.LLVM.LLVM.BuildNSWNeg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNSWNeg*
        name: BuildNSWNeg
        nameWithType: LLVM.BuildNSWNeg
        qualifiedName: Swigged.LLVM.LLVM.BuildNSWNeg
      VB:
      - id: Swigged.LLVM.LLVM.BuildNSWNeg*
        name: BuildNSWNeg
        nameWithType: LLVM.BuildNSWNeg
        qualifiedName: Swigged.LLVM.LLVM.BuildNSWNeg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNSWNeg
  Swigged.LLVM.LLVM.BuildNUWNeg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNUWNeg*
        name: BuildNUWNeg
        nameWithType: LLVM.BuildNUWNeg
        qualifiedName: Swigged.LLVM.LLVM.BuildNUWNeg
      VB:
      - id: Swigged.LLVM.LLVM.BuildNUWNeg*
        name: BuildNUWNeg
        nameWithType: LLVM.BuildNUWNeg
        qualifiedName: Swigged.LLVM.LLVM.BuildNUWNeg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNUWNeg
  Swigged.LLVM.LLVM.BuildFNeg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFNeg*
        name: BuildFNeg
        nameWithType: LLVM.BuildFNeg
        qualifiedName: Swigged.LLVM.LLVM.BuildFNeg
      VB:
      - id: Swigged.LLVM.LLVM.BuildFNeg*
        name: BuildFNeg
        nameWithType: LLVM.BuildFNeg
        qualifiedName: Swigged.LLVM.LLVM.BuildFNeg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFNeg
  Swigged.LLVM.LLVM.BuildNot*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildNot*
        name: BuildNot
        nameWithType: LLVM.BuildNot
        qualifiedName: Swigged.LLVM.LLVM.BuildNot
      VB:
      - id: Swigged.LLVM.LLVM.BuildNot*
        name: BuildNot
        nameWithType: LLVM.BuildNot
        qualifiedName: Swigged.LLVM.LLVM.BuildNot
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildNot
  Swigged.LLVM.LLVM.BuildMalloc*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildMalloc*
        name: BuildMalloc
        nameWithType: LLVM.BuildMalloc
        qualifiedName: Swigged.LLVM.LLVM.BuildMalloc
      VB:
      - id: Swigged.LLVM.LLVM.BuildMalloc*
        name: BuildMalloc
        nameWithType: LLVM.BuildMalloc
        qualifiedName: Swigged.LLVM.LLVM.BuildMalloc
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildMalloc
  Swigged.LLVM.LLVM.BuildArrayMalloc*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildArrayMalloc*
        name: BuildArrayMalloc
        nameWithType: LLVM.BuildArrayMalloc
        qualifiedName: Swigged.LLVM.LLVM.BuildArrayMalloc
      VB:
      - id: Swigged.LLVM.LLVM.BuildArrayMalloc*
        name: BuildArrayMalloc
        nameWithType: LLVM.BuildArrayMalloc
        qualifiedName: Swigged.LLVM.LLVM.BuildArrayMalloc
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildArrayMalloc
  Swigged.LLVM.LLVM.BuildAlloca*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildAlloca*
        name: BuildAlloca
        nameWithType: LLVM.BuildAlloca
        qualifiedName: Swigged.LLVM.LLVM.BuildAlloca
      VB:
      - id: Swigged.LLVM.LLVM.BuildAlloca*
        name: BuildAlloca
        nameWithType: LLVM.BuildAlloca
        qualifiedName: Swigged.LLVM.LLVM.BuildAlloca
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildAlloca
  Swigged.LLVM.LLVM.BuildArrayAlloca*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildArrayAlloca*
        name: BuildArrayAlloca
        nameWithType: LLVM.BuildArrayAlloca
        qualifiedName: Swigged.LLVM.LLVM.BuildArrayAlloca
      VB:
      - id: Swigged.LLVM.LLVM.BuildArrayAlloca*
        name: BuildArrayAlloca
        nameWithType: LLVM.BuildArrayAlloca
        qualifiedName: Swigged.LLVM.LLVM.BuildArrayAlloca
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildArrayAlloca
  Swigged.LLVM.LLVM.BuildFree*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFree*
        name: BuildFree
        nameWithType: LLVM.BuildFree
        qualifiedName: Swigged.LLVM.LLVM.BuildFree
      VB:
      - id: Swigged.LLVM.LLVM.BuildFree*
        name: BuildFree
        nameWithType: LLVM.BuildFree
        qualifiedName: Swigged.LLVM.LLVM.BuildFree
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFree
  Swigged.LLVM.LLVM.BuildLoad*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildLoad*
        name: BuildLoad
        nameWithType: LLVM.BuildLoad
        qualifiedName: Swigged.LLVM.LLVM.BuildLoad
      VB:
      - id: Swigged.LLVM.LLVM.BuildLoad*
        name: BuildLoad
        nameWithType: LLVM.BuildLoad
        qualifiedName: Swigged.LLVM.LLVM.BuildLoad
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildLoad
  Swigged.LLVM.LLVM.BuildStore*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildStore*
        name: BuildStore
        nameWithType: LLVM.BuildStore
        qualifiedName: Swigged.LLVM.LLVM.BuildStore
      VB:
      - id: Swigged.LLVM.LLVM.BuildStore*
        name: BuildStore
        nameWithType: LLVM.BuildStore
        qualifiedName: Swigged.LLVM.LLVM.BuildStore
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildStore
  Swigged.LLVM.LLVM.BuildGEP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildGEP*
        name: BuildGEP
        nameWithType: LLVM.BuildGEP
        qualifiedName: Swigged.LLVM.LLVM.BuildGEP
      VB:
      - id: Swigged.LLVM.LLVM.BuildGEP*
        name: BuildGEP
        nameWithType: LLVM.BuildGEP
        qualifiedName: Swigged.LLVM.LLVM.BuildGEP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildGEP
  Swigged.LLVM.LLVM.BuildInBoundsGEP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildInBoundsGEP*
        name: BuildInBoundsGEP
        nameWithType: LLVM.BuildInBoundsGEP
        qualifiedName: Swigged.LLVM.LLVM.BuildInBoundsGEP
      VB:
      - id: Swigged.LLVM.LLVM.BuildInBoundsGEP*
        name: BuildInBoundsGEP
        nameWithType: LLVM.BuildInBoundsGEP
        qualifiedName: Swigged.LLVM.LLVM.BuildInBoundsGEP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildInBoundsGEP
  Swigged.LLVM.LLVM.BuildStructGEP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildStructGEP*
        name: BuildStructGEP
        nameWithType: LLVM.BuildStructGEP
        qualifiedName: Swigged.LLVM.LLVM.BuildStructGEP
      VB:
      - id: Swigged.LLVM.LLVM.BuildStructGEP*
        name: BuildStructGEP
        nameWithType: LLVM.BuildStructGEP
        qualifiedName: Swigged.LLVM.LLVM.BuildStructGEP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildStructGEP
  Swigged.LLVM.LLVM.BuildGlobalString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildGlobalString*
        name: BuildGlobalString
        nameWithType: LLVM.BuildGlobalString
        qualifiedName: Swigged.LLVM.LLVM.BuildGlobalString
      VB:
      - id: Swigged.LLVM.LLVM.BuildGlobalString*
        name: BuildGlobalString
        nameWithType: LLVM.BuildGlobalString
        qualifiedName: Swigged.LLVM.LLVM.BuildGlobalString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildGlobalString
  Swigged.LLVM.LLVM.BuildGlobalStringPtr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildGlobalStringPtr*
        name: BuildGlobalStringPtr
        nameWithType: LLVM.BuildGlobalStringPtr
        qualifiedName: Swigged.LLVM.LLVM.BuildGlobalStringPtr
      VB:
      - id: Swigged.LLVM.LLVM.BuildGlobalStringPtr*
        name: BuildGlobalStringPtr
        nameWithType: LLVM.BuildGlobalStringPtr
        qualifiedName: Swigged.LLVM.LLVM.BuildGlobalStringPtr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildGlobalStringPtr
  Swigged.LLVM.LLVM.GetVolatile*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetVolatile*
        name: GetVolatile
        nameWithType: LLVM.GetVolatile
        qualifiedName: Swigged.LLVM.LLVM.GetVolatile
      VB:
      - id: Swigged.LLVM.LLVM.GetVolatile*
        name: GetVolatile
        nameWithType: LLVM.GetVolatile
        qualifiedName: Swigged.LLVM.LLVM.GetVolatile
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetVolatile
  Swigged.LLVM.LLVM.SetVolatile*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetVolatile*
        name: SetVolatile
        nameWithType: LLVM.SetVolatile
        qualifiedName: Swigged.LLVM.LLVM.SetVolatile
      VB:
      - id: Swigged.LLVM.LLVM.SetVolatile*
        name: SetVolatile
        nameWithType: LLVM.SetVolatile
        qualifiedName: Swigged.LLVM.LLVM.SetVolatile
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetVolatile
  Swigged.LLVM.LLVM.GetOrdering*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetOrdering*
        name: GetOrdering
        nameWithType: LLVM.GetOrdering
        qualifiedName: Swigged.LLVM.LLVM.GetOrdering
      VB:
      - id: Swigged.LLVM.LLVM.GetOrdering*
        name: GetOrdering
        nameWithType: LLVM.GetOrdering
        qualifiedName: Swigged.LLVM.LLVM.GetOrdering
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetOrdering
  Swigged.LLVM.LLVM.SetOrdering*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetOrdering*
        name: SetOrdering
        nameWithType: LLVM.SetOrdering
        qualifiedName: Swigged.LLVM.LLVM.SetOrdering
      VB:
      - id: Swigged.LLVM.LLVM.SetOrdering*
        name: SetOrdering
        nameWithType: LLVM.SetOrdering
        qualifiedName: Swigged.LLVM.LLVM.SetOrdering
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetOrdering
  Swigged.LLVM.LLVM.BuildTrunc*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildTrunc*
        name: BuildTrunc
        nameWithType: LLVM.BuildTrunc
        qualifiedName: Swigged.LLVM.LLVM.BuildTrunc
      VB:
      - id: Swigged.LLVM.LLVM.BuildTrunc*
        name: BuildTrunc
        nameWithType: LLVM.BuildTrunc
        qualifiedName: Swigged.LLVM.LLVM.BuildTrunc
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildTrunc
  Swigged.LLVM.LLVM.BuildZExt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildZExt*
        name: BuildZExt
        nameWithType: LLVM.BuildZExt
        qualifiedName: Swigged.LLVM.LLVM.BuildZExt
      VB:
      - id: Swigged.LLVM.LLVM.BuildZExt*
        name: BuildZExt
        nameWithType: LLVM.BuildZExt
        qualifiedName: Swigged.LLVM.LLVM.BuildZExt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildZExt
  Swigged.LLVM.LLVM.BuildSExt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildSExt*
        name: BuildSExt
        nameWithType: LLVM.BuildSExt
        qualifiedName: Swigged.LLVM.LLVM.BuildSExt
      VB:
      - id: Swigged.LLVM.LLVM.BuildSExt*
        name: BuildSExt
        nameWithType: LLVM.BuildSExt
        qualifiedName: Swigged.LLVM.LLVM.BuildSExt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildSExt
  Swigged.LLVM.LLVM.BuildFPToUI*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFPToUI*
        name: BuildFPToUI
        nameWithType: LLVM.BuildFPToUI
        qualifiedName: Swigged.LLVM.LLVM.BuildFPToUI
      VB:
      - id: Swigged.LLVM.LLVM.BuildFPToUI*
        name: BuildFPToUI
        nameWithType: LLVM.BuildFPToUI
        qualifiedName: Swigged.LLVM.LLVM.BuildFPToUI
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFPToUI
  Swigged.LLVM.LLVM.BuildFPToSI*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFPToSI*
        name: BuildFPToSI
        nameWithType: LLVM.BuildFPToSI
        qualifiedName: Swigged.LLVM.LLVM.BuildFPToSI
      VB:
      - id: Swigged.LLVM.LLVM.BuildFPToSI*
        name: BuildFPToSI
        nameWithType: LLVM.BuildFPToSI
        qualifiedName: Swigged.LLVM.LLVM.BuildFPToSI
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFPToSI
  Swigged.LLVM.LLVM.BuildUIToFP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildUIToFP*
        name: BuildUIToFP
        nameWithType: LLVM.BuildUIToFP
        qualifiedName: Swigged.LLVM.LLVM.BuildUIToFP
      VB:
      - id: Swigged.LLVM.LLVM.BuildUIToFP*
        name: BuildUIToFP
        nameWithType: LLVM.BuildUIToFP
        qualifiedName: Swigged.LLVM.LLVM.BuildUIToFP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildUIToFP
  Swigged.LLVM.LLVM.BuildSIToFP*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildSIToFP*
        name: BuildSIToFP
        nameWithType: LLVM.BuildSIToFP
        qualifiedName: Swigged.LLVM.LLVM.BuildSIToFP
      VB:
      - id: Swigged.LLVM.LLVM.BuildSIToFP*
        name: BuildSIToFP
        nameWithType: LLVM.BuildSIToFP
        qualifiedName: Swigged.LLVM.LLVM.BuildSIToFP
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildSIToFP
  Swigged.LLVM.LLVM.BuildFPTrunc*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFPTrunc*
        name: BuildFPTrunc
        nameWithType: LLVM.BuildFPTrunc
        qualifiedName: Swigged.LLVM.LLVM.BuildFPTrunc
      VB:
      - id: Swigged.LLVM.LLVM.BuildFPTrunc*
        name: BuildFPTrunc
        nameWithType: LLVM.BuildFPTrunc
        qualifiedName: Swigged.LLVM.LLVM.BuildFPTrunc
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFPTrunc
  Swigged.LLVM.LLVM.BuildFPExt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFPExt*
        name: BuildFPExt
        nameWithType: LLVM.BuildFPExt
        qualifiedName: Swigged.LLVM.LLVM.BuildFPExt
      VB:
      - id: Swigged.LLVM.LLVM.BuildFPExt*
        name: BuildFPExt
        nameWithType: LLVM.BuildFPExt
        qualifiedName: Swigged.LLVM.LLVM.BuildFPExt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFPExt
  Swigged.LLVM.LLVM.BuildPtrToInt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildPtrToInt*
        name: BuildPtrToInt
        nameWithType: LLVM.BuildPtrToInt
        qualifiedName: Swigged.LLVM.LLVM.BuildPtrToInt
      VB:
      - id: Swigged.LLVM.LLVM.BuildPtrToInt*
        name: BuildPtrToInt
        nameWithType: LLVM.BuildPtrToInt
        qualifiedName: Swigged.LLVM.LLVM.BuildPtrToInt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildPtrToInt
  Swigged.LLVM.LLVM.BuildIntToPtr*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildIntToPtr*
        name: BuildIntToPtr
        nameWithType: LLVM.BuildIntToPtr
        qualifiedName: Swigged.LLVM.LLVM.BuildIntToPtr
      VB:
      - id: Swigged.LLVM.LLVM.BuildIntToPtr*
        name: BuildIntToPtr
        nameWithType: LLVM.BuildIntToPtr
        qualifiedName: Swigged.LLVM.LLVM.BuildIntToPtr
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildIntToPtr
  Swigged.LLVM.LLVM.BuildBitCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildBitCast*
        name: BuildBitCast
        nameWithType: LLVM.BuildBitCast
        qualifiedName: Swigged.LLVM.LLVM.BuildBitCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildBitCast*
        name: BuildBitCast
        nameWithType: LLVM.BuildBitCast
        qualifiedName: Swigged.LLVM.LLVM.BuildBitCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildBitCast
  Swigged.LLVM.LLVM.BuildAddrSpaceCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildAddrSpaceCast*
        name: BuildAddrSpaceCast
        nameWithType: LLVM.BuildAddrSpaceCast
        qualifiedName: Swigged.LLVM.LLVM.BuildAddrSpaceCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildAddrSpaceCast*
        name: BuildAddrSpaceCast
        nameWithType: LLVM.BuildAddrSpaceCast
        qualifiedName: Swigged.LLVM.LLVM.BuildAddrSpaceCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildAddrSpaceCast
  Swigged.LLVM.LLVM.BuildZExtOrBitCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildZExtOrBitCast*
        name: BuildZExtOrBitCast
        nameWithType: LLVM.BuildZExtOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.BuildZExtOrBitCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildZExtOrBitCast*
        name: BuildZExtOrBitCast
        nameWithType: LLVM.BuildZExtOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.BuildZExtOrBitCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildZExtOrBitCast
  Swigged.LLVM.LLVM.BuildSExtOrBitCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildSExtOrBitCast*
        name: BuildSExtOrBitCast
        nameWithType: LLVM.BuildSExtOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.BuildSExtOrBitCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildSExtOrBitCast*
        name: BuildSExtOrBitCast
        nameWithType: LLVM.BuildSExtOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.BuildSExtOrBitCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildSExtOrBitCast
  Swigged.LLVM.LLVM.BuildTruncOrBitCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildTruncOrBitCast*
        name: BuildTruncOrBitCast
        nameWithType: LLVM.BuildTruncOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.BuildTruncOrBitCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildTruncOrBitCast*
        name: BuildTruncOrBitCast
        nameWithType: LLVM.BuildTruncOrBitCast
        qualifiedName: Swigged.LLVM.LLVM.BuildTruncOrBitCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildTruncOrBitCast
  Swigged.LLVM.LLVM.BuildCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildCast*
        name: BuildCast
        nameWithType: LLVM.BuildCast
        qualifiedName: Swigged.LLVM.LLVM.BuildCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildCast*
        name: BuildCast
        nameWithType: LLVM.BuildCast
        qualifiedName: Swigged.LLVM.LLVM.BuildCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildCast
  Swigged.LLVM.LLVM.BuildPointerCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildPointerCast*
        name: BuildPointerCast
        nameWithType: LLVM.BuildPointerCast
        qualifiedName: Swigged.LLVM.LLVM.BuildPointerCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildPointerCast*
        name: BuildPointerCast
        nameWithType: LLVM.BuildPointerCast
        qualifiedName: Swigged.LLVM.LLVM.BuildPointerCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildPointerCast
  Swigged.LLVM.LLVM.BuildIntCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildIntCast*
        name: BuildIntCast
        nameWithType: LLVM.BuildIntCast
        qualifiedName: Swigged.LLVM.LLVM.BuildIntCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildIntCast*
        name: BuildIntCast
        nameWithType: LLVM.BuildIntCast
        qualifiedName: Swigged.LLVM.LLVM.BuildIntCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildIntCast
  Swigged.LLVM.LLVM.BuildFPCast*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFPCast*
        name: BuildFPCast
        nameWithType: LLVM.BuildFPCast
        qualifiedName: Swigged.LLVM.LLVM.BuildFPCast
      VB:
      - id: Swigged.LLVM.LLVM.BuildFPCast*
        name: BuildFPCast
        nameWithType: LLVM.BuildFPCast
        qualifiedName: Swigged.LLVM.LLVM.BuildFPCast
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFPCast
  Swigged.LLVM.LLVM.BuildICmp*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildICmp*
        name: BuildICmp
        nameWithType: LLVM.BuildICmp
        qualifiedName: Swigged.LLVM.LLVM.BuildICmp
      VB:
      - id: Swigged.LLVM.LLVM.BuildICmp*
        name: BuildICmp
        nameWithType: LLVM.BuildICmp
        qualifiedName: Swigged.LLVM.LLVM.BuildICmp
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildICmp
  Swigged.LLVM.LLVM.BuildFCmp*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFCmp*
        name: BuildFCmp
        nameWithType: LLVM.BuildFCmp
        qualifiedName: Swigged.LLVM.LLVM.BuildFCmp
      VB:
      - id: Swigged.LLVM.LLVM.BuildFCmp*
        name: BuildFCmp
        nameWithType: LLVM.BuildFCmp
        qualifiedName: Swigged.LLVM.LLVM.BuildFCmp
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFCmp
  Swigged.LLVM.LLVM.BuildPhi*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildPhi*
        name: BuildPhi
        nameWithType: LLVM.BuildPhi
        qualifiedName: Swigged.LLVM.LLVM.BuildPhi
      VB:
      - id: Swigged.LLVM.LLVM.BuildPhi*
        name: BuildPhi
        nameWithType: LLVM.BuildPhi
        qualifiedName: Swigged.LLVM.LLVM.BuildPhi
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildPhi
  Swigged.LLVM.LLVM.BuildCall*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildCall*
        name: BuildCall
        nameWithType: LLVM.BuildCall
        qualifiedName: Swigged.LLVM.LLVM.BuildCall
      VB:
      - id: Swigged.LLVM.LLVM.BuildCall*
        name: BuildCall
        nameWithType: LLVM.BuildCall
        qualifiedName: Swigged.LLVM.LLVM.BuildCall
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildCall
  Swigged.LLVM.LLVM.BuildSelect*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildSelect*
        name: BuildSelect
        nameWithType: LLVM.BuildSelect
        qualifiedName: Swigged.LLVM.LLVM.BuildSelect
      VB:
      - id: Swigged.LLVM.LLVM.BuildSelect*
        name: BuildSelect
        nameWithType: LLVM.BuildSelect
        qualifiedName: Swigged.LLVM.LLVM.BuildSelect
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildSelect
  Swigged.LLVM.LLVM.BuildVAArg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildVAArg*
        name: BuildVAArg
        nameWithType: LLVM.BuildVAArg
        qualifiedName: Swigged.LLVM.LLVM.BuildVAArg
      VB:
      - id: Swigged.LLVM.LLVM.BuildVAArg*
        name: BuildVAArg
        nameWithType: LLVM.BuildVAArg
        qualifiedName: Swigged.LLVM.LLVM.BuildVAArg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildVAArg
  Swigged.LLVM.LLVM.BuildExtractElement*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildExtractElement*
        name: BuildExtractElement
        nameWithType: LLVM.BuildExtractElement
        qualifiedName: Swigged.LLVM.LLVM.BuildExtractElement
      VB:
      - id: Swigged.LLVM.LLVM.BuildExtractElement*
        name: BuildExtractElement
        nameWithType: LLVM.BuildExtractElement
        qualifiedName: Swigged.LLVM.LLVM.BuildExtractElement
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildExtractElement
  Swigged.LLVM.LLVM.BuildInsertElement*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildInsertElement*
        name: BuildInsertElement
        nameWithType: LLVM.BuildInsertElement
        qualifiedName: Swigged.LLVM.LLVM.BuildInsertElement
      VB:
      - id: Swigged.LLVM.LLVM.BuildInsertElement*
        name: BuildInsertElement
        nameWithType: LLVM.BuildInsertElement
        qualifiedName: Swigged.LLVM.LLVM.BuildInsertElement
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildInsertElement
  Swigged.LLVM.LLVM.BuildShuffleVector*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildShuffleVector*
        name: BuildShuffleVector
        nameWithType: LLVM.BuildShuffleVector
        qualifiedName: Swigged.LLVM.LLVM.BuildShuffleVector
      VB:
      - id: Swigged.LLVM.LLVM.BuildShuffleVector*
        name: BuildShuffleVector
        nameWithType: LLVM.BuildShuffleVector
        qualifiedName: Swigged.LLVM.LLVM.BuildShuffleVector
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildShuffleVector
  Swigged.LLVM.LLVM.BuildExtractValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildExtractValue*
        name: BuildExtractValue
        nameWithType: LLVM.BuildExtractValue
        qualifiedName: Swigged.LLVM.LLVM.BuildExtractValue
      VB:
      - id: Swigged.LLVM.LLVM.BuildExtractValue*
        name: BuildExtractValue
        nameWithType: LLVM.BuildExtractValue
        qualifiedName: Swigged.LLVM.LLVM.BuildExtractValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildExtractValue
  Swigged.LLVM.LLVM.BuildInsertValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildInsertValue*
        name: BuildInsertValue
        nameWithType: LLVM.BuildInsertValue
        qualifiedName: Swigged.LLVM.LLVM.BuildInsertValue
      VB:
      - id: Swigged.LLVM.LLVM.BuildInsertValue*
        name: BuildInsertValue
        nameWithType: LLVM.BuildInsertValue
        qualifiedName: Swigged.LLVM.LLVM.BuildInsertValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildInsertValue
  Swigged.LLVM.LLVM.BuildIsNull*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildIsNull*
        name: BuildIsNull
        nameWithType: LLVM.BuildIsNull
        qualifiedName: Swigged.LLVM.LLVM.BuildIsNull
      VB:
      - id: Swigged.LLVM.LLVM.BuildIsNull*
        name: BuildIsNull
        nameWithType: LLVM.BuildIsNull
        qualifiedName: Swigged.LLVM.LLVM.BuildIsNull
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildIsNull
  Swigged.LLVM.LLVM.BuildIsNotNull*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildIsNotNull*
        name: BuildIsNotNull
        nameWithType: LLVM.BuildIsNotNull
        qualifiedName: Swigged.LLVM.LLVM.BuildIsNotNull
      VB:
      - id: Swigged.LLVM.LLVM.BuildIsNotNull*
        name: BuildIsNotNull
        nameWithType: LLVM.BuildIsNotNull
        qualifiedName: Swigged.LLVM.LLVM.BuildIsNotNull
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildIsNotNull
  Swigged.LLVM.LLVM.BuildPtrDiff*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildPtrDiff*
        name: BuildPtrDiff
        nameWithType: LLVM.BuildPtrDiff
        qualifiedName: Swigged.LLVM.LLVM.BuildPtrDiff
      VB:
      - id: Swigged.LLVM.LLVM.BuildPtrDiff*
        name: BuildPtrDiff
        nameWithType: LLVM.BuildPtrDiff
        qualifiedName: Swigged.LLVM.LLVM.BuildPtrDiff
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildPtrDiff
  Swigged.LLVM.LLVM.BuildFence*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildFence*
        name: BuildFence
        nameWithType: LLVM.BuildFence
        qualifiedName: Swigged.LLVM.LLVM.BuildFence
      VB:
      - id: Swigged.LLVM.LLVM.BuildFence*
        name: BuildFence
        nameWithType: LLVM.BuildFence
        qualifiedName: Swigged.LLVM.LLVM.BuildFence
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildFence
  Swigged.LLVM.LLVM.BuildAtomicRMW*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildAtomicRMW*
        name: BuildAtomicRMW
        nameWithType: LLVM.BuildAtomicRMW
        qualifiedName: Swigged.LLVM.LLVM.BuildAtomicRMW
      VB:
      - id: Swigged.LLVM.LLVM.BuildAtomicRMW*
        name: BuildAtomicRMW
        nameWithType: LLVM.BuildAtomicRMW
        qualifiedName: Swigged.LLVM.LLVM.BuildAtomicRMW
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildAtomicRMW
  Swigged.LLVM.LLVM.BuildAtomicCmpXchg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.BuildAtomicCmpXchg*
        name: BuildAtomicCmpXchg
        nameWithType: LLVM.BuildAtomicCmpXchg
        qualifiedName: Swigged.LLVM.LLVM.BuildAtomicCmpXchg
      VB:
      - id: Swigged.LLVM.LLVM.BuildAtomicCmpXchg*
        name: BuildAtomicCmpXchg
        nameWithType: LLVM.BuildAtomicCmpXchg
        qualifiedName: Swigged.LLVM.LLVM.BuildAtomicCmpXchg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.BuildAtomicCmpXchg
  Swigged.LLVM.LLVM.IsAtomicSingleThread*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsAtomicSingleThread*
        name: IsAtomicSingleThread
        nameWithType: LLVM.IsAtomicSingleThread
        qualifiedName: Swigged.LLVM.LLVM.IsAtomicSingleThread
      VB:
      - id: Swigged.LLVM.LLVM.IsAtomicSingleThread*
        name: IsAtomicSingleThread
        nameWithType: LLVM.IsAtomicSingleThread
        qualifiedName: Swigged.LLVM.LLVM.IsAtomicSingleThread
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsAtomicSingleThread
  Swigged.LLVM.LLVM.SetAtomicSingleThread*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetAtomicSingleThread*
        name: SetAtomicSingleThread
        nameWithType: LLVM.SetAtomicSingleThread
        qualifiedName: Swigged.LLVM.LLVM.SetAtomicSingleThread
      VB:
      - id: Swigged.LLVM.LLVM.SetAtomicSingleThread*
        name: SetAtomicSingleThread
        nameWithType: LLVM.SetAtomicSingleThread
        qualifiedName: Swigged.LLVM.LLVM.SetAtomicSingleThread
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetAtomicSingleThread
  Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering*
        name: GetCmpXchgSuccessOrdering
        nameWithType: LLVM.GetCmpXchgSuccessOrdering
        qualifiedName: Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering
      VB:
      - id: Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering*
        name: GetCmpXchgSuccessOrdering
        nameWithType: LLVM.GetCmpXchgSuccessOrdering
        qualifiedName: Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCmpXchgSuccessOrdering
  Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering*
        name: SetCmpXchgSuccessOrdering
        nameWithType: LLVM.SetCmpXchgSuccessOrdering
        qualifiedName: Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering
      VB:
      - id: Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering*
        name: SetCmpXchgSuccessOrdering
        nameWithType: LLVM.SetCmpXchgSuccessOrdering
        qualifiedName: Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetCmpXchgSuccessOrdering
  Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering*
        name: GetCmpXchgFailureOrdering
        nameWithType: LLVM.GetCmpXchgFailureOrdering
        qualifiedName: Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering
      VB:
      - id: Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering*
        name: GetCmpXchgFailureOrdering
        nameWithType: LLVM.GetCmpXchgFailureOrdering
        qualifiedName: Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetCmpXchgFailureOrdering
  Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering*
        name: SetCmpXchgFailureOrdering
        nameWithType: LLVM.SetCmpXchgFailureOrdering
        qualifiedName: Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering
      VB:
      - id: Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering*
        name: SetCmpXchgFailureOrdering
        nameWithType: LLVM.SetCmpXchgFailureOrdering
        qualifiedName: Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetCmpXchgFailureOrdering
  Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule*
        name: CreateModuleProviderForExistingModule
        nameWithType: LLVM.CreateModuleProviderForExistingModule
        qualifiedName: Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule
      VB:
      - id: Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule*
        name: CreateModuleProviderForExistingModule
        nameWithType: LLVM.CreateModuleProviderForExistingModule
        qualifiedName: Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateModuleProviderForExistingModule
  Swigged.LLVM.LLVM.DisposeModuleProvider*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeModuleProvider*
        name: DisposeModuleProvider
        nameWithType: LLVM.DisposeModuleProvider
        qualifiedName: Swigged.LLVM.LLVM.DisposeModuleProvider
      VB:
      - id: Swigged.LLVM.LLVM.DisposeModuleProvider*
        name: DisposeModuleProvider
        nameWithType: LLVM.DisposeModuleProvider
        qualifiedName: Swigged.LLVM.LLVM.DisposeModuleProvider
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeModuleProvider
  Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile*
        name: CreateMemoryBufferWithContentsOfFile
        nameWithType: LLVM.CreateMemoryBufferWithContentsOfFile
        qualifiedName: Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile
      VB:
      - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile*
        name: CreateMemoryBufferWithContentsOfFile
        nameWithType: LLVM.CreateMemoryBufferWithContentsOfFile
        qualifiedName: Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateMemoryBufferWithContentsOfFile
  Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN*
        name: CreateMemoryBufferWithSTDIN
        nameWithType: LLVM.CreateMemoryBufferWithSTDIN
        qualifiedName: Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN
      VB:
      - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN*
        name: CreateMemoryBufferWithSTDIN
        nameWithType: LLVM.CreateMemoryBufferWithSTDIN
        qualifiedName: Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateMemoryBufferWithSTDIN
  Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange*
        name: CreateMemoryBufferWithMemoryRange
        nameWithType: LLVM.CreateMemoryBufferWithMemoryRange
        qualifiedName: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange
      VB:
      - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange*
        name: CreateMemoryBufferWithMemoryRange
        nameWithType: LLVM.CreateMemoryBufferWithMemoryRange
        qualifiedName: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRange
  Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy*
        name: CreateMemoryBufferWithMemoryRangeCopy
        nameWithType: LLVM.CreateMemoryBufferWithMemoryRangeCopy
        qualifiedName: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy
      VB:
      - id: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy*
        name: CreateMemoryBufferWithMemoryRangeCopy
        nameWithType: LLVM.CreateMemoryBufferWithMemoryRangeCopy
        qualifiedName: Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateMemoryBufferWithMemoryRangeCopy
  Swigged.LLVM.LLVM.GetBufferStart*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBufferStart*
        name: GetBufferStart
        nameWithType: LLVM.GetBufferStart
        qualifiedName: Swigged.LLVM.LLVM.GetBufferStart
      VB:
      - id: Swigged.LLVM.LLVM.GetBufferStart*
        name: GetBufferStart
        nameWithType: LLVM.GetBufferStart
        qualifiedName: Swigged.LLVM.LLVM.GetBufferStart
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBufferStart
  Swigged.LLVM.LLVM.GetBufferSize*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBufferSize*
        name: GetBufferSize
        nameWithType: LLVM.GetBufferSize
        qualifiedName: Swigged.LLVM.LLVM.GetBufferSize
      VB:
      - id: Swigged.LLVM.LLVM.GetBufferSize*
        name: GetBufferSize
        nameWithType: LLVM.GetBufferSize
        qualifiedName: Swigged.LLVM.LLVM.GetBufferSize
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBufferSize
  Swigged.LLVM.LLVM.DisposeMemoryBuffer*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeMemoryBuffer*
        name: DisposeMemoryBuffer
        nameWithType: LLVM.DisposeMemoryBuffer
        qualifiedName: Swigged.LLVM.LLVM.DisposeMemoryBuffer
      VB:
      - id: Swigged.LLVM.LLVM.DisposeMemoryBuffer*
        name: DisposeMemoryBuffer
        nameWithType: LLVM.DisposeMemoryBuffer
        qualifiedName: Swigged.LLVM.LLVM.DisposeMemoryBuffer
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeMemoryBuffer
  Swigged.LLVM.LLVM.GetGlobalPassRegistry*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetGlobalPassRegistry*
        name: GetGlobalPassRegistry
        nameWithType: LLVM.GetGlobalPassRegistry
        qualifiedName: Swigged.LLVM.LLVM.GetGlobalPassRegistry
      VB:
      - id: Swigged.LLVM.LLVM.GetGlobalPassRegistry*
        name: GetGlobalPassRegistry
        nameWithType: LLVM.GetGlobalPassRegistry
        qualifiedName: Swigged.LLVM.LLVM.GetGlobalPassRegistry
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetGlobalPassRegistry
  Swigged.LLVM.LLVM.CreatePassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreatePassManager*
        name: CreatePassManager
        nameWithType: LLVM.CreatePassManager
        qualifiedName: Swigged.LLVM.LLVM.CreatePassManager
      VB:
      - id: Swigged.LLVM.LLVM.CreatePassManager*
        name: CreatePassManager
        nameWithType: LLVM.CreatePassManager
        qualifiedName: Swigged.LLVM.LLVM.CreatePassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreatePassManager
  Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule*
        name: CreateFunctionPassManagerForModule
        nameWithType: LLVM.CreateFunctionPassManagerForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule
      VB:
      - id: Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule*
        name: CreateFunctionPassManagerForModule
        nameWithType: LLVM.CreateFunctionPassManagerForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateFunctionPassManagerForModule
  Swigged.LLVM.LLVM.CreateFunctionPassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateFunctionPassManager*
        name: CreateFunctionPassManager
        nameWithType: LLVM.CreateFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.CreateFunctionPassManager
      VB:
      - id: Swigged.LLVM.LLVM.CreateFunctionPassManager*
        name: CreateFunctionPassManager
        nameWithType: LLVM.CreateFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.CreateFunctionPassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateFunctionPassManager
  Swigged.LLVM.LLVM.RunPassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RunPassManager*
        name: RunPassManager
        nameWithType: LLVM.RunPassManager
        qualifiedName: Swigged.LLVM.LLVM.RunPassManager
      VB:
      - id: Swigged.LLVM.LLVM.RunPassManager*
        name: RunPassManager
        nameWithType: LLVM.RunPassManager
        qualifiedName: Swigged.LLVM.LLVM.RunPassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RunPassManager
  Swigged.LLVM.LLVM.InitializeFunctionPassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeFunctionPassManager*
        name: InitializeFunctionPassManager
        nameWithType: LLVM.InitializeFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.InitializeFunctionPassManager
      VB:
      - id: Swigged.LLVM.LLVM.InitializeFunctionPassManager*
        name: InitializeFunctionPassManager
        nameWithType: LLVM.InitializeFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.InitializeFunctionPassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeFunctionPassManager
  Swigged.LLVM.LLVM.RunFunctionPassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RunFunctionPassManager*
        name: RunFunctionPassManager
        nameWithType: LLVM.RunFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.RunFunctionPassManager
      VB:
      - id: Swigged.LLVM.LLVM.RunFunctionPassManager*
        name: RunFunctionPassManager
        nameWithType: LLVM.RunFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.RunFunctionPassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RunFunctionPassManager
  Swigged.LLVM.LLVM.FinalizeFunctionPassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.FinalizeFunctionPassManager*
        name: FinalizeFunctionPassManager
        nameWithType: LLVM.FinalizeFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.FinalizeFunctionPassManager
      VB:
      - id: Swigged.LLVM.LLVM.FinalizeFunctionPassManager*
        name: FinalizeFunctionPassManager
        nameWithType: LLVM.FinalizeFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.FinalizeFunctionPassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.FinalizeFunctionPassManager
  Swigged.LLVM.LLVM.DisposePassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposePassManager*
        name: DisposePassManager
        nameWithType: LLVM.DisposePassManager
        qualifiedName: Swigged.LLVM.LLVM.DisposePassManager
      VB:
      - id: Swigged.LLVM.LLVM.DisposePassManager*
        name: DisposePassManager
        nameWithType: LLVM.DisposePassManager
        qualifiedName: Swigged.LLVM.LLVM.DisposePassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposePassManager
  Swigged.LLVM.LLVM.StartMultithreaded*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.StartMultithreaded*
        name: StartMultithreaded
        nameWithType: LLVM.StartMultithreaded
        qualifiedName: Swigged.LLVM.LLVM.StartMultithreaded
      VB:
      - id: Swigged.LLVM.LLVM.StartMultithreaded*
        name: StartMultithreaded
        nameWithType: LLVM.StartMultithreaded
        qualifiedName: Swigged.LLVM.LLVM.StartMultithreaded
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.StartMultithreaded
  Swigged.LLVM.LLVM.StopMultithreaded*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.StopMultithreaded*
        name: StopMultithreaded
        nameWithType: LLVM.StopMultithreaded
        qualifiedName: Swigged.LLVM.LLVM.StopMultithreaded
      VB:
      - id: Swigged.LLVM.LLVM.StopMultithreaded*
        name: StopMultithreaded
        nameWithType: LLVM.StopMultithreaded
        qualifiedName: Swigged.LLVM.LLVM.StopMultithreaded
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.StopMultithreaded
  Swigged.LLVM.LLVM.IsMultithreaded*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IsMultithreaded*
        name: IsMultithreaded
        nameWithType: LLVM.IsMultithreaded
        qualifiedName: Swigged.LLVM.LLVM.IsMultithreaded
      VB:
      - id: Swigged.LLVM.LLVM.IsMultithreaded*
        name: IsMultithreaded
        nameWithType: LLVM.IsMultithreaded
        qualifiedName: Swigged.LLVM.LLVM.IsMultithreaded
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IsMultithreaded
  Swigged.LLVM.LLVM.VerifyModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.VerifyModule*
        name: VerifyModule
        nameWithType: LLVM.VerifyModule
        qualifiedName: Swigged.LLVM.LLVM.VerifyModule
      VB:
      - id: Swigged.LLVM.LLVM.VerifyModule*
        name: VerifyModule
        nameWithType: LLVM.VerifyModule
        qualifiedName: Swigged.LLVM.LLVM.VerifyModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.VerifyModule
  Swigged.LLVM.LLVM.VerifyFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.VerifyFunction*
        name: VerifyFunction
        nameWithType: LLVM.VerifyFunction
        qualifiedName: Swigged.LLVM.LLVM.VerifyFunction
      VB:
      - id: Swigged.LLVM.LLVM.VerifyFunction*
        name: VerifyFunction
        nameWithType: LLVM.VerifyFunction
        qualifiedName: Swigged.LLVM.LLVM.VerifyFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.VerifyFunction
  Swigged.LLVM.LLVM.ParseBitcode*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ParseBitcode*
        name: ParseBitcode
        nameWithType: LLVM.ParseBitcode
        qualifiedName: Swigged.LLVM.LLVM.ParseBitcode
      VB:
      - id: Swigged.LLVM.LLVM.ParseBitcode*
        name: ParseBitcode
        nameWithType: LLVM.ParseBitcode
        qualifiedName: Swigged.LLVM.LLVM.ParseBitcode
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ParseBitcode
  Swigged.LLVM.LLVM.ParseBitcode2*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ParseBitcode2*
        name: ParseBitcode2
        nameWithType: LLVM.ParseBitcode2
        qualifiedName: Swigged.LLVM.LLVM.ParseBitcode2
      VB:
      - id: Swigged.LLVM.LLVM.ParseBitcode2*
        name: ParseBitcode2
        nameWithType: LLVM.ParseBitcode2
        qualifiedName: Swigged.LLVM.LLVM.ParseBitcode2
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ParseBitcode2
  Swigged.LLVM.LLVM.ParseBitcodeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ParseBitcodeInContext*
        name: ParseBitcodeInContext
        nameWithType: LLVM.ParseBitcodeInContext
        qualifiedName: Swigged.LLVM.LLVM.ParseBitcodeInContext
      VB:
      - id: Swigged.LLVM.LLVM.ParseBitcodeInContext*
        name: ParseBitcodeInContext
        nameWithType: LLVM.ParseBitcodeInContext
        qualifiedName: Swigged.LLVM.LLVM.ParseBitcodeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ParseBitcodeInContext
  Swigged.LLVM.LLVM.ParseBitcodeInContext2*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ParseBitcodeInContext2*
        name: ParseBitcodeInContext2
        nameWithType: LLVM.ParseBitcodeInContext2
        qualifiedName: Swigged.LLVM.LLVM.ParseBitcodeInContext2
      VB:
      - id: Swigged.LLVM.LLVM.ParseBitcodeInContext2*
        name: ParseBitcodeInContext2
        nameWithType: LLVM.ParseBitcodeInContext2
        qualifiedName: Swigged.LLVM.LLVM.ParseBitcodeInContext2
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ParseBitcodeInContext2
  Swigged.LLVM.LLVM.GetBitcodeModuleInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBitcodeModuleInContext*
        name: GetBitcodeModuleInContext
        nameWithType: LLVM.GetBitcodeModuleInContext
        qualifiedName: Swigged.LLVM.LLVM.GetBitcodeModuleInContext
      VB:
      - id: Swigged.LLVM.LLVM.GetBitcodeModuleInContext*
        name: GetBitcodeModuleInContext
        nameWithType: LLVM.GetBitcodeModuleInContext
        qualifiedName: Swigged.LLVM.LLVM.GetBitcodeModuleInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBitcodeModuleInContext
  Swigged.LLVM.LLVM.GetBitcodeModuleInContext2*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBitcodeModuleInContext2*
        name: GetBitcodeModuleInContext2
        nameWithType: LLVM.GetBitcodeModuleInContext2
        qualifiedName: Swigged.LLVM.LLVM.GetBitcodeModuleInContext2
      VB:
      - id: Swigged.LLVM.LLVM.GetBitcodeModuleInContext2*
        name: GetBitcodeModuleInContext2
        nameWithType: LLVM.GetBitcodeModuleInContext2
        qualifiedName: Swigged.LLVM.LLVM.GetBitcodeModuleInContext2
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBitcodeModuleInContext2
  Swigged.LLVM.LLVM.GetBitcodeModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBitcodeModule*
        name: GetBitcodeModule
        nameWithType: LLVM.GetBitcodeModule
        qualifiedName: Swigged.LLVM.LLVM.GetBitcodeModule
      VB:
      - id: Swigged.LLVM.LLVM.GetBitcodeModule*
        name: GetBitcodeModule
        nameWithType: LLVM.GetBitcodeModule
        qualifiedName: Swigged.LLVM.LLVM.GetBitcodeModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBitcodeModule
  Swigged.LLVM.LLVM.GetBitcodeModule2*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetBitcodeModule2*
        name: GetBitcodeModule2
        nameWithType: LLVM.GetBitcodeModule2
        qualifiedName: Swigged.LLVM.LLVM.GetBitcodeModule2
      VB:
      - id: Swigged.LLVM.LLVM.GetBitcodeModule2*
        name: GetBitcodeModule2
        nameWithType: LLVM.GetBitcodeModule2
        qualifiedName: Swigged.LLVM.LLVM.GetBitcodeModule2
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetBitcodeModule2
  Swigged.LLVM.LLVM.WriteBitcodeToFile*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.WriteBitcodeToFile*
        name: WriteBitcodeToFile
        nameWithType: LLVM.WriteBitcodeToFile
        qualifiedName: Swigged.LLVM.LLVM.WriteBitcodeToFile
      VB:
      - id: Swigged.LLVM.LLVM.WriteBitcodeToFile*
        name: WriteBitcodeToFile
        nameWithType: LLVM.WriteBitcodeToFile
        qualifiedName: Swigged.LLVM.LLVM.WriteBitcodeToFile
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.WriteBitcodeToFile
  Swigged.LLVM.LLVM.WriteBitcodeToFD*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.WriteBitcodeToFD*
        name: WriteBitcodeToFD
        nameWithType: LLVM.WriteBitcodeToFD
        qualifiedName: Swigged.LLVM.LLVM.WriteBitcodeToFD
      VB:
      - id: Swigged.LLVM.LLVM.WriteBitcodeToFD*
        name: WriteBitcodeToFD
        nameWithType: LLVM.WriteBitcodeToFD
        qualifiedName: Swigged.LLVM.LLVM.WriteBitcodeToFD
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.WriteBitcodeToFD
  Swigged.LLVM.LLVM.WriteBitcodeToFileHandle*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.WriteBitcodeToFileHandle*
        name: WriteBitcodeToFileHandle
        nameWithType: LLVM.WriteBitcodeToFileHandle
        qualifiedName: Swigged.LLVM.LLVM.WriteBitcodeToFileHandle
      VB:
      - id: Swigged.LLVM.LLVM.WriteBitcodeToFileHandle*
        name: WriteBitcodeToFileHandle
        nameWithType: LLVM.WriteBitcodeToFileHandle
        qualifiedName: Swigged.LLVM.LLVM.WriteBitcodeToFileHandle
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.WriteBitcodeToFileHandle
  Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer*
        name: WriteBitcodeToMemoryBuffer
        nameWithType: LLVM.WriteBitcodeToMemoryBuffer
        qualifiedName: Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer
      VB:
      - id: Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer*
        name: WriteBitcodeToMemoryBuffer
        nameWithType: LLVM.WriteBitcodeToMemoryBuffer
        qualifiedName: Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.WriteBitcodeToMemoryBuffer
  Swigged.LLVM.LLVM.SetDisasmOptions*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetDisasmOptions*
        name: SetDisasmOptions
        nameWithType: LLVM.SetDisasmOptions
        qualifiedName: Swigged.LLVM.LLVM.SetDisasmOptions
      VB:
      - id: Swigged.LLVM.LLVM.SetDisasmOptions*
        name: SetDisasmOptions
        nameWithType: LLVM.SetDisasmOptions
        qualifiedName: Swigged.LLVM.LLVM.SetDisasmOptions
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetDisasmOptions
  Swigged.LLVM.LLVM.DisasmDispose*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisasmDispose*
        name: DisasmDispose
        nameWithType: LLVM.DisasmDispose
        qualifiedName: Swigged.LLVM.LLVM.DisasmDispose
      VB:
      - id: Swigged.LLVM.LLVM.DisasmDispose*
        name: DisasmDispose
        nameWithType: LLVM.DisasmDispose
        qualifiedName: Swigged.LLVM.LLVM.DisasmDispose
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisasmDispose
  Swigged.LLVM.LLVM.ResetFatalErrorHandler*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ResetFatalErrorHandler*
        name: ResetFatalErrorHandler
        nameWithType: LLVM.ResetFatalErrorHandler
        qualifiedName: Swigged.LLVM.LLVM.ResetFatalErrorHandler
      VB:
      - id: Swigged.LLVM.LLVM.ResetFatalErrorHandler*
        name: ResetFatalErrorHandler
        nameWithType: LLVM.ResetFatalErrorHandler
        qualifiedName: Swigged.LLVM.LLVM.ResetFatalErrorHandler
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ResetFatalErrorHandler
  Swigged.LLVM.LLVM.EnablePrettyStackTrace*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.EnablePrettyStackTrace*
        name: EnablePrettyStackTrace
        nameWithType: LLVM.EnablePrettyStackTrace
        qualifiedName: Swigged.LLVM.LLVM.EnablePrettyStackTrace
      VB:
      - id: Swigged.LLVM.LLVM.EnablePrettyStackTrace*
        name: EnablePrettyStackTrace
        nameWithType: LLVM.EnablePrettyStackTrace
        qualifiedName: Swigged.LLVM.LLVM.EnablePrettyStackTrace
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.EnablePrettyStackTrace
  Swigged.LLVM.LLVM.LinkInMCJIT*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.LinkInMCJIT*
        name: LinkInMCJIT
        nameWithType: LLVM.LinkInMCJIT
        qualifiedName: Swigged.LLVM.LLVM.LinkInMCJIT
      VB:
      - id: Swigged.LLVM.LLVM.LinkInMCJIT*
        name: LinkInMCJIT
        nameWithType: LLVM.LinkInMCJIT
        qualifiedName: Swigged.LLVM.LLVM.LinkInMCJIT
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.LinkInMCJIT
  Swigged.LLVM.LLVM.LinkInInterpreter*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.LinkInInterpreter*
        name: LinkInInterpreter
        nameWithType: LLVM.LinkInInterpreter
        qualifiedName: Swigged.LLVM.LLVM.LinkInInterpreter
      VB:
      - id: Swigged.LLVM.LLVM.LinkInInterpreter*
        name: LinkInInterpreter
        nameWithType: LLVM.LinkInInterpreter
        qualifiedName: Swigged.LLVM.LLVM.LinkInInterpreter
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.LinkInInterpreter
  Swigged.LLVM.LLVM.CreateGenericValueOfInt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateGenericValueOfInt*
        name: CreateGenericValueOfInt
        nameWithType: LLVM.CreateGenericValueOfInt
        qualifiedName: Swigged.LLVM.LLVM.CreateGenericValueOfInt
      VB:
      - id: Swigged.LLVM.LLVM.CreateGenericValueOfInt*
        name: CreateGenericValueOfInt
        nameWithType: LLVM.CreateGenericValueOfInt
        qualifiedName: Swigged.LLVM.LLVM.CreateGenericValueOfInt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateGenericValueOfInt
  Swigged.LLVM.LLVM.CreateGenericValueOfPointer*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateGenericValueOfPointer*
        name: CreateGenericValueOfPointer
        nameWithType: LLVM.CreateGenericValueOfPointer
        qualifiedName: Swigged.LLVM.LLVM.CreateGenericValueOfPointer
      VB:
      - id: Swigged.LLVM.LLVM.CreateGenericValueOfPointer*
        name: CreateGenericValueOfPointer
        nameWithType: LLVM.CreateGenericValueOfPointer
        qualifiedName: Swigged.LLVM.LLVM.CreateGenericValueOfPointer
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateGenericValueOfPointer
  Swigged.LLVM.LLVM.CreateGenericValueOfFloat*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateGenericValueOfFloat*
        name: CreateGenericValueOfFloat
        nameWithType: LLVM.CreateGenericValueOfFloat
        qualifiedName: Swigged.LLVM.LLVM.CreateGenericValueOfFloat
      VB:
      - id: Swigged.LLVM.LLVM.CreateGenericValueOfFloat*
        name: CreateGenericValueOfFloat
        nameWithType: LLVM.CreateGenericValueOfFloat
        qualifiedName: Swigged.LLVM.LLVM.CreateGenericValueOfFloat
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateGenericValueOfFloat
  Swigged.LLVM.LLVM.GenericValueIntWidth*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GenericValueIntWidth*
        name: GenericValueIntWidth
        nameWithType: LLVM.GenericValueIntWidth
        qualifiedName: Swigged.LLVM.LLVM.GenericValueIntWidth
      VB:
      - id: Swigged.LLVM.LLVM.GenericValueIntWidth*
        name: GenericValueIntWidth
        nameWithType: LLVM.GenericValueIntWidth
        qualifiedName: Swigged.LLVM.LLVM.GenericValueIntWidth
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GenericValueIntWidth
  Swigged.LLVM.LLVM.GenericValueToInt*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GenericValueToInt*
        name: GenericValueToInt
        nameWithType: LLVM.GenericValueToInt
        qualifiedName: Swigged.LLVM.LLVM.GenericValueToInt
      VB:
      - id: Swigged.LLVM.LLVM.GenericValueToInt*
        name: GenericValueToInt
        nameWithType: LLVM.GenericValueToInt
        qualifiedName: Swigged.LLVM.LLVM.GenericValueToInt
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GenericValueToInt
  Swigged.LLVM.LLVM.GenericValueToPointer*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GenericValueToPointer*
        name: GenericValueToPointer
        nameWithType: LLVM.GenericValueToPointer
        qualifiedName: Swigged.LLVM.LLVM.GenericValueToPointer
      VB:
      - id: Swigged.LLVM.LLVM.GenericValueToPointer*
        name: GenericValueToPointer
        nameWithType: LLVM.GenericValueToPointer
        qualifiedName: Swigged.LLVM.LLVM.GenericValueToPointer
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GenericValueToPointer
  Swigged.LLVM.LLVM.GenericValueToFloat*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GenericValueToFloat*
        name: GenericValueToFloat
        nameWithType: LLVM.GenericValueToFloat
        qualifiedName: Swigged.LLVM.LLVM.GenericValueToFloat
      VB:
      - id: Swigged.LLVM.LLVM.GenericValueToFloat*
        name: GenericValueToFloat
        nameWithType: LLVM.GenericValueToFloat
        qualifiedName: Swigged.LLVM.LLVM.GenericValueToFloat
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GenericValueToFloat
  Swigged.LLVM.LLVM.DisposeGenericValue*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeGenericValue*
        name: DisposeGenericValue
        nameWithType: LLVM.DisposeGenericValue
        qualifiedName: Swigged.LLVM.LLVM.DisposeGenericValue
      VB:
      - id: Swigged.LLVM.LLVM.DisposeGenericValue*
        name: DisposeGenericValue
        nameWithType: LLVM.DisposeGenericValue
        qualifiedName: Swigged.LLVM.LLVM.DisposeGenericValue
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeGenericValue
  Swigged.LLVM.LLVM.CreateExecutionEngineForModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateExecutionEngineForModule*
        name: CreateExecutionEngineForModule
        nameWithType: LLVM.CreateExecutionEngineForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateExecutionEngineForModule
      VB:
      - id: Swigged.LLVM.LLVM.CreateExecutionEngineForModule*
        name: CreateExecutionEngineForModule
        nameWithType: LLVM.CreateExecutionEngineForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateExecutionEngineForModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateExecutionEngineForModule
  Swigged.LLVM.LLVM.CreateInterpreterForModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateInterpreterForModule*
        name: CreateInterpreterForModule
        nameWithType: LLVM.CreateInterpreterForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateInterpreterForModule
      VB:
      - id: Swigged.LLVM.LLVM.CreateInterpreterForModule*
        name: CreateInterpreterForModule
        nameWithType: LLVM.CreateInterpreterForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateInterpreterForModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateInterpreterForModule
  Swigged.LLVM.LLVM.CreateJITCompilerForModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateJITCompilerForModule*
        name: CreateJITCompilerForModule
        nameWithType: LLVM.CreateJITCompilerForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateJITCompilerForModule
      VB:
      - id: Swigged.LLVM.LLVM.CreateJITCompilerForModule*
        name: CreateJITCompilerForModule
        nameWithType: LLVM.CreateJITCompilerForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateJITCompilerForModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateJITCompilerForModule
  Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions*
        name: InitializeMCJITCompilerOptions
        nameWithType: LLVM.InitializeMCJITCompilerOptions
        qualifiedName: Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions
      VB:
      - id: Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions*
        name: InitializeMCJITCompilerOptions
        nameWithType: LLVM.InitializeMCJITCompilerOptions
        qualifiedName: Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeMCJITCompilerOptions
  Swigged.LLVM.LLVM.CreateMCJITCompilerForModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateMCJITCompilerForModule*
        name: CreateMCJITCompilerForModule
        nameWithType: LLVM.CreateMCJITCompilerForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateMCJITCompilerForModule
      VB:
      - id: Swigged.LLVM.LLVM.CreateMCJITCompilerForModule*
        name: CreateMCJITCompilerForModule
        nameWithType: LLVM.CreateMCJITCompilerForModule
        qualifiedName: Swigged.LLVM.LLVM.CreateMCJITCompilerForModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateMCJITCompilerForModule
  Swigged.LLVM.LLVM.DisposeExecutionEngine*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeExecutionEngine*
        name: DisposeExecutionEngine
        nameWithType: LLVM.DisposeExecutionEngine
        qualifiedName: Swigged.LLVM.LLVM.DisposeExecutionEngine
      VB:
      - id: Swigged.LLVM.LLVM.DisposeExecutionEngine*
        name: DisposeExecutionEngine
        nameWithType: LLVM.DisposeExecutionEngine
        qualifiedName: Swigged.LLVM.LLVM.DisposeExecutionEngine
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeExecutionEngine
  Swigged.LLVM.LLVM.RunStaticConstructors*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RunStaticConstructors*
        name: RunStaticConstructors
        nameWithType: LLVM.RunStaticConstructors
        qualifiedName: Swigged.LLVM.LLVM.RunStaticConstructors
      VB:
      - id: Swigged.LLVM.LLVM.RunStaticConstructors*
        name: RunStaticConstructors
        nameWithType: LLVM.RunStaticConstructors
        qualifiedName: Swigged.LLVM.LLVM.RunStaticConstructors
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RunStaticConstructors
  Swigged.LLVM.LLVM.RunStaticDestructors*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RunStaticDestructors*
        name: RunStaticDestructors
        nameWithType: LLVM.RunStaticDestructors
        qualifiedName: Swigged.LLVM.LLVM.RunStaticDestructors
      VB:
      - id: Swigged.LLVM.LLVM.RunStaticDestructors*
        name: RunStaticDestructors
        nameWithType: LLVM.RunStaticDestructors
        qualifiedName: Swigged.LLVM.LLVM.RunStaticDestructors
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RunStaticDestructors
  Swigged.LLVM.LLVM.RunFunctionAsMain*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RunFunctionAsMain*
        name: RunFunctionAsMain
        nameWithType: LLVM.RunFunctionAsMain
        qualifiedName: Swigged.LLVM.LLVM.RunFunctionAsMain
      VB:
      - id: Swigged.LLVM.LLVM.RunFunctionAsMain*
        name: RunFunctionAsMain
        nameWithType: LLVM.RunFunctionAsMain
        qualifiedName: Swigged.LLVM.LLVM.RunFunctionAsMain
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RunFunctionAsMain
  Swigged.LLVM.LLVM.RunFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RunFunction*
        name: RunFunction
        nameWithType: LLVM.RunFunction
        qualifiedName: Swigged.LLVM.LLVM.RunFunction
      VB:
      - id: Swigged.LLVM.LLVM.RunFunction*
        name: RunFunction
        nameWithType: LLVM.RunFunction
        qualifiedName: Swigged.LLVM.LLVM.RunFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RunFunction
  Swigged.LLVM.LLVM.FreeMachineCodeForFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.FreeMachineCodeForFunction*
        name: FreeMachineCodeForFunction
        nameWithType: LLVM.FreeMachineCodeForFunction
        qualifiedName: Swigged.LLVM.LLVM.FreeMachineCodeForFunction
      VB:
      - id: Swigged.LLVM.LLVM.FreeMachineCodeForFunction*
        name: FreeMachineCodeForFunction
        nameWithType: LLVM.FreeMachineCodeForFunction
        qualifiedName: Swigged.LLVM.LLVM.FreeMachineCodeForFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.FreeMachineCodeForFunction
  Swigged.LLVM.LLVM.AddModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddModule*
        name: AddModule
        nameWithType: LLVM.AddModule
        qualifiedName: Swigged.LLVM.LLVM.AddModule
      VB:
      - id: Swigged.LLVM.LLVM.AddModule*
        name: AddModule
        nameWithType: LLVM.AddModule
        qualifiedName: Swigged.LLVM.LLVM.AddModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddModule
  Swigged.LLVM.LLVM.RemoveModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RemoveModule*
        name: RemoveModule
        nameWithType: LLVM.RemoveModule
        qualifiedName: Swigged.LLVM.LLVM.RemoveModule
      VB:
      - id: Swigged.LLVM.LLVM.RemoveModule*
        name: RemoveModule
        nameWithType: LLVM.RemoveModule
        qualifiedName: Swigged.LLVM.LLVM.RemoveModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RemoveModule
  Swigged.LLVM.LLVM.FindFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.FindFunction*
        name: FindFunction
        nameWithType: LLVM.FindFunction
        qualifiedName: Swigged.LLVM.LLVM.FindFunction
      VB:
      - id: Swigged.LLVM.LLVM.FindFunction*
        name: FindFunction
        nameWithType: LLVM.FindFunction
        qualifiedName: Swigged.LLVM.LLVM.FindFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.FindFunction
  Swigged.LLVM.LLVM.RecompileAndRelinkFunction*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.RecompileAndRelinkFunction*
        name: RecompileAndRelinkFunction
        nameWithType: LLVM.RecompileAndRelinkFunction
        qualifiedName: Swigged.LLVM.LLVM.RecompileAndRelinkFunction
      VB:
      - id: Swigged.LLVM.LLVM.RecompileAndRelinkFunction*
        name: RecompileAndRelinkFunction
        nameWithType: LLVM.RecompileAndRelinkFunction
        qualifiedName: Swigged.LLVM.LLVM.RecompileAndRelinkFunction
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.RecompileAndRelinkFunction
  Swigged.LLVM.LLVM.GetExecutionEngineTargetData*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetExecutionEngineTargetData*
        name: GetExecutionEngineTargetData
        nameWithType: LLVM.GetExecutionEngineTargetData
        qualifiedName: Swigged.LLVM.LLVM.GetExecutionEngineTargetData
      VB:
      - id: Swigged.LLVM.LLVM.GetExecutionEngineTargetData*
        name: GetExecutionEngineTargetData
        nameWithType: LLVM.GetExecutionEngineTargetData
        qualifiedName: Swigged.LLVM.LLVM.GetExecutionEngineTargetData
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetExecutionEngineTargetData
  Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine*
        name: GetExecutionEngineTargetMachine
        nameWithType: LLVM.GetExecutionEngineTargetMachine
        qualifiedName: Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine
      VB:
      - id: Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine*
        name: GetExecutionEngineTargetMachine
        nameWithType: LLVM.GetExecutionEngineTargetMachine
        qualifiedName: Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetExecutionEngineTargetMachine
  Swigged.LLVM.LLVM.AddGlobalMapping*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddGlobalMapping*
        name: AddGlobalMapping
        nameWithType: LLVM.AddGlobalMapping
        qualifiedName: Swigged.LLVM.LLVM.AddGlobalMapping
      VB:
      - id: Swigged.LLVM.LLVM.AddGlobalMapping*
        name: AddGlobalMapping
        nameWithType: LLVM.AddGlobalMapping
        qualifiedName: Swigged.LLVM.LLVM.AddGlobalMapping
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddGlobalMapping
  Swigged.LLVM.LLVM.GetPointerToGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetPointerToGlobal*
        name: GetPointerToGlobal
        nameWithType: LLVM.GetPointerToGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetPointerToGlobal
      VB:
      - id: Swigged.LLVM.LLVM.GetPointerToGlobal*
        name: GetPointerToGlobal
        nameWithType: LLVM.GetPointerToGlobal
        qualifiedName: Swigged.LLVM.LLVM.GetPointerToGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetPointerToGlobal
  Swigged.LLVM.LLVM.GetGlobalValueAddress*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetGlobalValueAddress*
        name: GetGlobalValueAddress
        nameWithType: LLVM.GetGlobalValueAddress
        qualifiedName: Swigged.LLVM.LLVM.GetGlobalValueAddress
      VB:
      - id: Swigged.LLVM.LLVM.GetGlobalValueAddress*
        name: GetGlobalValueAddress
        nameWithType: LLVM.GetGlobalValueAddress
        qualifiedName: Swigged.LLVM.LLVM.GetGlobalValueAddress
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetGlobalValueAddress
  Swigged.LLVM.LLVM.GetFunctionAddress*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFunctionAddress*
        name: GetFunctionAddress
        nameWithType: LLVM.GetFunctionAddress
        qualifiedName: Swigged.LLVM.LLVM.GetFunctionAddress
      VB:
      - id: Swigged.LLVM.LLVM.GetFunctionAddress*
        name: GetFunctionAddress
        nameWithType: LLVM.GetFunctionAddress
        qualifiedName: Swigged.LLVM.LLVM.GetFunctionAddress
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFunctionAddress
  Swigged.LLVM.LLVM.DisposeMCJITMemoryManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeMCJITMemoryManager*
        name: DisposeMCJITMemoryManager
        nameWithType: LLVM.DisposeMCJITMemoryManager
        qualifiedName: Swigged.LLVM.LLVM.DisposeMCJITMemoryManager
      VB:
      - id: Swigged.LLVM.LLVM.DisposeMCJITMemoryManager*
        name: DisposeMCJITMemoryManager
        nameWithType: LLVM.DisposeMCJITMemoryManager
        qualifiedName: Swigged.LLVM.LLVM.DisposeMCJITMemoryManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeMCJITMemoryManager
  Swigged.LLVM.LLVM.InitializeTransformUtils*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeTransformUtils*
        name: InitializeTransformUtils
        nameWithType: LLVM.InitializeTransformUtils
        qualifiedName: Swigged.LLVM.LLVM.InitializeTransformUtils
      VB:
      - id: Swigged.LLVM.LLVM.InitializeTransformUtils*
        name: InitializeTransformUtils
        nameWithType: LLVM.InitializeTransformUtils
        qualifiedName: Swigged.LLVM.LLVM.InitializeTransformUtils
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeTransformUtils
  Swigged.LLVM.LLVM.InitializeScalarOpts*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeScalarOpts*
        name: InitializeScalarOpts
        nameWithType: LLVM.InitializeScalarOpts
        qualifiedName: Swigged.LLVM.LLVM.InitializeScalarOpts
      VB:
      - id: Swigged.LLVM.LLVM.InitializeScalarOpts*
        name: InitializeScalarOpts
        nameWithType: LLVM.InitializeScalarOpts
        qualifiedName: Swigged.LLVM.LLVM.InitializeScalarOpts
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeScalarOpts
  Swigged.LLVM.LLVM.InitializeObjCARCOpts*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeObjCARCOpts*
        name: InitializeObjCARCOpts
        nameWithType: LLVM.InitializeObjCARCOpts
        qualifiedName: Swigged.LLVM.LLVM.InitializeObjCARCOpts
      VB:
      - id: Swigged.LLVM.LLVM.InitializeObjCARCOpts*
        name: InitializeObjCARCOpts
        nameWithType: LLVM.InitializeObjCARCOpts
        qualifiedName: Swigged.LLVM.LLVM.InitializeObjCARCOpts
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeObjCARCOpts
  Swigged.LLVM.LLVM.InitializeVectorization*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeVectorization*
        name: InitializeVectorization
        nameWithType: LLVM.InitializeVectorization
        qualifiedName: Swigged.LLVM.LLVM.InitializeVectorization
      VB:
      - id: Swigged.LLVM.LLVM.InitializeVectorization*
        name: InitializeVectorization
        nameWithType: LLVM.InitializeVectorization
        qualifiedName: Swigged.LLVM.LLVM.InitializeVectorization
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeVectorization
  Swigged.LLVM.LLVM.InitializeInstCombine*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeInstCombine*
        name: InitializeInstCombine
        nameWithType: LLVM.InitializeInstCombine
        qualifiedName: Swigged.LLVM.LLVM.InitializeInstCombine
      VB:
      - id: Swigged.LLVM.LLVM.InitializeInstCombine*
        name: InitializeInstCombine
        nameWithType: LLVM.InitializeInstCombine
        qualifiedName: Swigged.LLVM.LLVM.InitializeInstCombine
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeInstCombine
  Swigged.LLVM.LLVM.InitializeIPO*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeIPO*
        name: InitializeIPO
        nameWithType: LLVM.InitializeIPO
        qualifiedName: Swigged.LLVM.LLVM.InitializeIPO
      VB:
      - id: Swigged.LLVM.LLVM.InitializeIPO*
        name: InitializeIPO
        nameWithType: LLVM.InitializeIPO
        qualifiedName: Swigged.LLVM.LLVM.InitializeIPO
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeIPO
  Swigged.LLVM.LLVM.InitializeInstrumentation*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeInstrumentation*
        name: InitializeInstrumentation
        nameWithType: LLVM.InitializeInstrumentation
        qualifiedName: Swigged.LLVM.LLVM.InitializeInstrumentation
      VB:
      - id: Swigged.LLVM.LLVM.InitializeInstrumentation*
        name: InitializeInstrumentation
        nameWithType: LLVM.InitializeInstrumentation
        qualifiedName: Swigged.LLVM.LLVM.InitializeInstrumentation
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeInstrumentation
  Swigged.LLVM.LLVM.InitializeAnalysis*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeAnalysis*
        name: InitializeAnalysis
        nameWithType: LLVM.InitializeAnalysis
        qualifiedName: Swigged.LLVM.LLVM.InitializeAnalysis
      VB:
      - id: Swigged.LLVM.LLVM.InitializeAnalysis*
        name: InitializeAnalysis
        nameWithType: LLVM.InitializeAnalysis
        qualifiedName: Swigged.LLVM.LLVM.InitializeAnalysis
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeAnalysis
  Swigged.LLVM.LLVM.InitializeIPA*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeIPA*
        name: InitializeIPA
        nameWithType: LLVM.InitializeIPA
        qualifiedName: Swigged.LLVM.LLVM.InitializeIPA
      VB:
      - id: Swigged.LLVM.LLVM.InitializeIPA*
        name: InitializeIPA
        nameWithType: LLVM.InitializeIPA
        qualifiedName: Swigged.LLVM.LLVM.InitializeIPA
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeIPA
  Swigged.LLVM.LLVM.InitializeCodeGen*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeCodeGen*
        name: InitializeCodeGen
        nameWithType: LLVM.InitializeCodeGen
        qualifiedName: Swigged.LLVM.LLVM.InitializeCodeGen
      VB:
      - id: Swigged.LLVM.LLVM.InitializeCodeGen*
        name: InitializeCodeGen
        nameWithType: LLVM.InitializeCodeGen
        qualifiedName: Swigged.LLVM.LLVM.InitializeCodeGen
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeCodeGen
  Swigged.LLVM.LLVM.InitializeTarget*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeTarget*
        name: InitializeTarget
        nameWithType: LLVM.InitializeTarget
        qualifiedName: Swigged.LLVM.LLVM.InitializeTarget
      VB:
      - id: Swigged.LLVM.LLVM.InitializeTarget*
        name: InitializeTarget
        nameWithType: LLVM.InitializeTarget
        qualifiedName: Swigged.LLVM.LLVM.InitializeTarget
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeTarget
  Swigged.LLVM.LLVM.ParseIRInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ParseIRInContext*
        name: ParseIRInContext
        nameWithType: LLVM.ParseIRInContext
        qualifiedName: Swigged.LLVM.LLVM.ParseIRInContext
      VB:
      - id: Swigged.LLVM.LLVM.ParseIRInContext*
        name: ParseIRInContext
        nameWithType: LLVM.ParseIRInContext
        qualifiedName: Swigged.LLVM.LLVM.ParseIRInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ParseIRInContext
  Swigged.LLVM.LLVM.LinkModules2*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.LinkModules2*
        name: LinkModules2
        nameWithType: LLVM.LinkModules2
        qualifiedName: Swigged.LLVM.LLVM.LinkModules2
      VB:
      - id: Swigged.LLVM.LLVM.LinkModules2*
        name: LinkModules2
        nameWithType: LLVM.LinkModules2
        qualifiedName: Swigged.LLVM.LLVM.LinkModules2
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.LinkModules2
  Swigged.LLVM.LLVM.OrcCreateInstance*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcCreateInstance*
        name: OrcCreateInstance
        nameWithType: LLVM.OrcCreateInstance
        qualifiedName: Swigged.LLVM.LLVM.OrcCreateInstance
      VB:
      - id: Swigged.LLVM.LLVM.OrcCreateInstance*
        name: OrcCreateInstance
        nameWithType: LLVM.OrcCreateInstance
        qualifiedName: Swigged.LLVM.LLVM.OrcCreateInstance
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcCreateInstance
  Swigged.LLVM.LLVM.OrcGetErrorMsg*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcGetErrorMsg*
        name: OrcGetErrorMsg
        nameWithType: LLVM.OrcGetErrorMsg
        qualifiedName: Swigged.LLVM.LLVM.OrcGetErrorMsg
      VB:
      - id: Swigged.LLVM.LLVM.OrcGetErrorMsg*
        name: OrcGetErrorMsg
        nameWithType: LLVM.OrcGetErrorMsg
        qualifiedName: Swigged.LLVM.LLVM.OrcGetErrorMsg
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcGetErrorMsg
  Swigged.LLVM.LLVM.OrcGetMangledSymbol*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcGetMangledSymbol*
        name: OrcGetMangledSymbol
        nameWithType: LLVM.OrcGetMangledSymbol
        qualifiedName: Swigged.LLVM.LLVM.OrcGetMangledSymbol
      VB:
      - id: Swigged.LLVM.LLVM.OrcGetMangledSymbol*
        name: OrcGetMangledSymbol
        nameWithType: LLVM.OrcGetMangledSymbol
        qualifiedName: Swigged.LLVM.LLVM.OrcGetMangledSymbol
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcGetMangledSymbol
  Swigged.LLVM.LLVM.OrcDisposeMangledSymbol*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcDisposeMangledSymbol*
        name: OrcDisposeMangledSymbol
        nameWithType: LLVM.OrcDisposeMangledSymbol
        qualifiedName: Swigged.LLVM.LLVM.OrcDisposeMangledSymbol
      VB:
      - id: Swigged.LLVM.LLVM.OrcDisposeMangledSymbol*
        name: OrcDisposeMangledSymbol
        nameWithType: LLVM.OrcDisposeMangledSymbol
        qualifiedName: Swigged.LLVM.LLVM.OrcDisposeMangledSymbol
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcDisposeMangledSymbol
  Swigged.LLVM.LLVM.OrcCreateIndirectStub*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcCreateIndirectStub*
        name: OrcCreateIndirectStub
        nameWithType: LLVM.OrcCreateIndirectStub
        qualifiedName: Swigged.LLVM.LLVM.OrcCreateIndirectStub
      VB:
      - id: Swigged.LLVM.LLVM.OrcCreateIndirectStub*
        name: OrcCreateIndirectStub
        nameWithType: LLVM.OrcCreateIndirectStub
        qualifiedName: Swigged.LLVM.LLVM.OrcCreateIndirectStub
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcCreateIndirectStub
  Swigged.LLVM.LLVM.OrcSetIndirectStubPointer*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcSetIndirectStubPointer*
        name: OrcSetIndirectStubPointer
        nameWithType: LLVM.OrcSetIndirectStubPointer
        qualifiedName: Swigged.LLVM.LLVM.OrcSetIndirectStubPointer
      VB:
      - id: Swigged.LLVM.LLVM.OrcSetIndirectStubPointer*
        name: OrcSetIndirectStubPointer
        nameWithType: LLVM.OrcSetIndirectStubPointer
        qualifiedName: Swigged.LLVM.LLVM.OrcSetIndirectStubPointer
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcSetIndirectStubPointer
  Swigged.LLVM.LLVM.OrcRemoveModule*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcRemoveModule*
        name: OrcRemoveModule
        nameWithType: LLVM.OrcRemoveModule
        qualifiedName: Swigged.LLVM.LLVM.OrcRemoveModule
      VB:
      - id: Swigged.LLVM.LLVM.OrcRemoveModule*
        name: OrcRemoveModule
        nameWithType: LLVM.OrcRemoveModule
        qualifiedName: Swigged.LLVM.LLVM.OrcRemoveModule
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcRemoveModule
  Swigged.LLVM.LLVM.OrcGetSymbolAddress*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcGetSymbolAddress*
        name: OrcGetSymbolAddress
        nameWithType: LLVM.OrcGetSymbolAddress
        qualifiedName: Swigged.LLVM.LLVM.OrcGetSymbolAddress
      VB:
      - id: Swigged.LLVM.LLVM.OrcGetSymbolAddress*
        name: OrcGetSymbolAddress
        nameWithType: LLVM.OrcGetSymbolAddress
        qualifiedName: Swigged.LLVM.LLVM.OrcGetSymbolAddress
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcGetSymbolAddress
  Swigged.LLVM.LLVM.OrcDisposeInstance*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OrcDisposeInstance*
        name: OrcDisposeInstance
        nameWithType: LLVM.OrcDisposeInstance
        qualifiedName: Swigged.LLVM.LLVM.OrcDisposeInstance
      VB:
      - id: Swigged.LLVM.LLVM.OrcDisposeInstance*
        name: OrcDisposeInstance
        nameWithType: LLVM.OrcDisposeInstance
        qualifiedName: Swigged.LLVM.LLVM.OrcDisposeInstance
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OrcDisposeInstance
  Swigged.LLVM.LLVM.LoadLibraryPermanently*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.LoadLibraryPermanently*
        name: LoadLibraryPermanently
        nameWithType: LLVM.LoadLibraryPermanently
        qualifiedName: Swigged.LLVM.LLVM.LoadLibraryPermanently
      VB:
      - id: Swigged.LLVM.LLVM.LoadLibraryPermanently*
        name: LoadLibraryPermanently
        nameWithType: LLVM.LoadLibraryPermanently
        qualifiedName: Swigged.LLVM.LLVM.LoadLibraryPermanently
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.LoadLibraryPermanently
  Swigged.LLVM.LLVM.ParseCommandLineOptions*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ParseCommandLineOptions*
        name: ParseCommandLineOptions
        nameWithType: LLVM.ParseCommandLineOptions
        qualifiedName: Swigged.LLVM.LLVM.ParseCommandLineOptions
      VB:
      - id: Swigged.LLVM.LLVM.ParseCommandLineOptions*
        name: ParseCommandLineOptions
        nameWithType: LLVM.ParseCommandLineOptions
        qualifiedName: Swigged.LLVM.LLVM.ParseCommandLineOptions
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ParseCommandLineOptions
  Swigged.LLVM.LLVM.SearchForAddressOfSymbol*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SearchForAddressOfSymbol*
        name: SearchForAddressOfSymbol
        nameWithType: LLVM.SearchForAddressOfSymbol
        qualifiedName: Swigged.LLVM.LLVM.SearchForAddressOfSymbol
      VB:
      - id: Swigged.LLVM.LLVM.SearchForAddressOfSymbol*
        name: SearchForAddressOfSymbol
        nameWithType: LLVM.SearchForAddressOfSymbol
        qualifiedName: Swigged.LLVM.LLVM.SearchForAddressOfSymbol
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SearchForAddressOfSymbol
  Swigged.LLVM.LLVM.AddSymbol*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddSymbol*
        name: AddSymbol
        nameWithType: LLVM.AddSymbol
        qualifiedName: Swigged.LLVM.LLVM.AddSymbol
      VB:
      - id: Swigged.LLVM.LLVM.AddSymbol*
        name: AddSymbol
        nameWithType: LLVM.AddSymbol
        qualifiedName: Swigged.LLVM.LLVM.AddSymbol
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddSymbol
  Swigged.LLVM.LLVM.InitializeAllTargetInfos*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeAllTargetInfos*
        name: InitializeAllTargetInfos
        nameWithType: LLVM.InitializeAllTargetInfos
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllTargetInfos
      VB:
      - id: Swigged.LLVM.LLVM.InitializeAllTargetInfos*
        name: InitializeAllTargetInfos
        nameWithType: LLVM.InitializeAllTargetInfos
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllTargetInfos
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeAllTargetInfos
  Swigged.LLVM.LLVM.InitializeAllTargets*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeAllTargets*
        name: InitializeAllTargets
        nameWithType: LLVM.InitializeAllTargets
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllTargets
      VB:
      - id: Swigged.LLVM.LLVM.InitializeAllTargets*
        name: InitializeAllTargets
        nameWithType: LLVM.InitializeAllTargets
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllTargets
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeAllTargets
  Swigged.LLVM.LLVM.InitializeAllTargetMCs*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeAllTargetMCs*
        name: InitializeAllTargetMCs
        nameWithType: LLVM.InitializeAllTargetMCs
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllTargetMCs
      VB:
      - id: Swigged.LLVM.LLVM.InitializeAllTargetMCs*
        name: InitializeAllTargetMCs
        nameWithType: LLVM.InitializeAllTargetMCs
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllTargetMCs
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeAllTargetMCs
  Swigged.LLVM.LLVM.InitializeAllAsmPrinters*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeAllAsmPrinters*
        name: InitializeAllAsmPrinters
        nameWithType: LLVM.InitializeAllAsmPrinters
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllAsmPrinters
      VB:
      - id: Swigged.LLVM.LLVM.InitializeAllAsmPrinters*
        name: InitializeAllAsmPrinters
        nameWithType: LLVM.InitializeAllAsmPrinters
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllAsmPrinters
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeAllAsmPrinters
  Swigged.LLVM.LLVM.InitializeAllAsmParsers*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeAllAsmParsers*
        name: InitializeAllAsmParsers
        nameWithType: LLVM.InitializeAllAsmParsers
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllAsmParsers
      VB:
      - id: Swigged.LLVM.LLVM.InitializeAllAsmParsers*
        name: InitializeAllAsmParsers
        nameWithType: LLVM.InitializeAllAsmParsers
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllAsmParsers
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeAllAsmParsers
  Swigged.LLVM.LLVM.InitializeAllDisassemblers*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeAllDisassemblers*
        name: InitializeAllDisassemblers
        nameWithType: LLVM.InitializeAllDisassemblers
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllDisassemblers
      VB:
      - id: Swigged.LLVM.LLVM.InitializeAllDisassemblers*
        name: InitializeAllDisassemblers
        nameWithType: LLVM.InitializeAllDisassemblers
        qualifiedName: Swigged.LLVM.LLVM.InitializeAllDisassemblers
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeAllDisassemblers
  Swigged.LLVM.LLVM.InitializeNativeTarget*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeNativeTarget*
        name: InitializeNativeTarget
        nameWithType: LLVM.InitializeNativeTarget
        qualifiedName: Swigged.LLVM.LLVM.InitializeNativeTarget
      VB:
      - id: Swigged.LLVM.LLVM.InitializeNativeTarget*
        name: InitializeNativeTarget
        nameWithType: LLVM.InitializeNativeTarget
        qualifiedName: Swigged.LLVM.LLVM.InitializeNativeTarget
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeNativeTarget
  Swigged.LLVM.LLVM.InitializeNativeAsmParser*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeNativeAsmParser*
        name: InitializeNativeAsmParser
        nameWithType: LLVM.InitializeNativeAsmParser
        qualifiedName: Swigged.LLVM.LLVM.InitializeNativeAsmParser
      VB:
      - id: Swigged.LLVM.LLVM.InitializeNativeAsmParser*
        name: InitializeNativeAsmParser
        nameWithType: LLVM.InitializeNativeAsmParser
        qualifiedName: Swigged.LLVM.LLVM.InitializeNativeAsmParser
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeNativeAsmParser
  Swigged.LLVM.LLVM.InitializeNativeAsmPrinter*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeNativeAsmPrinter*
        name: InitializeNativeAsmPrinter
        nameWithType: LLVM.InitializeNativeAsmPrinter
        qualifiedName: Swigged.LLVM.LLVM.InitializeNativeAsmPrinter
      VB:
      - id: Swigged.LLVM.LLVM.InitializeNativeAsmPrinter*
        name: InitializeNativeAsmPrinter
        nameWithType: LLVM.InitializeNativeAsmPrinter
        qualifiedName: Swigged.LLVM.LLVM.InitializeNativeAsmPrinter
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeNativeAsmPrinter
  Swigged.LLVM.LLVM.InitializeNativeDisassembler*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.InitializeNativeDisassembler*
        name: InitializeNativeDisassembler
        nameWithType: LLVM.InitializeNativeDisassembler
        qualifiedName: Swigged.LLVM.LLVM.InitializeNativeDisassembler
      VB:
      - id: Swigged.LLVM.LLVM.InitializeNativeDisassembler*
        name: InitializeNativeDisassembler
        nameWithType: LLVM.InitializeNativeDisassembler
        qualifiedName: Swigged.LLVM.LLVM.InitializeNativeDisassembler
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.InitializeNativeDisassembler
  Swigged.LLVM.LLVM.GetModuleDataLayout*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetModuleDataLayout*
        name: GetModuleDataLayout
        nameWithType: LLVM.GetModuleDataLayout
        qualifiedName: Swigged.LLVM.LLVM.GetModuleDataLayout
      VB:
      - id: Swigged.LLVM.LLVM.GetModuleDataLayout*
        name: GetModuleDataLayout
        nameWithType: LLVM.GetModuleDataLayout
        qualifiedName: Swigged.LLVM.LLVM.GetModuleDataLayout
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetModuleDataLayout
  Swigged.LLVM.LLVM.SetModuleDataLayout*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetModuleDataLayout*
        name: SetModuleDataLayout
        nameWithType: LLVM.SetModuleDataLayout
        qualifiedName: Swigged.LLVM.LLVM.SetModuleDataLayout
      VB:
      - id: Swigged.LLVM.LLVM.SetModuleDataLayout*
        name: SetModuleDataLayout
        nameWithType: LLVM.SetModuleDataLayout
        qualifiedName: Swigged.LLVM.LLVM.SetModuleDataLayout
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetModuleDataLayout
  Swigged.LLVM.LLVM.CreateTargetData*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateTargetData*
        name: CreateTargetData
        nameWithType: LLVM.CreateTargetData
        qualifiedName: Swigged.LLVM.LLVM.CreateTargetData
      VB:
      - id: Swigged.LLVM.LLVM.CreateTargetData*
        name: CreateTargetData
        nameWithType: LLVM.CreateTargetData
        qualifiedName: Swigged.LLVM.LLVM.CreateTargetData
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateTargetData
  Swigged.LLVM.LLVM.DisposeTargetData*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeTargetData*
        name: DisposeTargetData
        nameWithType: LLVM.DisposeTargetData
        qualifiedName: Swigged.LLVM.LLVM.DisposeTargetData
      VB:
      - id: Swigged.LLVM.LLVM.DisposeTargetData*
        name: DisposeTargetData
        nameWithType: LLVM.DisposeTargetData
        qualifiedName: Swigged.LLVM.LLVM.DisposeTargetData
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeTargetData
  Swigged.LLVM.LLVM.AddTargetLibraryInfo*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddTargetLibraryInfo*
        name: AddTargetLibraryInfo
        nameWithType: LLVM.AddTargetLibraryInfo
        qualifiedName: Swigged.LLVM.LLVM.AddTargetLibraryInfo
      VB:
      - id: Swigged.LLVM.LLVM.AddTargetLibraryInfo*
        name: AddTargetLibraryInfo
        nameWithType: LLVM.AddTargetLibraryInfo
        qualifiedName: Swigged.LLVM.LLVM.AddTargetLibraryInfo
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddTargetLibraryInfo
  Swigged.LLVM.LLVM.CopyStringRepOfTargetData*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CopyStringRepOfTargetData*
        name: CopyStringRepOfTargetData
        nameWithType: LLVM.CopyStringRepOfTargetData
        qualifiedName: Swigged.LLVM.LLVM.CopyStringRepOfTargetData
      VB:
      - id: Swigged.LLVM.LLVM.CopyStringRepOfTargetData*
        name: CopyStringRepOfTargetData
        nameWithType: LLVM.CopyStringRepOfTargetData
        qualifiedName: Swigged.LLVM.LLVM.CopyStringRepOfTargetData
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CopyStringRepOfTargetData
  Swigged.LLVM.LLVM.ByteOrder*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ByteOrder*
        name: ByteOrder
        nameWithType: LLVM.ByteOrder
        qualifiedName: Swigged.LLVM.LLVM.ByteOrder
      VB:
      - id: Swigged.LLVM.LLVM.ByteOrder*
        name: ByteOrder
        nameWithType: LLVM.ByteOrder
        qualifiedName: Swigged.LLVM.LLVM.ByteOrder
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ByteOrder
  Swigged.LLVM.LLVM.PointerSize*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PointerSize*
        name: PointerSize
        nameWithType: LLVM.PointerSize
        qualifiedName: Swigged.LLVM.LLVM.PointerSize
      VB:
      - id: Swigged.LLVM.LLVM.PointerSize*
        name: PointerSize
        nameWithType: LLVM.PointerSize
        qualifiedName: Swigged.LLVM.LLVM.PointerSize
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PointerSize
  Swigged.LLVM.LLVM.PointerSizeForAS*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PointerSizeForAS*
        name: PointerSizeForAS
        nameWithType: LLVM.PointerSizeForAS
        qualifiedName: Swigged.LLVM.LLVM.PointerSizeForAS
      VB:
      - id: Swigged.LLVM.LLVM.PointerSizeForAS*
        name: PointerSizeForAS
        nameWithType: LLVM.PointerSizeForAS
        qualifiedName: Swigged.LLVM.LLVM.PointerSizeForAS
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PointerSizeForAS
  Swigged.LLVM.LLVM.IntPtrType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IntPtrType*
        name: IntPtrType
        nameWithType: LLVM.IntPtrType
        qualifiedName: Swigged.LLVM.LLVM.IntPtrType
      VB:
      - id: Swigged.LLVM.LLVM.IntPtrType*
        name: IntPtrType
        nameWithType: LLVM.IntPtrType
        qualifiedName: Swigged.LLVM.LLVM.IntPtrType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IntPtrType
  Swigged.LLVM.LLVM.IntPtrTypeForAS*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IntPtrTypeForAS*
        name: IntPtrTypeForAS
        nameWithType: LLVM.IntPtrTypeForAS
        qualifiedName: Swigged.LLVM.LLVM.IntPtrTypeForAS
      VB:
      - id: Swigged.LLVM.LLVM.IntPtrTypeForAS*
        name: IntPtrTypeForAS
        nameWithType: LLVM.IntPtrTypeForAS
        qualifiedName: Swigged.LLVM.LLVM.IntPtrTypeForAS
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IntPtrTypeForAS
  Swigged.LLVM.LLVM.IntPtrTypeInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IntPtrTypeInContext*
        name: IntPtrTypeInContext
        nameWithType: LLVM.IntPtrTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.IntPtrTypeInContext
      VB:
      - id: Swigged.LLVM.LLVM.IntPtrTypeInContext*
        name: IntPtrTypeInContext
        nameWithType: LLVM.IntPtrTypeInContext
        qualifiedName: Swigged.LLVM.LLVM.IntPtrTypeInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IntPtrTypeInContext
  Swigged.LLVM.LLVM.IntPtrTypeForASInContext*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.IntPtrTypeForASInContext*
        name: IntPtrTypeForASInContext
        nameWithType: LLVM.IntPtrTypeForASInContext
        qualifiedName: Swigged.LLVM.LLVM.IntPtrTypeForASInContext
      VB:
      - id: Swigged.LLVM.LLVM.IntPtrTypeForASInContext*
        name: IntPtrTypeForASInContext
        nameWithType: LLVM.IntPtrTypeForASInContext
        qualifiedName: Swigged.LLVM.LLVM.IntPtrTypeForASInContext
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.IntPtrTypeForASInContext
  Swigged.LLVM.LLVM.SizeOfTypeInBits*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SizeOfTypeInBits*
        name: SizeOfTypeInBits
        nameWithType: LLVM.SizeOfTypeInBits
        qualifiedName: Swigged.LLVM.LLVM.SizeOfTypeInBits
      VB:
      - id: Swigged.LLVM.LLVM.SizeOfTypeInBits*
        name: SizeOfTypeInBits
        nameWithType: LLVM.SizeOfTypeInBits
        qualifiedName: Swigged.LLVM.LLVM.SizeOfTypeInBits
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SizeOfTypeInBits
  Swigged.LLVM.LLVM.StoreSizeOfType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.StoreSizeOfType*
        name: StoreSizeOfType
        nameWithType: LLVM.StoreSizeOfType
        qualifiedName: Swigged.LLVM.LLVM.StoreSizeOfType
      VB:
      - id: Swigged.LLVM.LLVM.StoreSizeOfType*
        name: StoreSizeOfType
        nameWithType: LLVM.StoreSizeOfType
        qualifiedName: Swigged.LLVM.LLVM.StoreSizeOfType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.StoreSizeOfType
  Swigged.LLVM.LLVM.ABISizeOfType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ABISizeOfType*
        name: ABISizeOfType
        nameWithType: LLVM.ABISizeOfType
        qualifiedName: Swigged.LLVM.LLVM.ABISizeOfType
      VB:
      - id: Swigged.LLVM.LLVM.ABISizeOfType*
        name: ABISizeOfType
        nameWithType: LLVM.ABISizeOfType
        qualifiedName: Swigged.LLVM.LLVM.ABISizeOfType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ABISizeOfType
  Swigged.LLVM.LLVM.ABIAlignmentOfType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ABIAlignmentOfType*
        name: ABIAlignmentOfType
        nameWithType: LLVM.ABIAlignmentOfType
        qualifiedName: Swigged.LLVM.LLVM.ABIAlignmentOfType
      VB:
      - id: Swigged.LLVM.LLVM.ABIAlignmentOfType*
        name: ABIAlignmentOfType
        nameWithType: LLVM.ABIAlignmentOfType
        qualifiedName: Swigged.LLVM.LLVM.ABIAlignmentOfType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ABIAlignmentOfType
  Swigged.LLVM.LLVM.CallFrameAlignmentOfType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CallFrameAlignmentOfType*
        name: CallFrameAlignmentOfType
        nameWithType: LLVM.CallFrameAlignmentOfType
        qualifiedName: Swigged.LLVM.LLVM.CallFrameAlignmentOfType
      VB:
      - id: Swigged.LLVM.LLVM.CallFrameAlignmentOfType*
        name: CallFrameAlignmentOfType
        nameWithType: LLVM.CallFrameAlignmentOfType
        qualifiedName: Swigged.LLVM.LLVM.CallFrameAlignmentOfType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CallFrameAlignmentOfType
  Swigged.LLVM.LLVM.PreferredAlignmentOfType*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PreferredAlignmentOfType*
        name: PreferredAlignmentOfType
        nameWithType: LLVM.PreferredAlignmentOfType
        qualifiedName: Swigged.LLVM.LLVM.PreferredAlignmentOfType
      VB:
      - id: Swigged.LLVM.LLVM.PreferredAlignmentOfType*
        name: PreferredAlignmentOfType
        nameWithType: LLVM.PreferredAlignmentOfType
        qualifiedName: Swigged.LLVM.LLVM.PreferredAlignmentOfType
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PreferredAlignmentOfType
  Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal*
        name: PreferredAlignmentOfGlobal
        nameWithType: LLVM.PreferredAlignmentOfGlobal
        qualifiedName: Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal
      VB:
      - id: Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal*
        name: PreferredAlignmentOfGlobal
        nameWithType: LLVM.PreferredAlignmentOfGlobal
        qualifiedName: Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PreferredAlignmentOfGlobal
  Swigged.LLVM.LLVM.ElementAtOffset*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.ElementAtOffset*
        name: ElementAtOffset
        nameWithType: LLVM.ElementAtOffset
        qualifiedName: Swigged.LLVM.LLVM.ElementAtOffset
      VB:
      - id: Swigged.LLVM.LLVM.ElementAtOffset*
        name: ElementAtOffset
        nameWithType: LLVM.ElementAtOffset
        qualifiedName: Swigged.LLVM.LLVM.ElementAtOffset
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.ElementAtOffset
  Swigged.LLVM.LLVM.OffsetOfElement*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.OffsetOfElement*
        name: OffsetOfElement
        nameWithType: LLVM.OffsetOfElement
        qualifiedName: Swigged.LLVM.LLVM.OffsetOfElement
      VB:
      - id: Swigged.LLVM.LLVM.OffsetOfElement*
        name: OffsetOfElement
        nameWithType: LLVM.OffsetOfElement
        qualifiedName: Swigged.LLVM.LLVM.OffsetOfElement
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.OffsetOfElement
  Swigged.LLVM.LLVM.GetFirstTarget*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetFirstTarget*
        name: GetFirstTarget
        nameWithType: LLVM.GetFirstTarget
        qualifiedName: Swigged.LLVM.LLVM.GetFirstTarget
      VB:
      - id: Swigged.LLVM.LLVM.GetFirstTarget*
        name: GetFirstTarget
        nameWithType: LLVM.GetFirstTarget
        qualifiedName: Swigged.LLVM.LLVM.GetFirstTarget
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetFirstTarget
  Swigged.LLVM.LLVM.GetNextTarget*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetNextTarget*
        name: GetNextTarget
        nameWithType: LLVM.GetNextTarget
        qualifiedName: Swigged.LLVM.LLVM.GetNextTarget
      VB:
      - id: Swigged.LLVM.LLVM.GetNextTarget*
        name: GetNextTarget
        nameWithType: LLVM.GetNextTarget
        qualifiedName: Swigged.LLVM.LLVM.GetNextTarget
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetNextTarget
  Swigged.LLVM.LLVM.GetTargetFromName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTargetFromName*
        name: GetTargetFromName
        nameWithType: LLVM.GetTargetFromName
        qualifiedName: Swigged.LLVM.LLVM.GetTargetFromName
      VB:
      - id: Swigged.LLVM.LLVM.GetTargetFromName*
        name: GetTargetFromName
        nameWithType: LLVM.GetTargetFromName
        qualifiedName: Swigged.LLVM.LLVM.GetTargetFromName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTargetFromName
  Swigged.LLVM.LLVM.GetTargetFromTriple*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTargetFromTriple*
        name: GetTargetFromTriple
        nameWithType: LLVM.GetTargetFromTriple
        qualifiedName: Swigged.LLVM.LLVM.GetTargetFromTriple
      VB:
      - id: Swigged.LLVM.LLVM.GetTargetFromTriple*
        name: GetTargetFromTriple
        nameWithType: LLVM.GetTargetFromTriple
        qualifiedName: Swigged.LLVM.LLVM.GetTargetFromTriple
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTargetFromTriple
  Swigged.LLVM.LLVM.GetTargetName*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTargetName*
        name: GetTargetName
        nameWithType: LLVM.GetTargetName
        qualifiedName: Swigged.LLVM.LLVM.GetTargetName
      VB:
      - id: Swigged.LLVM.LLVM.GetTargetName*
        name: GetTargetName
        nameWithType: LLVM.GetTargetName
        qualifiedName: Swigged.LLVM.LLVM.GetTargetName
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTargetName
  Swigged.LLVM.LLVM.GetTargetDescription*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTargetDescription*
        name: GetTargetDescription
        nameWithType: LLVM.GetTargetDescription
        qualifiedName: Swigged.LLVM.LLVM.GetTargetDescription
      VB:
      - id: Swigged.LLVM.LLVM.GetTargetDescription*
        name: GetTargetDescription
        nameWithType: LLVM.GetTargetDescription
        qualifiedName: Swigged.LLVM.LLVM.GetTargetDescription
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTargetDescription
  Swigged.LLVM.LLVM.TargetHasJIT*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.TargetHasJIT*
        name: TargetHasJIT
        nameWithType: LLVM.TargetHasJIT
        qualifiedName: Swigged.LLVM.LLVM.TargetHasJIT
      VB:
      - id: Swigged.LLVM.LLVM.TargetHasJIT*
        name: TargetHasJIT
        nameWithType: LLVM.TargetHasJIT
        qualifiedName: Swigged.LLVM.LLVM.TargetHasJIT
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.TargetHasJIT
  Swigged.LLVM.LLVM.TargetHasTargetMachine*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.TargetHasTargetMachine*
        name: TargetHasTargetMachine
        nameWithType: LLVM.TargetHasTargetMachine
        qualifiedName: Swigged.LLVM.LLVM.TargetHasTargetMachine
      VB:
      - id: Swigged.LLVM.LLVM.TargetHasTargetMachine*
        name: TargetHasTargetMachine
        nameWithType: LLVM.TargetHasTargetMachine
        qualifiedName: Swigged.LLVM.LLVM.TargetHasTargetMachine
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.TargetHasTargetMachine
  Swigged.LLVM.LLVM.TargetHasAsmBackend*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.TargetHasAsmBackend*
        name: TargetHasAsmBackend
        nameWithType: LLVM.TargetHasAsmBackend
        qualifiedName: Swigged.LLVM.LLVM.TargetHasAsmBackend
      VB:
      - id: Swigged.LLVM.LLVM.TargetHasAsmBackend*
        name: TargetHasAsmBackend
        nameWithType: LLVM.TargetHasAsmBackend
        qualifiedName: Swigged.LLVM.LLVM.TargetHasAsmBackend
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.TargetHasAsmBackend
  Swigged.LLVM.LLVM.CreateTargetMachine*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateTargetMachine*
        name: CreateTargetMachine
        nameWithType: LLVM.CreateTargetMachine
        qualifiedName: Swigged.LLVM.LLVM.CreateTargetMachine
      VB:
      - id: Swigged.LLVM.LLVM.CreateTargetMachine*
        name: CreateTargetMachine
        nameWithType: LLVM.CreateTargetMachine
        qualifiedName: Swigged.LLVM.LLVM.CreateTargetMachine
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateTargetMachine
  Swigged.LLVM.LLVM.DisposeTargetMachine*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.DisposeTargetMachine*
        name: DisposeTargetMachine
        nameWithType: LLVM.DisposeTargetMachine
        qualifiedName: Swigged.LLVM.LLVM.DisposeTargetMachine
      VB:
      - id: Swigged.LLVM.LLVM.DisposeTargetMachine*
        name: DisposeTargetMachine
        nameWithType: LLVM.DisposeTargetMachine
        qualifiedName: Swigged.LLVM.LLVM.DisposeTargetMachine
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.DisposeTargetMachine
  Swigged.LLVM.LLVM.GetTargetMachineTarget*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTargetMachineTarget*
        name: GetTargetMachineTarget
        nameWithType: LLVM.GetTargetMachineTarget
        qualifiedName: Swigged.LLVM.LLVM.GetTargetMachineTarget
      VB:
      - id: Swigged.LLVM.LLVM.GetTargetMachineTarget*
        name: GetTargetMachineTarget
        nameWithType: LLVM.GetTargetMachineTarget
        qualifiedName: Swigged.LLVM.LLVM.GetTargetMachineTarget
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTargetMachineTarget
  Swigged.LLVM.LLVM.GetTargetMachineTriple*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTargetMachineTriple*
        name: GetTargetMachineTriple
        nameWithType: LLVM.GetTargetMachineTriple
        qualifiedName: Swigged.LLVM.LLVM.GetTargetMachineTriple
      VB:
      - id: Swigged.LLVM.LLVM.GetTargetMachineTriple*
        name: GetTargetMachineTriple
        nameWithType: LLVM.GetTargetMachineTriple
        qualifiedName: Swigged.LLVM.LLVM.GetTargetMachineTriple
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTargetMachineTriple
  Swigged.LLVM.LLVM.GetTargetMachineCPU*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTargetMachineCPU*
        name: GetTargetMachineCPU
        nameWithType: LLVM.GetTargetMachineCPU
        qualifiedName: Swigged.LLVM.LLVM.GetTargetMachineCPU
      VB:
      - id: Swigged.LLVM.LLVM.GetTargetMachineCPU*
        name: GetTargetMachineCPU
        nameWithType: LLVM.GetTargetMachineCPU
        qualifiedName: Swigged.LLVM.LLVM.GetTargetMachineCPU
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTargetMachineCPU
  Swigged.LLVM.LLVM.GetTargetMachineFeatureString*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetTargetMachineFeatureString*
        name: GetTargetMachineFeatureString
        nameWithType: LLVM.GetTargetMachineFeatureString
        qualifiedName: Swigged.LLVM.LLVM.GetTargetMachineFeatureString
      VB:
      - id: Swigged.LLVM.LLVM.GetTargetMachineFeatureString*
        name: GetTargetMachineFeatureString
        nameWithType: LLVM.GetTargetMachineFeatureString
        qualifiedName: Swigged.LLVM.LLVM.GetTargetMachineFeatureString
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetTargetMachineFeatureString
  Swigged.LLVM.LLVM.CreateTargetDataLayout*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.CreateTargetDataLayout*
        name: CreateTargetDataLayout
        nameWithType: LLVM.CreateTargetDataLayout
        qualifiedName: Swigged.LLVM.LLVM.CreateTargetDataLayout
      VB:
      - id: Swigged.LLVM.LLVM.CreateTargetDataLayout*
        name: CreateTargetDataLayout
        nameWithType: LLVM.CreateTargetDataLayout
        qualifiedName: Swigged.LLVM.LLVM.CreateTargetDataLayout
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.CreateTargetDataLayout
  Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity*
        name: SetTargetMachineAsmVerbosity
        nameWithType: LLVM.SetTargetMachineAsmVerbosity
        qualifiedName: Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity
      VB:
      - id: Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity*
        name: SetTargetMachineAsmVerbosity
        nameWithType: LLVM.SetTargetMachineAsmVerbosity
        qualifiedName: Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.SetTargetMachineAsmVerbosity
  Swigged.LLVM.LLVM.TargetMachineEmitToFile*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.TargetMachineEmitToFile*
        name: TargetMachineEmitToFile
        nameWithType: LLVM.TargetMachineEmitToFile
        qualifiedName: Swigged.LLVM.LLVM.TargetMachineEmitToFile
      VB:
      - id: Swigged.LLVM.LLVM.TargetMachineEmitToFile*
        name: TargetMachineEmitToFile
        nameWithType: LLVM.TargetMachineEmitToFile
        qualifiedName: Swigged.LLVM.LLVM.TargetMachineEmitToFile
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.TargetMachineEmitToFile
  Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer*
        name: TargetMachineEmitToMemoryBuffer
        nameWithType: LLVM.TargetMachineEmitToMemoryBuffer
        qualifiedName: Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer
      VB:
      - id: Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer*
        name: TargetMachineEmitToMemoryBuffer
        nameWithType: LLVM.TargetMachineEmitToMemoryBuffer
        qualifiedName: Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.TargetMachineEmitToMemoryBuffer
  Swigged.LLVM.LLVM.GetDefaultTargetTriple*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.GetDefaultTargetTriple*
        name: GetDefaultTargetTriple
        nameWithType: LLVM.GetDefaultTargetTriple
        qualifiedName: Swigged.LLVM.LLVM.GetDefaultTargetTriple
      VB:
      - id: Swigged.LLVM.LLVM.GetDefaultTargetTriple*
        name: GetDefaultTargetTriple
        nameWithType: LLVM.GetDefaultTargetTriple
        qualifiedName: Swigged.LLVM.LLVM.GetDefaultTargetTriple
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.GetDefaultTargetTriple
  Swigged.LLVM.LLVM.AddAnalysisPasses*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddAnalysisPasses*
        name: AddAnalysisPasses
        nameWithType: LLVM.AddAnalysisPasses
        qualifiedName: Swigged.LLVM.LLVM.AddAnalysisPasses
      VB:
      - id: Swigged.LLVM.LLVM.AddAnalysisPasses*
        name: AddAnalysisPasses
        nameWithType: LLVM.AddAnalysisPasses
        qualifiedName: Swigged.LLVM.LLVM.AddAnalysisPasses
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddAnalysisPasses
  Swigged.LLVM.LLVM.AddArgumentPromotionPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddArgumentPromotionPass*
        name: AddArgumentPromotionPass
        nameWithType: LLVM.AddArgumentPromotionPass
        qualifiedName: Swigged.LLVM.LLVM.AddArgumentPromotionPass
      VB:
      - id: Swigged.LLVM.LLVM.AddArgumentPromotionPass*
        name: AddArgumentPromotionPass
        nameWithType: LLVM.AddArgumentPromotionPass
        qualifiedName: Swigged.LLVM.LLVM.AddArgumentPromotionPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddArgumentPromotionPass
  Swigged.LLVM.LLVM.AddConstantMergePass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddConstantMergePass*
        name: AddConstantMergePass
        nameWithType: LLVM.AddConstantMergePass
        qualifiedName: Swigged.LLVM.LLVM.AddConstantMergePass
      VB:
      - id: Swigged.LLVM.LLVM.AddConstantMergePass*
        name: AddConstantMergePass
        nameWithType: LLVM.AddConstantMergePass
        qualifiedName: Swigged.LLVM.LLVM.AddConstantMergePass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddConstantMergePass
  Swigged.LLVM.LLVM.AddDeadArgEliminationPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddDeadArgEliminationPass*
        name: AddDeadArgEliminationPass
        nameWithType: LLVM.AddDeadArgEliminationPass
        qualifiedName: Swigged.LLVM.LLVM.AddDeadArgEliminationPass
      VB:
      - id: Swigged.LLVM.LLVM.AddDeadArgEliminationPass*
        name: AddDeadArgEliminationPass
        nameWithType: LLVM.AddDeadArgEliminationPass
        qualifiedName: Swigged.LLVM.LLVM.AddDeadArgEliminationPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddDeadArgEliminationPass
  Swigged.LLVM.LLVM.AddFunctionAttrsPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddFunctionAttrsPass*
        name: AddFunctionAttrsPass
        nameWithType: LLVM.AddFunctionAttrsPass
        qualifiedName: Swigged.LLVM.LLVM.AddFunctionAttrsPass
      VB:
      - id: Swigged.LLVM.LLVM.AddFunctionAttrsPass*
        name: AddFunctionAttrsPass
        nameWithType: LLVM.AddFunctionAttrsPass
        qualifiedName: Swigged.LLVM.LLVM.AddFunctionAttrsPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddFunctionAttrsPass
  Swigged.LLVM.LLVM.AddFunctionInliningPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddFunctionInliningPass*
        name: AddFunctionInliningPass
        nameWithType: LLVM.AddFunctionInliningPass
        qualifiedName: Swigged.LLVM.LLVM.AddFunctionInliningPass
      VB:
      - id: Swigged.LLVM.LLVM.AddFunctionInliningPass*
        name: AddFunctionInliningPass
        nameWithType: LLVM.AddFunctionInliningPass
        qualifiedName: Swigged.LLVM.LLVM.AddFunctionInliningPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddFunctionInliningPass
  Swigged.LLVM.LLVM.AddAlwaysInlinerPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddAlwaysInlinerPass*
        name: AddAlwaysInlinerPass
        nameWithType: LLVM.AddAlwaysInlinerPass
        qualifiedName: Swigged.LLVM.LLVM.AddAlwaysInlinerPass
      VB:
      - id: Swigged.LLVM.LLVM.AddAlwaysInlinerPass*
        name: AddAlwaysInlinerPass
        nameWithType: LLVM.AddAlwaysInlinerPass
        qualifiedName: Swigged.LLVM.LLVM.AddAlwaysInlinerPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddAlwaysInlinerPass
  Swigged.LLVM.LLVM.AddGlobalDCEPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddGlobalDCEPass*
        name: AddGlobalDCEPass
        nameWithType: LLVM.AddGlobalDCEPass
        qualifiedName: Swigged.LLVM.LLVM.AddGlobalDCEPass
      VB:
      - id: Swigged.LLVM.LLVM.AddGlobalDCEPass*
        name: AddGlobalDCEPass
        nameWithType: LLVM.AddGlobalDCEPass
        qualifiedName: Swigged.LLVM.LLVM.AddGlobalDCEPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddGlobalDCEPass
  Swigged.LLVM.LLVM.AddGlobalOptimizerPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddGlobalOptimizerPass*
        name: AddGlobalOptimizerPass
        nameWithType: LLVM.AddGlobalOptimizerPass
        qualifiedName: Swigged.LLVM.LLVM.AddGlobalOptimizerPass
      VB:
      - id: Swigged.LLVM.LLVM.AddGlobalOptimizerPass*
        name: AddGlobalOptimizerPass
        nameWithType: LLVM.AddGlobalOptimizerPass
        qualifiedName: Swigged.LLVM.LLVM.AddGlobalOptimizerPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddGlobalOptimizerPass
  Swigged.LLVM.LLVM.AddIPConstantPropagationPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddIPConstantPropagationPass*
        name: AddIPConstantPropagationPass
        nameWithType: LLVM.AddIPConstantPropagationPass
        qualifiedName: Swigged.LLVM.LLVM.AddIPConstantPropagationPass
      VB:
      - id: Swigged.LLVM.LLVM.AddIPConstantPropagationPass*
        name: AddIPConstantPropagationPass
        nameWithType: LLVM.AddIPConstantPropagationPass
        qualifiedName: Swigged.LLVM.LLVM.AddIPConstantPropagationPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddIPConstantPropagationPass
  Swigged.LLVM.LLVM.AddPruneEHPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddPruneEHPass*
        name: AddPruneEHPass
        nameWithType: LLVM.AddPruneEHPass
        qualifiedName: Swigged.LLVM.LLVM.AddPruneEHPass
      VB:
      - id: Swigged.LLVM.LLVM.AddPruneEHPass*
        name: AddPruneEHPass
        nameWithType: LLVM.AddPruneEHPass
        qualifiedName: Swigged.LLVM.LLVM.AddPruneEHPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddPruneEHPass
  Swigged.LLVM.LLVM.AddIPSCCPPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddIPSCCPPass*
        name: AddIPSCCPPass
        nameWithType: LLVM.AddIPSCCPPass
        qualifiedName: Swigged.LLVM.LLVM.AddIPSCCPPass
      VB:
      - id: Swigged.LLVM.LLVM.AddIPSCCPPass*
        name: AddIPSCCPPass
        nameWithType: LLVM.AddIPSCCPPass
        qualifiedName: Swigged.LLVM.LLVM.AddIPSCCPPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddIPSCCPPass
  Swigged.LLVM.LLVM.AddInternalizePass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddInternalizePass*
        name: AddInternalizePass
        nameWithType: LLVM.AddInternalizePass
        qualifiedName: Swigged.LLVM.LLVM.AddInternalizePass
      VB:
      - id: Swigged.LLVM.LLVM.AddInternalizePass*
        name: AddInternalizePass
        nameWithType: LLVM.AddInternalizePass
        qualifiedName: Swigged.LLVM.LLVM.AddInternalizePass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddInternalizePass
  Swigged.LLVM.LLVM.AddStripDeadPrototypesPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddStripDeadPrototypesPass*
        name: AddStripDeadPrototypesPass
        nameWithType: LLVM.AddStripDeadPrototypesPass
        qualifiedName: Swigged.LLVM.LLVM.AddStripDeadPrototypesPass
      VB:
      - id: Swigged.LLVM.LLVM.AddStripDeadPrototypesPass*
        name: AddStripDeadPrototypesPass
        nameWithType: LLVM.AddStripDeadPrototypesPass
        qualifiedName: Swigged.LLVM.LLVM.AddStripDeadPrototypesPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddStripDeadPrototypesPass
  Swigged.LLVM.LLVM.AddStripSymbolsPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddStripSymbolsPass*
        name: AddStripSymbolsPass
        nameWithType: LLVM.AddStripSymbolsPass
        qualifiedName: Swigged.LLVM.LLVM.AddStripSymbolsPass
      VB:
      - id: Swigged.LLVM.LLVM.AddStripSymbolsPass*
        name: AddStripSymbolsPass
        nameWithType: LLVM.AddStripSymbolsPass
        qualifiedName: Swigged.LLVM.LLVM.AddStripSymbolsPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddStripSymbolsPass
  Swigged.LLVM.LLVM.PassManagerBuilderCreate*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderCreate*
        name: PassManagerBuilderCreate
        nameWithType: LLVM.PassManagerBuilderCreate
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderCreate
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderCreate*
        name: PassManagerBuilderCreate
        nameWithType: LLVM.PassManagerBuilderCreate
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderCreate
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderCreate
  Swigged.LLVM.LLVM.PassManagerBuilderDispose*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderDispose*
        name: PassManagerBuilderDispose
        nameWithType: LLVM.PassManagerBuilderDispose
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderDispose
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderDispose*
        name: PassManagerBuilderDispose
        nameWithType: LLVM.PassManagerBuilderDispose
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderDispose
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderDispose
  Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel*
        name: PassManagerBuilderSetOptLevel
        nameWithType: LLVM.PassManagerBuilderSetOptLevel
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel*
        name: PassManagerBuilderSetOptLevel
        nameWithType: LLVM.PassManagerBuilderSetOptLevel
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderSetOptLevel
  Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel*
        name: PassManagerBuilderSetSizeLevel
        nameWithType: LLVM.PassManagerBuilderSetSizeLevel
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel*
        name: PassManagerBuilderSetSizeLevel
        nameWithType: LLVM.PassManagerBuilderSetSizeLevel
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderSetSizeLevel
  Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime*
        name: PassManagerBuilderSetDisableUnitAtATime
        nameWithType: LLVM.PassManagerBuilderSetDisableUnitAtATime
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime*
        name: PassManagerBuilderSetDisableUnitAtATime
        nameWithType: LLVM.PassManagerBuilderSetDisableUnitAtATime
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnitAtATime
  Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops*
        name: PassManagerBuilderSetDisableUnrollLoops
        nameWithType: LLVM.PassManagerBuilderSetDisableUnrollLoops
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops*
        name: PassManagerBuilderSetDisableUnrollLoops
        nameWithType: LLVM.PassManagerBuilderSetDisableUnrollLoops
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderSetDisableUnrollLoops
  Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls*
        name: PassManagerBuilderSetDisableSimplifyLibCalls
        nameWithType: LLVM.PassManagerBuilderSetDisableSimplifyLibCalls
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls*
        name: PassManagerBuilderSetDisableSimplifyLibCalls
        nameWithType: LLVM.PassManagerBuilderSetDisableSimplifyLibCalls
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderSetDisableSimplifyLibCalls
  Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold*
        name: PassManagerBuilderUseInlinerWithThreshold
        nameWithType: LLVM.PassManagerBuilderUseInlinerWithThreshold
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold*
        name: PassManagerBuilderUseInlinerWithThreshold
        nameWithType: LLVM.PassManagerBuilderUseInlinerWithThreshold
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderUseInlinerWithThreshold
  Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager*
        name: PassManagerBuilderPopulateFunctionPassManager
        nameWithType: LLVM.PassManagerBuilderPopulateFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager*
        name: PassManagerBuilderPopulateFunctionPassManager
        nameWithType: LLVM.PassManagerBuilderPopulateFunctionPassManager
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderPopulateFunctionPassManager
  Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager*
        name: PassManagerBuilderPopulateModulePassManager
        nameWithType: LLVM.PassManagerBuilderPopulateModulePassManager
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager*
        name: PassManagerBuilderPopulateModulePassManager
        nameWithType: LLVM.PassManagerBuilderPopulateModulePassManager
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderPopulateModulePassManager
  Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager*
        name: PassManagerBuilderPopulateLTOPassManager
        nameWithType: LLVM.PassManagerBuilderPopulateLTOPassManager
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager
      VB:
      - id: Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager*
        name: PassManagerBuilderPopulateLTOPassManager
        nameWithType: LLVM.PassManagerBuilderPopulateLTOPassManager
        qualifiedName: Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.PassManagerBuilderPopulateLTOPassManager
  Swigged.LLVM.LLVM.AddAggressiveDCEPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddAggressiveDCEPass*
        name: AddAggressiveDCEPass
        nameWithType: LLVM.AddAggressiveDCEPass
        qualifiedName: Swigged.LLVM.LLVM.AddAggressiveDCEPass
      VB:
      - id: Swigged.LLVM.LLVM.AddAggressiveDCEPass*
        name: AddAggressiveDCEPass
        nameWithType: LLVM.AddAggressiveDCEPass
        qualifiedName: Swigged.LLVM.LLVM.AddAggressiveDCEPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddAggressiveDCEPass
  Swigged.LLVM.LLVM.AddBitTrackingDCEPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddBitTrackingDCEPass*
        name: AddBitTrackingDCEPass
        nameWithType: LLVM.AddBitTrackingDCEPass
        qualifiedName: Swigged.LLVM.LLVM.AddBitTrackingDCEPass
      VB:
      - id: Swigged.LLVM.LLVM.AddBitTrackingDCEPass*
        name: AddBitTrackingDCEPass
        nameWithType: LLVM.AddBitTrackingDCEPass
        qualifiedName: Swigged.LLVM.LLVM.AddBitTrackingDCEPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddBitTrackingDCEPass
  Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass*
        name: AddAlignmentFromAssumptionsPass
        nameWithType: LLVM.AddAlignmentFromAssumptionsPass
        qualifiedName: Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass
      VB:
      - id: Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass*
        name: AddAlignmentFromAssumptionsPass
        nameWithType: LLVM.AddAlignmentFromAssumptionsPass
        qualifiedName: Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddAlignmentFromAssumptionsPass
  Swigged.LLVM.LLVM.AddCFGSimplificationPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddCFGSimplificationPass*
        name: AddCFGSimplificationPass
        nameWithType: LLVM.AddCFGSimplificationPass
        qualifiedName: Swigged.LLVM.LLVM.AddCFGSimplificationPass
      VB:
      - id: Swigged.LLVM.LLVM.AddCFGSimplificationPass*
        name: AddCFGSimplificationPass
        nameWithType: LLVM.AddCFGSimplificationPass
        qualifiedName: Swigged.LLVM.LLVM.AddCFGSimplificationPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddCFGSimplificationPass
  Swigged.LLVM.LLVM.AddDeadStoreEliminationPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddDeadStoreEliminationPass*
        name: AddDeadStoreEliminationPass
        nameWithType: LLVM.AddDeadStoreEliminationPass
        qualifiedName: Swigged.LLVM.LLVM.AddDeadStoreEliminationPass
      VB:
      - id: Swigged.LLVM.LLVM.AddDeadStoreEliminationPass*
        name: AddDeadStoreEliminationPass
        nameWithType: LLVM.AddDeadStoreEliminationPass
        qualifiedName: Swigged.LLVM.LLVM.AddDeadStoreEliminationPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddDeadStoreEliminationPass
  Swigged.LLVM.LLVM.AddScalarizerPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddScalarizerPass*
        name: AddScalarizerPass
        nameWithType: LLVM.AddScalarizerPass
        qualifiedName: Swigged.LLVM.LLVM.AddScalarizerPass
      VB:
      - id: Swigged.LLVM.LLVM.AddScalarizerPass*
        name: AddScalarizerPass
        nameWithType: LLVM.AddScalarizerPass
        qualifiedName: Swigged.LLVM.LLVM.AddScalarizerPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddScalarizerPass
  Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass*
        name: AddMergedLoadStoreMotionPass
        nameWithType: LLVM.AddMergedLoadStoreMotionPass
        qualifiedName: Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass
      VB:
      - id: Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass*
        name: AddMergedLoadStoreMotionPass
        nameWithType: LLVM.AddMergedLoadStoreMotionPass
        qualifiedName: Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddMergedLoadStoreMotionPass
  Swigged.LLVM.LLVM.AddGVNPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddGVNPass*
        name: AddGVNPass
        nameWithType: LLVM.AddGVNPass
        qualifiedName: Swigged.LLVM.LLVM.AddGVNPass
      VB:
      - id: Swigged.LLVM.LLVM.AddGVNPass*
        name: AddGVNPass
        nameWithType: LLVM.AddGVNPass
        qualifiedName: Swigged.LLVM.LLVM.AddGVNPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddGVNPass
  Swigged.LLVM.LLVM.AddNewGVNPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddNewGVNPass*
        name: AddNewGVNPass
        nameWithType: LLVM.AddNewGVNPass
        qualifiedName: Swigged.LLVM.LLVM.AddNewGVNPass
      VB:
      - id: Swigged.LLVM.LLVM.AddNewGVNPass*
        name: AddNewGVNPass
        nameWithType: LLVM.AddNewGVNPass
        qualifiedName: Swigged.LLVM.LLVM.AddNewGVNPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddNewGVNPass
  Swigged.LLVM.LLVM.AddIndVarSimplifyPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddIndVarSimplifyPass*
        name: AddIndVarSimplifyPass
        nameWithType: LLVM.AddIndVarSimplifyPass
        qualifiedName: Swigged.LLVM.LLVM.AddIndVarSimplifyPass
      VB:
      - id: Swigged.LLVM.LLVM.AddIndVarSimplifyPass*
        name: AddIndVarSimplifyPass
        nameWithType: LLVM.AddIndVarSimplifyPass
        qualifiedName: Swigged.LLVM.LLVM.AddIndVarSimplifyPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddIndVarSimplifyPass
  Swigged.LLVM.LLVM.AddInstructionCombiningPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddInstructionCombiningPass*
        name: AddInstructionCombiningPass
        nameWithType: LLVM.AddInstructionCombiningPass
        qualifiedName: Swigged.LLVM.LLVM.AddInstructionCombiningPass
      VB:
      - id: Swigged.LLVM.LLVM.AddInstructionCombiningPass*
        name: AddInstructionCombiningPass
        nameWithType: LLVM.AddInstructionCombiningPass
        qualifiedName: Swigged.LLVM.LLVM.AddInstructionCombiningPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddInstructionCombiningPass
  Swigged.LLVM.LLVM.AddJumpThreadingPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddJumpThreadingPass*
        name: AddJumpThreadingPass
        nameWithType: LLVM.AddJumpThreadingPass
        qualifiedName: Swigged.LLVM.LLVM.AddJumpThreadingPass
      VB:
      - id: Swigged.LLVM.LLVM.AddJumpThreadingPass*
        name: AddJumpThreadingPass
        nameWithType: LLVM.AddJumpThreadingPass
        qualifiedName: Swigged.LLVM.LLVM.AddJumpThreadingPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddJumpThreadingPass
  Swigged.LLVM.LLVM.AddLICMPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLICMPass*
        name: AddLICMPass
        nameWithType: LLVM.AddLICMPass
        qualifiedName: Swigged.LLVM.LLVM.AddLICMPass
      VB:
      - id: Swigged.LLVM.LLVM.AddLICMPass*
        name: AddLICMPass
        nameWithType: LLVM.AddLICMPass
        qualifiedName: Swigged.LLVM.LLVM.AddLICMPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLICMPass
  Swigged.LLVM.LLVM.AddLoopDeletionPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLoopDeletionPass*
        name: AddLoopDeletionPass
        nameWithType: LLVM.AddLoopDeletionPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopDeletionPass
      VB:
      - id: Swigged.LLVM.LLVM.AddLoopDeletionPass*
        name: AddLoopDeletionPass
        nameWithType: LLVM.AddLoopDeletionPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopDeletionPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLoopDeletionPass
  Swigged.LLVM.LLVM.AddLoopIdiomPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLoopIdiomPass*
        name: AddLoopIdiomPass
        nameWithType: LLVM.AddLoopIdiomPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopIdiomPass
      VB:
      - id: Swigged.LLVM.LLVM.AddLoopIdiomPass*
        name: AddLoopIdiomPass
        nameWithType: LLVM.AddLoopIdiomPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopIdiomPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLoopIdiomPass
  Swigged.LLVM.LLVM.AddLoopRotatePass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLoopRotatePass*
        name: AddLoopRotatePass
        nameWithType: LLVM.AddLoopRotatePass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopRotatePass
      VB:
      - id: Swigged.LLVM.LLVM.AddLoopRotatePass*
        name: AddLoopRotatePass
        nameWithType: LLVM.AddLoopRotatePass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopRotatePass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLoopRotatePass
  Swigged.LLVM.LLVM.AddLoopRerollPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLoopRerollPass*
        name: AddLoopRerollPass
        nameWithType: LLVM.AddLoopRerollPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopRerollPass
      VB:
      - id: Swigged.LLVM.LLVM.AddLoopRerollPass*
        name: AddLoopRerollPass
        nameWithType: LLVM.AddLoopRerollPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopRerollPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLoopRerollPass
  Swigged.LLVM.LLVM.AddLoopUnrollPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLoopUnrollPass*
        name: AddLoopUnrollPass
        nameWithType: LLVM.AddLoopUnrollPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopUnrollPass
      VB:
      - id: Swigged.LLVM.LLVM.AddLoopUnrollPass*
        name: AddLoopUnrollPass
        nameWithType: LLVM.AddLoopUnrollPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopUnrollPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLoopUnrollPass
  Swigged.LLVM.LLVM.AddLoopUnswitchPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLoopUnswitchPass*
        name: AddLoopUnswitchPass
        nameWithType: LLVM.AddLoopUnswitchPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopUnswitchPass
      VB:
      - id: Swigged.LLVM.LLVM.AddLoopUnswitchPass*
        name: AddLoopUnswitchPass
        nameWithType: LLVM.AddLoopUnswitchPass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopUnswitchPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLoopUnswitchPass
  Swigged.LLVM.LLVM.AddMemCpyOptPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddMemCpyOptPass*
        name: AddMemCpyOptPass
        nameWithType: LLVM.AddMemCpyOptPass
        qualifiedName: Swigged.LLVM.LLVM.AddMemCpyOptPass
      VB:
      - id: Swigged.LLVM.LLVM.AddMemCpyOptPass*
        name: AddMemCpyOptPass
        nameWithType: LLVM.AddMemCpyOptPass
        qualifiedName: Swigged.LLVM.LLVM.AddMemCpyOptPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddMemCpyOptPass
  Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass*
        name: AddPartiallyInlineLibCallsPass
        nameWithType: LLVM.AddPartiallyInlineLibCallsPass
        qualifiedName: Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass
      VB:
      - id: Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass*
        name: AddPartiallyInlineLibCallsPass
        nameWithType: LLVM.AddPartiallyInlineLibCallsPass
        qualifiedName: Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddPartiallyInlineLibCallsPass
  Swigged.LLVM.LLVM.AddLowerSwitchPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLowerSwitchPass*
        name: AddLowerSwitchPass
        nameWithType: LLVM.AddLowerSwitchPass
        qualifiedName: Swigged.LLVM.LLVM.AddLowerSwitchPass
      VB:
      - id: Swigged.LLVM.LLVM.AddLowerSwitchPass*
        name: AddLowerSwitchPass
        nameWithType: LLVM.AddLowerSwitchPass
        qualifiedName: Swigged.LLVM.LLVM.AddLowerSwitchPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLowerSwitchPass
  Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass*
        name: AddPromoteMemoryToRegisterPass
        nameWithType: LLVM.AddPromoteMemoryToRegisterPass
        qualifiedName: Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass
      VB:
      - id: Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass*
        name: AddPromoteMemoryToRegisterPass
        nameWithType: LLVM.AddPromoteMemoryToRegisterPass
        qualifiedName: Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddPromoteMemoryToRegisterPass
  Swigged.LLVM.LLVM.AddReassociatePass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddReassociatePass*
        name: AddReassociatePass
        nameWithType: LLVM.AddReassociatePass
        qualifiedName: Swigged.LLVM.LLVM.AddReassociatePass
      VB:
      - id: Swigged.LLVM.LLVM.AddReassociatePass*
        name: AddReassociatePass
        nameWithType: LLVM.AddReassociatePass
        qualifiedName: Swigged.LLVM.LLVM.AddReassociatePass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddReassociatePass
  Swigged.LLVM.LLVM.AddSCCPPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddSCCPPass*
        name: AddSCCPPass
        nameWithType: LLVM.AddSCCPPass
        qualifiedName: Swigged.LLVM.LLVM.AddSCCPPass
      VB:
      - id: Swigged.LLVM.LLVM.AddSCCPPass*
        name: AddSCCPPass
        nameWithType: LLVM.AddSCCPPass
        qualifiedName: Swigged.LLVM.LLVM.AddSCCPPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddSCCPPass
  Swigged.LLVM.LLVM.AddScalarReplAggregatesPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPass*
        name: AddScalarReplAggregatesPass
        nameWithType: LLVM.AddScalarReplAggregatesPass
        qualifiedName: Swigged.LLVM.LLVM.AddScalarReplAggregatesPass
      VB:
      - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPass*
        name: AddScalarReplAggregatesPass
        nameWithType: LLVM.AddScalarReplAggregatesPass
        qualifiedName: Swigged.LLVM.LLVM.AddScalarReplAggregatesPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddScalarReplAggregatesPass
  Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA*
        name: AddScalarReplAggregatesPassSSA
        nameWithType: LLVM.AddScalarReplAggregatesPassSSA
        qualifiedName: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA
      VB:
      - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA*
        name: AddScalarReplAggregatesPassSSA
        nameWithType: LLVM.AddScalarReplAggregatesPassSSA
        qualifiedName: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddScalarReplAggregatesPassSSA
  Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold*
        name: AddScalarReplAggregatesPassWithThreshold
        nameWithType: LLVM.AddScalarReplAggregatesPassWithThreshold
        qualifiedName: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold
      VB:
      - id: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold*
        name: AddScalarReplAggregatesPassWithThreshold
        nameWithType: LLVM.AddScalarReplAggregatesPassWithThreshold
        qualifiedName: Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddScalarReplAggregatesPassWithThreshold
  Swigged.LLVM.LLVM.AddSimplifyLibCallsPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddSimplifyLibCallsPass*
        name: AddSimplifyLibCallsPass
        nameWithType: LLVM.AddSimplifyLibCallsPass
        qualifiedName: Swigged.LLVM.LLVM.AddSimplifyLibCallsPass
      VB:
      - id: Swigged.LLVM.LLVM.AddSimplifyLibCallsPass*
        name: AddSimplifyLibCallsPass
        nameWithType: LLVM.AddSimplifyLibCallsPass
        qualifiedName: Swigged.LLVM.LLVM.AddSimplifyLibCallsPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddSimplifyLibCallsPass
  Swigged.LLVM.LLVM.AddTailCallEliminationPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddTailCallEliminationPass*
        name: AddTailCallEliminationPass
        nameWithType: LLVM.AddTailCallEliminationPass
        qualifiedName: Swigged.LLVM.LLVM.AddTailCallEliminationPass
      VB:
      - id: Swigged.LLVM.LLVM.AddTailCallEliminationPass*
        name: AddTailCallEliminationPass
        nameWithType: LLVM.AddTailCallEliminationPass
        qualifiedName: Swigged.LLVM.LLVM.AddTailCallEliminationPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddTailCallEliminationPass
  Swigged.LLVM.LLVM.AddConstantPropagationPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddConstantPropagationPass*
        name: AddConstantPropagationPass
        nameWithType: LLVM.AddConstantPropagationPass
        qualifiedName: Swigged.LLVM.LLVM.AddConstantPropagationPass
      VB:
      - id: Swigged.LLVM.LLVM.AddConstantPropagationPass*
        name: AddConstantPropagationPass
        nameWithType: LLVM.AddConstantPropagationPass
        qualifiedName: Swigged.LLVM.LLVM.AddConstantPropagationPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddConstantPropagationPass
  Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass*
        name: AddDemoteMemoryToRegisterPass
        nameWithType: LLVM.AddDemoteMemoryToRegisterPass
        qualifiedName: Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass
      VB:
      - id: Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass*
        name: AddDemoteMemoryToRegisterPass
        nameWithType: LLVM.AddDemoteMemoryToRegisterPass
        qualifiedName: Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddDemoteMemoryToRegisterPass
  Swigged.LLVM.LLVM.AddVerifierPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddVerifierPass*
        name: AddVerifierPass
        nameWithType: LLVM.AddVerifierPass
        qualifiedName: Swigged.LLVM.LLVM.AddVerifierPass
      VB:
      - id: Swigged.LLVM.LLVM.AddVerifierPass*
        name: AddVerifierPass
        nameWithType: LLVM.AddVerifierPass
        qualifiedName: Swigged.LLVM.LLVM.AddVerifierPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddVerifierPass
  Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass*
        name: AddCorrelatedValuePropagationPass
        nameWithType: LLVM.AddCorrelatedValuePropagationPass
        qualifiedName: Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass
      VB:
      - id: Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass*
        name: AddCorrelatedValuePropagationPass
        nameWithType: LLVM.AddCorrelatedValuePropagationPass
        qualifiedName: Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddCorrelatedValuePropagationPass
  Swigged.LLVM.LLVM.AddEarlyCSEPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddEarlyCSEPass*
        name: AddEarlyCSEPass
        nameWithType: LLVM.AddEarlyCSEPass
        qualifiedName: Swigged.LLVM.LLVM.AddEarlyCSEPass
      VB:
      - id: Swigged.LLVM.LLVM.AddEarlyCSEPass*
        name: AddEarlyCSEPass
        nameWithType: LLVM.AddEarlyCSEPass
        qualifiedName: Swigged.LLVM.LLVM.AddEarlyCSEPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddEarlyCSEPass
  Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass*
        name: AddEarlyCSEMemSSAPass
        nameWithType: LLVM.AddEarlyCSEMemSSAPass
        qualifiedName: Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass
      VB:
      - id: Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass*
        name: AddEarlyCSEMemSSAPass
        nameWithType: LLVM.AddEarlyCSEMemSSAPass
        qualifiedName: Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddEarlyCSEMemSSAPass
  Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass*
        name: AddLowerExpectIntrinsicPass
        nameWithType: LLVM.AddLowerExpectIntrinsicPass
        qualifiedName: Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass
      VB:
      - id: Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass*
        name: AddLowerExpectIntrinsicPass
        nameWithType: LLVM.AddLowerExpectIntrinsicPass
        qualifiedName: Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLowerExpectIntrinsicPass
  Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass*
        name: AddTypeBasedAliasAnalysisPass
        nameWithType: LLVM.AddTypeBasedAliasAnalysisPass
        qualifiedName: Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass
      VB:
      - id: Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass*
        name: AddTypeBasedAliasAnalysisPass
        nameWithType: LLVM.AddTypeBasedAliasAnalysisPass
        qualifiedName: Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddTypeBasedAliasAnalysisPass
  Swigged.LLVM.LLVM.AddScopedNoAliasAAPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddScopedNoAliasAAPass*
        name: AddScopedNoAliasAAPass
        nameWithType: LLVM.AddScopedNoAliasAAPass
        qualifiedName: Swigged.LLVM.LLVM.AddScopedNoAliasAAPass
      VB:
      - id: Swigged.LLVM.LLVM.AddScopedNoAliasAAPass*
        name: AddScopedNoAliasAAPass
        nameWithType: LLVM.AddScopedNoAliasAAPass
        qualifiedName: Swigged.LLVM.LLVM.AddScopedNoAliasAAPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddScopedNoAliasAAPass
  Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass*
        name: AddBasicAliasAnalysisPass
        nameWithType: LLVM.AddBasicAliasAnalysisPass
        qualifiedName: Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass
      VB:
      - id: Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass*
        name: AddBasicAliasAnalysisPass
        nameWithType: LLVM.AddBasicAliasAnalysisPass
        qualifiedName: Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddBasicAliasAnalysisPass
  Swigged.LLVM.LLVM.AddBBVectorizePass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddBBVectorizePass*
        name: AddBBVectorizePass
        nameWithType: LLVM.AddBBVectorizePass
        qualifiedName: Swigged.LLVM.LLVM.AddBBVectorizePass
      VB:
      - id: Swigged.LLVM.LLVM.AddBBVectorizePass*
        name: AddBBVectorizePass
        nameWithType: LLVM.AddBBVectorizePass
        qualifiedName: Swigged.LLVM.LLVM.AddBBVectorizePass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddBBVectorizePass
  Swigged.LLVM.LLVM.AddLoopVectorizePass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddLoopVectorizePass*
        name: AddLoopVectorizePass
        nameWithType: LLVM.AddLoopVectorizePass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopVectorizePass
      VB:
      - id: Swigged.LLVM.LLVM.AddLoopVectorizePass*
        name: AddLoopVectorizePass
        nameWithType: LLVM.AddLoopVectorizePass
        qualifiedName: Swigged.LLVM.LLVM.AddLoopVectorizePass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddLoopVectorizePass
  Swigged.LLVM.LLVM.AddSLPVectorizePass*:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM.AddSLPVectorizePass*
        name: AddSLPVectorizePass
        nameWithType: LLVM.AddSLPVectorizePass
        qualifiedName: Swigged.LLVM.LLVM.AddSLPVectorizePass
      VB:
      - id: Swigged.LLVM.LLVM.AddSLPVectorizePass*
        name: AddSLPVectorizePass
        nameWithType: LLVM.AddSLPVectorizePass
        qualifiedName: Swigged.LLVM.LLVM.AddSLPVectorizePass
    isDefinition: true
    commentId: Overload:Swigged.LLVM.LLVM.AddSLPVectorizePass
  Swigged.LLVM.LLVM:
    name:
      CSharp:
      - id: Swigged.LLVM.LLVM
        name: LLVM
        nameWithType: LLVM
        qualifiedName: Swigged.LLVM.LLVM
      VB:
      - id: Swigged.LLVM.LLVM
        name: LLVM
        nameWithType: LLVM
        qualifiedName: Swigged.LLVM.LLVM
    isDefinition: true
    commentId: T:Swigged.LLVM.LLVM
